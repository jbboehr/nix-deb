'\" t
.\"     Title: nix.conf
.\"    Author: Eelco Dolstra
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: November 2014
.\"    Manual: Command Reference
.\"    Source: Nix 1.11.15
.\"  Language: English
.\"
.TH "NIX\&.CONF" "5" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
nix.conf \- Nix configuration file
.SH "DESCRIPTION"
.PP
A number of persistent settings of Nix are stored in the file
\fIsysconfdir\fR/nix/nix\&.conf\&. This file is a list of
\fIname\fR = \fIvalue\fR
pairs, one per line\&. Comments start with a
#
character\&. Here is an example configuration file:
.sp
.if n \{\
.RS 4
.\}
.nf
gc\-keep\-outputs = true       # Nice for developers
gc\-keep\-derivations = true   # Idem
env\-keep\-derivations = false
.fi
.if n \{\
.RE
.\}
.PP
You can override settings using the
\fB\-\-option\fR
flag, e\&.g\&.
\-\-option gc\-keep\-outputs false\&.
.PP
The following settings are currently available:
.PP
gc\-keep\-outputs
.RS 4
If
true, the garbage collector will keep the outputs of non\-garbage derivations\&. If
false
(default), outputs will be deleted unless they are GC roots themselves (or reachable from other roots)\&.
.sp
In general, outputs must be registered as roots separately\&. However, even if the output of a derivation is registered as a root, the collector will still delete store paths that are used only at build time (e\&.g\&., the C compiler, or source tarballs downloaded from the network)\&. To prevent it from doing so, set this option to
true\&.
.RE
.PP
gc\-keep\-derivations
.RS 4
If
true
(default), the garbage collector will keep the derivations from which non\-garbage store paths were built\&. If
false, they will be deleted unless explicitly registered as a root (or reachable from other roots)\&.
.sp
Keeping derivation around is useful for querying and traceability (e\&.g\&., it allows you to ask with what dependencies or options a store path was built), so by default this option is on\&. Turn it off to save a bit of disk space (or a lot if
gc\-keep\-outputs
is also turned on)\&.
.RE
.PP
env\-keep\-derivations
.RS 4
If
false
(default), derivations are not stored in Nix user environments\&. That is, the derivation any build\-time\-only dependencies may be garbage\-collected\&.
.sp
If
true, when you add a Nix derivation to a user environment, the path of the derivation is stored in the user environment\&. Thus, the derivation will not be garbage\-collected until the user environment generation is deleted (\fBnix\-env \-\-delete\-generations\fR)\&. To prevent build\-time\-only dependencies from being collected, you should also turn on
gc\-keep\-outputs\&.
.sp
The difference between this option and
gc\-keep\-derivations
is that this one is \(lqsticky\(rq: it applies to any user environment created while this option was enabled, while
gc\-keep\-derivations
only applies at the moment the garbage collector is run\&.
.RE
.PP
build\-max\-jobs
.RS 4
This option defines the maximum number of jobs that Nix will try to build in parallel\&. The default is
1\&. You should generally set it to the number of CPUs in your system (e\&.g\&.,
2
on an Athlon 64 X2)\&. It can be overridden using the
\fB\-\-max\-jobs\fR
(\fB\-j\fR) command line switch\&.
.RE
.PP
build\-cores
.RS 4
Sets the value of the
\fBNIX_BUILD_CORES\fR
environment variable in the invocation of builders\&. Builders can use this variable at their discretion to control the maximum amount of parallelism\&. For instance, in Nixpkgs, if the derivation attribute
\fIenableParallelBuilding\fR
is set to
true, the builder passes the
\fB\-j\fR\fB\fIN\fR\fR
flag to GNU Make\&. It can be overridden using the
\fB\-\-cores\fR
command line switch and defaults to
1\&. The value
0
means that the builder should use all available CPU cores in the system\&.
.RE
.PP
build\-max\-silent\-time
.RS 4
This option defines the maximum number of seconds that a builder can go without producing any data on standard output or standard error\&. This is useful (for instance in an automated build system) to catch builds that are stuck in an infinite loop, or to catch remote builds that are hanging due to network problems\&. It can be overridden using the
\fB\-\-max\-silent\-time\fR
command line switch\&.
.sp
The value
0
means that there is no timeout\&. This is also the default\&.
.RE
.PP
build\-timeout
.RS 4
This option defines the maximum number of seconds that a builder can run\&. This is useful (for instance in an automated build system) to catch builds that are stuck in an infinite loop but keep writing to their standard output or standard error\&. It can be overridden using the
\fB\-\-timeout\fR
command line switch\&.
.sp
The value
0
means that there is no timeout\&. This is also the default\&.
.RE
.PP
build\-max\-log\-size
.RS 4
This option defines the maximum number of bytes that a builder can write to its stdout/stderr\&. If the builder exceeds this limit, it\(cqs killed\&. A value of
0
(the default) means that there is no limit\&.
.RE
.PP
build\-users\-group
.RS 4
This options specifies the Unix group containing the Nix build user accounts\&. In multi\-user Nix installations, builds should not be performed by the Nix account since that would allow users to arbitrarily modify the Nix store and database by supplying specially crafted builders; and they cannot be performed by the calling user since that would allow him/her to influence the build result\&.
.sp
Therefore, if this option is non\-empty and specifies a valid group, builds will be performed under the user accounts that are a member of the group specified here (as listed in
/etc/group)\&. Those user accounts should not be used for any other purpose!
.sp
Nix will never run two builds under the same user account at the same time\&. This is to prevent an obvious security hole: a malicious user writing a Nix expression that modifies the build result of a legitimate Nix expression being built by another user\&. Therefore it is good to have as many Nix build user accounts as you can spare\&. (Remember: uids are cheap\&.)
.sp
The build users should have permission to create files in the Nix store, but not delete them\&. Therefore,
/nix/store
should be owned by the Nix account, its group should be the group specified here, and its mode should be
1775\&.
.sp
If the build users group is empty, builds will be performed under the uid of the Nix process (that is, the uid of the caller if
\fBNIX_REMOTE\fR
is empty, the uid under which the Nix daemon runs if
\fBNIX_REMOTE\fR
is
daemon)\&. Obviously, this should not be used in multi\-user settings with untrusted users\&.
.RE
.PP
build\-use\-sandbox
.RS 4
If set to
true, builds will be performed in a
\fIsandboxed environment\fR, i\&.e\&., they\(cqre isolated from the normal file system hierarchy and will only see their dependencies in the Nix store, the temporary build directory, private versions of
/proc,
/dev,
/dev/shm
and
/dev/pts
(on Linux), and the paths configured with the
build\-sandbox\-paths option\&. This is useful to prevent undeclared dependencies on files in directories such as
/usr/bin\&. In addition, on Linux, builds run in private PID, mount, network, IPC and UTS namespaces to isolate them from other processes in the system (except that fixed\-output derivations do not run in private network namespace to ensure they can access the network)\&.
.sp
Currently, sandboxing only work on Linux and Mac OS X\&. The use of a sandbox requires that Nix is run as root (so you should use the
\(lqbuild users\(rq feature
to perform the actual builds under different users than root)\&.
.sp
If this option is set to
relaxed, then fixed\-output derivations and derivations that have the
\fI__noChroot\fR
attribute set to
true
do not run in sandboxes\&.
.sp
The default is
false\&.
.RE
.PP
build\-sandbox\-paths
.RS 4
A list of paths bind\-mounted into Nix sandbox environments\&. You can use the syntax
\fItarget\fR=\fIsource\fR
to mount a path in a different location in the sandbox; for instance,
/bin=/nix\-bin
will mount the path
/nix\-bin
as
/bin
inside the sandbox\&. If
\fIsource\fR
is followed by
?, then it is not an error if
\fIsource\fR
does not exist; for example,
/dev/nvidiactl?
specifies that
/dev/nvidiactl
will only be mounted in the sandbox if it exists in the host filesystem\&.
.sp
Depending on how Nix was built, the default value for this option may be empty or provide
/bin/sh
as a bind\-mount of
\fBbash\fR\&.
.RE
.PP
build\-extra\-sandbox\-paths
.RS 4
A list of additional paths appended to
\fBbuild\-sandbox\-paths\fR\&. Useful if you want to extend its default value\&.
.RE
.PP
build\-use\-substitutes
.RS 4
If set to
true
(default), Nix will use binary substitutes if available\&. This option can be disabled to force building from source\&.
.RE
.PP
build\-fallback
.RS 4
If set to
true, Nix will fall back to building from source if a binary substitute fails\&. This is equivalent to the
\fB\-\-fallback\fR
flag\&. The default is
false\&.
.RE
.PP
build\-cache\-failure
.RS 4
If set to
true, Nix will \(lqcache\(rq build failures, meaning that it will remember (in its database) that a derivation previously failed\&. If you then try to build the derivation again, Nix will immediately fail rather than perform the build again\&. Failures in fixed\-output derivations (such as
\fBfetchurl\fR
calls) are never cached\&. The \(lqfailed\(rq status of a derivation can be cleared using
\fBnix\-store \-\-clear\-failed\-paths\fR\&. By default, failure caching is disabled\&.
.RE
.PP
build\-keep\-log
.RS 4
If set to
true
(the default), Nix will write the build log of a derivation (i\&.e\&. the standard output and error of its builder) to the directory
/nix/var/log/nix/drvs\&. The build log can be retrieved using the command
\fBnix\-store \-l \fR\fB\fIpath\fR\fR\&.
.RE
.PP
build\-compress\-log
.RS 4
If set to
true
(the default), build logs written to
/nix/var/log/nix/drvs
will be compressed on the fly using bzip2\&. Otherwise, they will not be compressed\&.
.RE
.PP
use\-binary\-caches
.RS 4
If set to
true
(the default), Nix will check the binary caches specified by
\fBbinary\-caches\fR
and related options to obtain binary substitutes\&.
.RE
.PP
binary\-caches
.RS 4
A list of URLs of binary caches, separated by whitespace\&. The default is
https://cache\&.nixos\&.org\&.
.RE
.PP
binary\-caches\-files
.RS 4
A list of names of files that will be read to obtain additional binary cache URLs\&. The default is
/nix/var/nix/profiles/per\-user/\fIusername\fR/channels/binary\-caches/*\&. Note that when you\(cqre using the Nix daemon,
\fIusername\fR
is always equal to
root, so Nix will only use the binary caches provided by the channels installed by root\&. Do not set this option to read files created by untrusted users!
.RE
.PP
trusted\-binary\-caches
.RS 4
A list of URLs of binary caches, separated by whitespace\&. These are not used by default, but can be enabled by users of the Nix daemon by specifying
\-\-option binary\-caches \fIurls\fR
on the command line\&. Unprivileged users are only allowed to pass a subset of the URLs listed in
binary\-caches
and
trusted\-binary\-caches\&.
.RE
.PP
extra\-binary\-caches
.RS 4
Additional binary caches appended to those specified in
\fBbinary\-caches\fR
and
\fBbinary\-caches\-files\fR\&. When used by unprivileged users, untrusted binary caches (i\&.e\&. those not listed in
\fBtrusted\-binary\-caches\fR) are silently ignored\&.
.RE
.PP
signed\-binary\-caches
.RS 4
If set to
*, Nix will only download binaries if they are signed using one of the keys listed in
\fBbinary\-cache\-public\-keys\fR\&.
.RE
.PP
binary\-cache\-public\-keys
.RS 4
A whitespace\-separated list of public keys corresponding to the secret keys trusted to sign binary caches\&. For example:
cache\&.nixos\&.org\-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra\&.nixos\&.org\-1:CNHJZBh9K4tP3EKF6FkkgeVYsS3ohTl+oS0Qa8bezVs=\&.
.RE
.PP
binary\-caches\-parallel\-connections
.RS 4
The maximum number of parallel HTTP connections used by the binary cache substituter to get NAR info files\&. This number should be high to minimise latency\&. It defaults to 25\&.
.RE
.PP
verify\-https\-binary\-caches
.RS 4
Whether HTTPS binary caches are required to have a certificate that can be verified\&. Defaults to
true\&.
.RE
.PP
force\-manifest
.RS 4
If this option is set to
false
(default) and a Nix channel provides both a manifest and a binary cache, only the binary cache will be used\&. If set to
true, the manifest will be fetched as well\&. This is useful if you want to use binary patches (which are currently not supported by binary caches)\&.
.RE
.PP
netrc\-file
.RS 4
If set to an absolute path to a
netrc
file, Nix will use the HTTP authentication credentials in this file when trying to download from a remote host through HTTP or HTTPS\&. Defaults to
$NIX_CONF_DIR/netrc\&.
.sp
The
netrc
file consists of a list of accounts in the following format:
.sp
.if n \{\
.RS 4
.\}
.nf
machine \fImy\-machine\fR
login \fImy\-username\fR
password \fImy\-password\fR
.fi
.if n \{\
.RE
.\}
.sp
For the exact syntax, see
\m[blue]\fBthe curl documentation\&.\fR\m[]\&\s-2\u[1]\d\s+2
.RE
.PP
system
.RS 4
This option specifies the canonical Nix system name of the current installation, such as
i686\-linux
or
powerpc\-darwin\&. Nix can only build derivations whose
system
attribute equals the value specified here\&. In general, it never makes sense to modify this value from its default, since you can use it to \(oqlie\(cq about the platform you are building on (e\&.g\&., perform a Mac OS build on a Linux machine; the result would obviously be wrong)\&. It only makes sense if the Nix binaries can run on multiple platforms, e\&.g\&., \(oquniversal binaries\(cq that run on
powerpc\-darwin
and
i686\-darwin\&.
.sp
It defaults to the canonical Nix system name detected by
configure
at build time\&.
.RE
.PP
fsync\-metadata
.RS 4
If set to
true, changes to the Nix store metadata (in
/nix/var/nix/db) are synchronously flushed to disk\&. This improves robustness in case of system crashes, but reduces performance\&. The default is
true\&.
.RE
.PP
auto\-optimise\-store
.RS 4
If set to
true, Nix automatically detects files in the store that have identical contents, and replaces them with hard links to a single copy\&. This saves disk space\&. If set to
false
(the default), you can still run
\fBnix\-store \-\-optimise\fR
to get rid of duplicate files\&.
.RE
.PP
connect\-timeout
.RS 4
The timeout (in seconds) for establishing connections in the binary cache substituter\&. It corresponds to
\fBcurl\fR\(cqs
\fB\-\-connect\-timeout\fR
option\&.
.RE
.PP
log\-servers
.RS 4
A list of URL prefixes (such as
http://hydra\&.nixos\&.org/log) from which
\fBnix\-store \-l\fR
will try to fetch build logs if they\(cqre not available locally\&.
.RE
.PP
trusted\-users
.RS 4
A list of names of users (separated by whitespace) that have additional rights when connecting to the Nix daemon, such as the ability to specify additional binary caches, or to import unsigned NARs\&. You can also specify groups by prefixing them with
@; for instance,
@wheel
means all users in the
wheel
group\&. The default is
root\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
The users listed here have the ability to compromise the security of a multi\-user Nix store\&. For instance, they could install Trojan horses subsequently executed by other users\&. So you should consider carefully whether to add users to this list\&.
.sp .5v
.RE
.RE
.PP
allowed\-users
.RS 4
A list of names of users (separated by whitespace) that are allowed to connect to the Nix daemon\&. As with the
\fBtrusted\-users\fR
option, you can specify groups by prefixing them with
@\&. Also, you can allow all users by specifying
*\&. The default is
*\&.
.sp
Note that trusted users are always allowed to connect\&.
.RE
.PP
restrict\-eval
.RS 4
If set to
true, the Nix evaluator will not allow access to any files outside of the Nix search path (as set via the
\fBNIX_PATH\fR
environment variable or the
\fB\-I\fR
option)\&. The default is
false\&.
.RE
.PP
pre\-build\-hook
.RS 4
If set, the path to a program that can set extra derivation\-specific settings for this system\&. This is used for settings that can\*(Aqt be captured by the derivation model itself and are too variable between different versions of the same system to be hard\-coded into nix\&.
.sp
The hook is passed the derivation path and, if sandboxes are enabled, the sandbox directory\&. It can then modify the sandbox and send a series of commands to modify various settings to stdout\&. The currently recognized commands are:
.PP
extra\-sandbox\-paths
.RS 4
Pass a list of files and directories to be included in the sandbox for this build\&. One entry per line, terminated by an empty line\&. Entries have the same format as
build\-sandbox\-paths\&.
.RE
.RE
.PP
build\-repeat
.RS 4
How many times to repeat builds to check whether they are deterministic\&. The default value is 0\&. If the value is non\-zero, every build is repeated the specified number of times\&. If the contents of any of the runs differs from the previous ones, the build is rejected and the resulting store paths are not registered as \(lqvalid\(rq in Nix\(cqs database\&.
.RE
.SH "AUTHOR"
.PP
\fBEelco Dolstra\fR
.br
LogicBlox
.RS 4
Author
.RE
.SH "COPYRIGHT"
.br
Copyright \(co 2004-2014 Eelco Dolstra
.br
.SH "NOTES"
.IP " 1." 4
the
    curl documentation.
.RS 4
\%https://ec.haxx.se/usingcurl-netrc.html
.RE
