'\" t
.\"     Title: nix-push
.\"    Author: Eelco Dolstra
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: November 2014
.\"    Manual: Command Reference
.\"    Source: Nix 1.11.15
.\"  Language: English
.\"
.TH "NIX\-PUSH" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
nix-push \- generate a binary cache
.SH "SYNOPSIS"
.HP \w'\fBnix\-push\fR\ 'u
\fBnix\-push\fR \fB\-\-dest\fR\ \fIdest\-dir\fR [\fB\-\-bzip2\fR] [\fB\-\-none\fR] [\fB\-\-force\fR] [\fB\-\-link\fR] [\fB\-\-manifest\fR] [\fB\-\-manifest\-path\fR\ \fIfilename\fR] [\fB\-\-url\-prefix\fR\ \fIurl\fR] [\fB\-\-key\-file\fR\ \fIpath\fR] \fIpaths\fR...
.SH "DESCRIPTION"
.PP
The command
\fBnix\-push\fR
produces a
\fIbinary cache\fR, a directory containing compressed Nix archives (NARs) plus some metadata of the closure of the specified store paths\&. This directory can then be made available through a web server to other Nix installations, allowing them to skip building from source and instead download binaries from the cache automatically\&.
.PP
\fBnix\-push\fR
performs the following actions\&.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Each path in
\fIpaths\fR
is built (using
\fBnix\-store \-\-realise\fR)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
All paths in the closure of
\fIpaths\fR
are determined (using
\fBnix\-store \-\-query \-\-requisites \-\-include\-outputs\fR)\&. Note that since the
\fB\-\-include\-outputs\fR
flag is used, if
\fIpaths\fR
includes a store derivation, you get a combined source/binary distribution (e\&.g\&., source tarballs will be included)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
All store paths determined in the previous step are packaged into a NAR (using
\fBnix\-store \-\-dump\fR) and compressed using
\fBxz\fR
or
\fBbzip2\fR\&. The resulting files have the extension
\&.nar\&.xz
or
\&.nar\&.bz2\&. Also for each store path, Nix generates a file with extension
\&.narinfo
containing metadata such as the references, cryptographic hash and size of each path\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Optionally, a single
\fImanifest\fR
file is created that contains the same metadata as the
\&.narinfo
files\&. This is for compatibility with Nix versions prior to 1\&.2 (see
\fBnix\-pull\fR
for details)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
A file named
\fBnix\-cache\-info\fR
is placed in the destination directory\&. The existence of this file marks the directory as a binary cache\&.
.RE
.sp
.SH "OPTIONS"
.PP
\fB\-\-dest\fR \fIdest\-dir\fR
.RS 4
Set the destination directory to
\fIdir\fR, which is created if it does not exist\&. This flag is required\&.
.RE
.PP
\fB\-\-bzip2\fR
.RS 4
Compress NARs using
\fBbzip2\fR
instead of
\fBxz\fR\&. The latter compresses about 30% better on typical archives, decompresses about twice as fast, but compresses a lot slower and is not supported by Nix prior to version 1\&.2\&.
.RE
.PP
\fB\-\-none\fR
.RS 4
Do not compress NARs\&.
.RE
.PP
\fB\-\-force\fR
.RS 4
Overwrite
\&.narinfo
files if they already exist\&.
.RE
.PP
\fB\-\-link\fR
.RS 4
By default, NARs are generated in the Nix store and then copied to
\fIdest\-dir\fR\&. If this option is given, hard links are used instead\&. This only works if
\fIdest\-dir\fR
is on the same filesystem as the Nix store\&.
.RE
.PP
\fB\-\-manifest\fR
.RS 4
Force the generation of a manifest suitable for use by
\fBnix\-pull\fR\&. The manifest is stored as
\fIdest\-dir\fR/MANIFEST\&.
.RE
.PP
\fB\-\-manifest\-path\fR \fIfilename\fR
.RS 4
Like
\fB\-\-manifest\fR, but store the manifest in
\fIfilename\fR\&.
.RE
.PP
\fB\-\-url\-prefix\fR \fIurl\fR
.RS 4
Manifests are expected to contain the absolute URLs of NARs\&. For generating these URLs, the prefix
\fIurl\fR
is used\&. It defaults to
file://\fIdest\-dir\fR\&.
.RE
.PP
\fB\-\-key\-file\fR \fIpath\fR
.RS 4
Sign the binary cache using the secret key stored in
\fIpath\fR\&. This secret key must have been created using
\fBnix\-store \-\-generate\-binary\-cache\-key\fR\&. Users of this binary cache should add the corresponding public key to the option
\fBbinary\-cache\-public\-keys\fR
in
nix\&.conf\&.
.RE
.SH "EXAMPLES"
.PP
To add the closure of Thunderbird to a binary cache:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-push \-\-dest /tmp/cache $(nix\-build \-A thunderbird)
.fi
.if n \{\
.RE
.\}
.sp
Assuming that
/tmp/cache
is exported by a web server as
http://example\&.org/cache, you can then use this cache on another machine to speed up the installation of Thunderbird:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-build \-A thunderbird \-\-option binary\-caches http://example\&.org/cache
.fi
.if n \{\
.RE
.\}
.sp
Alternatively, you could add
binary\-caches = http://example\&.org/cache
to
nix\&.conf\&.
.PP
To also include build\-time dependencies (such as source tarballs):
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-push \-\-dest /tmp/cache $(nix\-instantiate \-A thunderbird)
.fi
.if n \{\
.RE
.\}
.PP
To generate a manifest suitable for
\fBnix\-pull\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-push \-\-dest /tmp/cache $(nix\-build \-A thunderbird) \-\-manifest
.fi
.if n \{\
.RE
.\}
.sp
On another machine you can then do:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-pull http://example\&.org/cache
.fi
.if n \{\
.RE
.\}
.sp
to cause the binaries to be used by subsequent Nix operations\&.
.PP
To generate a signed binary cache, you must first generate a key pair, in this example called
cache\&.example\&.org\-1, storing the secret key in
\&./sk
and the public key in
\&./pk:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-store \-\-generate\-binary\-cache\-key cache\&.example\&.org\-1 sk pk

$ cat sk
cache\&.example\&.org\-1:jcMRQYFo8pQKzTtimpQLIPeHkMYZjfhB24hGfwF+u9PuX8H8FO7q564+X3G/JDlqqIqGar3OXRRwS9N3Wh3vbw==

$ cat pk
cache\&.example\&.org\-1:7l/B/BTu6ueuPl9xvyQ5aqiKhmq9zl0UcEvTd1od728=
.fi
.if n \{\
.RE
.\}
.sp
You can then generate a binary cache signed with the secret key:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nix\-push \-\-dest /tmp/cache \-\-key\-file \&./sk $(type \-p firefox)
.fi
.if n \{\
.RE
.\}
.sp
Users who wish to verify the integrity of binaries downloaded from your cache would add the following to their
nix\&.conf:
.sp
.if n \{\
.RS 4
.\}
.nf
binary\-caches = http://cache\&.example\&.org
signed\-binary\-caches = *
binary\-cache\-public\-keys = cache\&.example\&.org\-1:7l/B/BTu6ueuPl9xvyQ5aqiKhmq9zl0UcEvTd1od728=
.fi
.if n \{\
.RE
.\}
.sp
Nix will then ignore any binary that has a missing, incorrect or unrecognised signature\&.
.SH "BINARY CACHE FORMAT AND OPERATION"
.PP
A binary cache with URL
\fIurl\fR
only denotes a valid binary cache if the file
\fIurl\fR/nix\-cache\-info
exists\&. If this file does not exist (or cannot be downloaded), the cache is ignored\&. If it does exist, it must be a text file containing cache properties\&. Here\(cqs an example:
.sp
.if n \{\
.RS 4
.\}
.nf
StoreDir: /nix/store
WantMassQuery: 1
Priority: 10
.fi
.if n \{\
.RE
.\}
.sp
The properties that are currently supported are:
.PP
StoreDir
.RS 4
The path of the Nix store to which this binary cache applies\&. Binaries are not relocatable \(em a binary built for
/nix/store
won\(cqt generally work in
/home/alice/store
\(em so to prevent binaries from being used in a wrong store, a binary cache is only used if its
StoreDir
matches the local Nix configuration\&. The default is
/nix/store\&.
.RE
.PP
WantMassQuery
.RS 4
Query operations such as
\fBnix\-env \-qas\fR
can cause thousands of cache queries, and thus thousands of HTTP requests, to determine which packages are available in binary form\&. While these requests are small, not every server may appreciate a potential onslaught of queries\&. If
WantMassQuery
is set to
0
(default), \(lqmass queries\(rq such as
\fBnix\-env \-qas\fR
will skip this cache\&. Thus a package may appear not to have a binary substitute\&. However, the binary will still be used when you actually install the package\&. If
WantMassQuery
is set to
1, mass queries will use this cache\&.
.RE
.PP
Priority
.RS 4
Each binary cache has a priority (defaulting to 50)\&. Binary caches are checked for binaries in order of ascending priority; thus a higher number denotes a lower priority\&. The binary cache
https://cache\&.nixos\&.org
has priority 40\&.
.RE
.PP
Every time Nix needs to build some store path
\fIp\fR, it will check each configured binary cache to see if it has a NAR file for
\fIp\fR, until it finds one\&. If no cache has a NAR, Nix will fall back to building the path from source (if applicable)\&. To see if a cache with URL
\fIurl\fR
has a binary for
\fIp\fR, Nix fetches
\fIurl/h\fR, where
\fIh\fR
is the hash part of
\fIp\fR\&. Thus, if we have a cache
https://cache\&.nixos\&.org
and we want to obtain the store path
.sp
.if n \{\
.RS 4
.\}
.nf
/nix/store/a8922c0h87iilxzzvwn2hmv8x210aqb9\-glibc\-2\&.7
.fi
.if n \{\
.RE
.\}
.sp
then Nix will attempt to fetch
.sp
.if n \{\
.RS 4
.\}
.nf
https://cache\&.nixos\&.org/a8922c0h87iilxzzvwn2hmv8x210aqb9\&.narinfo
.fi
.if n \{\
.RE
.\}
.sp
(Commands such as
\fBnix\-env \-qas\fR
will issue an HTTP HEAD request, since it only needs to know if the
\&.narinfo
file exists\&.) The
\&.narinfo
file is a simple text file that looks like this:
.sp
.if n \{\
.RS 4
.\}
.nf
StorePath: /nix/store/a8922c0h87iilxzzvwn2hmv8x210aqb9\-glibc\-2\&.7
URL: nar/0zzjpdz46mdn74v09m053yczlz4am038g8r74iy8w43gx8801h70\&.nar\&.bz2
Compression: bzip2
FileHash: sha256:0zzjpdz46mdn74v09m053yczlz4am038g8r74iy8w43gx8801h70
FileSize: 24473768
NarHash: sha256:0s491y1h9hxj5ghiizlxk7ax6jwbha00zwn7lpyd5xg5bhf60vzg
NarSize: 109521136
References: 2ma2k0ys8knh4an48n28vigcmc2z8773\-linux\-headers\-2\&.6\&.23\&.16 \&.\&.\&.
Deriver: 7akyyc87ka32xwmqza9dvyg5pwx3j212\-glibc\-2\&.7\&.drv
Sig: cache\&.example\&.org\-1:WepnSp2UT0odDpR3NRjPVhJBHmdBgSBSTbHpdh4SCz92nGXwFY82bkPEmISoC0hGqBXDXEmB6y3Ohgna3mMgDg==
.fi
.if n \{\
.RE
.\}
.sp
The fields are as follows:
.PP
StorePath
.RS 4
The full store path, including the name part (e\&.g\&.,
glibc\-2\&.7)\&. It must match the requested store path\&.
.RE
.PP
URL
.RS 4
The URL of the NAR, relative to the binary cache URL\&.
.RE
.PP
Compression
.RS 4
The compression method; either
xz
or
bzip2\&.
.RE
.PP
FileHash
.RS 4
The SHA\-256 hash of the compressed NAR\&.
.RE
.PP
FileSize
.RS 4
The size of the compressed NAR\&.
.RE
.PP
NarHash
.RS 4
The SHA\-256 hash of the uncompressed NAR\&. This is equal to the hash of the store path as returned by
\fBnix\-store \-q \-\-hash \fR\fB\fIp\fR\fR\&.
.RE
.PP
NarSize
.RS 4
The size of the uncompressed NAR\&.
.RE
.PP
References
.RS 4
The references of the store path, without the Nix store prefix\&.
.RE
.PP
Deriver
.RS 4
The deriver of the store path, without the Nix store prefix\&. This field is optional\&.
.RE
.PP
System
.RS 4
The Nix platform type of this binary, if known\&. This field is optional\&.
.RE
.PP
Sig
.RS 4
A signature of the the form
\fIkey\-name\fR:\fIsig\fR, where
\fIkey\-name\fR
is the symbolic name of the key pair used to sign and verify the cache (e\&.g\&.
cache\&.example\&.org\-1), and
\fIsig\fR
is the actual signature, computed over the
\fIStorePath\fR,
\fINarHash\fR,
\fINarSize\fR
and
\fIReferences\fR
fields using the
\m[blue]\fBEd25519 public\-key signature system\fR\m[]\&\s-2\u[1]\d\s+2\&.
.RE
.PP
Thus, in our example, after recursively ensuring that the references exist (e\&.g\&.,
/nix/store/2ma2k0ys8knh4an48n28vigcmc2z8773\-linux\-headers\-2\&.6\&.23\&.16), Nix will fetch
.sp
.if n \{\
.RS 4
.\}
.nf
https://cache\&.nixos\&.org/nar/0zzjpdz46mdn74v09m053yczlz4am038g8r74iy8w43gx8801h70\&.nar\&.bz2
.fi
.if n \{\
.RE
.\}
.sp
and decompress and unpack it to
/nix/store/a8922c0h87iilxzzvwn2hmv8x210aqb9\-glibc\-2\&.7\&.
.SH "AUTHOR"
.PP
\fBEelco Dolstra\fR
.br
LogicBlox
.RS 4
Author
.RE
.SH "COPYRIGHT"
.br
Copyright \(co 2004-2014 Eelco Dolstra
.br
.SH "NOTES"
.IP " 1." 4
Ed25519 public-key signature system
.RS 4
\%http://ed25519.cr.yp.to/
.RE
