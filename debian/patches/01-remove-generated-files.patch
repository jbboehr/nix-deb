Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 nix (1.11.15-0jbboehr0) unstable; urgency=medium
 .
   * Initial release
Author: John Boehr <jbboehr@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- nix-1.11.15.orig/doc/manual/manual.html
+++ /dev/null
@@ -1,7159 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Nix Package Manager Guide</title><link rel="stylesheet" type="text/css" href="style.css" /><meta name="generator" content="DocBook XSL Stylesheets V1.79.1" /></head><body><div class="book"><div class="titlepage"><div><div><h1 class="title"><a id="idm140737318673792"></a>Nix Package Manager Guide</h1></div><div><h2 class="subtitle">Version 1.11.15</h2></div><div><div class="author"><h3 class="author"><span class="firstname">Eelco</span> <span class="surname">Dolstra</span></h3><div class="affiliation"><span class="orgname">LogicBlox<br /></span></div></div></div><div><p class="copyright">Copyright © 2004-2014 Eelco Dolstra</p></div></div><hr /></div><div class="toc"><dl class="toc"><dt><span class="part"><a href="#chap-introduction">I. Introduction</a></span></dt><dd><dl><dt><span class="chapter"><a href="#ch-about-nix">1. About Nix</a></span></dt><dt><span class="chapter"><a href="#chap-quick-start">2. Quick Start</a></span></dt></dl></dd><dt><span class="part"><a href="#chap-installation">II. Installation</a></span></dt><dd><dl><dt><span class="chapter"><a href="#ch-supported-platforms">3. Supported Platforms</a></span></dt><dt><span class="chapter"><a href="#ch-installing-binary">4. Installing a Binary Distribution</a></span></dt><dt><span class="chapter"><a href="#ch-installing-source">5. Installing Nix from Source</a></span></dt><dd><dl><dt><span class="section"><a href="#sec-prerequisites-source">5.1. Prerequisites</a></span></dt><dt><span class="section"><a href="#sec-obtaining-source">5.2. Obtaining a Source Distribution</a></span></dt><dt><span class="section"><a href="#sec-building-source">5.3. Building Nix from Source</a></span></dt></dl></dd><dt><span class="chapter"><a href="#ch-nix-security">6. Security</a></span></dt><dd><dl><dt><span class="section"><a href="#sec-single-user">6.1. Single-User Mode</a></span></dt><dt><span class="section"><a href="#ssec-multi-user">6.2. Multi-User Mode</a></span></dt></dl></dd><dt><span class="chapter"><a href="#ch-env-variables">7. Environment Variables</a></span></dt></dl></dd><dt><span class="part"><a href="#chap-package-management">III. Package Management</a></span></dt><dd><dl><dt><span class="chapter"><a href="#ch-basic-package-mgmt">8. Basic Package Management</a></span></dt><dt><span class="chapter"><a href="#sec-profiles">9. Profiles</a></span></dt><dt><span class="chapter"><a href="#sec-garbage-collection">10. Garbage Collection</a></span></dt><dd><dl><dt><span class="section"><a href="#ssec-gc-roots">10.1. Garbage Collector Roots</a></span></dt></dl></dd><dt><span class="chapter"><a href="#sec-channels">11. Channels</a></span></dt><dt><span class="chapter"><a href="#sec-one-click">12. One-Click Installation</a></span></dt><dt><span class="chapter"><a href="#sec-sharing-packages">13. Sharing Packages Between Machines</a></span></dt><dd><dl><dt><span class="section"><a href="#ssec-binary-cache-substituter">13.1. Serving a Nix store via HTTP</a></span></dt><dt><span class="section"><a href="#ssec-copy-closure">13.2. Copying Closures Via SSH</a></span></dt><dt><span class="section"><a href="#ssec-ssh-substituter">13.3. Serving a Nix store via SSH</a></span></dt></dl></dd></dl></dd><dt><span class="part"><a href="#chap-writing-nix-expressions">IV. Writing Nix Expressions</a></span></dt><dd><dl><dt><span class="chapter"><a href="#ch-simple-expression">14. A Simple Nix Expression</a></span></dt><dd><dl><dt><span class="section"><a href="#sec-expression-syntax">14.1. Expression Syntax</a></span></dt><dt><span class="section"><a href="#sec-build-script">14.2. Build Script</a></span></dt><dt><span class="section"><a href="#sec-arguments">14.3. Arguments and Variables</a></span></dt><dt><span class="section"><a href="#sec-building-simple">14.4. Building and Testing</a></span></dt><dd><dl><dt><span class="section"><a href="#sec-debug-build">14.4.1. Debugging Build Failures</a></span></dt></dl></dd><dt><span class="section"><a href="#sec-generic-builder">14.5. Generic Builder Syntax</a></span></dt></dl></dd><dt><span class="chapter"><a href="#ch-expression-language">15. Nix Expression Language</a></span></dt><dd><dl><dt><span class="section"><a href="#ssec-values">15.1. Values</a></span></dt><dt><span class="section"><a href="#sec-constructs">15.2. Language Constructs</a></span></dt><dt><span class="section"><a href="#sec-language-operators">15.3. Operators</a></span></dt><dt><span class="section"><a href="#ssec-derivation">15.4. Derivations</a></span></dt><dd><dl><dt><span class="section"><a href="#sec-advanced-attributes">15.4.1. Advanced Attributes</a></span></dt></dl></dd><dt><span class="section"><a href="#ssec-builtins">15.5. Built-in Functions</a></span></dt></dl></dd></dl></dd><dt><span class="part"><a href="#idm140737317578496">V. Advanced Topics</a></span></dt><dd><dl><dt><span class="chapter"><a href="#chap-distributed-builds">16. Distributed Builds</a></span></dt></dl></dd><dt><span class="part"><a href="#part-command-ref">VI. Command Reference</a></span></dt><dd><dl><dt><span class="chapter"><a href="#sec-common-options">17. Common Options</a></span></dt><dt><span class="chapter"><a href="#sec-common-env">18. Common Environment Variables</a></span></dt><dt><span class="chapter"><a href="#ch-main-commands">19. Main Commands</a></span></dt><dd><dl><dt><span class="refentrytitle"><a href="#sec-nix-env">nix-env</a></span><span class="refpurpose"> — manipulate or query Nix user environments</span></dt><dt><span class="refentrytitle"><a href="#sec-nix-build">nix-build</a></span><span class="refpurpose"> — build a Nix expression</span></dt><dt><span class="refentrytitle"><a href="#sec-nix-shell">nix-shell</a></span><span class="refpurpose"> — start an interactive shell based on a Nix expression</span></dt><dt><span class="refentrytitle"><a href="#sec-nix-store">nix-store</a></span><span class="refpurpose"> — manipulate or query the Nix store</span></dt></dl></dd><dt><span class="chapter"><a href="#ch-utilities">20. Utilities</a></span></dt><dd><dl><dt><span class="refentrytitle"><a href="#sec-nix-channel">nix-channel</a></span><span class="refpurpose"> — manage Nix channels</span></dt><dt><span class="refentrytitle"><a href="#sec-nix-collect-garbage">nix-collect-garbage</a></span><span class="refpurpose"> — delete unreachable store paths</span></dt><dt><span class="refentrytitle"><a href="#sec-nix-copy-closure">nix-copy-closure</a></span><span class="refpurpose"> — copy a closure to or from a remote machine via SSH</span></dt><dt><span class="refentrytitle"><a href="#sec-nix-daemon">nix-daemon</a></span><span class="refpurpose"> — Nix multi-user support daemon</span></dt><dt><span class="refentrytitle"><a href="#sec-nix-hash">nix-hash</a></span><span class="refpurpose"> — compute the cryptographic hash of a path</span></dt><dt><span class="refentrytitle"><a href="#sec-nix-install-package">nix-install-package</a></span><span class="refpurpose"> — install a Nix Package file</span></dt><dt><span class="refentrytitle"><a href="#sec-nix-instantiate">nix-instantiate</a></span><span class="refpurpose"> — instantiate store derivations from Nix expressions</span></dt><dt><span class="refentrytitle"><a href="#sec-nix-prefetch-url">nix-prefetch-url</a></span><span class="refpurpose"> — copy a file from a URL into the store and print its hash</span></dt><dt><span class="refentrytitle"><a href="#sec-nix-pull">nix-pull</a></span><span class="refpurpose"> — register availability of pre-built binaries (deprecated)</span></dt><dt><span class="refentrytitle"><a href="#sec-nix-push">nix-push</a></span><span class="refpurpose"> — generate a binary cache</span></dt></dl></dd><dt><span class="chapter"><a href="#ch-files">21. Files</a></span></dt><dd><dl><dt><span class="refentrytitle"><a href="#sec-conf-file">nix.conf</a></span><span class="refpurpose"> — Nix configuration file</span></dt></dl></dd></dl></dd><dt><span class="appendix"><a href="#ch-troubleshooting">A. Troubleshooting</a></span></dt><dd><dl><dt><span class="section"><a href="#sec-collisions-nixenv">A.1. Collisions in <span class="command"><strong>nix-env</strong></span></a></span></dt><dt><span class="section"><a href="#sec-links-nix-store">A.2. <span class="quote">“<span class="quote">Too many links</span>”</span> Error in the Nix store</a></span></dt></dl></dd><dt><span class="appendix"><a href="#idm140737315914544">B. Glossary</a></span></dt><dt><span class="appendix"><a href="#chap-hacking">C. Hacking</a></span></dt><dt><span class="appendix"><a href="#sec-relnotes">D. Nix Release Notes</a></span></dt><dd><dl><dt><span class="section"><a href="#ssec-relnotes-1.11.10">D.1. Release 1.11.10 (2017-06-12)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.11">D.2. Release 1.11 (2016-01-19)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.10">D.3. Release 1.10 (2015-09-03)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.9">D.4. Release 1.9 (2015-06-12)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.8">D.5. Release 1.8 (2014-12-14)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.7">D.6. Release 1.7 (2014-04-11)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.6.1">D.7. Release 1.6.1 (2013-10-28)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.6.0">D.8. Release 1.6 (2013-09-10)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.5.2">D.9. Release 1.5.2 (2013-05-13)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.5">D.10. Release 1.5 (2013-02-27)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.4">D.11. Release 1.4 (2013-02-26)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.3">D.12. Release 1.3 (2013-01-04)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.2">D.13. Release 1.2 (2012-12-06)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.1">D.14. Release 1.1 (2012-07-18)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-1.0">D.15. Release 1.0 (2012-05-11)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-0.16">D.16. Release 0.16 (2010-08-17)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-0.15">D.17. Release 0.15 (2010-03-17)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-0.14">D.18. Release 0.14 (2010-02-04)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-0.13">D.19. Release 0.13 (2009-11-05)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-0.12">D.20. Release 0.12 (2008-11-20)</a></span></dt><dt><span class="section"><a href="#ssec-relnotes-0.11">D.21. Release 0.11 (2007-12-31)</a></span></dt><dt><span class="section"><a href="#ch-relnotes-0.10.1">D.22. Release 0.10.1 (2006-10-11)</a></span></dt><dt><span class="section"><a href="#ch-relnotes-0.10">D.23. Release 0.10 (2006-10-06)</a></span></dt><dt><span class="section"><a href="#ch-relnotes-0.9.2">D.24. Release 0.9.2 (2005-09-21)</a></span></dt><dt><span class="section"><a href="#ch-relnotes-0.9.1">D.25. Release 0.9.1 (2005-09-20)</a></span></dt><dt><span class="section"><a href="#ch-relnotes-0.9">D.26. Release 0.9 (2005-09-16)</a></span></dt><dt><span class="section"><a href="#ch-relnotes-0.8.1">D.27. Release 0.8.1 (2005-04-13)</a></span></dt><dt><span class="section"><a href="#ch-relnotes-0.8">D.28. Release 0.8 (2005-04-11)</a></span></dt><dt><span class="section"><a href="#ch-relnotes-0.7">D.29. Release 0.7 (2005-01-12)</a></span></dt><dt><span class="section"><a href="#ch-relnotes-0.6">D.30. Release 0.6 (2004-11-14)</a></span></dt><dt><span class="section"><a href="#ch-relnotes-0.5">D.31. Release 0.5 and earlier</a></span></dt></dl></dd></dl></div><div class="part"><div class="titlepage"><div><div><h1 class="title"><a id="chap-introduction"></a>Part I. Introduction</h1></div></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="ch-about-nix"></a>Chapter 1. About Nix</h2></div></div></div><p>Nix is a <span class="emphasis"><em>purely functional package manager</em></span>.
-This means that it treats packages like values in purely functional
-programming languages such as Haskell — they are built by functions
-that don’t have side-effects, and they never change after they have
-been built.  Nix stores packages in the <span class="emphasis"><em>Nix
-store</em></span>, usually the directory
-<code class="filename">/nix/store</code>, where each package has its own unique
-subdirectory such as
-
-</p><pre class="programlisting">
-/nix/store/b6gvzjyb2pg0kjfwrjmg1vfhh54ad73z-firefox-33.1/
-</pre><p>
-
-where <code class="literal">b6gvzjyb2pg0…</code> is a unique identifier for the
-package that captures all its dependencies (it’s a cryptographic hash
-of the package’s build dependency graph).  This enables many powerful
-features.</p><div class="simplesect"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="idm140737318609936"></a>Multiple versions</h2></div></div></div><p>You can have multiple versions or variants of a package
-installed at the same time.  This is especially important when
-different applications have dependencies on different versions of the
-same package — it prevents the “DLL hell”.  Because of the hashing
-scheme, different versions of a package end up in different paths in
-the Nix store, so they don’t interfere with each other.</p><p>An important consequence is that operations like upgrading or
-uninstalling an application cannot break other applications, since
-these operations never “destructively” update or delete files that are
-used by other packages.</p></div><div class="simplesect"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="idm140737318607264"></a>Complete dependencies</h2></div></div></div><p>Nix helps you make sure that package dependency specifications
-are complete.  In general, when you’re making a package for a package
-management system like RPM, you have to specify for each package what
-its dependencies are, but there are no guarantees that this
-specification is complete.  If you forget a dependency, then the
-package will build and work correctly on <span class="emphasis"><em>your</em></span>
-machine if you have the dependency installed, but not on the end
-user's machine if it's not there.</p><p>Since Nix on the other hand doesn’t install packages in “global”
-locations like <code class="filename">/usr/bin</code> but in package-specific
-directories, the risk of incomplete dependencies is greatly reduced.
-This is because tools such as compilers don’t search in per-packages
-directories such as
-<code class="filename">/nix/store/5lbfaxb722zp…-openssl-0.9.8d/include</code>,
-so if a package builds correctly on your system, this is because you
-specified the dependency explicitly.</p><p>Runtime dependencies are found by scanning binaries for the hash
-parts of Nix store paths (such as <code class="literal">r8vvq9kq…</code>).  This
-sounds risky, but it works extremely well.</p></div><div class="simplesect"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="idm140737318602080"></a>Multi-user support</h2></div></div></div><p>Nix has multi-user support.  This means that non-privileged
-users can securely install software.  Each user can have a different
-<span class="emphasis"><em>profile</em></span>, a set of packages in the Nix store that
-appear in the user’s <code class="envar">PATH</code>.  If a user installs a
-package that another user has already installed previously, the
-package won’t be built or downloaded a second time.  At the same time,
-it is not possible for one user to inject a Trojan horse into a
-package that might be used by another user.</p></div><div class="simplesect"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="idm140737318599440"></a>Atomic upgrades and rollbacks</h2></div></div></div><p>Since package management operations never overwrite packages in
-the Nix store but just add new versions in different paths, they are
-<span class="emphasis"><em>atomic</em></span>.  So during a package upgrade, there is no
-time window in which the package has some files from the old version
-and some files from the new version — which would be bad because a
-program might well crash if it’s started during that period.</p><p>And since package aren’t overwritten, the old versions are still
-there after an upgrade.  This means that you can <span class="emphasis"><em>roll
-back</em></span> to the old version:</p><pre class="screen">
-$ nix-env --upgrade <em class="replaceable"><code>some-packages</code></em>
-$ nix-env --rollback
-</pre></div><div class="simplesect"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="idm140737318595536"></a>Garbage collection</h2></div></div></div><p>When you uninstall a package like this…
-
-</p><pre class="screen">
-$ nix-env --uninstall firefox
-</pre><p>
-
-the package isn’t deleted from the system right away (after all, you
-might want to do a rollback, or it might be in the profiles of other
-users).  Instead, unused packages can be deleted safely by running the
-<span class="emphasis"><em>garbage collector</em></span>:
-
-</p><pre class="screen">
-$ nix-collect-garbage
-</pre><p>
-
-This deletes all packages that aren’t in use by any user profile or by
-a currently running program.</p></div><div class="simplesect"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="idm140737318592496"></a>Functional package language</h2></div></div></div><p>Packages are built from <span class="emphasis"><em>Nix expressions</em></span>,
-which is a simple functional language.  A Nix expression describes
-everything that goes into a package build action (a “derivation”):
-other packages, sources, the build script, environment variables for
-the build script, etc.  Nix tries very hard to ensure that Nix
-expressions are <span class="emphasis"><em>deterministic</em></span>: building a Nix
-expression twice should yield the same result.</p><p>Because it’s a functional language, it’s easy to support
-building variants of a package: turn the Nix expression into a
-function and call it any number of times with the appropriate
-arguments.  Due to the hashing scheme, variants don’t conflict with
-each other in the Nix store.</p></div><div class="simplesect"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="idm140737318588960"></a>Transparent source/binary deployment</h2></div></div></div><p>Nix expressions generally describe how to build a package from
-source, so an installation action like
-
-</p><pre class="screen">
-$ nix-env --install firefox
-</pre><p>
-
-<span class="emphasis"><em>could</em></span> cause quite a bit of build activity, as not
-only Firefox but also all its dependencies (all the way up to the C
-library and the compiler) would have to built, at least if they are
-not already in the Nix store.  This is a <span class="emphasis"><em>source deployment
-model</em></span>.  For most users, building from source is not very
-pleasant as it takes far too long.  However, Nix can automatically
-skip building from source and instead use a <span class="emphasis"><em>binary
-cache</em></span>, a web server that provides pre-built binaries. For
-instance, when asked to build
-<code class="literal">/nix/store/b6gvzjyb2pg0…-firefox-33.1</code> from source,
-Nix would first check if the file
-<code class="uri">https://cache.nixos.org/b6gvzjyb2pg0….narinfo</code> exists, and
-if so, fetch the pre-built binary referenced from there; otherwise, it
-would fall back to building from source.</p></div><div class="simplesect"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="idm140737318584368"></a>Nix Packages collection</h2></div></div></div><p>We provide a large set of Nix expressions containing hundreds of
-existing Unix packages, the <span class="emphasis"><em>Nix Packages
-collection</em></span> (Nixpkgs).</p></div><div class="simplesect"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="idm140737318582384"></a>Managing build environments</h2></div></div></div><p>Nix is extremely useful for developers as it makes it easy to
-automatically set up the build environment for a package. Given a
-Nix expression that describes the dependencies of your package, the
-command <span class="command"><strong>nix-shell</strong></span> will build or download those
-dependencies if they’re not already in your Nix store, and then start
-a Bash shell in which all necessary environment variables (such as
-compiler search paths) are set.</p><p>For example, the following command gets all dependencies of the
-Pan newsreader, as described by <a class="link" href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/networking/newsreaders/pan/default.nix" target="_top">its
-Nix expression</a>:</p><pre class="screen">
-$ nix-shell '&lt;nixpkgs&gt;' -A pan
-</pre><p>You’re then dropped into a shell where you can edit, build and test
-the package:</p><pre class="screen">
-[nix-shell]$ tar xf $src
-[nix-shell]$ cd pan-*
-[nix-shell]$ ./configure
-[nix-shell]$ make
-[nix-shell]$ ./pan/gui/pan
-</pre></div><div class="simplesect"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="idm140737318576896"></a>Portability</h2></div></div></div><p>Nix runs on Linux and Mac OS X.</p></div><div class="simplesect"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="idm140737318575872"></a>NixOS</h2></div></div></div><p>NixOS is a Linux distribution based on Nix.  It uses Nix not
-just for package management but also to manage the system
-configuration (e.g., to build configuration files in
-<code class="filename">/etc</code>).  This means, among other things, that it
-is easy to roll back the entire configuration of the system to an
-earlier state.  Also, users can install software without root
-privileges.  For more information and downloads, see the <a class="link" href="http://nixos.org/" target="_top">NixOS homepage</a>.</p></div><div class="simplesect"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="idm140737318573408"></a>License</h2></div></div></div><p>Nix is released under the terms of the <a class="link" href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_top">GNU
-LGPLv2.1 or (at your option) any later version</a>.</p></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="chap-quick-start"></a>Chapter 2. Quick Start</h2></div></div></div><p>This chapter is for impatient people who don't like reading
-documentation.  For more in-depth information you are kindly referred
-to subsequent chapters.</p><div class="procedure"><ol class="procedure" type="1"><li class="step"><p>Install single-user Nix by running the following:
-
-</p><pre class="screen">
-$ curl https://nixos.org/nix/install | sh
-</pre><p>
-
-This will install Nix in <code class="filename">/nix</code>. The install script
-will create <code class="filename">/nix</code> using <span class="command"><strong>sudo</strong></span>,
-so make sure you have sufficient rights.  (For other installation
-methods, see <a class="xref" href="#chap-installation" title="Part II. Installation">Part II, “Installation”</a>.)</p></li><li class="step"><p>See what installable packages are currently available
-in the channel:
-
-</p><pre class="screen">
-$ nix-env -qa
-docbook-xml-4.3
-docbook-xml-4.5
-firefox-33.0.2
-hello-2.9
-libxslt-1.1.28
-<em class="replaceable"><code>...</code></em></pre><p>
-
-</p></li><li class="step"><p>Install some packages from the channel:
-
-</p><pre class="screen">
-$ nix-env -i hello <em class="replaceable"><code>...</code></em> </pre><p>
-
-This should download pre-built packages; it should not build them
-locally (if it does, something went wrong).</p></li><li class="step"><p>Test that they work:
-
-</p><pre class="screen">
-$ which hello
-/home/eelco/.nix-profile/bin/hello
-$ hello
-Hello, world!
-</pre><p>
-
-</p></li><li class="step"><p>Uninstall a package:
-
-</p><pre class="screen">
-$ nix-env -e hello</pre><p>
-
-</p></li><li class="step"><p>You can also test a package without installing it:
-
-</p><pre class="screen">
-$ nix-shell -p hello
-</pre><p>
-
-This builds or downloads GNU Hello and its dependencies, then drops
-you into a Bash shell where the <span class="command"><strong>hello</strong></span> command is
-present, all without affecting your normal environment:
-
-</p><pre class="screen">
-[nix-shell:~]$ hello
-Hello, world!
-
-[nix-shell:~]$ exit
-
-$ hello
-hello: command not found
-</pre><p>
-
-</p></li><li class="step"><p>To keep up-to-date with the channel, do:
-
-</p><pre class="screen">
-$ nix-channel --update nixpkgs
-$ nix-env -u '*'</pre><p>
-
-The latter command will upgrade each installed package for which there
-is a “newer” version (as determined by comparing the version
-numbers).</p></li><li class="step"><p>If you're unhappy with the result of a
-<span class="command"><strong>nix-env</strong></span> action (e.g., an upgraded package turned
-out not to work properly), you can go back:
-
-</p><pre class="screen">
-$ nix-env --rollback</pre><p>
-
-</p></li><li class="step"><p>You should periodically run the Nix garbage collector
-to get rid of unused packages, since uninstalls or upgrades don't
-actually delete them:
-
-</p><pre class="screen">
-$ nix-collect-garbage -d</pre><p>
-
-
-
-</p></li></ol></div></div></div><div class="part"><div class="titlepage"><div><div><h1 class="title"><a id="chap-installation"></a>Part II. Installation</h1></div></div></div><div class="partintro"><div></div><p>This section describes how to install and configure Nix for first-time use.</p></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="ch-supported-platforms"></a>Chapter 3. Supported Platforms</h2></div></div></div><p>Nix is currently supported on the following platforms:
-
-</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Linux (i686, x86_64).</p></li><li class="listitem"><p>Mac OS X (x86_64).</p></li></ul></div><p>
-
-</p><p>Nix is fairly portable, so it should work on most platforms that
-support POSIX threads and have a C++11 compiler.</p></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="ch-installing-binary"></a>Chapter 4. Installing a Binary Distribution</h2></div></div></div><p>If you are using Linux or Mac OS X, the easiest way to install
-Nix is to run the following command:
-
-</p><pre class="screen">
-$ bash &lt;(curl https://nixos.org/nix/install)
-</pre><p>
-
-This will perform a single-user installation of Nix, meaning that
-<code class="filename">/nix</code> is owned by the invoking user.  You should
-run this under your usual user account, <span class="emphasis"><em>not</em></span> as
-root.  The script will invoke <span class="command"><strong>sudo</strong></span> to create
-<code class="filename">/nix</code> if it doesn’t already exist.  If you don’t
-have <span class="command"><strong>sudo</strong></span>, you should manually create
-<span class="command"><strong>/nix</strong></span> first as root, e.g.:
-
-</p><pre class="screen">
-$ mkdir /nix
-$ chown alice /nix
-</pre><p>
-
-</p><p>You can uninstall Nix simply by running:
-
-</p><pre class="screen">
-$ rm -rf /nix
-</pre><p>
-
-</p></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="ch-installing-source"></a>Chapter 5. Installing Nix from Source</h2></div></div></div><p>If no binary package is available, you can download and compile
-a source distribution.</p><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-prerequisites-source"></a>5.1. Prerequisites</h2></div></div></div><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>GNU Make.</p></li><li class="listitem"><p>A version of GCC or Clang that supports C++11.</p></li><li class="listitem"><p>Perl 5.8 or higher.</p></li><li class="listitem"><p><span class="command"><strong>pkg-config</strong></span> to locate
-  dependencies.  If your distribution does not provide it, you can get
-  it from <a class="link" href="http://www.freedesktop.org/wiki/Software/pkg-config" target="_top">http://www.freedesktop.org/wiki/Software/pkg-config</a>.</p></li><li class="listitem"><p>The bzip2 compressor program and the
-  <code class="literal">libbz2</code> library.  Thus you must have bzip2
-  installed, including development headers and libraries.  If your
-  distribution does not provide these, you can obtain bzip2 from <a class="link" href="http://www.bzip.org/" target="_top">http://www.bzip.org/</a>.</p></li><li class="listitem"><p>The SQLite embedded database library, version 3.6.19
-  or higher.  If your distribution does not provide it, please install
-  it from <a class="link" href="http://www.sqlite.org/" target="_top">http://www.sqlite.org/</a>.</p></li><li class="listitem"><p>The Perl DBI, DBD::SQLite, and WWW::Curl libraries, which are
-  available from <a class="link" href="http://search.cpan.org/" target="_top">CPAN</a> if your
-  distribution does not provide them.</p></li><li class="listitem"><p>The <a class="link" href="http://www.hboehm.info/gc/" target="_top">Boehm
-  garbage collector</a> to reduce the evaluator’s memory
-  consumption (optional).  To enable it, install
-  <code class="literal">pkgconfig</code> and the Boehm garbage collector, and
-  pass the flag <code class="option">--enable-gc</code> to
-  <span class="command"><strong>configure</strong></span>.</p></li><li class="listitem"><p>The <span class="command"><strong>xmllint</strong></span> and
-  <span class="command"><strong>xsltproc</strong></span> programs to build this manual and the
-  man-pages.  These are part of the <code class="literal">libxml2</code> and
-  <code class="literal">libxslt</code> packages, respectively.  You also need
-  the <a class="link" href="http://docbook.sourceforge.net/projects/xsl/" target="_top">DocBook
-  XSL stylesheets</a> and optionally the <a class="link" href="http://www.docbook.org/schemas/5x" target="_top"> DocBook 5.0 RELAX NG
-  schemas</a>.  Note that these are only required if you modify the
-  manual sources or when you are building from the Git
-  repository.</p></li><li class="listitem"><p>Recent versions of Bison and Flex to build the
-  parser.  (This is because Nix needs GLR support in Bison and
-  reentrancy support in Flex.)  For Bison, you need version 2.6, which
-  can be obtained from the <a class="link" href="ftp://alpha.gnu.org/pub/gnu/bison" target="_top">GNU FTP
-  server</a>.  For Flex, you need version 2.5.35, which is
-  available on <a class="link" href="http://lex.sourceforge.net/" target="_top">SourceForge</a>.
-  Slightly older versions may also work, but ancient versions like the
-  ubiquitous 2.5.4a won't.  Note that these are only required if you
-  modify the parser or when you are building from the Git
-  repository.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-obtaining-source"></a>5.2. Obtaining a Source Distribution</h2></div></div></div><p>The source tarball of the most recent stable release can be
-downloaded from the <a class="link" href="http://nixos.org/nix/download.html" target="_top">Nix homepage</a>.
-You can also grab the <a class="link" href="http://hydra.nixos.org/job/nix/master/release/latest-finished#tabs-constituents" target="_top">most
-recent development release</a>.</p><p>Alternatively, the most recent sources of Nix can be obtained
-from its <a class="link" href="https://github.com/NixOS/nix" target="_top">Git
-repository</a>.  For example, the following command will check out
-the latest revision into a directory called
-<code class="filename">nix</code>:</p><pre class="screen">
-$ git clone https://github.com/NixOS/nix</pre><p>Likewise, specific releases can be obtained from the <a class="link" href="https://github.com/NixOS/nix/tags" target="_top">tags</a> of the
-repository.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-building-source"></a>5.3. Building Nix from Source</h2></div></div></div><p>After unpacking or checking out the Nix sources, issue the
-following commands:
-
-</p><pre class="screen">
-$ ./configure <em class="replaceable"><code>options...</code></em>
-$ make
-$ make install</pre><p>
-
-Nix requires GNU Make so you may need to invoke
-<span class="command"><strong>gmake</strong></span> instead.</p><p>When building from the Git repository, these should be preceded
-by the command:
-
-</p><pre class="screen">
-$ ./bootstrap.sh</pre><p>
-
-</p><p>The installation path can be specified by passing the
-<code class="option">--prefix=<em class="replaceable"><code>prefix</code></em></code> to
-<span class="command"><strong>configure</strong></span>.  The default installation directory is
-<code class="filename">/usr/local</code>.  You can change this to any location
-you like.  You must have write permission to the
-<em class="replaceable"><code>prefix</code></em> path.</p><p>Nix keeps its <span class="emphasis"><em>store</em></span> (the place where
-packages are stored) in <code class="filename">/nix/store</code> by default.
-This can be changed using
-<code class="option">--with-store-dir=<em class="replaceable"><code>path</code></em></code>.</p><div class="warning"><h3 class="title">Warning</h3><p>It is best <span class="emphasis"><em>not</em></span> to change the Nix
-store from its default, since doing so makes it impossible to use
-pre-built binaries from the standard Nixpkgs channels — that is, all
-packages will need to be built from source.</p></div><p>Nix keeps state (such as its database and log files) in
-<code class="filename">/nix/var</code> by default.  This can be changed using
-<code class="option">--localstatedir=<em class="replaceable"><code>path</code></em></code>.</p></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="ch-nix-security"></a>Chapter 6. Security</h2></div></div></div><p>Nix has two basic security models.  First, it can be used in
-“single-user mode”, which is similar to what most other package
-management tools do: there is a single user (typically <code class="systemitem">root</code>) who performs all package
-management operations.  All other users can then use the installed
-packages, but they cannot perform package management operations
-themselves.</p><p>Alternatively, you can configure Nix in “multi-user mode”.  In
-this model, all users can perform package management operations — for
-instance, every user can install software without requiring root
-privileges.  Nix ensures that this is secure.  For instance, it’s not
-possible for one user to overwrite a package used by another user with
-a Trojan horse.</p><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-single-user"></a>6.1. Single-User Mode</h2></div></div></div><p>In single-user mode, all Nix operations that access the database
-in <code class="filename"><em class="replaceable"><code>prefix</code></em>/var/nix/db</code>
-or modify the Nix store in
-<code class="filename"><em class="replaceable"><code>prefix</code></em>/store</code> must be
-performed under the user ID that owns those directories.  This is
-typically <code class="systemitem">root</code>.  (If you
-install from RPM packages, that’s in fact the default ownership.)
-However, on single-user machines, it is often convenient to
-<span class="command"><strong>chown</strong></span> those directories to your normal user account
-so that you don’t have to <span class="command"><strong>su</strong></span> to <code class="systemitem">root</code> all the time.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-multi-user"></a>6.2. Multi-User Mode</h2></div></div></div><p>To allow a Nix store to be shared safely among multiple users,
-it is important that users are not able to run builders that modify
-the Nix store or database in arbitrary ways, or that interfere with
-builds started by other users.  If they could do so, they could
-install a Trojan horse in some package and compromise the accounts of
-other users.</p><p>To prevent this, the Nix store and database are owned by some
-privileged user (usually <code class="literal">root</code>) and builders are
-executed under special user accounts (usually named
-<code class="literal">nixbld1</code>, <code class="literal">nixbld2</code>, etc.).  When a
-unprivileged user runs a Nix command, actions that operate on the Nix
-store (such as builds) are forwarded to a <span class="emphasis"><em>Nix
-daemon</em></span> running under the owner of the Nix store/database
-that performs the operation.</p><div class="note"><h3 class="title">Note</h3><p>Multi-user mode has one important limitation: only
-<code class="systemitem">root</code> and a set of trusted
-users specified in <code class="filename">nix.conf</code> can specify arbitrary
-binary caches. So while unprivileged users may install packages from
-arbitrary Nix expressions, they may not get pre-built
-binaries.</p></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318465808"></a>Setting up the build users</h3></div></div></div><p>The <span class="emphasis"><em>build users</em></span> are the special UIDs under
-which builds are performed.  They should all be members of the
-<span class="emphasis"><em>build users group</em></span> <code class="literal">nixbld</code>.
-This group should have no other members.  The build users should not
-be members of any other group. On Linux, you can create the group and
-users as follows:
-
-</p><pre class="screen">
-$ groupadd -r nixbld
-$ for n in $(seq 1 10); do useradd -c "Nix build user $n" \
-    -d /var/empty -g nixbld -G nixbld -M -N -r -s "$(which nologin)" \
-    nixbld$n; done
-</pre><p>
-
-This creates 10 build users. There can never be more concurrent builds
-than the number of build users, so you may want to increase this if
-you expect to do many builds at the same time.</p><p>On Mac OS X, you can create the required group and users by
-running the following script:
-
-</p><pre class="programlisting">
-#! /bin/bash -e
-
-dseditgroup -o create nixbld -q
-
-gid=$(dscl . -read /Groups/nixbld | awk '($1 == "PrimaryGroupID:") {print $2 }')
-
-echo "created nixbld group with gid $gid"
-
-for i in $(seq 1 10); do
-    user=/Users/nixbld$i
-    uid="$((30000 + $i))"
-    dscl . create $user
-    dscl . create $user RealName "Nix build user $i"
-    dscl . create $user PrimaryGroupID "$gid"
-    dscl . create $user UserShell /usr/bin/false
-    dscl . create $user NFSHomeDirectory /var/empty
-    dscl . create $user UniqueID "$uid"
-    dseditgroup -o edit -a nixbld$i -t user nixbld
-    echo "created nixbld$i user with uid $uid"
-done
-</pre><p>
-
-</p></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318460736"></a>Running the daemon</h3></div></div></div><p>The <a class="link" href="#sec-nix-daemon" title="nix-daemon">Nix daemon</a> should be
-started as follows (as <code class="literal">root</code>):
-
-</p><pre class="screen">
-$ nix-daemon</pre><p>
-
-You’ll want to put that line somewhere in your system’s boot
-scripts.</p><p>To let unprivileged users use the daemon, they should set the
-<a class="link" href="#envar-remote"><code class="envar">NIX_REMOTE</code> environment
-variable</a> to <code class="literal">daemon</code>.  So you should put a
-line like
-
-</p><pre class="programlisting">
-export NIX_REMOTE=daemon</pre><p>
-
-into the users’ login scripts.</p></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318455312"></a>Restricting access</h3></div></div></div><p>To limit which users can perform Nix operations, you can use the
-permissions on the directory
-<code class="filename">/nix/var/nix/daemon-socket</code>.  For instance, if you
-want to restrict the use of Nix to the members of a group called
-<code class="literal">nix-users</code>, do
-
-</p><pre class="screen">
-$ chgrp nix-users /nix/var/nix/daemon-socket
-$ chmod ug=rwx,o= /nix/var/nix/daemon-socket
-</pre><p>
-
-This way, users who are not in the <code class="literal">nix-users</code> group
-cannot connect to the Unix domain socket
-<code class="filename">/nix/var/nix/daemon-socket/socket</code>, so they cannot
-perform Nix operations.</p></div></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="ch-env-variables"></a>Chapter 7. Environment Variables</h2></div></div></div><p>To use Nix, some environment variables should be set.  In
-particular, <code class="envar">PATH</code> should contain the directories
-<code class="filename"><em class="replaceable"><code>prefix</code></em>/bin</code> and
-<code class="filename">~/.nix-profile/bin</code>.  The first directory contains
-the Nix tools themselves, while <code class="filename">~/.nix-profile</code> is
-a symbolic link to the current <span class="emphasis"><em>user environment</em></span>
-(an automatically generated package consisting of symlinks to
-installed packages).  The simplest way to set the required environment
-variables is to include the file
-<code class="filename"><em class="replaceable"><code>prefix</code></em>/etc/profile.d/nix.sh</code>
-in your <code class="filename">~/.profile</code> (or similar), like this:</p><pre class="screen">
-source <em class="replaceable"><code>prefix</code></em>/etc/profile.d/nix.sh</pre></div></div><div class="part"><div class="titlepage"><div><div><h1 class="title"><a id="chap-package-management"></a>Part III. Package Management</h1></div></div></div><div class="partintro"><div></div><p>This chapter discusses how to do package management with Nix,
-i.e., how to obtain, install, upgrade, and erase packages.  This is
-the “user’s” perspective of the Nix system — people
-who want to <span class="emphasis"><em>create</em></span> packages should consult
-<a class="xref" href="#chap-writing-nix-expressions" title="Part IV. Writing Nix Expressions">Part IV, “Writing Nix Expressions”</a>.</p></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="ch-basic-package-mgmt"></a>Chapter 8. Basic Package Management</h2></div></div></div><p>The main command for package management is <a class="link" href="#sec-nix-env" title="nix-env"><span class="command"><strong>nix-env</strong></span></a>.  You can use
-it to install, upgrade, and erase packages, and to query what
-packages are installed or are available for installation.</p><p>In Nix, different users can have different “views”
-on the set of installed applications.  That is, there might be lots of
-applications present on the system (possibly in many different
-versions), but users can have a specific selection of those active —
-where “active” just means that it appears in a directory
-in the user’s <code class="envar">PATH</code>.  Such a view on the set of
-installed applications is called a <span class="emphasis"><em>user
-environment</em></span>, which is just a directory tree consisting of
-symlinks to the files of the active applications.  </p><p>Components are installed from a set of <span class="emphasis"><em>Nix
-expressions</em></span> that tell Nix how to build those packages,
-including, if necessary, their dependencies.  There is a collection of
-Nix expressions called the Nix Package collection that contains
-packages ranging from basic development stuff such as GCC and Glibc,
-to end-user applications like Mozilla Firefox.  (Nix is however not
-tied to the Nix Package collection; you could write your own Nix
-expressions based on it, or completely new ones.)</p><p>You can manually download the latest version of Nixpkgs from
-<a class="link" href="http://nixos.org/nixpkgs/download.html" target="_top">http://nixos.org/nixpkgs/download.html</a>. However,
-it’s much more convenient to use the Nixpkgs
-<span class="emphasis"><em>channel</em></span>, since it makes it easy to stay up to
-date with new versions of Nixpkgs. (Channels are described in more
-detail in <a class="xref" href="#sec-channels" title="Chapter 11. Channels">Chapter 11, <em>Channels</em></a>.) Nixpkgs is automatically
-added to your list of “subscribed” channels when you install
-Nix. If this is not the case for some reason, you can add it as
-follows:
-
-</p><pre class="screen">
-$ nix-channel --add https://nixos.org/channels/nixpkgs-unstable
-$ nix-channel --update
-</pre><p>
-
-</p><div class="note"><h3 class="title">Note</h3><p>On NixOS, you’re automatically subscribed to a NixOS
-channel corresponding to your NixOS major release
-(e.g. <code class="uri">http://nixos.org/channels/nixos-14.12</code>). A NixOS
-channel is identical to the Nixpkgs channel, except that it contains
-only Linux binaries and is updated only if a set of regression tests
-succeed.</p></div><p>You can view the set of available packages in Nixpkgs:
-
-</p><pre class="screen">
-$ nix-env -qa
-aterm-2.2
-bash-3.0
-binutils-2.15
-bison-1.875d
-blackdown-1.4.2
-bzip2-1.0.2
-…</pre><p>
-
-The flag <code class="option">-q</code> specifies a query operation, and
-<code class="option">-a</code> means that you want to show the “available” (i.e.,
-installable) packages, as opposed to the installed packages. If you
-downloaded Nixpkgs yourself, or if you checked it out from GitHub,
-then you need to pass the path to your Nixpkgs tree using the
-<code class="option">-f</code> flag:
-
-</p><pre class="screen">
-$ nix-env -qaf <em class="replaceable"><code>/path/to/nixpkgs</code></em>
-</pre><p>
-
-where <em class="replaceable"><code>/path/to/nixpkgs</code></em> is where you’ve
-unpacked or checked out Nixpkgs.</p><p>You can select specific packages by name:
-
-</p><pre class="screen">
-$ nix-env -qa firefox
-firefox-34.0.5
-firefox-with-plugins-34.0.5
-</pre><p>
-
-and using regular expressions:
-
-</p><pre class="screen">
-$ nix-env -qa 'firefox.*'
-</pre><p>
-
-</p><p>It is also possible to see the <span class="emphasis"><em>status</em></span> of
-available packages, i.e., whether they are installed into the user
-environment and/or present in the system:
-
-</p><pre class="screen">
-$ nix-env -qas
-…
--PS bash-3.0
---S binutils-2.15
-IPS bison-1.875d
-…</pre><p>
-
-The first character (<code class="literal">I</code>) indicates whether the
-package is installed in your current user environment.  The second
-(<code class="literal">P</code>) indicates whether it is present on your system
-(in which case installing it into your user environment would be a
-very quick operation).  The last one (<code class="literal">S</code>) indicates
-whether there is a so-called <span class="emphasis"><em>substitute</em></span> for the
-package, which is Nix’s mechanism for doing binary deployment.  It
-just means that Nix knows that it can fetch a pre-built package from
-somewhere (typically a network server) instead of building it
-locally.</p><p>You can install a package using <code class="literal">nix-env -i</code>.
-For instance,
-
-</p><pre class="screen">
-$ nix-env -i subversion</pre><p>
-
-will install the package called <code class="literal">subversion</code> (which
-is, of course, the <a class="link" href="http://subversion.tigris.org/" target="_top">Subversion version
-management system</a>).</p><div class="note"><h3 class="title">Note</h3><p>When you ask Nix to install a package, it will first try
-to get it in pre-compiled form from a <span class="emphasis"><em>binary
-cache</em></span>. By default, Nix will use the binary cache
-<code class="uri">https://cache.nixos.org</code>; it contains binaries for most
-packages in Nixpkgs. Only if no binary is available in the binary
-cache, Nix will build the package from source. So if <code class="literal">nix-env
--i subversion</code> results in Nix building stuff from source,
-then either the package is not built for your platform by the Nixpkgs
-build servers, or your version of Nixpkgs is too old or too new. For
-instance, if you have a very recent checkout of Nixpkgs, then the
-Nixpkgs build servers may not have had a chance to build everything
-and upload the resulting binaries to
-<code class="uri">https://cache.nixos.org</code>. The Nixpkgs channel is only
-updated after all binaries have been uploaded to the cache, so if you
-stick to the Nixpkgs channel (rather than using a Git checkout of the
-Nixpkgs tree), you will get binaries for most packages.</p></div><p>Naturally, packages can also be uninstalled:
-
-</p><pre class="screen">
-$ nix-env -e subversion</pre><p>
-
-</p><p>Upgrading to a new version is just as easy.  If you have a new
-release of Nix Packages, you can do:
-
-</p><pre class="screen">
-$ nix-env -u subversion</pre><p>
-
-This will <span class="emphasis"><em>only</em></span> upgrade Subversion if there is a
-“newer” version in the new set of Nix expressions, as
-defined by some pretty arbitrary rules regarding ordering of version
-numbers (which generally do what you’d expect of them).  To just
-unconditionally replace Subversion with whatever version is in the Nix
-expressions, use <em class="parameter"><code>-i</code></em> instead of
-<em class="parameter"><code>-u</code></em>; <em class="parameter"><code>-i</code></em> will remove
-whatever version is already installed.</p><p>You can also upgrade all packages for which there are newer
-versions:
-
-</p><pre class="screen">
-$ nix-env -u</pre><p>
-
-</p><p>Sometimes it’s useful to be able to ask what
-<span class="command"><strong>nix-env</strong></span> would do, without actually doing it.  For
-instance, to find out what packages would be upgraded by
-<code class="literal">nix-env -u</code>, you can do
-
-</p><pre class="screen">
-$ nix-env -u --dry-run
-(dry run; not doing anything)
-upgrading `libxslt-1.1.0' to `libxslt-1.1.10'
-upgrading `graphviz-1.10' to `graphviz-1.12'
-upgrading `coreutils-5.0' to `coreutils-5.2.1'</pre><p>
-
-</p></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="sec-profiles"></a>Chapter 9. Profiles</h2></div></div></div><p>Profiles and user environments are Nix’s mechanism for
-implementing the ability to allow different users to have different
-configurations, and to do atomic upgrades and rollbacks.  To
-understand how they work, it’s useful to know a bit about how Nix
-works.  In Nix, packages are stored in unique locations in the
-<span class="emphasis"><em>Nix store</em></span> (typically,
-<code class="filename">/nix/store</code>).  For instance, a particular version
-of the Subversion package might be stored in a directory
-<code class="filename">/nix/store/dpmvp969yhdqs7lm2r1a3gng7pyq6vy4-subversion-1.1.3/</code>,
-while another version might be stored in
-<code class="filename">/nix/store/5mq2jcn36ldlmh93yj1n8s9c95pj7c5s-subversion-1.1.2</code>.
-The long strings prefixed to the directory names are cryptographic
-hashes<a href="#ftn.idm140737318402032" class="footnote" id="idm140737318402032"><sup class="footnote">[1]</sup></a> of
-<span class="emphasis"><em>all</em></span> inputs involved in building the package —
-sources, dependencies, compiler flags, and so on.  So if two
-packages differ in any way, they end up in different locations in
-the file system, so they don’t interfere with each other.  <a class="xref" href="#fig-user-environments" title="Figure 9.1. User environments">Figure 9.1, “User environments”</a> shows a part of a typical Nix
-store.</p><div class="figure"><a id="fig-user-environments"></a><p class="title"><strong>Figure 9.1. User environments</strong></p><div class="figure-contents"><div class="mediaobject"><img src="figures/user-environments.png" alt="User environments" /></div></div></div><br class="figure-break" /><p>Of course, you wouldn’t want to type
-
-</p><pre class="screen">
-$ /nix/store/dpmvp969yhdq...-subversion-1.1.3/bin/svn</pre><p>
-
-every time you want to run Subversion.  Of course we could set up the
-<code class="envar">PATH</code> environment variable to include the
-<code class="filename">bin</code> directory of every package we want to use,
-but this is not very convenient since changing <code class="envar">PATH</code>
-doesn’t take effect for already existing processes.  The solution Nix
-uses is to create directory trees of symlinks to
-<span class="emphasis"><em>activated</em></span> packages.  These are called
-<span class="emphasis"><em>user environments</em></span> and they are packages
-themselves (though automatically generated by
-<span class="command"><strong>nix-env</strong></span>), so they too reside in the Nix store.  For
-instance, in <a class="xref" href="#fig-user-environments" title="Figure 9.1. User environments">Figure 9.1, “User environments”</a> the user
-environment <code class="filename">/nix/store/0c1p5z4kda11...-user-env</code>
-contains a symlink to just Subversion 1.1.2 (arrows in the figure
-indicate symlinks).  This would be what we would obtain if we had done
-
-</p><pre class="screen">
-$ nix-env -i subversion</pre><p>
-
-on a set of Nix expressions that contained Subversion 1.1.2.</p><p>This doesn’t in itself solve the problem, of course; you
-wouldn’t want to type
-<code class="filename">/nix/store/0c1p5z4kda11...-user-env/bin/svn</code>
-either.  That’s why there are symlinks outside of the store that point
-to the user environments in the store; for instance, the symlinks
-<code class="filename">default-42-link</code> and
-<code class="filename">default-43-link</code> in the example.  These are called
-<span class="emphasis"><em>generations</em></span> since every time you perform a
-<span class="command"><strong>nix-env</strong></span> operation, a new user environment is
-generated based on the current one.  For instance, generation 43 was
-created from generation 42 when we did
-
-</p><pre class="screen">
-$ nix-env -i subversion firefox</pre><p>
-
-on a set of Nix expressions that contained Firefox and a new version
-of Subversion.</p><p>Generations are grouped together into
-<span class="emphasis"><em>profiles</em></span> so that different users don’t interfere
-with each other if they don’t want to.  For example:
-
-</p><pre class="screen">
-$ ls -l /nix/var/nix/profiles/
-...
-lrwxrwxrwx  1 eelco ... default-42-link -&gt; /nix/store/0c1p5z4kda11...-user-env
-lrwxrwxrwx  1 eelco ... default-43-link -&gt; /nix/store/3aw2pdyx2jfc...-user-env
-lrwxrwxrwx  1 eelco ... default -&gt; default-43-link</pre><p>
-
-This shows a profile called <code class="filename">default</code>.  The file
-<code class="filename">default</code> itself is actually a symlink that points
-to the current generation.  When we do a <span class="command"><strong>nix-env</strong></span>
-operation, a new user environment and generation link are created
-based on the current one, and finally the <code class="filename">default</code>
-symlink is made to point at the new generation.  This last step is
-atomic on Unix, which explains how we can do atomic upgrades.  (Note
-that the building/installing of new packages doesn’t interfere in
-any way with old packages, since they are stored in different
-locations in the Nix store.)</p><p>If you find that you want to undo a <span class="command"><strong>nix-env</strong></span>
-operation, you can just do
-
-</p><pre class="screen">
-$ nix-env --rollback</pre><p>
-
-which will just make the current generation link point at the previous
-link.  E.g., <code class="filename">default</code> would be made to point at
-<code class="filename">default-42-link</code>.  You can also switch to a
-specific generation:
-
-</p><pre class="screen">
-$ nix-env --switch-generation 43</pre><p>
-
-which in this example would roll forward to generation 43 again.  You
-can also see all available generations:
-
-</p><pre class="screen">
-$ nix-env --list-generations</pre><p>You generally wouldn’t have
-<code class="filename">/nix/var/nix/profiles/<em class="replaceable"><code>some-profile</code></em>/bin</code>
-in your <code class="envar">PATH</code>.  Rather, there is a symlink
-<code class="filename">~/.nix-profile</code> that points to your current
-profile.  This means that you should put
-<code class="filename">~/.nix-profile/bin</code> in your <code class="envar">PATH</code>
-(and indeed, that’s what the initialisation script
-<code class="filename">/nix/etc/profile.d/nix.sh</code> does).  This makes it
-easier to switch to a different profile.  You can do that using the
-command <span class="command"><strong>nix-env --switch-profile</strong></span>:
-
-</p><pre class="screen">
-$ nix-env --switch-profile /nix/var/nix/profiles/my-profile
-
-$ nix-env --switch-profile /nix/var/nix/profiles/default</pre><p>
-
-These commands switch to the <code class="filename">my-profile</code> and
-default profile, respectively.  If the profile doesn’t exist, it will
-be created automatically.  You should be careful about storing a
-profile in another location than the <code class="filename">profiles</code>
-directory, since otherwise it might not be used as a root of the
-garbage collector (see <a class="xref" href="#sec-garbage-collection" title="Chapter 10. Garbage Collection">Chapter 10, <em>Garbage Collection</em></a>).</p><p>All <span class="command"><strong>nix-env</strong></span> operations work on the profile
-pointed to by <span class="command"><strong>~/.nix-profile</strong></span>, but you can override
-this using the <code class="option">--profile</code> option (abbreviation
-<code class="option">-p</code>):
-
-</p><pre class="screen">
-$ nix-env -p /nix/var/nix/profiles/other-profile -i subversion</pre><p>
-
-This will <span class="emphasis"><em>not</em></span> change the
-<span class="command"><strong>~/.nix-profile</strong></span> symlink.</p><div class="footnotes"><br /><hr style="width:100; text-align:left;margin-left: 0" /><div id="ftn.idm140737318402032" class="footnote"><p><a href="#idm140737318402032" class="para"><sup class="para">[1] </sup></a>160-bit truncations of SHA-256 hashes encoded in
-a base-32 notation, to be precise.</p></div></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="sec-garbage-collection"></a>Chapter 10. Garbage Collection</h2></div></div></div><p><span class="command"><strong>nix-env</strong></span> operations such as upgrades
-(<code class="option">-u</code>) and uninstall (<code class="option">-e</code>) never
-actually delete packages from the system.  All they do (as shown
-above) is to create a new user environment that no longer contains
-symlinks to the “deleted” packages.</p><p>Of course, since disk space is not infinite, unused packages
-should be removed at some point.  You can do this by running the Nix
-garbage collector.  It will remove from the Nix store any package
-not used (directly or indirectly) by any generation of any
-profile.</p><p>Note however that as long as old generations reference a
-package, it will not be deleted.  After all, we wouldn’t be able to
-do a rollback otherwise.  So in order for garbage collection to be
-effective, you should also delete (some) old generations.  Of course,
-this should only be done if you are certain that you will not need to
-roll back.</p><p>To delete all old (non-current) generations of your current
-profile:
-
-</p><pre class="screen">
-$ nix-env --delete-generations old</pre><p>
-
-Instead of <code class="literal">old</code> you can also specify a list of
-generations, e.g.,
-
-</p><pre class="screen">
-$ nix-env --delete-generations 10 11 14</pre><p>
-
-To delete all generations older than a specified number of days
-(except the current generation), use the <code class="literal">d</code>
-suffix. For example,
-
-</p><pre class="screen">
-$ nix-env --delete-generations 14d</pre><p>
-
-deletes all generations older than two weeks.</p><p>After removing appropriate old generations you can run the
-garbage collector as follows:
-
-</p><pre class="screen">
-$ nix-store --gc</pre><p>
-
-If you are feeling uncertain, you can also first view what files would
-be deleted:
-
-</p><pre class="screen">
-$ nix-store --gc --print-dead</pre><p>
-
-Likewise, the option <code class="option">--print-live</code> will show the paths
-that <span class="emphasis"><em>won’t</em></span> be deleted.</p><p>There is also a convenient little utility
-<span class="command"><strong>nix-collect-garbage</strong></span>, which when invoked with the
-<code class="option">-d</code> (<code class="option">--delete-old</code>) switch deletes all
-old generations of all profiles in
-<code class="filename">/nix/var/nix/profiles</code>.  So
-
-</p><pre class="screen">
-$ nix-collect-garbage -d</pre><p>
-
-is a quick and easy way to clean up your system.</p><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-gc-roots"></a>10.1. Garbage Collector Roots</h2></div></div></div><p>The roots of the garbage collector are all store paths to which
-there are symlinks in the directory
-<code class="filename"><em class="replaceable"><code>prefix</code></em>/nix/var/nix/gcroots</code>.
-For instance, the following command makes the path
-<code class="filename">/nix/store/d718ef...-foo</code> a root of the collector:
-
-</p><pre class="screen">
-$ ln -s /nix/store/d718ef...-foo /nix/var/nix/gcroots/bar</pre><p>
-	
-That is, after this command, the garbage collector will not remove
-<code class="filename">/nix/store/d718ef...-foo</code> or any of its
-dependencies.</p><p>Subdirectories of
-<code class="filename"><em class="replaceable"><code>prefix</code></em>/nix/var/nix/gcroots</code>
-are also searched for symlinks.  Symlinks to non-store paths are
-followed and searched for roots, but symlinks to non-store paths
-<span class="emphasis"><em>inside</em></span> the paths reached in that way are not
-followed to prevent infinite recursion.</p></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="sec-channels"></a>Chapter 11. Channels</h2></div></div></div><p>If you want to stay up to date with a set of packages, it’s not
-very convenient to manually download the latest set of Nix expressions
-for those packages and upgrade using <span class="command"><strong>nix-env</strong></span>.
-Fortunately, there’s a better way: <span class="emphasis"><em>Nix
-channels</em></span>.</p><p>A Nix channel is just a URL that points to a place that contains
-a set of Nix expressions and a manifest.  Using the command <a class="link" href="#sec-nix-channel" title="nix-channel"><span class="command"><strong>nix-channel</strong></span></a> you
-can automatically stay up to date with whatever is available at that
-URL.</p><p>You can “subscribe” to a channel using
-<span class="command"><strong>nix-channel --add</strong></span>, e.g.,
-
-</p><pre class="screen">
-$ nix-channel --add https://nixos.org/channels/nixpkgs-unstable</pre><p>
-
-subscribes you to a channel that always contains that latest version
-of the Nix Packages collection.  (Subscribing really just means that
-the URL is added to the file <code class="filename">~/.nix-channels</code>,
-where it is read by subsequent calls to <span class="command"><strong>nix-channel
---update</strong></span>.) You can “unsubscribe” using <span class="command"><strong>nix-channel
---remove</strong></span>:
-
-</p><pre class="screen">
-$ nix-channel --remove nixpkgs
-</pre><p>
-</p><p>To obtain the latest Nix expressions available in a channel, do
-
-</p><pre class="screen">
-$ nix-channel --update</pre><p>
-
-This downloads and unpacks the Nix expressions in every channel
-(downloaded from <code class="literal"><em class="replaceable"><code>url</code></em>/nixexprs.tar.bz2</code>).
-It also makes the union of each channel’s Nix expressions available by
-default to <span class="command"><strong>nix-env</strong></span> operations (via the symlink
-<code class="filename">~/.nix-defexpr/channels</code>).  Consequently, you can
-then say
-
-</p><pre class="screen">
-$ nix-env -u</pre><p>
-
-to upgrade all packages in your profile to the latest versions
-available in the subscribed channels.</p></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="sec-one-click"></a>Chapter 12. One-Click Installation</h2></div></div></div><p>Often, when you want to install a specific package (e.g., from
-the <a class="link" href="http://nixos.org/nixpkgs/" target="_top">Nix
-Packages collection</a>), subscribing to a channel is a bit
-cumbersome.  And channels don’t help you at all if you want to install
-an older version of a package than the one provided by the current
-contents of the channel, or a package that has been removed from the
-channel.  That’s when <span class="emphasis"><em>one-click installs</em></span> come in
-handy: you can just go to the web page that contains the package,
-click on it, and it will be installed with all the necessary
-dependencies.</p><p>For instance, you can go to <a class="link" href="http://hydra.nixos.org/jobset/nixpkgs/trunk/channel/latest" target="_top">http://hydra.nixos.org/jobset/nixpkgs/trunk/channel/latest</a> and click on any link for the individual packages for your
-platform.  The first time you do this, your browser will ask what to
-do with <code class="literal">application/nix-package</code> files.  You should
-open them with <code class="filename">/nix/bin/nix-install-package</code>.
-This will open a window that asks you to confirm that you want to
-install the package.  When you answer <code class="literal">Y</code>, the
-package and all its dependencies will be installed.  This is a binary
-deployment mechanism — you get packages pre-compiled for the selected
-platform type.</p><p>You can also install <code class="literal">application/nix-package</code>
-files from the command line directly.  See <a class="xref" href="#sec-nix-install-package" title="nix-install-package"><span class="refentrytitle">nix-install-package</span>(1)</a> for details.</p></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="sec-sharing-packages"></a>Chapter 13. Sharing Packages Between Machines</h2></div></div></div><p>Sometimes you want to copy a package from one machine to
-another.  Or, you want to install some packages and you know that
-another machine already has some or all of those packages or their
-dependencies.  In that case there are mechanisms to quickly copy
-packages between machines.</p><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-binary-cache-substituter"></a>13.1. Serving a Nix store via HTTP</h2></div></div></div><p>You can easily share the Nix store of a machine via HTTP. This
-allows other machines to fetch store paths from that machine to speed
-up installations. It uses the same <span class="emphasis"><em>binary cache</em></span>
-mechanism that Nix usually uses to fetch pre-built binaries from
-<code class="uri">https://cache.nixos.org</code>.</p><p>The daemon that handles binary cache requests via HTTP,
-<span class="command"><strong>nix-serve</strong></span>, is not part of the Nix distribution, but
-you can install it from Nixpkgs:
-
-</p><pre class="screen">
-$ nix-env -i nix-serve
-</pre><p>
-
-You can then start the server, listening for HTTP connections on
-whatever port you like:
-
-</p><pre class="screen">
-$ nix-serve -p 8080
-</pre><p>
-
-To check whether it works, try the following on the client:
-
-</p><pre class="screen">
-$ curl http://avalon:8080/nix-cache-info
-</pre><p>
-
-which should print something like:
-
-</p><pre class="screen">
-StoreDir: /nix/store
-WantMassQuery: 1
-Priority: 30
-</pre><p>
-
-</p><p>On the client side, you can tell Nix to use your binary cache
-using <code class="option">--option extra-binary-caches</code>, e.g.:
-
-</p><pre class="screen">
-$ nix-env -i firefox --option extra-binary-caches http://avalon:8080/
-</pre><p>
-
-The option <code class="option">extra-binary-caches</code> tells Nix to use this
-binary cache in addition to your default caches, such as
-<code class="uri">https://cache.nixos.org</code>. Thus, for any path in the closure
-of Firefox, Nix will first check if the path is available on the
-server <code class="literal">avalon</code> or another binary caches. If not, it
-will fall back to building from source.</p><p>You can also tell Nix to always use your binary cache by adding
-a line to the <code class="filename"><a class="filename" href="#sec-conf-file" title="nix.conf">nix.conf</a></code>
-configuration file like this:
-
-</p><pre class="programlisting">
-binary-caches = http://avalon:8080/ https://cache.nixos.org/
-</pre><p>
-
-</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-copy-closure"></a>13.2. Copying Closures Via SSH</h2></div></div></div><p>The command <span class="command"><strong><a class="command" href="#sec-nix-copy-closure" title="nix-copy-closure">nix-copy-closure</a></strong></span> copies a Nix
-store path along with all its dependencies to or from another machine
-via the SSH protocol.  It doesn’t copy store paths that are already
-present on the target machine.  For example, the following command
-copies Firefox with all its dependencies:
-
-</p><pre class="screen">
-$ nix-copy-closure --to alice@itchy.example.org $(type -p firefox)</pre><p>
-
-See <a class="xref" href="#sec-nix-copy-closure" title="nix-copy-closure"><span class="refentrytitle">nix-copy-closure</span>(1)</a> for details.</p><p>With <span class="command"><strong><a class="command" href="#refsec-nix-store-export" title="Operation --export">nix-store
---export</a></strong></span> and <span class="command"><strong><a class="command" href="#refsec-nix-store-import" title="Operation --import">nix-store --import</a></strong></span> you can
-write the closure of a store path (that is, the path and all its
-dependencies) to a file, and then unpack that file into another Nix
-store.  For example,
-
-</p><pre class="screen">
-$ nix-store --export $(nix-store -qR $(type -p firefox)) &gt; firefox.closure</pre><p>
-
-writes the closure of Firefox to a file.  You can then copy this file
-to another machine and install the closure:
-
-</p><pre class="screen">
-$ nix-store --import &lt; firefox.closure</pre><p>
-
-Any store paths in the closure that are already present in the target
-store are ignored.  It is also possible to pipe the export into
-another command, e.g. to copy and install a closure directly to/on
-another machine:
-
-</p><pre class="screen">
-$ nix-store --export $(nix-store -qR $(type -p firefox)) | bzip2 | \
-    ssh alice@itchy.example.org "bunzip2 | nix-store --import"</pre><p>
-
-However, <span class="command"><strong>nix-copy-closure</strong></span> is generally more
-efficient because it only copies paths that are not already present in
-the target Nix store.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-ssh-substituter"></a>13.3. Serving a Nix store via SSH</h2></div></div></div><p>You can tell Nix to automatically fetch needed binaries from a
-remote Nix store via SSH. For example, the following installs Firefox,
-automatically fetching any store paths in Firefox’s closure if they
-are available on the server <code class="literal">avalon</code>:
-
-</p><pre class="screen">
-$ nix-env -i firefox --option ssh-substituter-hosts alice@avalon
-</pre><p>
-
-This works similar to the binary cache substituter that Nix usually
-uses, only using SSH instead of HTTP: if a store path
-<code class="literal">P</code> is needed, Nix will first check if it’s available
-in the Nix store on <code class="literal">avalon</code>. If not, it will fall
-back to using the binary cache substituter, and then to building from
-source.</p><div class="note"><h3 class="title">Note</h3><p>The SSH substituter currently does not allow you to enter
-an SSH passphrase interactively. Therefore, you should use
-<span class="command"><strong>ssh-add</strong></span> to load the decrypted private key into
-<span class="command"><strong>ssh-agent</strong></span>.</p></div><p>You can also copy the closure of some store path, without
-installing it into your profile, e.g.
-
-</p><pre class="screen">
-$ nix-store -r /nix/store/m85bxg…-firefox-34.0.5 --option ssh-substituter-hosts alice@avalon
-</pre><p>
-
-This is essentially equivalent to doing
-
-</p><pre class="screen">
-$ nix-copy-closure --from alice@avalon /nix/store/m85bxg…-firefox-34.0.5
-</pre><p>
-
-</p><p>You can use SSH’s <span class="emphasis"><em>forced command</em></span> feature to
-set up a restricted user account for SSH substituter access, allowing
-read-only access to the local Nix store, but nothing more. For
-example, add the following lines to <code class="filename">sshd_config</code>
-to restrict the user <code class="literal">nix-ssh</code>:
-
-</p><pre class="programlisting">
-Match User nix-ssh
-  AllowAgentForwarding no
-  AllowTcpForwarding no
-  PermitTTY no
-  PermitTunnel no
-  X11Forwarding no
-  ForceCommand nix-store --serve
-Match All
-</pre><p>
-
-On NixOS, you can accomplish the same by adding the following to your
-<code class="filename">configuration.nix</code>:
-
-</p><pre class="programlisting">
-nix.sshServe.enable = true;
-nix.sshServe.keys = [ "ssh-dss AAAAB3NzaC1k... bob@example.org" ];
-</pre><p>
-
-where the latter line lists the public keys of users that are allowed
-to connect.</p></div></div></div><div class="part"><div class="titlepage"><div><div><h1 class="title"><a id="chap-writing-nix-expressions"></a>Part IV. Writing Nix Expressions</h1></div></div></div><div class="partintro"><div></div><p>This chapter shows you how to write Nix expressions, which 
-instruct Nix how to build packages.  It starts with a
-simple example (a Nix expression for GNU Hello), and then moves
-on to a more in-depth look at the Nix expression language.</p><div class="note"><h3 class="title">Note</h3><p>This chapter is mostly about the Nix expression language.
-For more extensive information on adding packages to the Nix Packages
-collection (such as functions in the standard environment and coding
-conventions), please consult <a class="link" href="http://nixos.org/nixpkgs/manual/" target="_top">its
-manual</a>.</p></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="ch-simple-expression"></a>Chapter 14. A Simple Nix Expression</h2></div></div></div><p>This section shows how to add and test the <a class="link" href="http://www.gnu.org/software/hello/hello.html" target="_top">GNU Hello
-package</a> to the Nix Packages collection.  Hello is a program
-that prints out the text <span class="quote">“<span class="quote">Hello, world!</span>”</span>.</p><p>To add a package to the Nix Packages collection, you generally
-need to do three things:
-
-</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p>Write a Nix expression for the package.  This is a
-  file that describes all the inputs involved in building the package,
-  such as dependencies, sources, and so on.</p></li><li class="listitem"><p>Write a <span class="emphasis"><em>builder</em></span>.  This is a
-  shell script<a href="#ftn.idm140737318285296" class="footnote" id="idm140737318285296"><sup class="footnote">[2]</sup></a> that actually builds the package from
-  the inputs.</p></li><li class="listitem"><p>Add the package to the file
-  <code class="filename">pkgs/top-level/all-packages.nix</code>.  The Nix
-  expression written in the first step is a
-  <span class="emphasis"><em>function</em></span>; it requires other packages in order
-  to build it.  In this step you put it all together, i.e., you call
-  the function with the right arguments to build the actual
-  package.</p></li></ol></div><p>
-
-</p><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-expression-syntax"></a>14.1. Expression Syntax</h2></div></div></div><div class="example"><a id="ex-hello-nix"></a><p class="title"><strong>Example 14.1. Nix expression for GNU Hello
-(<code class="filename">default.nix</code>)</strong></p><div class="example-contents"><pre class="programlisting">
-{ stdenv, fetchurl, perl }: <a id="ex-hello-nix-co-1"></a><span><img src="images/callouts/1.gif" alt="1" border="0" /></span>
-
-stdenv.mkDerivation { <a id="ex-hello-nix-co-2"></a><span><img src="images/callouts/2.gif" alt="2" border="0" /></span>
-  name = "hello-2.1.1"; <a id="ex-hello-nix-co-3"></a><span><img src="images/callouts/3.gif" alt="3" border="0" /></span>
-  builder = ./builder.sh; <a id="ex-hello-nix-co-4"></a><span><img src="images/callouts/4.gif" alt="4" border="0" /></span>
-  src = fetchurl { <a id="ex-hello-nix-co-5"></a><span><img src="images/callouts/5.gif" alt="5" border="0" /></span>
-    url = ftp://ftp.nluug.nl/pub/gnu/hello/hello-2.1.1.tar.gz;
-    md5 = "70c9ccf9fac07f762c24f2df2290784d";
-  };
-  inherit perl; <a id="ex-hello-nix-co-6"></a><span><img src="images/callouts/6.gif" alt="6" border="0" /></span>
-}</pre></div></div><br class="example-break" /><p><a class="xref" href="#ex-hello-nix" title="Example 14.1. Nix expression for GNU Hello (default.nix)">Example 14.1, “Nix expression for GNU Hello
-(<code class="filename">default.nix</code>)”</a> shows a Nix expression for GNU
-Hello.  It's actually already in the Nix Packages collection in
-<code class="filename">pkgs/applications/misc/hello/ex-1/default.nix</code>.
-It is customary to place each package in a separate directory and call
-the single Nix expression in that directory
-<code class="filename">default.nix</code>.  The file has the following elements
-(referenced from the figure by number):
-
-</p><div class="calloutlist"><table border="0" summary="Callout list"><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-nix-co-1"><span><img src="images/callouts/1.gif" alt="1" border="0" /></span></a> </p></td><td valign="top" align="left"><p>This states that the expression is a
-    <span class="emphasis"><em>function</em></span> that expects to be called with three
-    arguments: <code class="varname">stdenv</code>, <code class="varname">fetchurl</code>,
-    and <code class="varname">perl</code>.  They are needed to build Hello, but
-    we don't know how to build them here; that's why they are function
-    arguments.  <code class="varname">stdenv</code> is a package that is used
-    by almost all Nix Packages packages; it provides a
-    <span class="quote">“<span class="quote">standard</span>”</span> environment consisting of the things you
-    would expect in a basic Unix environment: a C/C++ compiler (GCC,
-    to be precise), the Bash shell, fundamental Unix tools such as
-    <span class="command"><strong>cp</strong></span>, <span class="command"><strong>grep</strong></span>,
-    <span class="command"><strong>tar</strong></span>, etc.  <code class="varname">fetchurl</code> is a
-    function that downloads files.  <code class="varname">perl</code> is the
-    Perl interpreter.</p><p>Nix functions generally have the form <code class="literal">{ x, y, ...,
-    z }: e</code> where <code class="varname">x</code>, <code class="varname">y</code>,
-    etc. are the names of the expected arguments, and where
-    <em class="replaceable"><code>e</code></em> is the body of the function.  So
-    here, the entire remainder of the file is the body of the
-    function; when given the required arguments, the body should
-    describe how to build an instance of the Hello package.</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-nix-co-2"><span><img src="images/callouts/2.gif" alt="2" border="0" /></span></a> </p></td><td valign="top" align="left"><p>So we have to build a package.  Building something from
-    other stuff is called a <span class="emphasis"><em>derivation</em></span> in Nix (as
-    opposed to sources, which are built by humans instead of
-    computers).  We perform a derivation by calling
-    <code class="varname">stdenv.mkDerivation</code>.
-    <code class="varname">mkDerivation</code> is a function provided by
-    <code class="varname">stdenv</code> that builds a package from a set of
-    <span class="emphasis"><em>attributes</em></span>.  A set is just a list of
-    key/value pairs where each key is a string and each value is an
-    arbitrary Nix expression.  They take the general form <code class="literal">{
-    <em class="replaceable"><code>name1</code></em> =
-    <em class="replaceable"><code>expr1</code></em>; <em class="replaceable"><code>...</code></em>
-    <em class="replaceable"><code>nameN</code></em> =
-    <em class="replaceable"><code>exprN</code></em>; }</code>.</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-nix-co-3"><span><img src="images/callouts/3.gif" alt="3" border="0" /></span></a> </p></td><td valign="top" align="left"><p>The attribute <code class="varname">name</code> specifies the symbolic
-    name and version of the package.  Nix doesn't really care about
-    these things, but they are used by for instance <span class="command"><strong>nix-env
-    -q</strong></span> to show a <span class="quote">“<span class="quote">human-readable</span>”</span> name for
-    packages.  This attribute is required by
-    <code class="varname">mkDerivation</code>.</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-nix-co-4"><span><img src="images/callouts/4.gif" alt="4" border="0" /></span></a> </p></td><td valign="top" align="left"><p>The attribute <code class="varname">builder</code> specifies the
-    builder.  This attribute can sometimes be omitted, in which case
-    <code class="varname">mkDerivation</code> will fill in a default builder
-    (which does a <code class="literal">configure; make; make install</code>, in
-    essence).  Hello is sufficiently simple that the default builder
-    would suffice, but in this case, we will show an actual builder
-    for educational purposes.  The value
-    <span class="command"><strong>./builder.sh</strong></span> refers to the shell script shown
-    in <a class="xref" href="#ex-hello-builder" title="Example 14.2. Build script for GNU Hello (builder.sh)">Example 14.2, “Build script for GNU Hello
-(<code class="filename">builder.sh</code>)”</a>, discussed below.</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-nix-co-5"><span><img src="images/callouts/5.gif" alt="5" border="0" /></span></a> </p></td><td valign="top" align="left"><p>The builder has to know what the sources of the package
-    are.  Here, the attribute <code class="varname">src</code> is bound to the
-    result of a call to the <span class="command"><strong>fetchurl</strong></span> function.
-    Given a URL and an MD5 hash of the expected contents of the file
-    at that URL, this function builds a derivation that downloads the
-    file and checks its hash.  So the sources are a dependency that
-    like all other dependencies is built before Hello itself is
-    built.</p><p>Instead of <code class="varname">src</code> any other name could have
-    been used, and in fact there can be any number of sources (bound
-    to different attributes).  However, <code class="varname">src</code> is
-    customary, and it's also expected by the default builder (which we
-    don't use in this example).</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-nix-co-6"><span><img src="images/callouts/6.gif" alt="6" border="0" /></span></a> </p></td><td valign="top" align="left"><p>Since the derivation requires Perl, we have to pass the
-    value of the <code class="varname">perl</code> function argument to the
-    builder.  All attributes in the set are actually passed as
-    environment variables to the builder, so declaring an attribute
-
-    </p><pre class="programlisting">
-perl = perl;</pre><p>
-
-    will do the trick: it binds an attribute <code class="varname">perl</code>
-    to the function argument which also happens to be called
-    <code class="varname">perl</code>.  However, it looks a bit silly, so there
-    is a shorter syntax.  The <code class="literal">inherit</code> keyword
-    causes the specified attributes to be bound to whatever variables
-    with the same name happen to be in scope.</p></td></tr></table></div><p>
-
-</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-build-script"></a>14.2. Build Script</h2></div></div></div><div class="example"><a id="ex-hello-builder"></a><p class="title"><strong>Example 14.2. Build script for GNU Hello
-(<code class="filename">builder.sh</code>)</strong></p><div class="example-contents"><pre class="programlisting">
-source $stdenv/setup <a id="ex-hello-builder-co-1"></a><span><img src="images/callouts/1.gif" alt="1" border="0" /></span>
-
-PATH=$perl/bin:$PATH <a id="ex-hello-builder-co-2"></a><span><img src="images/callouts/2.gif" alt="2" border="0" /></span>
-
-tar xvfz $src <a id="ex-hello-builder-co-3"></a><span><img src="images/callouts/3.gif" alt="3" border="0" /></span>
-cd hello-*
-./configure --prefix=$out <a id="ex-hello-builder-co-4"></a><span><img src="images/callouts/4.gif" alt="4" border="0" /></span>
-make <a id="ex-hello-builder-co-5"></a><span><img src="images/callouts/5.gif" alt="5" border="0" /></span>
-make install</pre></div></div><br class="example-break" /><p><a class="xref" href="#ex-hello-builder" title="Example 14.2. Build script for GNU Hello (builder.sh)">Example 14.2, “Build script for GNU Hello
-(<code class="filename">builder.sh</code>)”</a> shows the builder referenced
-from Hello's Nix expression (stored in
-<code class="filename">pkgs/applications/misc/hello/ex-1/builder.sh</code>).
-The builder can actually be made a lot shorter by using the
-<span class="emphasis"><em>generic builder</em></span> functions provided by
-<code class="varname">stdenv</code>, but here we write out the build steps to
-elucidate what a builder does.  It performs the following
-steps:</p><div class="calloutlist"><table border="0" summary="Callout list"><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-builder-co-1"><span><img src="images/callouts/1.gif" alt="1" border="0" /></span></a> </p></td><td valign="top" align="left"><p>When Nix runs a builder, it initially completely clears the
-    environment (except for the attributes declared in the
-    derivation).  For instance, the <code class="envar">PATH</code> variable is
-    empty<a href="#ftn.idm140737318232160" class="footnote" id="idm140737318232160"><sup class="footnote">[3]</sup></a>.  This is done to prevent
-    undeclared inputs from being used in the build process.  If for
-    example the <code class="envar">PATH</code> contained
-    <code class="filename">/usr/bin</code>, then you might accidentally use
-    <code class="filename">/usr/bin/gcc</code>.</p><p>So the first step is to set up the environment.  This is
-    done by calling the <code class="filename">setup</code> script of the
-    standard environment.  The environment variable
-    <code class="envar">stdenv</code> points to the location of the standard
-    environment being used.  (It wasn't specified explicitly as an
-    attribute in <a class="xref" href="#ex-hello-nix" title="Example 14.1. Nix expression for GNU Hello (default.nix)">Example 14.1, “Nix expression for GNU Hello
-(<code class="filename">default.nix</code>)”</a>, but
-    <code class="varname">mkDerivation</code> adds it automatically.)</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-builder-co-2"><span><img src="images/callouts/2.gif" alt="2" border="0" /></span></a> </p></td><td valign="top" align="left"><p>Since Hello needs Perl, we have to make sure that Perl is in
-    the <code class="envar">PATH</code>.  The <code class="envar">perl</code> environment
-    variable points to the location of the Perl package (since it
-    was passed in as an attribute to the derivation), so
-    <code class="filename"><em class="replaceable"><code>$perl</code></em>/bin</code> is the
-    directory containing the Perl interpreter.</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-builder-co-3"><span><img src="images/callouts/3.gif" alt="3" border="0" /></span></a> </p></td><td valign="top" align="left"><p>Now we have to unpack the sources.  The
-    <code class="varname">src</code> attribute was bound to the result of
-    fetching the Hello source tarball from the network, so the
-    <code class="envar">src</code> environment variable points to the location in
-    the Nix store to which the tarball was downloaded.  After
-    unpacking, we <span class="command"><strong>cd</strong></span> to the resulting source
-    directory.</p><p>The whole build is performed in a temporary directory
-    created in <code class="varname">/tmp</code>, by the way.  This directory is
-    removed after the builder finishes, so there is no need to clean
-    up the sources afterwards.  Also, the temporary directory is
-    always newly created, so you don't have to worry about files from
-    previous builds interfering with the current build.</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-builder-co-4"><span><img src="images/callouts/4.gif" alt="4" border="0" /></span></a> </p></td><td valign="top" align="left"><p>GNU Hello is a typical Autoconf-based package, so we first
-    have to run its <code class="filename">configure</code> script.  In Nix
-    every package is stored in a separate location in the Nix store,
-    for instance
-    <code class="filename">/nix/store/9a54ba97fb71b65fda531012d0443ce2-hello-2.1.1</code>.
-    Nix computes this path by cryptographically hashing all attributes
-    of the derivation.  The path is passed to the builder through the
-    <code class="envar">out</code> environment variable.  So here we give
-    <code class="filename">configure</code> the parameter
-    <code class="literal">--prefix=$out</code> to cause Hello to be installed in
-    the expected location.</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-builder-co-5"><span><img src="images/callouts/5.gif" alt="5" border="0" /></span></a> </p></td><td valign="top" align="left"><p>Finally we build Hello (<code class="literal">make</code>) and install
-    it into the location specified by <code class="envar">out</code>
-    (<code class="literal">make install</code>).</p></td></tr></table></div><p>If you are wondering about the absence of error checking on the
-result of various commands called in the builder: this is because the
-shell script is evaluated with Bash's <code class="option">-e</code> option,
-which causes the script to be aborted if any command fails without an
-error check.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-arguments"></a>14.3. Arguments and Variables</h2></div></div></div><div class="example"><a id="ex-hello-composition"></a><p class="title"><strong>Example 14.3. Composing GNU Hello
-(<code class="filename">all-packages.nix</code>)</strong></p><div class="example-contents"><pre class="programlisting">
-...
-
-rec { <a id="ex-hello-composition-co-1"></a><span><img src="images/callouts/1.gif" alt="1" border="0" /></span>
-
-  hello = import ../applications/misc/hello/ex-1 <a id="ex-hello-composition-co-2"></a><span><img src="images/callouts/2.gif" alt="2" border="0" /></span> { <a id="ex-hello-composition-co-3"></a><span><img src="images/callouts/3.gif" alt="3" border="0" /></span>
-    inherit fetchurl stdenv perl;
-  };
-
-  perl = import ../development/interpreters/perl { <a id="ex-hello-composition-co-4"></a><span><img src="images/callouts/4.gif" alt="4" border="0" /></span>
-    inherit fetchurl stdenv;
-  };
-
-  fetchurl = import ../build-support/fetchurl {
-    inherit stdenv; ...
-  };
-
-  stdenv = ...;
-
-}
-</pre></div></div><br class="example-break" /><p>The Nix expression in <a class="xref" href="#ex-hello-nix" title="Example 14.1. Nix expression for GNU Hello (default.nix)">Example 14.1, “Nix expression for GNU Hello
-(<code class="filename">default.nix</code>)”</a> is a
-function; it is missing some arguments that have to be filled in
-somewhere.  In the Nix Packages collection this is done in the file
-<code class="filename">pkgs/top-level/all-packages.nix</code>, where all
-Nix expressions for packages are imported and called with the
-appropriate arguments.  <a class="xref" href="#ex-hello-composition" title="Example 14.3. Composing GNU Hello (all-packages.nix)">Example 14.3, “Composing GNU Hello
-(<code class="filename">all-packages.nix</code>)”</a> shows
-some fragments of
-<code class="filename">all-packages.nix</code>.</p><div class="calloutlist"><table border="0" summary="Callout list"><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-composition-co-1"><span><img src="images/callouts/1.gif" alt="1" border="0" /></span></a> </p></td><td valign="top" align="left"><p>This file defines a set of attributes, all of which are
-    concrete derivations (i.e., not functions).  In fact, we define a
-    <span class="emphasis"><em>mutually recursive</em></span> set of attributes.  That
-    is, the attributes can refer to each other.  This is precisely
-    what we want since we want to <span class="quote">“<span class="quote">plug</span>”</span> the
-    various packages into each other.</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-composition-co-2"><span><img src="images/callouts/2.gif" alt="2" border="0" /></span></a> </p></td><td valign="top" align="left"><p>Here we <span class="emphasis"><em>import</em></span> the Nix expression for
-    GNU Hello.  The import operation just loads and returns the
-    specified Nix expression. In fact, we could just have put the
-    contents of <a class="xref" href="#ex-hello-nix" title="Example 14.1. Nix expression for GNU Hello (default.nix)">Example 14.1, “Nix expression for GNU Hello
-(<code class="filename">default.nix</code>)”</a> in
-    <code class="filename">all-packages.nix</code> at this point.  That
-    would be completely equivalent, but it would make the file rather
-    bulky.</p><p>Note that we refer to
-    <code class="filename">../applications/misc/hello/ex-1</code>, not
-    <code class="filename">../applications/misc/hello/ex-1/default.nix</code>.
-    When you try to import a directory, Nix automatically appends
-    <code class="filename">/default.nix</code> to the file name.</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-composition-co-3"><span><img src="images/callouts/3.gif" alt="3" border="0" /></span></a> </p></td><td valign="top" align="left"><p>This is where the actual composition takes place.  Here we
-    <span class="emphasis"><em>call</em></span> the function imported from
-    <code class="filename">../applications/misc/hello/ex-1</code> with a set
-    containing the things that the function expects, namely
-    <code class="varname">fetchurl</code>, <code class="varname">stdenv</code>, and
-    <code class="varname">perl</code>.  We use inherit again to use the
-    attributes defined in the surrounding scope (we could also have
-    written <code class="literal">fetchurl = fetchurl;</code>, etc.).</p><p>The result of this function call is an actual derivation
-    that can be built by Nix (since when we fill in the arguments of
-    the function, what we get is its body, which is the call to
-    <code class="varname">stdenv.mkDerivation</code> in <a class="xref" href="#ex-hello-nix" title="Example 14.1. Nix expression for GNU Hello (default.nix)">Example 14.1, “Nix expression for GNU Hello
-(<code class="filename">default.nix</code>)”</a>).</p><div class="note"><h3 class="title">Note</h3><p>Nixpkgs has a convenience function
-    <code class="function">callPackage</code> that imports and calls a
-    function, filling in any missing arguments by passing the
-    corresponding attribute from the Nixpkgs set, like this:
-
-</p><pre class="programlisting">
-hello = callPackage ../applications/misc/hello/ex-1 { };
-</pre><p>
-
-    If necessary, you can set or override arguments:
-
-</p><pre class="programlisting">
-hello = callPackage ../applications/misc/hello/ex-1 { stdenv = myStdenv; };
-</pre><p>
-
-    </p></div></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-composition-co-4"><span><img src="images/callouts/4.gif" alt="4" border="0" /></span></a> </p></td><td valign="top" align="left"><p>Likewise, we have to instantiate Perl,
-    <code class="varname">fetchurl</code>, and the standard environment.</p></td></tr></table></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-building-simple"></a>14.4. Building and Testing</h2></div></div></div><p>You can now try to build Hello.  Of course, you could do
-<code class="literal">nix-env -i hello</code>, but you may not want to install a
-possibly broken package just yet.  The best way to test the package is by
-using the command <span class="command"><strong><a class="command" href="#sec-nix-build" title="nix-build">nix-build</a></strong></span>,
-which builds a Nix expression and creates a symlink named
-<code class="filename">result</code> in the current directory:
-
-</p><pre class="screen">
-$ nix-build -A hello
-building path `/nix/store/632d2b22514d...-hello-2.1.1'
-hello-2.1.1/
-hello-2.1.1/intl/
-hello-2.1.1/intl/ChangeLog
-<em class="replaceable"><code>...</code></em>
-
-$ ls -l result
-lrwxrwxrwx ... 2006-09-29 10:43 result -&gt; /nix/store/632d2b22514d...-hello-2.1.1
-
-$ ./result/bin/hello
-Hello, world!</pre><p>
-
-The <a class="link" href="#opt-attr"><code class="option">-A</code></a> option selects
-the <code class="literal">hello</code> attribute.  This is faster than using the
-symbolic package name specified by the <code class="literal">name</code>
-attribute (which also happens to be <code class="literal">hello</code>) and is
-unambiguous (there can be multiple packages with the symbolic name
-<code class="literal">hello</code>, but there can be only one attribute in a set
-named <code class="literal">hello</code>).</p><p><span class="command"><strong>nix-build</strong></span> registers the
-<code class="filename">./result</code> symlink as a garbage collection root, so
-unless and until you delete the <code class="filename">./result</code> symlink,
-the output of the build will be safely kept on your system.  You can
-use <span class="command"><strong>nix-build</strong></span>’s <code class="option"><a class="option" href="#opt-out-link">-o</a></code> switch to give the symlink another
-name.</p><p>Nix has a transactional semantics.  Once a build finishes
-successfully, Nix makes a note of this in its database: it registers
-that the path denoted by <code class="envar">out</code> is now
-<span class="quote">“<span class="quote">valid</span>”</span>.  If you try to build the derivation again, Nix
-will see that the path is already valid and finish immediately.  If a
-build fails, either because it returns a non-zero exit code, because
-Nix or the builder are killed, or because the machine crashes, then
-the output paths will not be registered as valid.  If you try to build
-the derivation again, Nix will remove the output paths if they exist
-(e.g., because the builder died half-way through <code class="literal">make
-install</code>) and try again.  Note that there is no
-<span class="quote">“<span class="quote">negative caching</span>”</span>: Nix doesn't remember that a build
-failed, and so a failed build can always be repeated.  This is because
-Nix cannot distinguish between permanent failures (e.g., a compiler
-error due to a syntax error in the source) and transient failures
-(e.g., a disk full condition).</p><p>Nix also performs locking.  If you run multiple Nix builds
-simultaneously, and they try to build the same derivation, the first
-Nix instance that gets there will perform the build, while the others
-block (or perform other derivations if available) until the build
-finishes:
-
-</p><pre class="screen">
-$ nix-build -A hello
-waiting for lock on `/nix/store/0h5b7hp8d4hqfrw8igvx97x1xawrjnac-hello-2.1.1x'</pre><p>
-
-So it is always safe to run multiple instances of Nix in parallel
-(which isn’t the case with, say, <span class="command"><strong>make</strong></span>).</p><p>If you have a system with multiple CPUs, you may want to have
-Nix build different derivations in parallel (insofar as possible).
-Just pass the option <a class="link" href="#opt-max-jobs"><code class="option">-j
-<em class="replaceable"><code>N</code></em></code></a>, where
-<em class="replaceable"><code>N</code></em> is the maximum number of jobs to be run
-in parallel, or set.  Typically this should be the number of
-CPUs.</p><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="sec-debug-build"></a>14.4.1. Debugging Build Failures</h3></div></div></div><p>At the beginning of each phase of the build (such as unpacking,
-building or installing), the set of all shell variables is written to
-the file <code class="filename">env-vars</code> at the top-level build
-directory.  This is useful for debugging: it allows you to recreate
-the environment in which a build was performed.  For instance, if a
-build fails, then assuming you used the <code class="option">-K</code> flag, you
-can go to the output directory and <span class="quote">“<span class="quote">switch</span>”</span> to the
-environment of the builder:
-
-</p><pre class="screen">
-$ nix-build -K ./foo.nix
-... fails, keeping build directory `/tmp/nix-1234-0'
-
-$ cd /tmp/nix-1234-0
-
-$ source env-vars
-
-<em class="lineannotation"><span class="lineannotation">(edit some files...)</span></em>
-
-$ make
-
-<em class="lineannotation"><span class="lineannotation">(execution continues with the same GCC, make, etc.)</span></em></pre><p>
-
-</p></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-generic-builder"></a>14.5. Generic Builder Syntax</h2></div></div></div><p>Recall from <a class="xref" href="#ex-hello-builder" title="Example 14.2. Build script for GNU Hello (builder.sh)">Example 14.2, “Build script for GNU Hello
-(<code class="filename">builder.sh</code>)”</a> that the builder
-looked something like this:
-
-</p><pre class="programlisting">
-PATH=$perl/bin:$PATH
-tar xvfz $src
-cd hello-*
-./configure --prefix=$out
-make
-make install</pre><p>
-
-The builders for almost all Unix packages look like this — set up some
-environment variables, unpack the sources, configure, build, and
-install.  For this reason the standard environment provides some Bash
-functions that automate the build process.  A builder using the
-generic build facilities in shown in <a class="xref" href="#ex-hello-builder2" title="Example 14.4. Build script using the generic build functions">Example 14.4, “Build script using the generic
-build functions”</a>.</p><div class="example"><a id="ex-hello-builder2"></a><p class="title"><strong>Example 14.4. Build script using the generic
-build functions</strong></p><div class="example-contents"><pre class="programlisting">
-buildInputs="$perl" <a id="ex-hello-builder2-co-1"></a><span><img src="images/callouts/1.gif" alt="1" border="0" /></span>
-
-source $stdenv/setup <a id="ex-hello-builder2-co-2"></a><span><img src="images/callouts/2.gif" alt="2" border="0" /></span>
-
-genericBuild <a id="ex-hello-builder2-co-3"></a><span><img src="images/callouts/3.gif" alt="3" border="0" /></span></pre></div></div><br class="example-break" /><div class="calloutlist"><table border="0" summary="Callout list"><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-builder2-co-1"><span><img src="images/callouts/1.gif" alt="1" border="0" /></span></a> </p></td><td valign="top" align="left"><p>The <code class="envar">buildInputs</code> variable tells
-    <code class="filename">setup</code> to use the indicated packages as
-    <span class="quote">“<span class="quote">inputs</span>”</span>.  This means that if a package provides a
-    <code class="filename">bin</code> subdirectory, it's added to
-    <code class="envar">PATH</code>; if it has a <code class="filename">include</code>
-    subdirectory, it's added to GCC's header search path; and so
-    on.<a href="#ftn.idm140737318152576" class="footnote" id="idm140737318152576"><sup class="footnote">[4]</sup></a>
-    </p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-builder2-co-2"><span><img src="images/callouts/2.gif" alt="2" border="0" /></span></a> </p></td><td valign="top" align="left"><p>The function <code class="function">genericBuild</code> is defined in
-    the file <code class="literal">$stdenv/setup</code>.</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-hello-builder2-co-3"><span><img src="images/callouts/3.gif" alt="3" border="0" /></span></a> </p></td><td valign="top" align="left"><p>The final step calls the shell function
-    <code class="function">genericBuild</code>, which performs the steps that
-    were done explicitly in <a class="xref" href="#ex-hello-builder" title="Example 14.2. Build script for GNU Hello (builder.sh)">Example 14.2, “Build script for GNU Hello
-(<code class="filename">builder.sh</code>)”</a>.  The
-    generic builder is smart enough to figure out whether to unpack
-    the sources using <span class="command"><strong>gzip</strong></span>,
-    <span class="command"><strong>bzip2</strong></span>, etc.  It can be customised in many ways;
-    see the Nixpkgs manual for details.</p></td></tr></table></div><p>Discerning readers will note that the
-<code class="envar">buildInputs</code> could just as well have been set in the Nix
-expression, like this:
-
-</p><pre class="programlisting">
-  buildInputs = [ perl ];</pre><p>
-
-The <code class="varname">perl</code> attribute can then be removed, and the
-builder becomes even shorter:
-
-</p><pre class="programlisting">
-source $stdenv/setup
-genericBuild</pre><p>
-
-In fact, <code class="varname">mkDerivation</code> provides a default builder
-that looks exactly like that, so it is actually possible to omit the
-builder for Hello entirely.</p></div><div class="footnotes"><br /><hr style="width:100; text-align:left;margin-left: 0" /><div id="ftn.idm140737318285296" class="footnote"><p><a href="#idm140737318285296" class="para"><sup class="para">[2] </sup></a>In fact, it can be written in any
-  language, but typically it's a <span class="command"><strong>bash</strong></span> shell
-  script.</p></div><div id="ftn.idm140737318232160" class="footnote"><p><a href="#idm140737318232160" class="para"><sup class="para">[3] </sup></a>Actually, it's initialised to
-    <code class="filename">/path-not-set</code> to prevent Bash from setting it
-    to a default value.</p></div><div id="ftn.idm140737318152576" class="footnote"><p><a href="#idm140737318152576" class="para"><sup class="para">[4] </sup></a>How does it work? <code class="filename">setup</code>
-    tries to source the file
-    <code class="filename"><em class="replaceable"><code>pkg</code></em>/nix-support/setup-hook</code>
-    of all dependencies.  These “setup hooks” can then set up whatever
-    environment variables they want; for instance, the setup hook for
-    Perl sets the <code class="envar">PERL5LIB</code> environment variable to
-    contain the <code class="filename">lib/site_perl</code> directories of all
-    inputs.</p></div></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="ch-expression-language"></a>Chapter 15. Nix Expression Language</h2></div></div></div><p>The Nix expression language is a pure, lazy, functional
-language.  Purity means that operations in the language don't have
-side-effects (for instance, there is no variable assignment).
-Laziness means that arguments to functions are evaluated only when
-they are needed.  Functional means that functions are
-<span class="quote">“<span class="quote">normal</span>”</span> values that can be passed around and manipulated
-in interesting ways.  The language is not a full-featured, general
-purpose language.  Its main job is to describe packages,
-compositions of packages, and the variability within
-packages.</p><p>This section presents the various features of the
-language.</p><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-values"></a>15.1. Values</h2></div></div></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318136176"></a>Simple Values</h3></div></div></div><p>Nix has the following basic data types:
-
-</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><span class="emphasis"><em>Strings</em></span> can be written in three
-    ways.</p><p>The most common way is to enclose the string between double
-    quotes, e.g., <code class="literal">"foo bar"</code>.  Strings can span
-    multiple lines.  The special characters <code class="literal">"</code> and
-    <code class="literal">\</code> and the character sequence
-    <code class="literal">${</code> must be escaped by prefixing them with a
-    backslash (<code class="literal">\</code>).  Newlines, carriage returns and
-    tabs can be written as <code class="literal">\n</code>,
-    <code class="literal">\r</code> and <code class="literal">\t</code>,
-    respectively.</p><p>You can include the result of an expression into a string by
-    enclosing it in
-    <code class="literal">${<em class="replaceable"><code>...</code></em>}</code>, a feature
-    known as <span class="emphasis"><em>antiquotation</em></span>.  The enclosed
-    expression must evaluate to something that can be coerced into a
-    string (meaning that it must be a string, a path, or a
-    derivation).  For instance, rather than writing
-
-</p><pre class="programlisting">
-"--with-freetype2-library=" + freetype + "/lib"</pre><p>
-
-    (where <code class="varname">freetype</code> is a derivation), you can
-    instead write the more natural
-
-</p><pre class="programlisting">
-"--with-freetype2-library=${freetype}/lib"</pre><p>
-
-    The latter is automatically translated to the former.  A more
-    complicated example (from the Nix expression for <a class="link" href="http://www.trolltech.com/products/qt" target="_top">Qt</a>):
-
-</p><pre class="programlisting">
-configureFlags = "
-  -system-zlib -system-libpng -system-libjpeg
-  ${if openglSupport then "-dlopen-opengl
-    -L${mesa}/lib -I${mesa}/include
-    -L${libXmu}/lib -I${libXmu}/include" else ""}
-  ${if threadSupport then "-thread" else "-no-thread"}
-";</pre><p>
-
-    Note that Nix expressions and strings can be arbitrarily nested;
-    in this case the outer string contains various antiquotations that
-    themselves contain strings (e.g., <code class="literal">"-thread"</code>),
-    some of which in turn contain expressions (e.g.,
-    <code class="literal">${mesa}</code>).</p><p>The second way to write string literals is as an
-    <span class="emphasis"><em>indented string</em></span>, which is enclosed between
-    pairs of <span class="emphasis"><em>double single-quotes</em></span>, like so:
-
-</p><pre class="programlisting">
-''
-  This is the first line.
-  This is the second line.
-    This is the third line.
-''</pre><p>
-
-    This kind of string literal intelligently strips indentation from
-    the start of each line.  To be precise, it strips from each line a
-    number of spaces equal to the minimal indentation of the string as
-    a whole (disregarding the indentation of empty lines).  For
-    instance, the first and second line are indented two space, while
-    the third line is indented four spaces.  Thus, two spaces are
-    stripped from each line, so the resulting string is
-
-</p><pre class="programlisting">
-"This is the first line.\nThis is the second line.\n  This is the third line.\n"</pre><p>
-
-    </p><p>Note that the whitespace and newline following the opening
-    <code class="literal">''</code> is ignored if there is no non-whitespace
-    text on the initial line.</p><p>Antiquotation
-    (<code class="literal">${<em class="replaceable"><code>expr</code></em>}</code>) is
-    supported in indented strings.</p><p>Since <code class="literal">${</code> and <code class="literal">''</code> have
-    special meaning in indented strings, you need a way to quote them.
-    <code class="literal">${</code> can be escaped by prefixing it with
-    <code class="literal">''</code> (that is, two single quotes), i.e.,
-    <code class="literal">''${</code>.  <code class="literal">''</code> can be escaped by
-    prefixing it with <code class="literal">'</code>, i.e.,
-    <code class="literal">'''</code>.  Finally, linefeed, carriage-return and
-    tab characters can be written as <code class="literal">''\n</code>,
-    <code class="literal">''\r</code>, <code class="literal">''\t</code>.</p><p>Indented strings are primarily useful in that they allow
-    multi-line string literals to follow the indentation of the
-    enclosing Nix expression, and that less escaping is typically
-    necessary for strings representing languages such as shell scripts
-    and configuration files because <code class="literal">''</code> is much less
-    common than <code class="literal">"</code>.  Example:
-
-</p><pre class="programlisting">
-stdenv.mkDerivation {
-  <em class="replaceable"><code>...</code></em>
-  postInstall =
-    ''
-      mkdir $out/bin $out/etc
-      cp foo $out/bin
-      echo "Hello World" &gt; $out/etc/foo.conf
-      ${if enableBar then "cp bar $out/bin" else ""}
-    '';
-  <em class="replaceable"><code>...</code></em>
-}
-</pre><p>
-
-    </p><p>Finally, as a convenience, <span class="emphasis"><em>URIs</em></span> as
-    defined in appendix B of <a class="link" href="http://www.ietf.org/rfc/rfc2396.txt" target="_top">RFC 2396</a>
-    can be written <span class="emphasis"><em>as is</em></span>, without quotes.  For
-    instance, the string
-    <code class="literal">"http://example.org/foo.tar.bz2"</code>
-    can also be written as
-    <code class="literal">http://example.org/foo.tar.bz2</code>.</p></li><li class="listitem"><p><span class="emphasis"><em>Integers</em></span>, e.g.,
-  <code class="literal">123</code>.</p></li><li class="listitem"><p><span class="emphasis"><em>Paths</em></span>, e.g.,
-  <code class="filename">/bin/sh</code> or <code class="filename">./builder.sh</code>.
-  A path must contain at least one slash to be recognised as such; for
-  instance, <code class="filename">builder.sh</code> is not a
-  path<a href="#ftn.idm140737318104384" class="footnote" id="idm140737318104384"><sup class="footnote">[5]</sup></a>.  If the file name is
-  relative, i.e., if it does not begin with a slash, it is made
-  absolute at parse time relative to the directory of the Nix
-  expression that contained it.  For instance, if a Nix expression in
-  <code class="filename">/foo/bar/bla.nix</code> refers to
-  <code class="filename">../xyzzy/fnord.nix</code>, the absolute path is
-  <code class="filename">/foo/xyzzy/fnord.nix</code>.</p><p>If the first component of a path is a <code class="literal">~</code>,
-  it is interpreted as if the rest of the path were relative to the
-  user's home directory. e.g. <code class="filename">~/foo</code> would be
-  equivalent to <code class="filename">/home/edolstra/foo</code> for a user
-  whose home directory is <code class="filename">/home/edolstra</code>.
-  </p></li><li class="listitem"><p><span class="emphasis"><em>Booleans</em></span> with values
-  <code class="literal">true</code> and
-  <code class="literal">false</code>.</p></li><li class="listitem"><p>The null value, denoted as
-  <code class="literal">null</code>.</p></li></ul></div><p>
-
-</p></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318095904"></a>Lists</h3></div></div></div><p>Lists are formed by enclosing a whitespace-separated list of
-values between square brackets.  For example,
-
-</p><pre class="programlisting">
-[ 123 ./foo.nix "abc" (f { x = y; }) ]</pre><p>
-
-defines a list of four elements, the last being the result of a call
-to the function <code class="varname">f</code>.  Note that function calls have
-to be enclosed in parentheses.  If they had been omitted, e.g.,
-
-</p><pre class="programlisting">
-[ 123 ./foo.nix "abc" f { x = y; } ]</pre><p>
-
-the result would be a list of five elements, the fourth one being a
-function and the fifth being a set.</p><p>Note that lists are only lazy in values, and they are strict in length.
-</p></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318092608"></a>Sets</h3></div></div></div><p>Sets are really the core of the language, since ultimately the
-Nix language is all about creating derivations, which are really just
-sets of attributes to be passed to build scripts.</p><p>Sets are just a list of name/value pairs (called
-<span class="emphasis"><em>attributes</em></span>) enclosed in curly brackets, where
-each value is an arbitrary expression terminated by a semicolon.  For
-example:
-
-</p><pre class="programlisting">
-{ x = 123;
-  text = "Hello";
-  y = f { bla = 456; };
-}</pre><p>
-
-This defines a set with attributes named <code class="varname">x</code>,
-<code class="varname">text</code>, <code class="varname">y</code>.  The order of the
-attributes is irrelevant.  An attribute name may only occur
-once.</p><p>Attributes can be selected from a set using the
-<code class="literal">.</code> operator.  For instance,
-
-</p><pre class="programlisting">
-{ a = "Foo"; b = "Bar"; }.a</pre><p>
-
-evaluates to <code class="literal">"Foo"</code>.  It is possible to provide a
-default value in an attribute selection using the
-<code class="literal">or</code> keyword.  For example,
-
-</p><pre class="programlisting">
-{ a = "Foo"; b = "Bar"; }.c or "Xyzzy"</pre><p>
-
-will evaluate to <code class="literal">"Xyzzy"</code> because there is no
-<code class="varname">c</code> attribute in the set.</p><p>You can use arbitrary double-quoted strings as attribute
-names:
-
-</p><pre class="programlisting">
-{ "foo ${bar}" = 123; "nix-1.0" = 456; }."foo ${bar}"
-</pre><p>
-
-This will evaluate to <code class="literal">123</code> (Assuming
-<code class="literal">bar</code> is antiquotable). In the case where an
-attribute name is just a single antiquotation, the quotes can be
-dropped:
-
-</p><pre class="programlisting">
-{ foo = 123; }.${bar} or 456 </pre><p>
-
-This will evaluate to <code class="literal">123</code> if
-<code class="literal">bar</code> evaluates to <code class="literal">"foo"</code> when
-coerced to a string and <code class="literal">456</code> otherwise (again
-assuming <code class="literal">bar</code> is antiquotable).</p><p>In the special case where an attribute name inside of a set declaration
-evaluates to <code class="literal">null</code> (which is normally an error, as
-<code class="literal">null</code> is not antiquotable), that attribute is simply not
-added to the set:
-
-</p><pre class="programlisting">
-{ ${if foo then "bar" else null} = true; }</pre><p>
-
-This will evaluate to <code class="literal">{}</code> if <code class="literal">foo</code>
-evaluates to <code class="literal">false</code>.</p></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-constructs"></a>15.2. Language Constructs</h2></div></div></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318075808"></a>Recursive sets</h3></div></div></div><p>Recursive sets are just normal sets, but the attributes can
-refer to each other.  For example,
-
-</p><pre class="programlisting">
-rec {
-  x = y;
-  y = 123;
-}.x
-</pre><p>
-
-evaluates to <code class="literal">123</code>.  Note that without
-<code class="literal">rec</code> the binding <code class="literal">x = y;</code> would
-refer to the variable <code class="varname">y</code> in the surrounding scope,
-if one exists, and would be invalid if no such variable exists.  That
-is, in a normal (non-recursive) set, attributes are not added to the
-lexical scope; in a recursive set, they are.</p><p>Recursive sets of course introduce the danger of infinite
-recursion.  For example,
-
-</p><pre class="programlisting">
-rec {
-  x = y;
-  y = x;
-}.x</pre><p>
-
-does not terminate<a href="#ftn.idm140737318071536" class="footnote" id="idm140737318071536"><sup class="footnote">[6]</sup></a>.</p></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318070256"></a>Let-expressions</h3></div></div></div><p>A let-expression allows you define local variables for an
-expression.  For instance,
-
-</p><pre class="programlisting">
-let
-  x = "foo";
-  y = "bar";
-in x + y</pre><p>
-
-evaluates to <code class="literal">"foobar"</code>.
-
-</p></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318068176"></a>Inheriting attributes</h3></div></div></div><p>When defining a set it is often convenient to copy variables
-from the surrounding lexical scope (e.g., when you want to propagate
-attributes).  This can be shortened using the
-<code class="literal">inherit</code> keyword.  For instance,
-
-</p><pre class="programlisting">
-let x = 123; in
-{ inherit x;
-  y = 456;
-}</pre><p>
-
-evaluates to <code class="literal">{ x = 123; y = 456; }</code>.  (Note that
-this works because <code class="varname">x</code> is added to the lexical scope
-by the <code class="literal">let</code> construct.)  It is also possible to
-inherit attributes from another set.  For instance, in this fragment
-from <code class="filename">all-packages.nix</code>,
-
-</p><pre class="programlisting">
-  graphviz = (import ../tools/graphics/graphviz) {
-    inherit fetchurl stdenv libpng libjpeg expat x11 yacc;
-    inherit (xlibs) libXaw;
-  };
-
-  xlibs = {
-    libX11 = ...;
-    libXaw = ...;
-    ...
-  }
-
-  libpng = ...;
-  libjpg = ...;
-  ...</pre><p>
-
-the set used in the function call to the function defined in
-<code class="filename">../tools/graphics/graphviz</code> inherits a number of
-variables from the surrounding scope (<code class="varname">fetchurl</code>
-... <code class="varname">yacc</code>), but also inherits
-<code class="varname">libXaw</code> (the X Athena Widgets) from the
-<code class="varname">xlibs</code> (X11 client-side libraries) set.</p></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="ss-functions"></a>Functions</h3></div></div></div><p>Functions have the following form:
-
-</p><pre class="programlisting">
-<em class="replaceable"><code>pattern</code></em>: <em class="replaceable"><code>body</code></em></pre><p>
-
-The pattern specifies what the argument of the function must look
-like, and binds variables in the body to (parts of) the
-argument.  There are three kinds of patterns:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>If a pattern is a single identifier, then the
-  function matches any argument.  Example:
-
-  </p><pre class="programlisting">
-let negate = x: !x;
-    concat = x: y: x + y;
-in if negate true then concat "foo" "bar" else ""</pre><p>
-
-  Note that <code class="function">concat</code> is a function that takes one
-  argument and returns a function that takes another argument.  This
-  allows partial parameterisation (i.e., only filling some of the
-  arguments of a function); e.g.,
-
-  </p><pre class="programlisting">
-map (concat "foo") [ "bar" "bla" "abc" ]</pre><p>
-
-  evaluates to <code class="literal">[ "foobar" "foobla"
-  "fooabc" ]</code>.</p></li><li class="listitem"><p>A <span class="emphasis"><em>set pattern</em></span> of the form
-  <code class="literal">{ name1, name2, …, nameN }</code> matches a set
-  containing the listed attributes, and binds the values of those
-  attributes to variables in the function body.  For example, the
-  function
-
-</p><pre class="programlisting">
-{ x, y, z }: z + y + x</pre><p>
-
-  can only be called with a set containing exactly the attributes
-  <code class="varname">x</code>, <code class="varname">y</code> and
-  <code class="varname">z</code>.  No other attributes are allowed.  If you want
-  to allow additional arguments, you can use an ellipsis
-  (<code class="literal">...</code>):
-
-</p><pre class="programlisting">
-{ x, y, z, ... }: z + y + x</pre><p>
-
-  This works on any set that contains at least the three named
-  attributes.</p><p>It is possible to provide <span class="emphasis"><em>default values</em></span>
-  for attributes, in which case they are allowed to be missing.  A
-  default value is specified by writing
-  <code class="literal"><em class="replaceable"><code>name</code></em> ?
-  <em class="replaceable"><code>e</code></em></code>, where
-  <em class="replaceable"><code>e</code></em> is an arbitrary expression.  For example,
-
-</p><pre class="programlisting">
-{ x, y ? "foo", z ? "bar" }: z + y + x</pre><p>
-
-  specifies a function that only requires an attribute named
-  <code class="varname">x</code>, but optionally accepts <code class="varname">y</code>
-  and <code class="varname">z</code>.</p></li><li class="listitem"><p>An <code class="literal">@</code>-pattern provides a means of referring
-  to the whole value being matched:
-
-</p><pre class="programlisting">
-args@{ x, y, z, ... }: z + y + x + args.a</pre><p>
-
-  Here <code class="varname">args</code> is bound to the entire argument, which
-  is further matched against the pattern <code class="literal">{ x, y, z,
-  ... }</code>.</p></li></ul></div><p>Note that functions do not have names.  If you want to give them
-a name, you can bind them to an attribute, e.g.,
-
-</p><pre class="programlisting">
-let concat = { x, y }: x + y;
-in concat { x = "foo"; y = "bar"; }</pre><p>
-
-</p><p>A set that has a <code class="literal">__functor</code> attribute whose value
-is callable (i.e. is itself a function or a set with a
-<code class="literal">__functor</code> attribute whose value is callable) can be
-applied as if it were a function, with the set itself passed in first
-, e.g.,
-
-</p><pre class="programlisting">
-let add = { __functor = self: x: x + self.x; };
-    inc = add // { x = 1; };
-in inc 1
-</pre><p>
-
-evaluates to <code class="literal">2</code>. This can be used to attach metadata to a
-function without the caller needing to treat it specially, or to implement
-a form of object-oriented programming, for example.
-
-</p></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318040608"></a>Conditionals</h3></div></div></div><p>Conditionals look like this:
-
-</p><pre class="programlisting">
-if <em class="replaceable"><code>e1</code></em> then <em class="replaceable"><code>e2</code></em> else <em class="replaceable"><code>e3</code></em></pre><p>
-
-where <em class="replaceable"><code>e1</code></em> is an expression that should
-evaluate to a Boolean value (<code class="literal">true</code> or
-<code class="literal">false</code>).</p></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318036592"></a>Assertions</h3></div></div></div><p>Assertions are generally used to check that certain requirements
-on or between features and dependencies hold.  They look like this:
-
-</p><pre class="programlisting">
-assert <em class="replaceable"><code>e1</code></em>; <em class="replaceable"><code>e2</code></em></pre><p>
-
-where <em class="replaceable"><code>e1</code></em> is an expression that should
-evaluate to a Boolean value.  If it evaluates to
-<code class="literal">true</code>, <em class="replaceable"><code>e2</code></em> is returned;
-otherwise expression evaluation is aborted and a backtrace is printed.</p><div class="example"><a id="ex-subversion-nix"></a><p class="title"><strong>Example 15.1. Nix expression for Subversion</strong></p><div class="example-contents"><pre class="programlisting">
-{ localServer ? false
-, httpServer ? false
-, sslSupport ? false
-, pythonBindings ? false
-, javaSwigBindings ? false
-, javahlBindings ? false
-, stdenv, fetchurl
-, openssl ? null, httpd ? null, db4 ? null, expat, swig ? null, j2sdk ? null
-}:
-
-assert localServer -&gt; db4 != null; <a id="ex-subversion-nix-co-1"></a><span><img src="images/callouts/1.gif" alt="1" border="0" /></span>
-assert httpServer -&gt; httpd != null &amp;&amp; httpd.expat == expat; <a id="ex-subversion-nix-co-2"></a><span><img src="images/callouts/2.gif" alt="2" border="0" /></span>
-assert sslSupport -&gt; openssl != null &amp;&amp; (httpServer -&gt; httpd.openssl == openssl); <a id="ex-subversion-nix-co-3"></a><span><img src="images/callouts/3.gif" alt="3" border="0" /></span>
-assert pythonBindings -&gt; swig != null &amp;&amp; swig.pythonSupport;
-assert javaSwigBindings -&gt; swig != null &amp;&amp; swig.javaSupport;
-assert javahlBindings -&gt; j2sdk != null;
-
-stdenv.mkDerivation {
-  name = "subversion-1.1.1";
-  ...
-  openssl = if sslSupport then openssl else null; <a id="ex-subversion-nix-co-4"></a><span><img src="images/callouts/4.gif" alt="4" border="0" /></span>
-  ...
-}</pre></div></div><br class="example-break" /><p><a class="xref" href="#ex-subversion-nix" title="Example 15.1. Nix expression for Subversion">Example 15.1, “Nix expression for Subversion”</a> show how assertions are
-used in the Nix expression for Subversion.</p><div class="calloutlist"><table border="0" summary="Callout list"><tr><td width="5%" valign="top" align="left"><p><a href="#ex-subversion-nix-co-1"><span><img src="images/callouts/1.gif" alt="1" border="0" /></span></a> </p></td><td valign="top" align="left"><p>This assertion states that if Subversion is to have support
-    for local repositories, then Berkeley DB is needed.  So if the
-    Subversion function is called with the
-    <code class="varname">localServer</code> argument set to
-    <code class="literal">true</code> but the <code class="varname">db4</code> argument
-    set to <code class="literal">null</code>, then the evaluation fails.</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-subversion-nix-co-2"><span><img src="images/callouts/2.gif" alt="2" border="0" /></span></a> </p></td><td valign="top" align="left"><p>This is a more subtle condition: if Subversion is built with
-    Apache (<code class="literal">httpServer</code>) support, then the Expat
-    library (an XML library) used by Subversion should be same as the
-    one used by Apache.  This is because in this configuration
-    Subversion code ends up being linked with Apache code, and if the
-    Expat libraries do not match, a build- or runtime link error or
-    incompatibility might occur.</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-subversion-nix-co-3"><span><img src="images/callouts/3.gif" alt="3" border="0" /></span></a> </p></td><td valign="top" align="left"><p>This assertion says that in order for Subversion to have SSL
-    support (so that it can access <code class="literal">https</code> URLs), an
-    OpenSSL library must be passed.  Additionally, it says that
-    <span class="emphasis"><em>if</em></span> Apache support is enabled, then Apache's
-    OpenSSL should match Subversion's.  (Note that if Apache support
-    is not enabled, we don't care about Apache's OpenSSL.)</p></td></tr><tr><td width="5%" valign="top" align="left"><p><a href="#ex-subversion-nix-co-4"><span><img src="images/callouts/4.gif" alt="4" border="0" /></span></a> </p></td><td valign="top" align="left"><p>The conditional here is not really related to assertions,
-    but is worth pointing out: it ensures that if SSL support is
-    disabled, then the Subversion derivation is not dependent on
-    OpenSSL, even if a non-<code class="literal">null</code> value was passed.
-    This prevents an unnecessary rebuild of Subversion if OpenSSL
-    changes.</p></td></tr></table></div></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318017088"></a>With-expressions</h3></div></div></div><p>A <span class="emphasis"><em>with-expression</em></span>,
-
-</p><pre class="programlisting">
-with <em class="replaceable"><code>e1</code></em>; <em class="replaceable"><code>e2</code></em></pre><p>
-
-introduces the set <em class="replaceable"><code>e1</code></em> into the lexical
-scope of the expression <em class="replaceable"><code>e2</code></em>.  For instance,
-
-</p><pre class="programlisting">
-let as = { x = "foo"; y = "bar"; };
-in with as; x + y</pre><p>
-
-evaluates to <code class="literal">"foobar"</code> since the
-<code class="literal">with</code> adds the <code class="varname">x</code> and
-<code class="varname">y</code> attributes of <code class="varname">as</code> to the
-lexical scope in the expression <code class="literal">x + y</code>.  The most
-common use of <code class="literal">with</code> is in conjunction with the
-<code class="function">import</code> function.  E.g.,
-
-</p><pre class="programlisting">
-with (import ./definitions.nix); ...</pre><p>
-
-makes all attributes defined in the file
-<code class="filename">definitions.nix</code> available as if they were defined
-locally in a <code class="literal">rec</code>-expression.</p></div><div class="simplesect"><div class="titlepage"><div><div><h3 class="title"><a id="idm140737318008192"></a>Comments</h3></div></div></div><p>Comments can be single-line, started with a <code class="literal">#</code>
-character, or inline/multi-line, enclosed within <code class="literal">/*
-... */</code>.</p></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-language-operators"></a>15.3. Operators</h2></div></div></div><p><a class="xref" href="#table-operators" title="Table 15.1. Operators">Table 15.1, “Operators”</a> lists the operators in the
-Nix expression language, in order of precedence (from strongest to
-weakest binding).</p><div class="table"><a id="table-operators"></a><p class="title"><strong>Table 15.1. Operators</strong></p><div class="table-contents"><table class="table" summary="Operators" border="1"><colgroup><col /><col /><col /></colgroup><thead><tr><th>Syntax</th><th>Associativity</th><th>Description</th></tr></thead><tbody><tr><td><em class="replaceable"><code>e</code></em> <code class="literal">.</code>
-        <em class="replaceable"><code>attrpath</code></em>
-        [ <code class="literal">or</code> <em class="replaceable"><code>def</code></em> ]
-        </td><td>none</td><td>Select attribute denoted by the attribute path
-        <em class="replaceable"><code>attrpath</code></em> from set
-        <em class="replaceable"><code>e</code></em>.  (An attribute path is a
-        dot-separated list of attribute names.)  If the attribute
-        doesn’t exist, return <em class="replaceable"><code>def</code></em> if
-        provided, otherwise abort evaluation.</td></tr><tr><td><em class="replaceable"><code>e1</code></em> <em class="replaceable"><code>e2</code></em></td><td>left</td><td>Call function <em class="replaceable"><code>e1</code></em> with
-        argument <em class="replaceable"><code>e2</code></em>.</td></tr><tr><td><em class="replaceable"><code>e</code></em> <code class="literal">?</code>
-        <em class="replaceable"><code>attrpath</code></em></td><td>none</td><td>Test whether set <em class="replaceable"><code>e</code></em> contains
-        the attribute denoted by <em class="replaceable"><code>attrpath</code></em>;
-        return <code class="literal">true</code> or
-        <code class="literal">false</code>.</td></tr><tr><td><em class="replaceable"><code>e1</code></em> <code class="literal">++</code> <em class="replaceable"><code>e2</code></em></td><td>right</td><td>List concatenation.</td></tr><tr><td><em class="replaceable"><code>e1</code></em> <code class="literal">+</code> <em class="replaceable"><code>e2</code></em></td><td>left</td><td>String or path concatenation.</td></tr><tr><td><code class="literal">!</code> <em class="replaceable"><code>e</code></em></td><td>left</td><td>Boolean negation.</td></tr><tr><td><em class="replaceable"><code>e1</code></em> <code class="literal">//</code>
-        <em class="replaceable"><code>e2</code></em></td><td>right</td><td>Return a set consisting of the attributes in
-        <em class="replaceable"><code>e1</code></em> and
-        <em class="replaceable"><code>e2</code></em> (with the latter taking
-        precedence over the former in case of equally named
-        attributes).</td></tr><tr><td><em class="replaceable"><code>e1</code></em> <code class="literal">==</code>
-        <em class="replaceable"><code>e2</code></em></td><td>none</td><td>Equality.</td></tr><tr><td><em class="replaceable"><code>e1</code></em> <code class="literal">!=</code>
-        <em class="replaceable"><code>e2</code></em></td><td>none</td><td>Inequality.</td></tr><tr><td><em class="replaceable"><code>e1</code></em> <code class="literal">&amp;&amp;</code>
-        <em class="replaceable"><code>e2</code></em></td><td>left</td><td>Logical AND.</td></tr><tr><td><em class="replaceable"><code>e1</code></em> <code class="literal">||</code>
-        <em class="replaceable"><code>e2</code></em></td><td>left</td><td>Logical OR.</td></tr><tr><td><em class="replaceable"><code>e1</code></em> <code class="literal">-&gt;</code>
-        <em class="replaceable"><code>e2</code></em></td><td>none</td><td>Logical implication (equivalent to
-        <code class="literal">!<em class="replaceable"><code>e1</code></em> ||
-        <em class="replaceable"><code>e2</code></em></code>).</td></tr></tbody></table></div></div><br class="table-break" /></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-derivation"></a>15.4. Derivations</h2></div></div></div><p>The most important built-in function is
-<code class="function">derivation</code>, which is used to describe a single
-derivation (a build action).  It takes as input a set, the attributes
-of which specify the inputs of the build.</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><a id="attr-system"></a>There must be an attribute named
-  <code class="varname">system</code> whose value must be a string specifying a
-  Nix platform identifier, such as <code class="literal">"i686-linux"</code> or
-  <code class="literal">"powerpc-darwin"</code><a href="#ftn.idm140737317957936" class="footnote" id="idm140737317957936"><sup class="footnote">[7]</sup></a> The build
-  can only be performed on a machine and operating system matching the
-  platform identifier.  (Nix can automatically forward builds for
-  other platforms by forwarding them to other machines; see <a class="xref" href="#chap-distributed-builds" title="Chapter 16. Distributed Builds">Chapter 16, <em>Distributed Builds</em></a>.)</p></li><li class="listitem"><p>There must be an attribute named
-  <code class="varname">name</code> whose value must be a string.  This is used
-  as a symbolic name for the package by <span class="command"><strong>nix-env</strong></span>,
-  and it is appended to the output paths of the
-  derivation.</p></li><li class="listitem"><p>There must be an attribute named
-  <code class="varname">builder</code> that identifies the program that is
-  executed to perform the build.  It can be either a derivation or a
-  source (a local file reference, e.g.,
-  <code class="filename">./builder.sh</code>).</p></li><li class="listitem"><p>Every attribute is passed as an environment variable
-  to the builder.  Attribute values are translated to environment
-  variables as follows:
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>Strings and integers are just passed
-      verbatim.</p></li><li class="listitem"><p>A <span class="emphasis"><em>path</em></span> (e.g.,
-      <code class="filename">../foo/sources.tar</code>) causes the referenced
-      file to be copied to the store; its location in the store is put
-      in the environment variable.  The idea is that all sources
-      should reside in the Nix store, since all inputs to a derivation
-      should reside in the Nix store.</p></li><li class="listitem"><p>A <span class="emphasis"><em>derivation</em></span> causes that
-      derivation to be built prior to the present derivation; its
-      default output path is put in the environment
-      variable.</p></li><li class="listitem"><p>Lists of the previous types are also allowed.
-      They are simply concatenated, separated by
-      spaces.</p></li><li class="listitem"><p><code class="literal">true</code> is passed as the string
-      <code class="literal">1</code>, <code class="literal">false</code> and
-      <code class="literal">null</code> are passed as an empty string.
-      </p></li></ul></div><p>
-
-  </p></li><li class="listitem"><p>The optional attribute <code class="varname">args</code>
-  specifies command-line arguments to be passed to the builder.  It
-  should be a list.</p></li><li class="listitem"><p>The optional attribute <code class="varname">outputs</code>
-  specifies a list of symbolic outputs of the derivation.  By default,
-  a derivation produces a single output path, denoted as
-  <code class="literal">out</code>.  However, derivations can produce multiple
-  output paths.  This is useful because it allows outputs to be
-  downloaded or garbage-collected separately.  For instance, imagine a
-  library package that provides a dynamic library, header files, and
-  documentation.  A program that links against the library doesn’t
-  need the header files and documentation at runtime, and it doesn’t
-  need the documentation at build time.  Thus, the library package
-  could specify:
-</p><pre class="programlisting">
-outputs = [ "lib" "headers" "doc" ];
-</pre><p>
-  This will cause Nix to pass environment variables
-  <code class="literal">lib</code>, <code class="literal">headers</code> and
-  <code class="literal">doc</code> to the builder containing the intended store
-  paths of each output.  The builder would typically do something like
-</p><pre class="programlisting">
-./configure --libdir=$lib/lib --includedir=$headers/include --docdir=$doc/share/doc
-</pre><p>
-  for an Autoconf-style package.  You can refer to each output of a
-  derivation by selecting it as an attribute, e.g.
-</p><pre class="programlisting">
-buildInputs = [ pkg.lib pkg.headers ];
-</pre><p>
-  The first element of <code class="varname">output</code> determines the
-  <span class="emphasis"><em>default output</em></span>.  Thus, you could also write
-</p><pre class="programlisting">
-buildInputs = [ pkg pkg.headers ];
-</pre><p>
-  since <code class="literal">pkg</code> is equivalent to
-  <code class="literal">pkg.lib</code>.</p></li></ul></div><p>The function <code class="function">mkDerivation</code> in the Nixpkgs
-standard environment is a wrapper around
-<code class="function">derivation</code> that adds a default value for
-<code class="varname">system</code> and always uses Bash as the builder, to
-which the supplied builder is passed as a command-line argument.  See
-the Nixpkgs manual for details.</p><p>The builder is executed as follows:
-
-</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>A temporary directory is created under the directory
-  specified by <code class="envar">TMPDIR</code> (default
-  <code class="filename">/tmp</code>) where the build will take place.  The
-  current directory is changed to this directory.</p></li><li class="listitem"><p>The environment is cleared and set to the derivation
-  attributes, as specified above.</p></li><li class="listitem"><p>In addition, the following variables are set:
-
-  </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p><code class="envar">NIX_BUILD_TOP</code> contains the path of
-    the temporary directory for this build.</p></li><li class="listitem"><p>Also, <code class="envar">TMPDIR</code>,
-    <code class="envar">TEMPDIR</code>, <code class="envar">TMP</code>, <code class="envar">TEMP</code>
-    are set to point to the temporary directory.  This is to prevent
-    the builder from accidentally writing temporary files anywhere
-    else.  Doing so might cause interference by other
-    processes.</p></li><li class="listitem"><p><code class="envar">PATH</code> is set to
-    <code class="filename">/path-not-set</code> to prevent shells from
-    initialising it to their built-in default value.</p></li><li class="listitem"><p><code class="envar">HOME</code> is set to
-    <code class="filename">/homeless-shelter</code> to prevent programs from
-    using <code class="filename">/etc/passwd</code> or the like to find the
-    user's home directory, which could cause impurity.  Usually, when
-    <code class="envar">HOME</code> is set, it is used as the location of the home
-    directory, even if it points to a non-existent
-    path.</p></li><li class="listitem"><p><code class="envar">NIX_STORE</code> is set to the path of the
-    top-level Nix store directory (typically,
-    <code class="filename">/nix/store</code>).</p></li><li class="listitem"><p>For each output declared in
-    <code class="varname">outputs</code>, the corresponding environment variable
-    is set to point to the intended path in the Nix store for that
-    output.  Each output path is a concatenation of the cryptographic
-    hash of all build inputs, the <code class="varname">name</code> attribute
-    and the output name.  (The output name is omitted if it’s
-    <code class="literal">out</code>.)</p></li></ul></div><p>
-
-  </p></li><li class="listitem"><p>If an output path already exists, it is removed.
-  Also, locks are acquired to prevent multiple Nix instances from
-  performing the same build at the same time.</p></li><li class="listitem"><p>A log of the combined standard output and error is
-  written to <code class="filename">/nix/var/log/nix</code>.</p></li><li class="listitem"><p>The builder is executed with the arguments specified
-  by the attribute <code class="varname">args</code>.  If it exits with exit
-  code 0, it is considered to have succeeded.</p></li><li class="listitem"><p>The temporary directory is removed (unless the
-  <code class="option">-K</code> option was specified).</p></li><li class="listitem"><p>If the build was successful, Nix scans each output
-  path for references to input paths by looking for the hash parts of
-  the input paths.  Since these are potential runtime dependencies,
-  Nix registers them as dependencies of the output
-  paths.</p></li><li class="listitem"><p>After the build, Nix sets the last-modified
-  timestamp on all files in the build result to 1 (00:00:01 1/1/1970
-  UTC), sets the group to the default group, and sets the mode of the
-  file to 0444 or 0555 (i.e., read-only, with execute permission
-  enabled if the file was originally executable).  Note that possible
-  <code class="literal">setuid</code> and <code class="literal">setgid</code> bits are
-  cleared.  Setuid and setgid programs are not currently supported by
-  Nix.  This is because the Nix archives used in deployment have no
-  concept of ownership information, and because it makes the build
-  result dependent on the user performing the build.</p></li></ul></div><p>
-
-</p><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="sec-advanced-attributes"></a>15.4.1. Advanced Attributes</h3></div></div></div><p>Derivations can declare some infrequently used optional
-attributes.</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="varname">allowedReferences</code></span></dt><dd><p>The optional attribute
-    <code class="varname">allowedReferences</code> specifies a list of legal
-    references (dependencies) of the output of the builder.  For
-    example,
-
-</p><pre class="programlisting">
-allowedReferences = [];
-</pre><p>
-
-    enforces that the output of a derivation cannot have any runtime
-    dependencies on its inputs.  To allow an output to have a runtime
-    dependency on itself, use <code class="literal">"out"</code> as a list item.
-    This is used in NixOS to check that generated files such as
-    initial ramdisks for booting Linux don’t have accidental
-    dependencies on other paths in the Nix store.</p></dd><dt><span class="term"><code class="varname">allowedRequisites</code></span></dt><dd><p>This attribute is similar to
-    <code class="varname">allowedReferences</code>, but it specifies the legal
-    requisites of the whole closure, so all the dependencies
-    recursively.  For example,
-
-</p><pre class="programlisting">
-allowedRequisites = [ foobar ];
-</pre><p>
-
-    enforces that the output of a derivation cannot have any other
-    runtime dependency than <code class="varname">foobar</code>, and in addition
-    it enforces that <code class="varname">foobar</code> itself doesn't
-    introduce any other dependency itself.</p></dd><dt><span class="term"><code class="varname">exportReferencesGraph</code></span></dt><dd><p>This attribute allows builders access to the
-    references graph of their inputs.  The attribute is a list of
-    inputs in the Nix store whose references graph the builder needs
-    to know.  The value of this attribute should be a list of pairs
-    <code class="literal">[ <em class="replaceable"><code>name1</code></em>
-    <em class="replaceable"><code>path1</code></em> <em class="replaceable"><code>name2</code></em>
-    <em class="replaceable"><code>path2</code></em> <em class="replaceable"><code>...</code></em>
-    ]</code>.  The references graph of each
-    <em class="replaceable"><code>pathN</code></em> will be stored in a text file
-    <em class="replaceable"><code>nameN</code></em> in the temporary build directory.
-    The text files have the format used by <span class="command"><strong>nix-store
-    --register-validity</strong></span> (with the deriver fields left
-    empty).  For example, when the following derivation is built:
-
-</p><pre class="programlisting">
-derivation {
-  ...
-  exportReferencesGraph = [ "libfoo-graph" libfoo ];
-};
-</pre><p>
-
-    the references graph of <code class="literal">libfoo</code> is placed in the
-    file <code class="filename">libfoo-graph</code> in the temporary build
-    directory.</p><p><code class="varname">exportReferencesGraph</code> is useful for
-    builders that want to do something with the closure of a store
-    path.  Examples include the builders in NixOS that generate the
-    initial ramdisk for booting Linux (a <span class="command"><strong>cpio</strong></span>
-    archive containing the closure of the boot script) and the
-    ISO-9660 image for the installation CD (which is populated with a
-    Nix store containing the closure of a bootable NixOS
-    configuration).</p></dd><dt><span class="term"><code class="varname">impureEnvVars</code></span></dt><dd><p>This attribute allows you to specify a list of
-    environment variables that should be passed from the environment
-    of the calling user to the builder.  Usually, the environment is
-    cleared completely when the builder is executed, but with this
-    attribute you can allow specific environment variables to be
-    passed unmodified.  For example, <code class="function">fetchurl</code> in
-    Nixpkgs has the line
-
-</p><pre class="programlisting">
-impureEnvVars = [ "http_proxy" "https_proxy" <em class="replaceable"><code>...</code></em> ];
-</pre><p>
-
-    to make it use the proxy server configuration specified by the
-    user in the environment variables <code class="envar">http_proxy</code> and
-    friends.</p><p>This attribute is only allowed in <a class="link" href="#fixed-output-drvs">fixed-output derivations</a>, where
-    impurities such as these are okay since (the hash of) the output
-    is known in advance.  It is ignored for all other
-    derivations.</p></dd><dt><a id="fixed-output-drvs"></a><span class="term"><code class="varname">outputHash</code>, </span><span class="term"><code class="varname">outputHashAlgo</code>, </span><span class="term"><code class="varname">outputHashMode</code></span></dt><dd><p>These attributes declare that the derivation is a
-    so-called <span class="emphasis"><em>fixed-output derivation</em></span>, which
-    means that a cryptographic hash of the output is already known in
-    advance.  When the build of a fixed-output derivation finishes,
-    Nix computes the cryptographic hash of the output and compares it
-    to the hash declared with these attributes.  If there is a
-    mismatch, the build fails.</p><p>The rationale for fixed-output derivations is derivations
-    such as those produced by the <code class="function">fetchurl</code>
-    function.  This function downloads a file from a given URL.  To
-    ensure that the downloaded file has not been modified, the caller
-    must also specify a cryptographic hash of the file.  For example,
-
-</p><pre class="programlisting">
-fetchurl {
-  url = http://ftp.gnu.org/pub/gnu/hello/hello-2.1.1.tar.gz;
-  md5 = "70c9ccf9fac07f762c24f2df2290784d";
-}
-</pre><p>
-
-    It sometimes happens that the URL of the file changes, e.g.,
-    because servers are reorganised or no longer available.  We then
-    must update the call to <code class="function">fetchurl</code>, e.g.,
-
-</p><pre class="programlisting">
-fetchurl {
-  url = ftp://ftp.nluug.nl/pub/gnu/hello/hello-2.1.1.tar.gz;
-  md5 = "70c9ccf9fac07f762c24f2df2290784d";
-}
-</pre><p>
-
-    If a <code class="function">fetchurl</code> derivation was treated like a
-    normal derivation, the output paths of the derivation and
-    <span class="emphasis"><em>all derivations depending on it</em></span> would change.
-    For instance, if we were to change the URL of the Glibc source
-    distribution in Nixpkgs (a package on which almost all other
-    packages depend) massive rebuilds would be needed.  This is
-    unfortunate for a change which we know cannot have a real effect
-    as it propagates upwards through the dependency graph.</p><p>For fixed-output derivations, on the other hand, the name of
-    the output path only depends on the <code class="varname">outputHash*</code>
-    and <code class="varname">name</code> attributes, while all other attributes
-    are ignored for the purpose of computing the output path.  (The
-    <code class="varname">name</code> attribute is included because it is part
-    of the path.)</p><p>As an example, here is the (simplified) Nix expression for
-    <code class="varname">fetchurl</code>:
-
-</p><pre class="programlisting">
-{ stdenv, curl }: # The <span class="command"><strong>curl</strong></span> program is used for downloading.
-
-{ url, md5 }:
-
-stdenv.mkDerivation {
-  name = baseNameOf (toString url);
-  builder = ./builder.sh;
-  buildInputs = [ curl ];
-
-  # This is a fixed-output derivation; the output must be a regular
-  # file with MD5 hash <code class="varname">md5</code>.
-  outputHashMode = "flat";
-  outputHashAlgo = "md5";
-  outputHash = md5;
-
-  inherit url;
-}
-</pre><p>
-
-    </p><p>The <code class="varname">outputHashAlgo</code> attribute specifies
-    the hash algorithm used to compute the hash.  It can currently be
-    <code class="literal">"md5"</code>, <code class="literal">"sha1"</code> or
-    <code class="literal">"sha256"</code>.</p><p>The <code class="varname">outputHashMode</code> attribute determines
-    how the hash is computed.  It must be one of the following two
-    values:
-
-    </p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="literal">"flat"</code></span></dt><dd><p>The output must be a non-executable regular
-        file.  If it isn’t, the build fails.  The hash is simply
-        computed over the contents of that file (so it’s equal to what
-        Unix commands like <span class="command"><strong>md5sum</strong></span> or
-        <span class="command"><strong>sha1sum</strong></span> produce).</p><p>This is the default.</p></dd><dt><span class="term"><code class="literal">"recursive"</code></span></dt><dd><p>The hash is computed over the NAR archive dump
-        of the output (i.e., the result of <a class="link" href="#refsec-nix-store-dump" title="Operation --dump"><span class="command"><strong>nix-store
-        --dump</strong></span></a>).  In this case, the output can be
-        anything, including a directory tree.</p></dd></dl></div><p>
-
-    </p><p>The <code class="varname">outputHash</code> attribute, finally, must
-    be a string containing the hash in either hexadecimal or base-32
-    notation.  (See the <a class="link" href="#sec-nix-hash" title="nix-hash"><span class="command"><strong>nix-hash</strong></span> command</a>
-    for information about converting to and from base-32
-    notation.)</p></dd><dt><span class="term"><code class="varname">passAsFile</code></span></dt><dd><p>A list of names of attributes that should be
-    passed via files rather than environment variables.  For example,
-    if you have
-
-    </p><pre class="programlisting">
-passAsFile = ["big"];
-big = "a very long string";
-    </pre><p>
-
-    then when the builder runs, the environment variable
-    <code class="envar">bigPath</code> will contain the absolute path to a
-    temporary file containing <code class="literal">a very long
-    string</code>. That is, for any attribute
-    <em class="replaceable"><code>x</code></em> listed in
-    <code class="varname">passAsFile</code>, Nix will pass an environment
-    variable <code class="envar"><em class="replaceable"><code>x</code></em>Path</code> holding
-    the path of the file containing the value of attribute
-    <em class="replaceable"><code>x</code></em>. This is useful when you need to pass
-    large strings to a builder, since most operating systems impose a
-    limit on the size of the environment (typically, a few hundred
-    kilobyte).</p></dd><dt><span class="term"><code class="varname">preferLocalBuild</code></span></dt><dd><p>If this attribute is set to
-    <code class="literal">true</code>, it has two effects.  First, the
-    derivation will always be built, not substituted, even if a
-    substitute is available.  Second, if <a class="link" href="#chap-distributed-builds" title="Chapter 16. Distributed Builds">distributed building is
-    enabled</a>, then, if possible, the derivaton will be built
-    locally instead of forwarded to a remote machine.  This is
-    appropriate for trivial builders where the cost of doing a
-    download or remote build would exceed the cost of building
-    locally.</p></dd></dl></div></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-builtins"></a>15.5. Built-in Functions</h2></div></div></div><p>This section lists the functions and constants built into the
-Nix expression evaluator.  (The built-in function
-<code class="function">derivation</code> is discussed above.)  Some built-ins,
-such as <code class="function">derivation</code>, are always in scope of every
-Nix expression; you can just access them right away.  But to prevent
-polluting the namespace too much, most built-ins are not in scope.
-Instead, you can access them through the <code class="varname">builtins</code>
-built-in value, which is a set that contains all built-in functions
-and values.  For instance, <code class="function">derivation</code> is also
-available as <code class="function">builtins.derivation</code>.</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="function">abort</code> <em class="replaceable"><code>s</code></em></span></dt><dd><p>Abort Nix expression evaluation, print error
-    message <em class="replaceable"><code>s</code></em>.</p></dd><dt><span class="term"><code class="function">builtins.add</code>
-  <em class="replaceable"><code>e1</code></em> <em class="replaceable"><code>e2</code></em></span></dt><dd><p>Return the sum of the integers
-    <em class="replaceable"><code>e1</code></em> and
-    <em class="replaceable"><code>e2</code></em>.</p></dd><dt><span class="term"><code class="function">builtins.all</code>
-  <em class="replaceable"><code>pred</code></em> <em class="replaceable"><code>list</code></em></span></dt><dd><p>Return <code class="literal">true</code> if the function
-    <em class="replaceable"><code>pred</code></em> returns <code class="literal">true</code>
-    for all elements of <em class="replaceable"><code>list</code></em>,
-    and <code class="literal">false</code> otherwise.</p></dd><dt><span class="term"><code class="function">builtins.any</code>
-  <em class="replaceable"><code>pred</code></em> <em class="replaceable"><code>list</code></em></span></dt><dd><p>Return <code class="literal">true</code> if the function
-    <em class="replaceable"><code>pred</code></em> returns <code class="literal">true</code>
-    for at least one element of <em class="replaceable"><code>list</code></em>,
-    and <code class="literal">false</code> otherwise.</p></dd><dt><span class="term"><code class="function">builtins.attrNames</code>
-  <em class="replaceable"><code>set</code></em></span></dt><dd><p>Return the names of the attributes in the set
-    <em class="replaceable"><code>set</code></em> in a sorted list.  For instance,
-    <code class="literal">builtins.attrNames { y = 1; x = "foo"; }</code>
-    evaluates to <code class="literal">[ "x" "y" ]</code>.</p></dd><dt><span class="term"><code class="function">builtins.attrValues</code>
-  <em class="replaceable"><code>set</code></em></span></dt><dd><p>Return the values of the attributes in the set
-    <em class="replaceable"><code>set</code></em> in the order corresponding to the
-    sorted attribute names.</p></dd><dt><span class="term"><code class="function">baseNameOf</code> <em class="replaceable"><code>s</code></em></span></dt><dd><p>Return the <span class="emphasis"><em>base name</em></span> of the
-    string <em class="replaceable"><code>s</code></em>, that is, everything following
-    the final slash in the string.  This is similar to the GNU
-    <span class="command"><strong>basename</strong></span> command.</p></dd><dt><span class="term"><code class="varname">builtins</code></span></dt><dd><p>The set <code class="varname">builtins</code> contains all
-    the built-in functions and values.  You can use
-    <code class="varname">builtins</code> to test for the availability of
-    features in the Nix installation, e.g.,
-
-</p><pre class="programlisting">
-if builtins ? getEnv then builtins.getEnv "PATH" else ""</pre><p>
-
-    This allows a Nix expression to fall back gracefully on older Nix
-    installations that don’t have the desired built-in
-    function.</p></dd><dt><span class="term"><code class="function">builtins.compareVersions</code>
-  <em class="replaceable"><code>s1</code></em> <em class="replaceable"><code>s2</code></em></span></dt><dd><p>Compare two strings representing versions and
-    return <code class="literal">-1</code> if version
-    <em class="replaceable"><code>s1</code></em> is older than version
-    <em class="replaceable"><code>s2</code></em>, <code class="literal">0</code> if they are
-    the same, and <code class="literal">1</code> if
-    <em class="replaceable"><code>s1</code></em> is newer than
-    <em class="replaceable"><code>s2</code></em>.  The version comparison algorithm
-    is the same as the one used by <a class="link" href="#ssec-version-comparisons" title="Versions"><span class="command"><strong>nix-env
-    -u</strong></span></a>.</p></dd><dt><span class="term"><code class="function">builtins.concatLists</code>
-  <em class="replaceable"><code>lists</code></em></span></dt><dd><p>Concatenate a list of lists into a single
-    list.</p></dd><dt><a id="builtin-currentSystem"></a><span class="term"><code class="varname">builtins.currentSystem</code></span></dt><dd><p>The built-in value <code class="varname">currentSystem</code>
-    evaluates to the Nix platform identifier for the Nix installation
-    on which the expression is being evaluated, such as
-    <code class="literal">"i686-linux"</code> or
-    <code class="literal">"powerpc-darwin"</code>.</p></dd><dt><span class="term"><code class="function">builtins.deepSeq</code>
-  <em class="replaceable"><code>e1</code></em> <em class="replaceable"><code>e2</code></em></span></dt><dd><p>This is like <code class="literal">seq
-    <em class="replaceable"><code>e1</code></em>
-    <em class="replaceable"><code>e2</code></em></code>, except that
-    <em class="replaceable"><code>e1</code></em> is evaluated
-    <span class="emphasis"><em>deeply</em></span>: if it’s a list or set, its elements
-    or attributes are also evaluated recursively.</p></dd><dt><span class="term"><code class="function">derivation</code>
-  <em class="replaceable"><code>attrs</code></em></span></dt><dd><p><code class="function">derivation</code> is described in
-    <a class="xref" href="#ssec-derivation" title="15.4. Derivations">Section 15.4, “Derivations”</a>.</p></dd><dt><span class="term"><code class="function">dirOf</code> <em class="replaceable"><code>s</code></em></span></dt><dd><p>Return the directory part of the string
-    <em class="replaceable"><code>s</code></em>, that is, everything before the final
-    slash in the string.  This is similar to the GNU
-    <span class="command"><strong>dirname</strong></span> command.</p></dd><dt><span class="term"><code class="function">builtins.div</code>
-  <em class="replaceable"><code>e1</code></em> <em class="replaceable"><code>e2</code></em></span></dt><dd><p>Return the quotient of the integers
-    <em class="replaceable"><code>e1</code></em> and
-    <em class="replaceable"><code>e2</code></em>.</p></dd><dt><span class="term"><code class="function">builtins.elem</code>
-  <em class="replaceable"><code>x</code></em> <em class="replaceable"><code>xs</code></em></span></dt><dd><p>Return <code class="literal">true</code> if a value equal to
-    <em class="replaceable"><code>x</code></em> occurs in the list
-    <em class="replaceable"><code>xs</code></em>, and <code class="literal">false</code>
-    otherwise.</p></dd><dt><span class="term"><code class="function">builtins.elemAt</code>
-  <em class="replaceable"><code>xs</code></em> <em class="replaceable"><code>n</code></em></span></dt><dd><p>Return element <em class="replaceable"><code>n</code></em> from
-    the list <em class="replaceable"><code>xs</code></em>.  Elements are counted
-    starting from 0.  A fatal error occurs in the index is out of
-    bounds.</p></dd><dt><span class="term"><code class="function">builtins.fetchurl</code>
-  <em class="replaceable"><code>url</code></em></span></dt><dd><p>Download the specified URL and return the path of
-    the downloaded file. This function is not available if <a class="link" href="#conf-restrict-eval">restricted evaluation mode</a> is
-    enabled.</p></dd><dt><span class="term"><code class="function">fetchTarball</code>
-  <em class="replaceable"><code>url</code></em></span></dt><dd><p>Download the specified URL, unpack it and return
-    the path of the unpacked tree. The file must be a tape archive
-    (<code class="filename">.tar</code>) compressed with
-    <code class="literal">gzip</code>, <code class="literal">bzip2</code> or
-    <code class="literal">xz</code>. The top-level path component of the files
-    in the tarball is removed, so it is best if the tarball contains a
-    single directory at top level. The typical use of the function is
-    to obtain external Nix expression dependencies, such as a
-    particular version of Nixpkgs, e.g.
-
-</p><pre class="programlisting">
-with import (fetchTarball https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz) {};
-
-stdenv.mkDerivation { … }
-</pre><p>
-
-    </p><p>This function is not available if <a class="link" href="#conf-restrict-eval">restricted evaluation mode</a> is
-    enabled.</p></dd><dt><span class="term"><code class="function">builtins.filter</code>
-  <em class="replaceable"><code>f</code></em> <em class="replaceable"><code>xs</code></em></span></dt><dd><p>Return a list consisting of the elements of
-    <em class="replaceable"><code>xs</code></em> for which the function
-    <em class="replaceable"><code>f</code></em> returns
-    <code class="literal">true</code>.</p></dd><dt><span class="term"><code class="function">builtins.filterSource</code>
-  <em class="replaceable"><code>e1</code></em> <em class="replaceable"><code>e2</code></em></span></dt><dd><p>This function allows you to copy sources into the Nix
-      store while filtering certain files.  For instance, suppose that
-      you want to use the directory <code class="filename">source-dir</code> as
-      an input to a Nix expression, e.g.
-
-</p><pre class="programlisting">
-stdenv.mkDerivation {
-  ...
-  src = ./source-dir;
-}
-</pre><p>
-
-      However, if <code class="filename">source-dir</code> is a Subversion
-      working copy, then all those annoying <code class="filename">.svn</code>
-      subdirectories will also be copied to the store.  Worse, the
-      contents of those directories may change a lot, causing lots of
-      spurious rebuilds.  With <code class="function">filterSource</code> you
-      can filter out the <code class="filename">.svn</code> directories:
-
-</p><pre class="programlisting">
-  src = builtins.filterSource
-    (path: type: type != "directory" || baseNameOf path != ".svn")
-    ./source-dir;
-</pre><p>
-
-      </p><p>Thus, the first argument <em class="replaceable"><code>e1</code></em>
-      must be a predicate function that is called for each regular
-      file, directory or symlink in the source tree
-      <em class="replaceable"><code>e2</code></em>.  If the function returns
-      <code class="literal">true</code>, the file is copied to the Nix store,
-      otherwise it is omitted.  The function is called with two
-      arguments.  The first is the full path of the file.  The second
-      is a string that identifies the type of the file, which is
-      either <code class="literal">"regular"</code>,
-      <code class="literal">"directory"</code>, <code class="literal">"symlink"</code> or
-      <code class="literal">"unknown"</code> (for other kinds of files such as
-      device nodes or fifos — but note that those cannot be copied to
-      the Nix store, so if the predicate returns
-      <code class="literal">true</code> for them, the copy will fail).</p></dd><dt><span class="term"><code class="function">builtins.foldl’</code>
-    <em class="replaceable"><code>op</code></em> <em class="replaceable"><code>nul</code></em> <em class="replaceable"><code>list</code></em></span></dt><dd><p>Reduce a list by applying a binary operator, from
-    left to right, e.g. <code class="literal">foldl’ op nul [x0 x1 x2 ...] = op (op
-    (op nul x0) x1) x2) ...</code>. The operator is applied
-    strictly, i.e., its arguments are evaluated first. For example,
-    <code class="literal">foldl’ (x: y: x + y) 0 [1 2 3]</code> evaluates to
-    6.</p></dd><dt><span class="term"><code class="function">builtins.functionArgs</code>
-    <em class="replaceable"><code>f</code></em></span></dt><dd><p>
-    Return a set containing the names of the formal arguments expected
-    by the function <em class="replaceable"><code>f</code></em>.
-    The value of each attribute is a Boolean denoting whether the corresponding
-    argument has a default value.  For instance,
-    <code class="literal">functionArgs ({ x, y ? 123}: ...)  =  { x = false; y = true; }</code>.
-    </p><p>"Formal argument" here refers to the attributes pattern-matched by
-    the function.  Plain lambdas are not included, e.g.
-    <code class="literal">functionArgs (x: ...)  =  { }</code>.
-    </p></dd><dt><span class="term"><code class="function">builtins.fromJSON</code> <em class="replaceable"><code>e</code></em></span></dt><dd><p>Convert a JSON string to a Nix
-    value. For example,
-
-</p><pre class="programlisting">
-builtins.fromJSON ''{"x": [1, 2, 3], "y": null}''
-</pre><p>
-
-    returns the value <code class="literal">{ x = [ 1 2 3 ]; y = null;
-    }</code>. Floating point numbers are not
-    supported.</p></dd><dt><span class="term"><code class="function">builtins.genList</code>
-  <em class="replaceable"><code>generator</code></em> <em class="replaceable"><code>length</code></em></span></dt><dd><p>Generate list of size
-    <em class="replaceable"><code>length</code></em>, with each element
-    <em class="replaceable"><code>i&gt;</code></em> equal to the value returned by
-    <em class="replaceable"><code>generator</code></em> <code class="literal">i</code>. For
-    example,
-
-</p><pre class="programlisting">
-builtins.genList (x: x * x) 5
-</pre><p>
-
-    returns the list <code class="literal">[ 0 1 4 9 16 ]</code>.</p></dd><dt><span class="term"><code class="function">builtins.getAttr</code>
-  <em class="replaceable"><code>s</code></em> <em class="replaceable"><code>set</code></em></span></dt><dd><p><code class="function">getAttr</code> returns the attribute
-    named <em class="replaceable"><code>s</code></em> from
-    <em class="replaceable"><code>set</code></em>.  Evaluation aborts if the
-    attribute doesn’t exist.  This is a dynamic version of the
-    <code class="literal">.</code> operator, since <em class="replaceable"><code>s</code></em>
-    is an expression rather than an identifier.</p></dd><dt><span class="term"><code class="function">builtins.getEnv</code>
-  <em class="replaceable"><code>s</code></em></span></dt><dd><p><code class="function">getEnv</code> returns the value of
-    the environment variable <em class="replaceable"><code>s</code></em>, or an empty
-    string if the variable doesn’t exist.  This function should be
-    used with care, as it can introduce all sorts of nasty environment
-    dependencies in your Nix expression.</p><p><code class="function">getEnv</code> is used in Nix Packages to
-    locate the file <code class="filename">~/.nixpkgs/config.nix</code>, which
-    contains user-local settings for Nix Packages.  (That is, it does
-    a <code class="literal">getEnv "HOME"</code> to locate the user’s home
-    directory.)</p></dd><dt><span class="term"><code class="function">builtins.hasAttr</code>
-  <em class="replaceable"><code>s</code></em> <em class="replaceable"><code>set</code></em></span></dt><dd><p><code class="function">hasAttr</code> returns
-    <code class="literal">true</code> if <em class="replaceable"><code>set</code></em> has an
-    attribute named <em class="replaceable"><code>s</code></em>, and
-    <code class="literal">false</code> otherwise.  This is a dynamic version of
-    the <code class="literal">?</code>  operator, since
-    <em class="replaceable"><code>s</code></em> is an expression rather than an
-    identifier.</p></dd><dt><span class="term"><code class="function">builtins.hashString</code>
-  <em class="replaceable"><code>type</code></em> <em class="replaceable"><code>s</code></em></span></dt><dd><p>Return a base-16 representation of the
-    cryptographic hash of string <em class="replaceable"><code>s</code></em>.  The
-    hash algorithm specified by <em class="replaceable"><code>type</code></em> must
-    be one of <code class="literal">"md5"</code>, <code class="literal">"sha1"</code> or
-    <code class="literal">"sha256"</code>.</p></dd><dt><span class="term"><code class="function">builtins.head</code>
-  <em class="replaceable"><code>list</code></em></span></dt><dd><p>Return the first element of a list; abort
-    evaluation if the argument isn’t a list or is an empty list.  You
-    can test whether a list is empty by comparing it with
-    <code class="literal">[]</code>.</p></dd><dt><span class="term"><code class="function">import</code>
-  <em class="replaceable"><code>path</code></em></span></dt><dd><p>Load, parse and return the Nix expression in the
-    file <em class="replaceable"><code>path</code></em>.  If <em class="replaceable"><code>path
-    </code></em> is a directory, the file <code class="filename">default.nix
-    </code> in that directory is loaded.  Evaluation aborts if the
-    file doesn’t exist or contains an incorrect Nix expression.
-    <code class="function">import</code> implements Nix’s module system: you
-    can put any Nix expression (such as a set or a function) in a
-    separate file, and use it from Nix expressions in other
-    files.</p><p>A Nix expression loaded by <code class="function">import</code> must
-    not contain any <span class="emphasis"><em>free variables</em></span> (identifiers
-    that are not defined in the Nix expression itself and are not
-    built-in).  Therefore, it cannot refer to variables that are in
-    scope at the call site.  For instance, if you have a calling
-    expression
-
-</p><pre class="programlisting">
-rec {
-  x = 123;
-  y = import ./foo.nix;
-}</pre><p>
-
-    then the following <code class="filename">foo.nix</code> will give an
-    error:
-
-</p><pre class="programlisting">
-x + 456</pre><p>
-
-    since <code class="varname">x</code> is not in scope in
-    <code class="filename">foo.nix</code>.  If you want <code class="varname">x</code>
-    to be available in <code class="filename">foo.nix</code>, you should pass
-    it as a function argument:
-
-</p><pre class="programlisting">
-rec {
-  x = 123;
-  y = import ./foo.nix x;
-}</pre><p>
-
-    and
-
-</p><pre class="programlisting">
-x: x + 456</pre><p>
-
-    (The function argument doesn’t have to be called
-    <code class="varname">x</code> in <code class="filename">foo.nix</code>; any name
-    would work.)</p></dd><dt><span class="term"><code class="function">builtins.intersectAttrs</code>
-  <em class="replaceable"><code>e1</code></em> <em class="replaceable"><code>e2</code></em></span></dt><dd><p>Return a set consisting of the attributes in the
-    set <em class="replaceable"><code>e2</code></em> that also exist in the set
-    <em class="replaceable"><code>e1</code></em>.</p></dd><dt><span class="term"><code class="function">builtins.isAttrs</code>
-  <em class="replaceable"><code>e</code></em></span></dt><dd><p>Return <code class="literal">true</code> if
-    <em class="replaceable"><code>e</code></em> evaluates to a set, and
-    <code class="literal">false</code> otherwise.</p></dd><dt><span class="term"><code class="function">builtins.isList</code>
-  <em class="replaceable"><code>e</code></em></span></dt><dd><p>Return <code class="literal">true</code> if
-    <em class="replaceable"><code>e</code></em> evaluates to a list, and
-    <code class="literal">false</code> otherwise.</p></dd><dt><span class="term"><code class="function">builtins.isFunction</code>
-  <em class="replaceable"><code>e</code></em></span></dt><dd><p>Return <code class="literal">true</code> if
-    <em class="replaceable"><code>e</code></em> evaluates to a function, and
-    <code class="literal">false</code> otherwise.</p></dd><dt><span class="term"><code class="function">builtins.isString</code>
-  <em class="replaceable"><code>e</code></em></span></dt><dd><p>Return <code class="literal">true</code> if
-    <em class="replaceable"><code>e</code></em> evaluates to a string, and
-    <code class="literal">false</code> otherwise.</p></dd><dt><span class="term"><code class="function">builtins.isInt</code>
-  <em class="replaceable"><code>e</code></em></span></dt><dd><p>Return <code class="literal">true</code> if
-    <em class="replaceable"><code>e</code></em> evaluates to an int, and
-    <code class="literal">false</code> otherwise.</p></dd><dt><span class="term"><code class="function">builtins.isBool</code>
-  <em class="replaceable"><code>e</code></em></span></dt><dd><p>Return <code class="literal">true</code> if
-    <em class="replaceable"><code>e</code></em> evaluates to a bool, and
-    <code class="literal">false</code> otherwise.</p></dd><dt><span class="term"><code class="function">isNull</code>
-  <em class="replaceable"><code>e</code></em></span></dt><dd><p>Return <code class="literal">true</code> if
-    <em class="replaceable"><code>e</code></em> evaluates to <code class="literal">null</code>,
-    and <code class="literal">false</code> otherwise.</p><div class="warning"><h3 class="title">Warning</h3><p>This function is <span class="emphasis"><em>deprecated</em></span>;
-    just write <code class="literal">e == null</code> instead.</p></div></dd><dt><span class="term"><code class="function">builtins.length</code>
-  <em class="replaceable"><code>e</code></em></span></dt><dd><p>Return the length of the list
-    <em class="replaceable"><code>e</code></em>.</p></dd><dt><span class="term"><code class="function">builtins.lessThan</code>
-  <em class="replaceable"><code>e1</code></em> <em class="replaceable"><code>e2</code></em></span></dt><dd><p>Return <code class="literal">true</code> if the integer
-    <em class="replaceable"><code>e1</code></em> is less than the integer
-    <em class="replaceable"><code>e2</code></em>, and <code class="literal">false</code>
-    otherwise.  Evaluation aborts if either
-    <em class="replaceable"><code>e1</code></em> or <em class="replaceable"><code>e2</code></em>
-    does not evaluate to an integer.</p></dd><dt><span class="term"><code class="function">builtins.listToAttrs</code>
-  <em class="replaceable"><code>e</code></em></span></dt><dd><p>Construct a set from a list specifying the names
-    and values of each attribute.  Each element of the list should be
-    a set consisting of a string-valued attribute
-    <code class="varname">name</code> specifying the name of the attribute, and
-    an attribute <code class="varname">value</code> specifying its value.
-    Example:
-
-</p><pre class="programlisting">
-builtins.listToAttrs
-  [ { name = "foo"; value = 123; }
-    { name = "bar"; value = 456; }
-  ]
-</pre><p>
-
-    evaluates to
-
-</p><pre class="programlisting">
-{ foo = 123; bar = 456; }
-</pre><p>
-
-    </p></dd><dt><span class="term"><code class="function">map</code>
-  <em class="replaceable"><code>f</code></em> <em class="replaceable"><code>list</code></em></span></dt><dd><p>Apply the function <em class="replaceable"><code>f</code></em> to
-    each element in the list <em class="replaceable"><code>list</code></em>.  For
-    example,
-
-</p><pre class="programlisting">
-map (x: "foo" + x) [ "bar" "bla" "abc" ]</pre><p>
-
-    evaluates to <code class="literal">[ "foobar" "foobla" "fooabc"
-    ]</code>.</p></dd><dt><span class="term"><code class="function">builtins.mul</code>
-  <em class="replaceable"><code>e1</code></em> <em class="replaceable"><code>e2</code></em></span></dt><dd><p>Return the product of the integers
-    <em class="replaceable"><code>e1</code></em> and
-    <em class="replaceable"><code>e2</code></em>.</p></dd><dt><span class="term"><code class="function">builtins.parseDrvName</code>
-  <em class="replaceable"><code>s</code></em></span></dt><dd><p>Split the string <em class="replaceable"><code>s</code></em> into
-    a package name and version.  The package name is everything up to
-    but not including the first dash followed by a digit, and the
-    version is everything following that dash.  The result is returned
-    in a set <code class="literal">{ name, version }</code>.  Thus,
-    <code class="literal">builtins.parseDrvName "nix-0.12pre12876"</code>
-    returns <code class="literal">{ name = "nix"; version = "0.12pre12876";
-    }</code>.</p></dd><dt><span class="term"><code class="function">builtins.pathExists</code>
-  <em class="replaceable"><code>path</code></em></span></dt><dd><p>Return <code class="literal">true</code> if the path
-    <em class="replaceable"><code>path</code></em> exists, and
-    <code class="literal">false</code> otherwise.  One application of this
-    function is to conditionally include a Nix expression containing
-    user configuration:
-
-</p><pre class="programlisting">
-let
-  fileName = builtins.getEnv "CONFIG_FILE";
-  config =
-    if fileName != "" &amp;&amp; builtins.pathExists (builtins.toPath fileName)
-    then import (builtins.toPath fileName)
-    else { someSetting = false; }; <em class="lineannotation"><span class="lineannotation"># default configuration</span></em>
-in config.someSetting</pre><p>
-
-    (Note that <code class="envar">CONFIG_FILE</code> must be an absolute path for
-    this to work.)</p></dd><dt><span class="term"><code class="function">builtins.readDir</code>
-  <em class="replaceable"><code>path</code></em></span></dt><dd><p>Return the contents of the directory
-    <em class="replaceable"><code>path</code></em> as a set mapping directory entries
-    to the corresponding file type. For instance, if directory
-    <code class="filename">A</code> contains a regular file
-    <code class="filename">B</code> and another directory
-    <code class="filename">C</code>, then <code class="literal">builtins.readDir
-    ./A</code> will return the set
-
-</p><pre class="programlisting">
-{ B = "regular"; C = "directory"; }</pre><p>
-
-    The possible values for the file type are
-    <code class="literal">"regular"</code>, <code class="literal">"directory"</code>,
-    <code class="literal">"symlink"</code> and
-    <code class="literal">"unknown"</code>.</p></dd><dt><span class="term"><code class="function">builtins.readFile</code>
-  <em class="replaceable"><code>path</code></em></span></dt><dd><p>Return the contents of the file
-    <em class="replaceable"><code>path</code></em> as a string.</p></dd><dt><span class="term"><code class="function">removeAttrs</code>
-  <em class="replaceable"><code>set</code></em> <em class="replaceable"><code>list</code></em></span></dt><dd><p>Remove the attributes listed in
-    <em class="replaceable"><code>list</code></em> from
-    <em class="replaceable"><code>set</code></em>.  The attributes don’t have to
-    exist in <em class="replaceable"><code>set</code></em>. For instance,
-
-</p><pre class="programlisting">
-removeAttrs { x = 1; y = 2; z = 3; } [ "a" "x" "z" ]</pre><p>
-
-    evaluates to <code class="literal">{ y = 2; }</code>.</p></dd><dt><span class="term"><code class="function">builtins.replaceStrings</code>
-  <em class="replaceable"><code>from</code></em> <em class="replaceable"><code>to</code></em> <em class="replaceable"><code>s</code></em></span></dt><dd><p>Given string <em class="replaceable"><code>s</code></em>, replace
-    every occurrence of the strings in <em class="replaceable"><code>from</code></em>
-    with the corresponding string in
-    <em class="replaceable"><code>to</code></em>. For example,
-
-</p><pre class="programlisting">
-builtins.replaceStrings ["oo" "a"] ["a" "i"] "foobar"
-</pre><p>
-
-    evaluates to <code class="literal">"fabir"</code>.</p></dd><dt><span class="term"><code class="function">builtins.seq</code>
-  <em class="replaceable"><code>e1</code></em> <em class="replaceable"><code>e2</code></em></span></dt><dd><p>Evaluate <em class="replaceable"><code>e1</code></em>, then
-    evaluate and return <em class="replaceable"><code>e2</code></em>. This ensures
-    that a computation is strict in the value of
-    <em class="replaceable"><code>e1</code></em>.</p></dd><dt><span class="term"><code class="function">builtins.sort</code>
-  <em class="replaceable"><code>comparator</code></em> <em class="replaceable"><code>list</code></em></span></dt><dd><p>Return <em class="replaceable"><code>list</code></em> in sorted
-    order. It repeatedly calls the function
-    <em class="replaceable"><code>comparator</code></em> with two elements. The
-    comparator should return <code class="literal">true</code> if the first
-    element is less than the second, and <code class="literal">false</code>
-    otherwise. For example,
-
-</p><pre class="programlisting">
-builtins.sort builtins.lessThan [ 483 249 526 147 42 77 ]
-</pre><p>
-
-    produces the list <code class="literal">[ 42 77 147 249 483 526
-    ]</code>.</p><p>This is a stable sort: it preserves the relative order of
-    elements deemed equal by the comparator.</p></dd><dt><span class="term"><code class="function">builtins.stringLength</code>
-  <em class="replaceable"><code>e</code></em></span></dt><dd><p>Return the length of the string
-    <em class="replaceable"><code>e</code></em>.  If <em class="replaceable"><code>e</code></em> is
-    not a string, evaluation is aborted.</p></dd><dt><span class="term"><code class="function">builtins.sub</code>
-  <em class="replaceable"><code>e1</code></em> <em class="replaceable"><code>e2</code></em></span></dt><dd><p>Return the difference between the integers
-    <em class="replaceable"><code>e1</code></em> and
-    <em class="replaceable"><code>e2</code></em>.</p></dd><dt><span class="term"><code class="function">builtins.substring</code>
-  <em class="replaceable"><code>start</code></em> <em class="replaceable"><code>len</code></em>
-  <em class="replaceable"><code>s</code></em></span></dt><dd><p>Return the substring of
-    <em class="replaceable"><code>s</code></em> from character position
-    <em class="replaceable"><code>start</code></em> (zero-based) up to but not
-    including <em class="replaceable"><code>start + len</code></em>.  If
-    <em class="replaceable"><code>start</code></em> is greater than the length of the
-    string, an empty string is returned, and if <em class="replaceable"><code>start +
-    len</code></em> lies beyond the end of the string, only the
-    substring up to the end of the string is returned.
-    <em class="replaceable"><code>start</code></em> must be
-    non-negative.</p></dd><dt><span class="term"><code class="function">builtins.tail</code>
-  <em class="replaceable"><code>list</code></em></span></dt><dd><p>Return the second to last elements of a list;
-    abort evaluation if the argument isn’t a list or is an empty
-    list.</p></dd><dt><span class="term"><code class="function">throw</code>
-  <em class="replaceable"><code>s</code></em></span></dt><dd><p>Throw an error message
-    <em class="replaceable"><code>s</code></em>.  This usually aborts Nix expression
-    evaluation, but in <span class="command"><strong>nix-env -qa</strong></span> and other
-    commands that try to evaluate a set of derivations to get
-    information about those derivations, a derivation that throws an
-    error is silently skipped (which is not the case for
-    <code class="function">abort</code>).</p></dd><dt><a id="builtin-toFile"></a><span class="term"><code class="function">builtins.toFile</code>
-  <em class="replaceable"><code>name</code></em> <em class="replaceable"><code>s</code></em></span></dt><dd><p>Store the string <em class="replaceable"><code>s</code></em> in a
-    file in the Nix store and return its path.  The file has suffix
-    <em class="replaceable"><code>name</code></em>.  This file can be used as an
-    input to derivations.  One application is to write builders
-    “inline”.  For instance, the following Nix expression combines
-    <a class="xref" href="#ex-hello-nix" title="Example 14.1. Nix expression for GNU Hello (default.nix)">Example 14.1, “Nix expression for GNU Hello
-(<code class="filename">default.nix</code>)”</a> and <a class="xref" href="#ex-hello-builder" title="Example 14.2. Build script for GNU Hello (builder.sh)">Example 14.2, “Build script for GNU Hello
-(<code class="filename">builder.sh</code>)”</a> into one file:
-
-</p><pre class="programlisting">
-{ stdenv, fetchurl, perl }:
-
-stdenv.mkDerivation {
-  name = "hello-2.1.1";
-
-  builder = builtins.toFile "builder.sh" "
-    source $stdenv/setup
-
-    PATH=$perl/bin:$PATH
-
-    tar xvfz $src
-    cd hello-*
-    ./configure --prefix=$out
-    make
-    make install
-  ";
-
-  src = fetchurl {
-    url = http://nix.cs.uu.nl/dist/tarballs/hello-2.1.1.tar.gz;
-    md5 = "70c9ccf9fac07f762c24f2df2290784d";
-  };
-  inherit perl;
-}</pre><p>
-
-    </p><p>It is even possible for one file to refer to another, e.g.,
-
-</p><pre class="programlisting">
-  builder = let
-    configFile = builtins.toFile "foo.conf" "
-      # This is some dummy configuration file.
-      <em class="replaceable"><code>...</code></em>
-    ";
-  in builtins.toFile "builder.sh" "
-    source $stdenv/setup
-    <em class="replaceable"><code>...</code></em>
-    cp ${configFile} $out/etc/foo.conf
-  ";</pre><p>
-
-    Note that <code class="literal">${configFile}</code> is an antiquotation
-    (see <a class="xref" href="#ssec-values" title="15.1. Values">Section 15.1, “Values”</a>), so the result of the
-    expression <code class="literal">configFile</code> (i.e., a path like
-    <code class="filename">/nix/store/m7p7jfny445k...-foo.conf</code>) will be
-    spliced into the resulting string.</p><p>It is however <span class="emphasis"><em>not</em></span> allowed to have files
-    mutually referring to each other, like so:
-
-</p><pre class="programlisting">
-let
-  foo = builtins.toFile "foo" "...${bar}...";
-  bar = builtins.toFile "bar" "...${foo}...";
-in foo</pre><p>
-
-    This is not allowed because it would cause a cyclic dependency in
-    the computation of the cryptographic hashes for
-    <code class="varname">foo</code> and <code class="varname">bar</code>.</p></dd><dt><span class="term"><code class="function">builtins.toJSON</code> <em class="replaceable"><code>e</code></em></span></dt><dd><p>Return a string containing a JSON representation
-    of <em class="replaceable"><code>e</code></em>.  Strings, integers, booleans,
-    nulls and lists are mapped to their JSON equivalents.  Sets
-    (except derivations) are represented as objects.  Derivations are
-    translated to a JSON string containing the derivation’s output
-    path.  Paths are copied to the store and represented as a JSON
-    string of the resulting store path.</p></dd><dt><span class="term"><code class="function">builtins.toPath</code> <em class="replaceable"><code>s</code></em></span></dt><dd><p>Convert the string value
-    <em class="replaceable"><code>s</code></em> into a path value.  The string
-    <em class="replaceable"><code>s</code></em> must represent an absolute path
-    (i.e., must start with <code class="literal">/</code>).  The path need not
-    exist.  The resulting path is canonicalised, e.g.,
-    <code class="literal">builtins.toPath "//foo/xyzzy/../bar/"</code> returns
-    <code class="literal">/foo/bar</code>.</p></dd><dt><span class="term"><code class="function">toString</code> <em class="replaceable"><code>e</code></em></span></dt><dd><p>Convert the expression
-    <em class="replaceable"><code>e</code></em> to a string.
-    <em class="replaceable"><code>e</code></em> can be a string (in which case
-    <code class="function">toString</code> is a no-op) or a path (e.g.,
-    <code class="literal">toString /foo/bar</code> yields
-    <code class="literal">"/foo/bar"</code>.</p></dd><dt><a id="builtin-toXML"></a><span class="term"><code class="function">builtins.toXML</code> <em class="replaceable"><code>e</code></em></span></dt><dd><p>Return a string containing an XML representation
-    of <em class="replaceable"><code>e</code></em>.  The main application for
-    <code class="function">toXML</code> is to communicate information with the
-    builder in a more structured format than plain environment
-    variables.</p><p><a class="xref" href="#ex-toxml" title="Example 15.2. Passing information to a builder using toXML">Example 15.2, “Passing information to a builder
-    using <code class="function">toXML</code>”</a> shows an example where this is
-    the case.  The builder is supposed to generate the configuration
-    file for a <a class="link" href="http://jetty.mortbay.org/" target="_top">Jetty
-    servlet container</a>.  A servlet container contains a number
-    of servlets (<code class="filename">*.war</code> files) each exported under
-    a specific URI prefix.  So the servlet configuration is a list of
-    sets containing the <code class="varname">path</code> and
-    <code class="varname">war</code> of the servlet (<a class="xref" href="#ex-toxml-co-servlets"><span><img src="images/callouts/3.gif" alt="3" border="0" /></span></a>).  This kind of information is
-    difficult to communicate with the normal method of passing
-    information through an environment variable, which just
-    concatenates everything together into a string (which might just
-    work in this case, but wouldn’t work if fields are optional or
-    contain lists themselves).  Instead the Nix expression is
-    converted to an XML representation with
-    <code class="function">toXML</code>, which is unambiguous and can easily be
-    processed with the appropriate tools.  For instance, in the
-    example an XSLT stylesheet (<a class="xref" href="#ex-toxml-co-stylesheet"><span><img src="images/callouts/2.gif" alt="2" border="0" /></span></a>) is applied to it (<a class="xref" href="#ex-toxml-co-apply"><span><img src="images/callouts/1.gif" alt="1" border="0" /></span></a>) to
-    generate the XML configuration file for the Jetty server.  The XML
-    representation produced from <a class="xref" href="#ex-toxml-co-servlets"><span><img src="images/callouts/3.gif" alt="3" border="0" /></span></a> by <code class="function">toXML</code> is shown in <a class="xref" href="#ex-toxml-result" title="Example 15.3. XML representation produced by toXML">Example 15.3, “XML representation produced by
-    <code class="function">toXML</code>”</a>.</p><p>Note that <a class="xref" href="#ex-toxml" title="Example 15.2. Passing information to a builder using toXML">Example 15.2, “Passing information to a builder
-    using <code class="function">toXML</code>”</a> uses the <code class="function"><a class="function" href="#builtin-toFile">toFile</a></code> built-in to write the
-    builder and the stylesheet “inline” in the Nix expression.  The
-    path of the stylesheet is spliced into the builder at
-    <code class="literal">xsltproc ${stylesheet}
-    <em class="replaceable"><code>...</code></em></code>.</p><div class="example"><a id="ex-toxml"></a><p class="title"><strong>Example 15.2. Passing information to a builder
-    using <code class="function">toXML</code></strong></p><div class="example-contents"><pre class="programlisting">
-{ stdenv, fetchurl, libxslt, jira, uberwiki }:
-
-stdenv.mkDerivation (rec {
-  name = "web-server";
-
-  buildInputs = [ libxslt ];
-
-  builder = builtins.toFile "builder.sh" "
-    source $stdenv/setup
-    mkdir $out
-    echo $servlets | xsltproc ${stylesheet} - &gt; $out/server-conf.xml <a id="ex-toxml-co-apply"></a><span><img src="images/callouts/1.gif" alt="1" border="0" /></span> 
-  ";
-
-  stylesheet = builtins.toFile "stylesheet.xsl" <a id="ex-toxml-co-stylesheet"></a><span><img src="images/callouts/2.gif" alt="2" border="0" /></span> 
-   "&lt;?xml version='1.0' encoding='UTF-8'?&gt;
-    &lt;xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'&gt;
-      &lt;xsl:template match='/'&gt;
-        &lt;Configure&gt;
-          &lt;xsl:for-each select='/expr/list/attrs'&gt;
-            &lt;Call name='addWebApplication'&gt;
-              &lt;Arg&gt;&lt;xsl:value-of select=\"attr[@name = 'path']/string/@value\" /&gt;&lt;/Arg&gt;
-              &lt;Arg&gt;&lt;xsl:value-of select=\"attr[@name = 'war']/path/@value\" /&gt;&lt;/Arg&gt;
-            &lt;/Call&gt;
-          &lt;/xsl:for-each&gt;
-        &lt;/Configure&gt;
-      &lt;/xsl:template&gt;
-    &lt;/xsl:stylesheet&gt;
-  ";
-
-  servlets = builtins.toXML [ <a id="ex-toxml-co-servlets"></a><span><img src="images/callouts/3.gif" alt="3" border="0" /></span> 
-    { path = "/bugtracker"; war = jira + "/lib/atlassian-jira.war"; }
-    { path = "/wiki"; war = uberwiki + "/uberwiki.war"; }
-  ];
-})</pre></div></div><br class="example-break" /><div class="example"><a id="ex-toxml-result"></a><p class="title"><strong>Example 15.3. XML representation produced by
-    <code class="function">toXML</code></strong></p><div class="example-contents"><pre class="programlisting">&lt;?xml version='1.0' encoding='utf-8'?&gt;
-&lt;expr&gt;
-  &lt;list&gt;
-    &lt;attrs&gt;
-      &lt;attr name="path"&gt;
-        &lt;string value="/bugtracker" /&gt;
-      &lt;/attr&gt;
-      &lt;attr name="war"&gt;
-        &lt;path value="/nix/store/d1jh9pasa7k2...-jira/lib/atlassian-jira.war" /&gt;
-      &lt;/attr&gt;
-    &lt;/attrs&gt;
-    &lt;attrs&gt;
-      &lt;attr name="path"&gt;
-        &lt;string value="/wiki" /&gt;
-      &lt;/attr&gt;
-      &lt;attr name="war"&gt;
-        &lt;path value="/nix/store/y6423b1yi4sx...-uberwiki/uberwiki.war" /&gt;
-      &lt;/attr&gt;
-    &lt;/attrs&gt;
-  &lt;/list&gt;
-&lt;/expr&gt;</pre></div></div><br class="example-break" /></dd><dt><span class="term"><code class="function">builtins.trace</code>
-  <em class="replaceable"><code>e1</code></em> <em class="replaceable"><code>e2</code></em></span></dt><dd><p>Evaluate <em class="replaceable"><code>e1</code></em> and print its
-    abstract syntax representation on standard error.  Then return
-    <em class="replaceable"><code>e2</code></em>.  This function is useful for
-    debugging.</p></dd><dt><span class="term"><code class="function">builtins.typeOf</code>
-  <em class="replaceable"><code>e</code></em></span></dt><dd><p>Return a string representing the type of the value
-    <em class="replaceable"><code>e</code></em>, namely <code class="literal">"int"</code>,
-    <code class="literal">"bool"</code>, <code class="literal">"string"</code>,
-    <code class="literal">"path"</code>, <code class="literal">"null"</code>,
-    <code class="literal">"set"</code>, <code class="literal">"list"</code> or
-    <code class="literal">"lambda"</code>.</p></dd></dl></div></div><div class="footnotes"><br /><hr style="width:100; text-align:left;margin-left: 0" /><div id="ftn.idm140737318104384" class="footnote"><p><a href="#idm140737318104384" class="para"><sup class="para">[5] </sup></a>It's parsed as an expression that selects the
-  attribute <code class="varname">sh</code> from the variable
-  <code class="varname">builder</code>.</p></div><div id="ftn.idm140737318071536" class="footnote"><p><a href="#idm140737318071536" class="para"><sup class="para">[6] </sup></a>Actually, Nix detects infinite
-recursion in this case and aborts (<span class="quote">“<span class="quote">infinite recursion
-encountered</span>”</span>).</p></div><div id="ftn.idm140737317957936" class="footnote"><p><a href="#idm140737317957936" class="para"><sup class="para">[7] </sup></a>To figure out
-  your platform identifier, look at the line <span class="quote">“<span class="quote">Checking for the
-  canonical Nix system name</span>”</span> in the output of Nix's
-  <code class="filename">configure</code> script.</p></div></div></div></div><div class="part"><div class="titlepage"><div><div><h1 class="title"><a id="idm140737317578496"></a>Part V. Advanced Topics</h1></div></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="chap-distributed-builds"></a>Chapter 16. Distributed Builds</h2></div></div></div><p>Nix supports distributed builds, where a local Nix installation can
-forward Nix builds to other machines over the network.  This allows
-multiple builds to be performed in parallel (thus improving
-performance) and allows Nix to perform multi-platform builds in a
-semi-transparent way.  For instance, if you perform a build for a
-<code class="literal">powerpc-darwin</code> on an <code class="literal">i686-linux</code>
-machine, Nix can automatically forward the build to a
-<code class="literal">powerpc-darwin</code> machine, if available.</p><p>You can enable distributed builds by setting the environment
-variable <code class="envar">NIX_BUILD_HOOK</code> to point to a program that Nix
-will call whenever it wants to build a derivation.  The build hook
-(typically a shell or Perl script) can decline the build, in which Nix
-will perform it in the usual way if possible, or it can accept it, in
-which case it is responsible for somehow getting the inputs of the
-build to another machine, doing the build there, and getting the
-results back.  The details of the build hook protocol are described in
-the documentation of the <a class="link" href="#envar-build-hook"><code class="envar">NIX_BUILD_HOOK</code>
-variable</a>.</p><div class="example"><a id="ex-remote-systems"></a><p class="title"><strong>Example 16.1. Remote machine configuration:
-<code class="filename">remote-systems.conf</code></strong></p><div class="example-contents"><pre class="programlisting">
-nix@mcflurry.labs.cs.uu.nl  powerpc-darwin  /home/nix/.ssh/id_quarterpounder_auto  2
-nix@scratchy.labs.cs.uu.nl  i686-linux      /home/nix/.ssh/id_scratchy_auto        8 1 kvm
-nix@itchy.labs.cs.uu.nl     i686-linux      /home/nix/.ssh/id_scratchy_auto        8 2
-nix@poochie.labs.cs.uu.nl   i686-linux      /home/nix/.ssh/id_scratchy_auto        8 2 kvm perf
-</pre></div></div><br class="example-break" /><p>Nix ships with a build hook that should be suitable for most
-purposes.  It uses <span class="command"><strong>ssh</strong></span> and
-<span class="command"><strong>nix-copy-closure</strong></span> to copy the build inputs and
-outputs and perform the remote build.  To use it, you should set
-<code class="envar">NIX_BUILD_HOOK</code> to
-<code class="filename"><em class="replaceable"><code>prefix</code></em>/libexec/nix/build-remote.pl</code>.
-You should also define a list of available build machines and point
-the environment variable <code class="envar">NIX_REMOTE_SYSTEMS</code> to it.  An
-example configuration is shown in <a class="xref" href="#ex-remote-systems" title="Example 16.1. Remote machine configuration: remote-systems.conf">Example 16.1, “Remote machine configuration:
-<code class="filename">remote-systems.conf</code>”</a>.  Each line in the file specifies a machine, with the following
-bits of information:
-
-</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p>The name of the remote machine, with optionally the
-  user under which the remote build should be performed.  This is
-  actually passed as an argument to <span class="command"><strong>ssh</strong></span>, so it can
-  be an alias defined in your
-  <code class="filename">~/.ssh/config</code>.</p></li><li class="listitem"><p>A comma-separated list of Nix platform type
-  identifiers, such as <code class="literal">powerpc-darwin</code>.  It is
-  possible for a machine to support multiple platform types, e.g.,
-  <code class="literal">i686-linux,x86_64-linux</code>.</p></li><li class="listitem"><p>The SSH private key to be used to log in to the
-  remote machine.  Since builds should be non-interactive, this key
-  should not have a passphrase!</p></li><li class="listitem"><p>The maximum number of builds that
-  <code class="filename">build-remote.pl</code> will execute in parallel on the
-  machine.  Typically this should be equal to the number of CPU cores.
-  For instance, the machine <code class="literal">itchy</code> in the example
-  will execute up to 8 builds in parallel.</p></li><li class="listitem"><p>The “speed factor”, indicating the relative speed of
-  the machine.  If there are multiple machines of the right type, Nix
-  will prefer the fastest, taking load into account.</p></li><li class="listitem"><p>A comma-separated list of <span class="emphasis"><em>supported
-  features</em></span>.  If a derivation has the
-  <code class="varname">requiredSystemFeatures</code> attribute, then
-  <code class="filename">build-remote.pl</code> will only perform the
-  derivation on a machine that has the specified features.  For
-  instance, the attribute
-
-</p><pre class="programlisting">
-requiredSystemFeatures = [ "kvm" ];
-</pre><p>
-
-  will cause the build to be performed on a machine that has the
-  <code class="literal">kvm</code> feature (i.e., <code class="literal">scratchy</code> in
-  the example above).</p></li><li class="listitem"><p>A comma-separated list of <span class="emphasis"><em>mandatory
-  features</em></span>.  A machine will only be used to build a
-  derivation if all of the machine’s mandatory features appear in the
-  derivation’s <code class="varname">requiredSystemFeatures</code> attribute.
-  Thus, in the example, the machine <code class="literal">poochie</code> will
-  only do derivations that have
-  <code class="varname">requiredSystemFeatures</code> set to <code class="literal">["kvm"
-  "perf"]</code> or <code class="literal">["perf"]</code>.</p></li></ol></div><p>
-
-You should also set up the environment variable
-<code class="envar">NIX_CURRENT_LOAD</code> to point at a directory (e.g.,
-<code class="filename">/var/run/nix/current-load</code>) that
-<code class="filename">build-remote.pl</code> uses to remember how many builds
-it is currently executing remotely.  It doesn't look at the actual
-load on the remote machine, so if you have multiple instances of Nix
-running, they should use the same <code class="envar">NIX_CURRENT_LOAD</code>
-file.  Maybe in the future <code class="filename">build-remote.pl</code> will
-look at the actual remote load.</p></div></div><div class="part"><div class="titlepage"><div><div><h1 class="title"><a id="part-command-ref"></a>Part VI. Command Reference</h1></div></div></div><div class="partintro"><div></div><p>This section lists commands and options that you can use when you
-work with Nix.</p></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="sec-common-options"></a>Chapter 17. Common Options</h2></div></div></div><p>Most Nix commands accept the following command-line options:</p><div class="variablelist"><a id="opt-common"></a><dl class="variablelist"><dt><span class="term"><code class="option">--help</code></span></dt><dd><p>Prints out a summary of the command syntax and
-  exits.</p></dd><dt><span class="term"><code class="option">--version</code></span></dt><dd><p>Prints out the Nix version number on standard output
-  and exits.</p></dd><dt><span class="term"><code class="option">--verbose</code>, </span><span class="term"><code class="option">-v</code></span></dt><dd><p>Increases the level of verbosity of diagnostic messages
-  printed on standard error.  For each Nix operation, the information
-  printed on standard output is well-defined; any diagnostic
-  information is printed on standard error, never on standard
-  output.</p><p>This option may be specified repeatedly.  Currently, the
-  following verbosity levels exist:</p><div class="variablelist"><dl class="variablelist"><dt><span class="term">0</span></dt><dd><p>“Errors only”: only print messages
-    explaining why the Nix invocation failed.</p></dd><dt><span class="term">1</span></dt><dd><p>“Informational”: print
-    <span class="emphasis"><em>useful</em></span> messages about what Nix is doing.
-    This is the default.</p></dd><dt><span class="term">2</span></dt><dd><p>“Talkative”: print more informational
-    messages.</p></dd><dt><span class="term">3</span></dt><dd><p>“Chatty”: print even more
-    informational messages.</p></dd><dt><span class="term">4</span></dt><dd><p>“Debug”: print debug
-    information.</p></dd><dt><span class="term">5</span></dt><dd><p>“Vomit”: print vast amounts of debug
-    information.</p></dd></dl></div></dd><dt><span class="term"><code class="option">--no-build-output</code>, </span><span class="term"><code class="option">-Q</code></span></dt><dd><p>By default, output written by builders to standard
-  output and standard error is echoed to the Nix command's standard
-  error.  This option suppresses this behaviour.  Note that the
-  builder's standard output and error are always written to a log file
-  in
-  <code class="filename"><em class="replaceable"><code>prefix</code></em>/nix/var/log/nix</code>.</p></dd><dt><a id="opt-max-jobs"></a><span class="term"><code class="option">--max-jobs</code>, </span><span class="term"><code class="option">-j</code></span></dt><dd><p>Sets the maximum number of build jobs that Nix will
-  perform in parallel to the specified number.  The default is
-  specified by the <a class="link" href="#conf-build-max-jobs"><code class="literal">build-max-jobs</code></a>
-  configuration setting, which itself defaults to
-  <code class="literal">1</code>.  A higher value is useful on SMP systems or to
-  exploit I/O latency.</p></dd><dt><a id="opt-cores"></a><span class="term"><code class="option">--cores</code></span></dt><dd><p>Sets the value of the <code class="envar">NIX_BUILD_CORES</code>
-  environment variable in the invocation of builders.  Builders can
-  use this variable at their discretion to control the maximum amount
-  of parallelism.  For instance, in Nixpkgs, if the derivation
-  attribute <code class="varname">enableParallelBuilding</code> is set to
-  <code class="literal">true</code>, the builder passes the
-  <code class="option">-j<em class="replaceable"><code>N</code></em></code> flag to GNU Make.
-  It defaults to the value of the <a class="link" href="#conf-build-cores"><code class="literal">build-cores</code></a>
-  configuration setting, if set, or <code class="literal">1</code> otherwise.
-  The value <code class="literal">0</code> means that the builder should use all
-  available CPU cores in the system.</p></dd><dt><a id="opt-max-silent-time"></a><span class="term"><code class="option">--max-silent-time</code></span></dt><dd><p>Sets the maximum number of seconds that a builder
-  can go without producing any data on standard output or standard
-  error.  The default is specified by the <a class="link" href="#conf-build-max-silent-time"><code class="literal">build-max-silent-time</code></a>
-  configuration setting.  <code class="literal">0</code> means no
-  time-out.</p></dd><dt><a id="opt-timeout"></a><span class="term"><code class="option">--timeout</code></span></dt><dd><p>Sets the maximum number of seconds that a builder
-  can run.  The default is specified by the <a class="link" href="#conf-build-timeout"><code class="literal">build-timeout</code></a>
-  configuration setting.  <code class="literal">0</code> means no
-  timeout.</p></dd><dt><span class="term"><code class="option">--keep-going</code>, </span><span class="term"><code class="option">-k</code></span></dt><dd><p>Keep going in case of failed builds, to the
-  greatest extent possible.  That is, if building an input of some
-  derivation fails, Nix will still build the other inputs, but not the
-  derivation itself.  Without this option, Nix stops if any build
-  fails (except for builds of substitutes), possibly killing builds in
-  progress (in case of parallel or distributed builds).</p></dd><dt><span class="term"><code class="option">--keep-failed</code>, </span><span class="term"><code class="option">-K</code></span></dt><dd><p>Specifies that in case of a build failure, the
-  temporary directory (usually in <code class="filename">/tmp</code>) in which
-  the build takes place should not be deleted.  The path of the build
-  directory is printed as an informational message.
-    </p></dd><dt><span class="term"><code class="option">--fallback</code></span></dt><dd><p>Whenever Nix attempts to build a derivation for which
-  substitutes are known for each output path, but realising the output
-  paths through the substitutes fails, fall back on building the
-  derivation.</p><p>The most common scenario in which this is useful is when we
-  have registered substitutes in order to perform binary distribution
-  from, say, a network repository.  If the repository is down, the
-  realisation of the derivation will fail.  When this option is
-  specified, Nix will build the derivation instead.  Thus,
-  installation from binaries falls back on installation from source.
-  This option is not the default since it is generally not desirable
-  for a transient failure in obtaining the substitutes to lead to a
-  full build from source (with the related consumption of
-  resources).</p></dd><dt><span class="term"><code class="option">--readonly-mode</code></span></dt><dd><p>When this option is used, no attempt is made to open
-  the Nix database.  Most Nix operations do need database access, so
-  those operations will fail.</p></dd><dt><a id="opt-log-type"></a><span class="term"><code class="option">--log-type</code>
-<em class="replaceable"><code>type</code></em></span></dt><dd><p>This option determines how the output written to standard
-  error is formatted.  Nix’s diagnostic messages are typically
-  <span class="emphasis"><em>nested</em></span>.  For instance, when tracing Nix
-  expression evaluation (<span class="command"><strong>nix-env -vvvvv</strong></span>, messages
-  from subexpressions are nested inside their parent expressions.  Nix
-  builder output is also often nested.  For instance, the Nix Packages
-  generic builder nests the various build tasks (unpack, configure,
-  compile, etc.), and the GNU Make in <code class="literal">stdenv-linux</code>
-  has been patched to provide nesting for recursive Make
-  invocations.</p><p><em class="replaceable"><code>type</code></em> can be one of the
-  following:
-
-  </p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="literal">pretty</code></span></dt><dd><p>Pretty-print the output, indicating different
-      nesting levels using spaces.  This is the
-      default.</p></dd><dt><span class="term"><code class="literal">escapes</code></span></dt><dd><p>Indicate nesting using escape codes that can be
-      interpreted by the <span class="command"><strong>nix-log2xml</strong></span> tool in the
-      Nix source distribution.  The resulting XML file can be fed into
-      the <span class="command"><strong>log2html.xsl</strong></span> stylesheet to create an HTML
-      file that can be browsed interactively, using JavaScript to
-      expand and collapse parts of the output.</p></dd><dt><span class="term"><code class="literal">flat</code></span></dt><dd><p>Remove all nesting.</p></dd></dl></div><p>
-
-  </p></dd><dt><span class="term"><code class="option">--arg</code> <em class="replaceable"><code>name</code></em> <em class="replaceable"><code>value</code></em></span></dt><dd><p>This option is accepted by
-  <span class="command"><strong>nix-env</strong></span>, <span class="command"><strong>nix-instantiate</strong></span> and
-  <span class="command"><strong>nix-build</strong></span>.  When evaluating Nix expressions, the
-  expression evaluator will automatically try to call functions that
-  it encounters.  It can automatically call functions for which every
-  argument has a <a class="link" href="#ss-functions" title="Functions">default value</a>
-  (e.g., <code class="literal">{ <em class="replaceable"><code>argName</code></em> ?
-  <em class="replaceable"><code>defaultValue</code></em> }:
-  <em class="replaceable"><code>...</code></em></code>).  With
-  <code class="option">--arg</code>, you can also call functions that have
-  arguments without a default value (or override a default value).
-  That is, if the evaluator encounters a function with an argument
-  named <em class="replaceable"><code>name</code></em>, it will call it with value
-  <em class="replaceable"><code>value</code></em>.</p><p>For instance, the file
-  <code class="literal">pkgs/top-level/all-packages.nix</code> in Nixpkgs is
-  actually a function:
-
-</p><pre class="programlisting">
-{ # The system (e.g., `i686-linux') for which to build the packages.
-  system ? builtins.currentSystem
-  <em class="replaceable"><code>...</code></em>
-}: <em class="replaceable"><code>...</code></em></pre><p>
-
-  So if you call this Nix expression (e.g., when you do
-  <code class="literal">nix-env -i <em class="replaceable"><code>pkgname</code></em></code>),
-  the function will be called automatically using the value <a class="link" href="#builtin-currentSystem"><code class="literal">builtins.currentSystem</code></a>
-  for the <code class="literal">system</code> argument.  You can override this
-  using <code class="option">--arg</code>, e.g., <code class="literal">nix-env -i
-  <em class="replaceable"><code>pkgname</code></em> --arg system
-  \"i686-freebsd\"</code>.  (Note that since the argument is a Nix
-  string literal, you have to escape the quotes.)</p></dd><dt><span class="term"><code class="option">--argstr</code> <em class="replaceable"><code>name</code></em> <em class="replaceable"><code>value</code></em></span></dt><dd><p>This option is like <code class="option">--arg</code>, only the
-  value is not a Nix expression but a string.  So instead of
-  <code class="literal">--arg system \"i686-linux\"</code> (the outer quotes are
-  to keep the shell happy) you can say <code class="literal">--argstr system
-  i686-linux</code>.</p></dd><dt><a id="opt-attr"></a><span class="term"><code class="option">--attr</code> / <code class="option">-A</code>
-<em class="replaceable"><code>attrPath</code></em></span></dt><dd><p>Select an attribute from the top-level Nix
-  expression being evaluated.  (<span class="command"><strong>nix-env</strong></span>,
-  <span class="command"><strong>nix-instantiate</strong></span>, <span class="command"><strong>nix-build</strong></span> and
-  <span class="command"><strong>nix-shell</strong></span> only.)  The <span class="emphasis"><em>attribute
-  path</em></span> <em class="replaceable"><code>attrPath</code></em> is a sequence of
-  attribute names separated by dots.  For instance, given a top-level
-  Nix expression <em class="replaceable"><code>e</code></em>, the attribute path
-  <code class="literal">xorg.xorgserver</code> would cause the expression
-  <code class="literal"><em class="replaceable"><code>e</code></em>.xorg.xorgserver</code> to
-  be used.  See <a class="link" href="#refsec-nix-env-install-examples" title="Examples"><span class="command"><strong>nix-env
-  --install</strong></span></a> for some concrete examples.</p><p>In addition to attribute names, you can also specify array
-  indices.  For instance, the attribute path
-  <code class="literal">foo.3.bar</code> selects the <code class="literal">bar</code>
-  attribute of the fourth element of the array in the
-  <code class="literal">foo</code> attribute of the top-level
-  expression.</p></dd><dt><span class="term"><code class="option">--expr</code> / <code class="option">-E</code></span></dt><dd><p>Interpret the command line arguments as a list of
-  Nix expressions to be parsed and evaluated, rather than as a list
-  of file names of Nix expressions.
-  (<span class="command"><strong>nix-instantiate</strong></span>, <span class="command"><strong>nix-build</strong></span>
-  and <span class="command"><strong>nix-shell</strong></span> only.)</p></dd><dt><span class="term"><code class="option">--show-trace</code></span></dt><dd><p>Causes Nix to print out a stack trace in case of Nix
-  expression evaluation errors.</p></dd><dt><a id="opt-I"></a><span class="term"><code class="option">-I</code> <em class="replaceable"><code>path</code></em></span></dt><dd><p>Add a path to the Nix expression search path.  This
-  option may be given multiple times.  See the <code class="envar"><a class="envar" href="#env-NIX_PATH">NIX_PATH</a></code> environment variable for
-  information on the semantics of the Nix search path.  Paths added
-  through <code class="option">-I</code> take precedence over
-  <code class="envar">NIX_PATH</code>.</p></dd><dt><span class="term"><code class="option">--option</code> <em class="replaceable"><code>name</code></em> <em class="replaceable"><code>value</code></em></span></dt><dd><p>Set the Nix configuration option
-  <em class="replaceable"><code>name</code></em> to <em class="replaceable"><code>value</code></em>.
-  This overrides settings in the Nix configuration file (see
-  <span class="citerefentry"><span class="refentrytitle">nix.conf</span>(5)</span>).</p></dd><dt><span class="term"><code class="option">--repair</code></span></dt><dd><p>Fix corrupted or missing store paths by
-  redownloading or rebuilding them.  Note that this is slow because it
-  requires computing a cryptographic hash of the contents of every
-  path in the closure of the build.  Also note the warning under
-  <span class="command"><strong>nix-store --repair-path</strong></span>.</p></dd></dl></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="sec-common-env"></a>Chapter 18. Common Environment Variables</h2></div></div></div><p>Most Nix commands interpret the following environment variables:</p><div class="variablelist"><a id="env-common"></a><dl class="variablelist"><dt><a id="env-NIX_PATH"></a><span class="term"><code class="envar">NIX_PATH</code></span></dt><dd><p>A colon-separated list of directories used to look up Nix
-    expressions enclosed in angle brackets (i.e.,
-    <code class="literal">&lt;<em class="replaceable"><code>path</code></em>&gt;</code>).  For
-    instance, the value
-
-    </p><pre class="screen">
-/home/eelco/Dev:/etc/nixos</pre><p>
-
-    will cause Nix to look for paths relative to
-    <code class="filename">/home/eelco/Dev</code> and
-    <code class="filename">/etc/nixos</code>, in that order.  It is also
-    possible to match paths against a prefix.  For example, the value
-
-    </p><pre class="screen">
-nixpkgs=/home/eelco/Dev/nixpkgs-branch:/etc/nixos</pre><p>
-
-    will cause Nix to search for
-    <code class="literal">&lt;nixpkgs/<em class="replaceable"><code>path</code></em>&gt;</code> in
-    <code class="filename">/home/eelco/Dev/nixpkgs-branch/<em class="replaceable"><code>path</code></em></code>
-    and
-    <code class="filename">/etc/nixos/nixpkgs/<em class="replaceable"><code>path</code></em></code>.</p><p>If a path in the Nix search path starts with
-    <code class="literal">http://</code> or <code class="literal">https://</code>, it is
-    interpreted as the URL of a tarball that will be downloaded and
-    unpacked to a temporary location. The tarball must consist of a
-    single top-level directory. For example, setting
-    <code class="envar">NIX_PATH</code> to
-
-    </p><pre class="screen">
-nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz</pre><p>
-
-    tells Nix to download the latest revision in the Nixpkgs/NixOS
-    14.12 channel.</p><p>The search path can be extended using the <code class="option"><a class="option" href="#opt-I">-I</a></code> option, which takes precedence over
-    <code class="envar">NIX_PATH</code>.</p></dd><dt><span class="term"><code class="envar">NIX_IGNORE_SYMLINK_STORE</code></span></dt><dd><p>Normally, the Nix store directory (typically
-  <code class="filename">/nix/store</code>) is not allowed to contain any
-  symlink components.  This is to prevent “impure” builds.  Builders
-  sometimes “canonicalise” paths by resolving all symlink components.
-  Thus, builds on different machines (with
-  <code class="filename">/nix/store</code> resolving to different locations)
-  could yield different results.  This is generally not a problem,
-  except when builds are deployed to machines where
-  <code class="filename">/nix/store</code> resolves differently.  If you are
-  sure that you’re not going to do that, you can set
-  <code class="envar">NIX_IGNORE_SYMLINK_STORE</code> to <code class="envar">1</code>.</p><p>Note that if you’re symlinking the Nix store so that you can
-  put it on another file system than the root file system, on Linux
-  you’re better off using <code class="literal">bind</code> mount points, e.g.,
-
-  </p><pre class="screen">
-$ mkdir /nix
-$ mount -o bind /mnt/otherdisk/nix /nix</pre><p>
-
-  Consult the <span class="citerefentry"><span class="refentrytitle">mount</span>(8)</span> manual page for details.</p></dd><dt><span class="term"><code class="envar">NIX_STORE_DIR</code></span></dt><dd><p>Overrides the location of the Nix store (default
-  <code class="filename"><em class="replaceable"><code>prefix</code></em>/store</code>).</p></dd><dt><span class="term"><code class="envar">NIX_DATA_DIR</code></span></dt><dd><p>Overrides the location of the Nix static data
-  directory (default
-  <code class="filename"><em class="replaceable"><code>prefix</code></em>/share</code>).</p></dd><dt><span class="term"><code class="envar">NIX_LOG_DIR</code></span></dt><dd><p>Overrides the location of the Nix log directory
-  (default <code class="filename"><em class="replaceable"><code>prefix</code></em>/log/nix</code>).</p></dd><dt><span class="term"><code class="envar">NIX_STATE_DIR</code></span></dt><dd><p>Overrides the location of the Nix state directory
-  (default <code class="filename"><em class="replaceable"><code>prefix</code></em>/var/nix</code>).</p></dd><dt><span class="term"><code class="envar">NIX_DB_DIR</code></span></dt><dd><p>Overrides the location of the Nix database (default
-  <code class="filename"><em class="replaceable"><code>$NIX_STATE_DIR</code></em>/db</code>, i.e.,
-  <code class="filename"><em class="replaceable"><code>prefix</code></em>/var/nix/db</code>).</p></dd><dt><span class="term"><code class="envar">NIX_CONF_DIR</code></span></dt><dd><p>Overrides the location of the Nix configuration
-  directory (default
-  <code class="filename"><em class="replaceable"><code>prefix</code></em>/etc/nix</code>).</p></dd><dt><span class="term"><code class="envar">TMPDIR</code></span></dt><dd><p>Use the specified directory to store temporary
-  files.  In particular, this includes temporary build directories;
-  these can take up substantial amounts of disk space.  The default is
-  <code class="filename">/tmp</code>.</p></dd><dt><a id="envar-build-hook"></a><span class="term"><code class="envar">NIX_BUILD_HOOK</code></span></dt><dd><p>Specifies the location of the <span class="emphasis"><em>build hook</em></span>,
-  which is a program (typically some script) that Nix will call
-  whenever it wants to build a derivation.  This is used to implement
-  distributed builds<span class="phrase"> (see <a class="xref" href="#chap-distributed-builds" title="Chapter 16. Distributed Builds">Chapter 16, <em>Distributed Builds</em></a>)</span>.</p></dd><dt><a id="envar-remote"></a><span class="term"><code class="envar">NIX_REMOTE</code></span></dt><dd><p>This variable should be set to
-  <code class="literal">daemon</code> if you want to use the Nix daemon to
-  execute Nix operations. This is necessary in <a class="link" href="#ssec-multi-user" title="6.2. Multi-User Mode">multi-user Nix installations</a>.
-  Otherwise, it should be left unset.</p></dd><dt><span class="term"><code class="envar">NIX_SHOW_STATS</code></span></dt><dd><p>If set to <code class="literal">1</code>, Nix will print some
-  evaluation statistics, such as the number of values
-  allocated.</p></dd><dt><span class="term"><code class="envar">NIX_COUNT_CALLS</code></span></dt><dd><p>If set to <code class="literal">1</code>, Nix will print how
-  often functions were called during Nix expression evaluation.  This
-  is useful for profiling your Nix expressions.</p></dd><dt><span class="term"><code class="envar">GC_INITIAL_HEAP_SIZE</code></span></dt><dd><p>If Nix has been configured to use the Boehm garbage
-  collector, this variable sets the initial size of the heap in bytes.
-  It defaults to 384 MiB.  Setting it to a low value reduces memory
-  consumption, but will increase runtime due to the overhead of
-  garbage collection.</p></dd></dl></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="ch-main-commands"></a>Chapter 19. Main Commands</h2></div></div></div><p>This section lists commands and options that you can use when you
-work with Nix.</p><div class="refentry"><a id="sec-nix-env"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-env — manipulate or query Nix user environments</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-env</code>  [<code class="option">--help</code>] [<code class="option">--version</code>] [<code class="option">--verbose</code>...] [<code class="option">-v</code>...] [<code class="option">--no-build-output</code>] [<code class="option">-Q</code>] [
-  { <code class="option">--max-jobs</code>  |   <code class="option">-j</code> }
-  <em class="replaceable"><code>number</code></em>
-] [
-  <code class="option">--cores</code>
-  <em class="replaceable"><code>number</code></em>
-] [
-  <code class="option">--max-silent-time</code>
-  <em class="replaceable"><code>number</code></em>
-] [
-  <code class="option">--timeout</code>
-  <em class="replaceable"><code>number</code></em>
-] [<code class="option">--keep-going</code>] [<code class="option">-k</code>] [<code class="option">--keep-failed</code>] [<code class="option">-K</code>] [<code class="option">--fallback</code>] [<code class="option">--readonly-mode</code>] [<code class="option">--log-type</code> <em class="replaceable"><code>type</code></em>] [<code class="option">--show-trace</code>] [
-  <code class="option">-I</code>
-  <em class="replaceable"><code>path</code></em>
-] [
-  <code class="option">--option</code>
-  <em class="replaceable"><code>name</code></em>
-  <em class="replaceable"><code>value</code></em>
-]<br /> [<code class="option">--arg</code> <em class="replaceable"><code>name</code></em> <em class="replaceable"><code>value</code></em>] [<code class="option">--argstr</code> <em class="replaceable"><code>name</code></em> <em class="replaceable"><code>value</code></em>] [
-      { <code class="option">--file</code>  |   <code class="option">-f</code> }
-      <em class="replaceable"><code>path</code></em>
-    ] [
-      { <code class="option">--profile</code>  |   <code class="option">-p</code> }
-      <em class="replaceable"><code>path</code></em>
-    ] [
-       <code class="option">--system-filter</code> 
-      <em class="replaceable"><code>system</code></em>
-    ] [<code class="option">--dry-run</code>]  <em class="replaceable"><code>operation</code></em>  [<em class="replaceable"><code>options</code></em>...] [<em class="replaceable"><code>arguments</code></em>...]</p></div></div><div class="refsection"><a id="idm140737317360944"></a><h2>Description</h2><p>The command <span class="command"><strong>nix-env</strong></span> is used to manipulate Nix
-user environments.  User environments are sets of software packages
-available to a user at some point in time.  In other words, they are a
-synthesised view of the programs available in the Nix store.  There
-may be many user environments: different users can have different
-environments, and individual users can switch between different
-environments.</p><p><span class="command"><strong>nix-env</strong></span> takes exactly one
-<span class="emphasis"><em>operation</em></span> flag which indicates the subcommand to
-be performed.  These are documented below.</p></div><div class="refsection"><a id="idm140737317357376"></a><h2>Selectors</h2><p>Several commands, such as <span class="command"><strong>nix-env -q</strong></span> and
-<span class="command"><strong>nix-env -i</strong></span>, take a list of arguments that specify
-the packages on which to operate. These are extended regular
-expressions that must match the entire name of the package. (For
-details on regular expressions, see
-<span class="citerefentry"><span class="refentrytitle">regex</span>(7)</span>.)
-The match is case-sensitive. The regular expression can optionally be
-followed by a dash and a version number; if omitted, any version of
-the package will match.  Here are some examples:
-
-</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="literal">firefox</code></span></dt><dd><p>Matches the package name
-    <code class="literal">firefox</code> and any version.</p></dd><dt><span class="term"><code class="literal">firefox-32.0</code></span></dt><dd><p>Matches the package name
-    <code class="literal">firefox</code> and version
-    <code class="literal">32.0</code>.</p></dd><dt><span class="term"><code class="literal">gtk\\+</code></span></dt><dd><p>Matches the package name
-    <code class="literal">gtk+</code>. The <code class="literal">+</code> character must
-    be escaped using a backslash to prevent it from being interpreted
-    as a quantifier, and the backslash must be escaped in turn with
-    another backslash to ensure that the shell passes it
-    on.</p></dd><dt><span class="term"><code class="literal">.\*</code></span></dt><dd><p>Matches any package name. This is the default for
-    most commands.</p></dd><dt><span class="term"><code class="literal">'.*zip.*'</code></span></dt><dd><p>Matches any package name containing the string
-    <code class="literal">zip</code>. Note the dots: <code class="literal">'*zip*'</code>
-    does not work, because in a regular expression, the character
-    <code class="literal">*</code> is interpreted as a
-    quantifier.</p></dd><dt><span class="term"><code class="literal">'.*(firefox|chromium).*'</code></span></dt><dd><p>Matches any package name containing the strings
-    <code class="literal">firefox</code> or
-    <code class="literal">chromium</code>.</p></dd></dl></div><p>
-
-</p></div><div class="refsection"><a id="idm140737317339856"></a><h2>Common options</h2><p>This section lists the options that are common to all
-operations.  These options are allowed for every subcommand, though
-they may not always have an effect.  <span class="phrase">See
-also <a class="xref" href="#sec-common-options" title="Chapter 17. Common Options">Chapter 17, <em>Common Options</em></a>.</span></p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--file</code>, </span><span class="term"><code class="option">-f</code></span></dt><dd><p>Specifies the Nix expression (designated below as
-    the <span class="emphasis"><em>active Nix expression</em></span>) used by the
-    <code class="option">--install</code>, <code class="option">--upgrade</code>, and
-    <code class="option">--query --available</code> operations to obtain
-    derivations.  The default is
-    <code class="filename">~/.nix-defexpr</code>.</p><p>If the argument starts with <code class="literal">http://</code> or
-    <code class="literal">https://</code>, it is interpreted as the URL of a
-    tarball that will be downloaded and unpacked to a temporary
-    location. The tarball must include a single top-level directory
-    containing at least a file named <code class="filename">default.nix</code>.</p></dd><dt><span class="term"><code class="option">--profile</code>, </span><span class="term"><code class="option">-p</code></span></dt><dd><p>Specifies the profile to be used by those
-    operations that operate on a profile (designated below as the
-    <span class="emphasis"><em>active profile</em></span>).  A profile is a sequence of
-    user environments called <span class="emphasis"><em>generations</em></span>, one of
-    which is the <span class="emphasis"><em>current
-    generation</em></span>.</p></dd><dt><span class="term"><code class="option">--dry-run</code></span></dt><dd><p>For the <code class="option">--install</code>,
-    <code class="option">--upgrade</code>, <code class="option">--uninstall</code>,
-    <code class="option">--switch-generation</code>,
-    <code class="option">--delete-generations</code> and
-    <code class="option">--rollback</code> operations, this flag will cause
-    <span class="command"><strong>nix-env</strong></span> to print what
-    <span class="emphasis"><em>would</em></span> be done if this flag had not been
-    specified, without actually doing it.</p><p><code class="option">--dry-run</code> also prints out which paths will
-    be <a class="link" href="#gloss-substitute" title="substitute">substituted</a> (i.e.,
-    downloaded) and which paths will be built from source (because no
-    substitute is available).</p></dd><dt><span class="term"><code class="option">--system-filter</code> <em class="replaceable"><code>system</code></em></span></dt><dd><p>By default, operations such as <code class="option">--query
-    --available</code> show derivations matching any platform.  This
-    option allows you to use derivations for the specified platform
-    <em class="replaceable"><code>system</code></em>.</p></dd></dl></div></div><div class="refsection"><a id="idm140737317318000"></a><h2>Files</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="filename">~/.nix-defexpr</code></span></dt><dd><p>A directory that contains the default Nix
-    expressions used by the <code class="option">--install</code>,
-    <code class="option">--upgrade</code>, and <code class="option">--query
-    --available</code> operations to obtain derivations.  The
-    <code class="option">--file</code> option may be used to override this
-    default.</p><p>The Nix expressions in this directory are combined into a
-    single set, with each file as an attribute that has the name of
-    the file.  Thus, if <code class="filename">~/.nix-defexpr</code> contains
-    two files, <code class="filename">foo</code> and <code class="filename">bar</code>,
-    then the default Nix expression will essentially be
-
-</p><pre class="programlisting">
-{
-  foo = import ~/.nix-defexpr/foo;
-  bar = import ~/.nix-defexpr/bar;
-}</pre><p>
-
-    </p><p>The command <span class="command"><strong>nix-channel</strong></span> places symlinks
-    to the downloaded Nix expressions from each subscribed channel in
-    this directory.</p></dd><dt><span class="term"><code class="filename">~/.nix-profile</code></span></dt><dd><p>A symbolic link to the user's current profile.  By
-    default, this symlink points to
-    <code class="filename"><em class="replaceable"><code>prefix</code></em>/var/nix/profiles/default</code>.
-    The <code class="envar">PATH</code> environment variable should include
-    <code class="filename">~/.nix-profile/bin</code> for the user environment
-    to be visible to the user.</p></dd></dl></div></div><div class="refsection"><a id="rsec-nix-env-install"></a><h2>Operation <code class="option">--install</code></h2><div class="refsection"><a id="idm140737317305472"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-env</code>  { <code class="option">--install</code>  |   <code class="option">-i</code> } [
-    { <code class="option">--prebuilt-only</code>  |   <code class="option">-b</code> }
-  ] [
-    { <code class="option">--attr</code>  |   <code class="option">-A</code> }
-  ] [<code class="option">--from-expression</code>] [<code class="option">-E</code>] [<code class="option">--from-profile</code> <em class="replaceable"><code>path</code></em>] [ <code class="option">--preserve-installed</code>  |   <code class="option">-P</code> ] [ <code class="option">--remove-all</code>  |   <code class="option">-r</code> ]  <em class="replaceable"><code>args</code></em>... </p></div></div><div class="refsection"><a id="idm140737317289424"></a><h3>Description</h3><p>The install operation creates a new user environment, based on
-the current generation of the active profile, to which a set of store
-paths described by <em class="replaceable"><code>args</code></em> is added.  The
-arguments <em class="replaceable"><code>args</code></em> map to store paths in a
-number of possible ways:
-
-</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>By default, <em class="replaceable"><code>args</code></em> is a set
-  of derivation names denoting derivations in the active Nix
-  expression.  These are realised, and the resulting output paths are
-  installed.  Currently installed derivations with a name equal to the
-  name of a derivation being added are removed unless the option
-  <code class="option">--preserve-installed</code> is
-  specified.</p><p>If there are multiple derivations matching a name in
-  <em class="replaceable"><code>args</code></em> that have the same name (e.g.,
-  <code class="literal">gcc-3.3.6</code> and <code class="literal">gcc-4.1.1</code>), then
-  the derivation with the highest <span class="emphasis"><em>priority</em></span> is
-  used.  A derivation can define a priority by declaring the
-  <code class="varname">meta.priority</code> attribute.  This attribute should
-  be a number, with a higher value denoting a lower priority.  The
-  default priority is <code class="literal">0</code>.</p><p>If there are multiple matching derivations with the same
-  priority, then the derivation with the highest version will be
-  installed.</p><p>You can force the installation of multiple derivations with
-  the same name by being specific about the versions.  For instance,
-  <code class="literal">nix-env -i gcc-3.3.6 gcc-4.1.1</code> will install both
-  version of GCC (and will probably cause a user environment
-  conflict!).</p></li><li class="listitem"><p>If <a class="link" href="#opt-attr"><code class="option">--attr</code></a>
-  (<code class="option">-A</code>) is specified, the arguments are
-  <span class="emphasis"><em>attribute paths</em></span> that select attributes from the
-  top-level Nix expression.  This is faster than using derivation
-  names and unambiguous.  To find out the attribute paths of available
-  packages, use <code class="literal">nix-env -qaP</code>.</p></li><li class="listitem"><p>If <code class="option">--from-profile</code>
-  <em class="replaceable"><code>path</code></em> is given,
-  <em class="replaceable"><code>args</code></em> is a set of names denoting installed
-  store paths in the profile <em class="replaceable"><code>path</code></em>.  This is
-  an easy way to copy user environment elements from one profile to
-  another.</p></li><li class="listitem"><p>If <code class="option">--from-expression</code> is given,
-  <em class="replaceable"><code>args</code></em> are Nix <a class="link" href="#ss-functions" title="Functions">functions</a> that are called with the
-  active Nix expression as their single argument.  The derivations
-  returned by those function calls are installed.  This allows
-  derivations to be specified in an unambiguous way, which is necessary
-  if there are multiple derivations with the same
-  name.</p></li><li class="listitem"><p>If <em class="replaceable"><code>args</code></em> are store
-  derivations, then these are <a class="link" href="#rsec-nix-store-realise" title="Operation --realise">realised</a>, and the resulting
-  output paths are installed.</p></li><li class="listitem"><p>If <em class="replaceable"><code>args</code></em> are store paths
-  that are not store derivations, then these are <a class="link" href="#rsec-nix-store-realise" title="Operation --realise">realised</a> and
-  installed.</p></li><li class="listitem"><p>By default all outputs are installed for each derivation.
-  That can be reduced by setting <code class="literal">meta.outputsToInstall</code>.
-  </p></li></ul></div><p>
-
-</p></div><div class="refsection"><a id="idm140737317267744"></a><h3>Flags</h3><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--prebuilt-only</code> / <code class="option">-b</code></span></dt><dd><p>Use only derivations for which a substitute is
-    registered, i.e., there is a pre-built binary available that can
-    be downloaded in lieu of building the derivation.  Thus, no
-    packages will be built from source.</p></dd><dt><span class="term"><code class="option">--preserve-installed</code>, </span><span class="term"><code class="option">-P</code></span></dt><dd><p>Do not remove derivations with a name matching one
-    of the derivations being installed.  Usually, trying to have two
-    versions of the same package installed in the same generation of a
-    profile will lead to an error in building the generation, due to
-    file name clashes between the two versions.  However, this is not
-    the case for all packages.</p></dd><dt><span class="term"><code class="option">--remove-all</code>, </span><span class="term"><code class="option">-r</code></span></dt><dd><p>Remove all previously installed packages first.
-    This is equivalent to running <code class="literal">nix-env -e '.*'</code>
-    first, except that everything happens in a single
-    transaction.</p></dd></dl></div></div><div class="refsection"><a id="refsec-nix-env-install-examples"></a><h3>Examples</h3><p>To install a specific version of <span class="command"><strong>gcc</strong></span> from the
-active Nix expression:
-
-</p><pre class="screen">
-$ nix-env --install gcc-3.3.2
-installing `gcc-3.3.2'
-uninstalling `gcc-3.1'</pre><p>
-
-Note the previously installed version is removed, since
-<code class="option">--preserve-installed</code> was not specified.</p><p>To install an arbitrary version:
-
-</p><pre class="screen">
-$ nix-env --install gcc
-installing `gcc-3.3.2'</pre><p>
-
-</p><p>To install using a specific attribute:
-
-</p><pre class="screen">
-$ nix-env -i -A gcc40mips
-$ nix-env -i -A xorg.xorgserver</pre><p>
-
-</p><p>To install all derivations in the Nix expression <code class="filename">foo.nix</code>:
-
-</p><pre class="screen">
-$ nix-env -f ~/foo.nix -i '.*'</pre><p>
-
-</p><p>To copy the store path with symbolic name <code class="literal">gcc</code>
-from another profile:
-
-</p><pre class="screen">
-$ nix-env -i --from-profile /nix/var/nix/profiles/foo -i gcc</pre><p>
-
-</p><p>To install a specific store derivation (typically created by
-<span class="command"><strong>nix-instantiate</strong></span>):
-
-</p><pre class="screen">
-$ nix-env -i /nix/store/fibjb1bfbpm5mrsxc4mh2d8n37sxh91i-gcc-3.4.3.drv</pre><p>
-
-</p><p>To install a specific output path:
-
-</p><pre class="screen">
-$ nix-env -i /nix/store/y3cgx0xj1p4iv9x0pnnmdhr8iyg741vk-gcc-3.4.3</pre><p>
-
-</p><p>To install from a Nix expression specified on the command-line:
-
-</p><pre class="screen">
-$ nix-env -f ./foo.nix -i -E \
-    'f: (f {system = "i686-linux";}).subversionWithJava'</pre><p>
-
-I.e., this evaluates to <code class="literal">(f: (f {system =
-"i686-linux";}).subversionWithJava) (import ./foo.nix)</code>, thus
-selecting the <code class="literal">subversionWithJava</code> attribute from the
-set returned by calling the function defined in
-<code class="filename">./foo.nix</code>.</p><p>A dry-run tells you which paths will be downloaded or built from
-source:
-
-</p><pre class="screen">
-$ nix-env -f pkgs/top-level/all-packages.nix -i f-spot --dry-run
-(dry run; not doing anything)
-installing `f-spot-0.0.10'
-the following derivations will be built:
-  /nix/store/0g63jv9aagwbgci4nnzs2dkxqz84kdja-libgnomeprintui-2.12.1.tar.bz2.drv
-  /nix/store/0gfarvxq6sannsdw8a1ir40j1ys2mqb4-ORBit2-2.14.2.tar.bz2.drv
-  /nix/store/0i9gs5zc04668qiy60ga2rc16abkj7g8-sqlite-2.8.17.drv
-  <em class="replaceable"><code>...</code></em>
-the following paths will be substituted:
-  /nix/store/8zbipvm4gp9jfqh9nnk1n3bary1a37gs-perl-XML-Parser-2.34
-  /nix/store/b8a2bg7gnyvvvjjibp4axg9x1hzkw36c-mono-1.1.4
-  <em class="replaceable"><code>...</code></em></pre><p>
-
-</p><p>To install Firefox from the latest revision in the Nixpkgs/NixOS
-14.12 channel:
-
-</p><pre class="screen">
-$ nix-env -f https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz -iA firefox
-</pre><p>
-
-(The GitHub repository <code class="literal">nixpkgs-channels</code> is updated
-automatically from the main <code class="literal">nixpkgs</code> repository
-after certain tests have succeeded and binaries have been built and
-uploaded to the binary cache at <code class="uri">cache.nixos.org</code>.)</p></div></div><div class="refsection"><a id="rsec-nix-env-upgrade"></a><h2>Operation <code class="option">--upgrade</code></h2><div class="refsection"><a id="idm140737317241696"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-env</code>  { <code class="option">--upgrade</code>  |   <code class="option">-u</code> } [
-    { <code class="option">--prebuilt-only</code>  |   <code class="option">-b</code> }
-  ] [
-    { <code class="option">--attr</code>  |   <code class="option">-A</code> }
-  ] [<code class="option">--from-expression</code>] [<code class="option">-E</code>] [<code class="option">--from-profile</code> <em class="replaceable"><code>path</code></em>] [ <code class="option">--lt</code>  |   <code class="option">--leq</code>  |   <code class="option">--eq</code>  |   <code class="option">--always</code> ]  <em class="replaceable"><code>args</code></em>... </p></div></div><div class="refsection"><a id="idm140737317226304"></a><h3>Description</h3><p>The upgrade operation creates a new user environment, based on
-the current generation of the active profile, in which all store paths
-are replaced for which there are newer versions in the set of paths
-described by <em class="replaceable"><code>args</code></em>.  Paths for which there
-are no newer versions are left untouched; this is not an error.  It is
-also not an error if an element of <em class="replaceable"><code>args</code></em>
-matches no installed derivations.</p><p>For a description of how <em class="replaceable"><code>args</code></em> is
-mapped to a set of store paths, see <a class="link" href="#rsec-nix-env-install" title="Operation --install"><code class="option">--install</code></a>.  If
-<em class="replaceable"><code>args</code></em> describes multiple store paths with
-the same symbolic name, only the one with the highest version is
-installed.</p></div><div class="refsection"><a id="idm140737317221760"></a><h3>Flags</h3><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--lt</code></span></dt><dd><p>Only upgrade a derivation to newer versions.  This
-    is the default.</p></dd><dt><span class="term"><code class="option">--leq</code></span></dt><dd><p>In addition to upgrading to newer versions, also
-    “upgrade” to derivations that have the same version.  Version are
-    not a unique identification of a derivation, so there may be many
-    derivations that have the same version.  This flag may be useful
-    to force “synchronisation” between the installed and available
-    derivations.</p></dd><dt><span class="term"><code class="option">--eq</code></span></dt><dd><p><span class="emphasis"><em>Only</em></span> “upgrade” to derivations
-    that have the same version.  This may not seem very useful, but it
-    actually is, e.g., when there is a new release of Nixpkgs and you
-    want to replace installed applications with the same versions
-    built against newer dependencies (to reduce the number of
-    dependencies floating around on your system).</p></dd><dt><span class="term"><code class="option">--always</code></span></dt><dd><p>In addition to upgrading to newer versions, also
-    “upgrade” to derivations that have the same or a lower version.
-    I.e., derivations may actually be downgraded depending on what is
-    available in the active Nix expression.</p></dd></dl></div><p>For the other flags, see <code class="option"><a class="option" href="#rsec-nix-env-install" title="Operation --install">--install</a></code>.</p></div><div class="refsection"><a id="idm140737317212144"></a><h3>Examples</h3><pre class="screen">
-$ nix-env --upgrade gcc
-upgrading `gcc-3.3.1' to `gcc-3.4'
-
-$ nix-env -u gcc-3.3.2 --always <em class="lineannotation"><span class="lineannotation">(switch to a specific version)</span></em>
-upgrading `gcc-3.4' to `gcc-3.3.2'
-
-$ nix-env --upgrade pan
-<em class="lineannotation"><span class="lineannotation">(no upgrades available, so nothing happens)</span></em>
-
-$ nix-env -u <em class="lineannotation"><span class="lineannotation">(try to upgrade everything)</span></em>
-upgrading `hello-2.1.2' to `hello-2.1.3'
-upgrading `mozilla-1.2' to `mozilla-1.4'</pre></div><div class="refsection"><a id="ssec-version-comparisons"></a><h3>Versions</h3><p>The upgrade operation determines whether a derivation
-<code class="varname">y</code> is an upgrade of a derivation
-<code class="varname">x</code> by looking at their respective
-<code class="literal">name</code> attributes.  The names (e.g.,
-<code class="literal">gcc-3.3.1</code> are split into two parts: the package
-name (<code class="literal">gcc</code>), and the version
-(<code class="literal">3.3.1</code>).  The version part starts after the first
-dash not following by a letter.  <code class="varname">x</code> is considered an
-upgrade of <code class="varname">y</code> if their package names match, and the
-version of <code class="varname">y</code> is higher that that of
-<code class="varname">x</code>.</p><p>The versions are compared by splitting them into contiguous
-components of numbers and letters.  E.g., <code class="literal">3.3.1pre5</code>
-is split into <code class="literal">[3, 3, 1, "pre", 5]</code>.  These lists are
-then compared lexicographically (from left to right).  Corresponding
-components <code class="varname">a</code> and <code class="varname">b</code> are compared
-as follows.  If they are both numbers, integer comparison is used.  If
-<code class="varname">a</code> is an empty string and <code class="varname">b</code> is a
-number, <code class="varname">a</code> is considered less than
-<code class="varname">b</code>.  The special string component
-<code class="literal">pre</code> (for <span class="emphasis"><em>pre-release</em></span>) is
-considered to be less than other components.  String components are
-considered less than number components.  Otherwise, they are compared
-lexicographically (i.e., using case-sensitive string comparison).</p><p>This is illustrated by the following examples:
-
-</p><pre class="screen">
-1.0 &lt; 2.3
-2.1 &lt; 2.3
-2.3 = 2.3
-2.5 &gt; 2.3
-3.1 &gt; 2.3
-2.3.1 &gt; 2.3
-2.3.1 &gt; 2.3a
-2.3pre1 &lt; 2.3
-2.3pre3 &lt; 2.3pre12
-2.3a &lt; 2.3c
-2.3pre1 &lt; 2.3c
-2.3pre1 &lt; 2.3q</pre><p>
-
-</p></div></div><div class="refsection"><a id="idm140737317196576"></a><h2>Operation <code class="option">--uninstall</code></h2><div class="refsection"><a id="idm140737317195744"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-env</code>  { <code class="option">--uninstall</code>  |   <code class="option">-e</code> }  <em class="replaceable"><code>drvnames</code></em>... </p></div></div><div class="refsection"><a id="idm140737317190960"></a><h3>Description</h3><p>The uninstall operation creates a new user environment, based on
-the current generation of the active profile, from which the store
-paths designated by the symbolic names
-<em class="replaceable"><code>names</code></em> are removed.</p></div><div class="refsection"><a id="idm140737317189264"></a><h3>Examples</h3><pre class="screen">
-$ nix-env --uninstall gcc
-$ nix-env -e '.*' <em class="lineannotation"><span class="lineannotation">(remove everything)</span></em></pre></div></div><div class="refsection"><a id="rsec-nix-env-set"></a><h2>Operation <code class="option">--set</code></h2><div class="refsection"><a id="idm140737317186160"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-env</code>   <code class="option">--set</code>   <em class="replaceable"><code>drvname</code></em> </p></div></div><div class="refsection"><a id="idm140737317183056"></a><h3>Description</h3><p>The <code class="option">--set</code> operation modifies the current generation of a
-profile so that it contains exactly the specified derivation, and nothing else.
-</p></div><div class="refsection"><a id="idm140737317181408"></a><h3>Examples</h3><p>
-The following updates a profile such that its current generation will contain
-just Firefox:
-
-</p><pre class="screen">
-$ nix-env -p /nix/var/nix/profiles/browser --set firefox</pre><p>
-
-</p></div></div><div class="refsection"><a id="rsec-nix-env-set-flag"></a><h2>Operation <code class="option">--set-flag</code></h2><div class="refsection"><a id="idm140737317178080"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-env</code>   <code class="option">--set-flag</code>   <em class="replaceable"><code>name</code></em>   <em class="replaceable"><code>value</code></em>   <em class="replaceable"><code>drvnames</code></em>... </p></div></div><div class="refsection"><a id="idm140737317173072"></a><h3>Description</h3><p>The <code class="option">--set-flag</code> operation allows meta attributes
-of installed packages to be modified.  There are several attributes
-that can be usefully modified, because they affect the behaviour of
-<span class="command"><strong>nix-env</strong></span> or the user environment build
-script:
-
-</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><code class="varname">priority</code> can be changed to
-  resolve filename clashes.  The user environment build script uses
-  the <code class="varname">meta.priority</code> attribute of derivations to
-  resolve filename collisions between packages.  Lower priority values
-  denote a higher priority.  For instance, the GCC wrapper package and
-  the Binutils package in Nixpkgs both have a file
-  <code class="filename">bin/ld</code>, so previously if you tried to install
-  both you would get a collision.  Now, on the other hand, the GCC
-  wrapper declares a higher priority than Binutils, so the former’s
-  <code class="filename">bin/ld</code> is symlinked in the user
-  environment.</p></li><li class="listitem"><p><code class="varname">keep</code> can be set to
-  <code class="literal">true</code> to prevent the package from being upgraded
-  or replaced.  This is useful if you want to hang on to an older
-  version of a package.</p></li><li class="listitem"><p><code class="varname">active</code> can be set to
-  <code class="literal">false</code> to “disable” the package.  That is, no
-  symlinks will be generated to the files of the package, but it
-  remains part of the profile (so it won’t be garbage-collected).  It
-  can be set back to <code class="literal">true</code> to re-enable the
-  package.</p></li></ul></div><p>
-
-</p></div><div class="refsection"><a id="idm140737317164160"></a><h3>Examples</h3><p>To prevent the currently installed Firefox from being upgraded:
-
-</p><pre class="screen">
-$ nix-env --set-flag keep true firefox</pre><p>
-
-After this, <span class="command"><strong>nix-env -u</strong></span> will ignore Firefox.</p><p>To disable the currently installed Firefox, then install a new
-Firefox while the old remains part of the profile:
-
-</p><pre class="screen">
-$ nix-env -q
-firefox-2.0.0.9 <em class="lineannotation"><span class="lineannotation">(the current one)</span></em>
-
-$ nix-env --preserve-installed -i firefox-2.0.0.11
-installing `firefox-2.0.0.11'
-building path(s) `/nix/store/myy0y59q3ig70dgq37jqwg1j0rsapzsl-user-environment'
-collision between `/nix/store/<em class="replaceable"><code>...</code></em>-firefox-2.0.0.11/bin/firefox'
-  and `/nix/store/<em class="replaceable"><code>...</code></em>-firefox-2.0.0.9/bin/firefox'.
-<em class="lineannotation"><span class="lineannotation">(i.e., can’t have two active at the same time)</span></em>
-
-$ nix-env --set-flag active false firefox
-setting flag on `firefox-2.0.0.9'
-
-$ nix-env --preserve-installed -i firefox-2.0.0.11
-installing `firefox-2.0.0.11'
-
-$ nix-env -q
-firefox-2.0.0.11 <em class="lineannotation"><span class="lineannotation">(the enabled one)</span></em>
-firefox-2.0.0.9 <em class="lineannotation"><span class="lineannotation">(the disabled one)</span></em></pre><p>
-
-</p><p>To make files from <code class="literal">binutils</code> take precedence
-over files from <code class="literal">gcc</code>:
-
-</p><pre class="screen">
-$ nix-env --set-flag priority 5 binutils
-$ nix-env --set-flag priority 10 gcc</pre><p>
-
-</p></div></div><div class="refsection"><a id="idm140737317155984"></a><h2>Operation <code class="option">--query</code></h2><div class="refsection"><a id="idm140737317155152"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-env</code>  { <code class="option">--query</code>  |   <code class="option">-q</code> } [ <code class="option">--installed</code>  |   <code class="option">--available</code>  |   <code class="option">-a</code> ]<br /> [
-    { <code class="option">--status</code>  |   <code class="option">-s</code> }
-  ] [
-    { <code class="option">--attr-path</code>  |   <code class="option">-P</code> }
-  ] [<code class="option">--no-name</code>] [
-    { <code class="option">--compare-versions</code>  |   <code class="option">-c</code> }
-  ] [<code class="option">--system</code>] [<code class="option">--drv-path</code>] [<code class="option">--out-path</code>] [<code class="option">--description</code>] [<code class="option">--meta</code>]<br /> [<code class="option">--xml</code>] [<code class="option">--json</code>] [
-    { <code class="option">--prebuilt-only</code>  |   <code class="option">-b</code> }
-  ] [
-    { <code class="option">--attr</code>  |   <code class="option">-A</code> }
-    <em class="replaceable"><code>attribute-path</code></em>
-  ]<br />  <em class="replaceable"><code>names</code></em>... </p></div></div><div class="refsection"><a id="idm140737317128752"></a><h3>Description</h3><p>The query operation displays information about either the store
-paths that are installed in the current generation of the active
-profile (<code class="option">--installed</code>), or the derivations that are
-available for installation in the active Nix expression
-(<code class="option">--available</code>).  It only prints information about
-derivations whose symbolic name matches one of
-<em class="replaceable"><code>names</code></em>.</p><p>The derivations are sorted by their <code class="literal">name</code>
-attributes.</p></div><div class="refsection"><a id="idm140737317125200"></a><h3>Source selection</h3><p>The following flags specify the set of things on which the query
-operates.</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--installed</code></span></dt><dd><p>The query operates on the store paths that are
-    installed in the current generation of the active profile.  This
-    is the default.</p></dd><dt><span class="term"><code class="option">--available</code>, </span><span class="term"><code class="option">-a</code></span></dt><dd><p>The query operates on the derivations that are
-    available in the active Nix expression.</p></dd></dl></div></div><div class="refsection"><a id="idm140737317120272"></a><h3>Queries</h3><p>The following flags specify what information to display about
-the selected derivations.  Multiple flags may be specified, in which
-case the information is shown in the order given here.  Note that the
-name of the derivation is shown unless <code class="option">--no-name</code> is
-specified.</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--xml</code></span></dt><dd><p>Print the result in an XML representation suitable
-    for automatic processing by other tools.  The root element is
-    called <code class="literal">items</code>, which contains a
-    <code class="literal">item</code> element for each available or installed
-    derivation.  The fields discussed below are all stored in
-    attributes of the <code class="literal">item</code>
-    elements.</p></dd><dt><span class="term"><code class="option">--json</code></span></dt><dd><p>Print the result in a JSON representation suitable
-    for automatic processing by other tools.</p></dd><dt><span class="term"><code class="option">--prebuilt-only</code> / <code class="option">-b</code></span></dt><dd><p>Show only derivations for which a substitute is
-    registered, i.e., there is a pre-built binary available that can
-    be downloaded in lieu of building the derivation.  Thus, this
-    shows all packages that probably can be installed
-    quickly.</p></dd><dt><span class="term"><code class="option">--status</code>, </span><span class="term"><code class="option">-s</code></span></dt><dd><p>Print the <span class="emphasis"><em>status</em></span> of the
-    derivation.  The status consists of three characters.  The first
-    is <code class="literal">I</code> or <code class="literal">-</code>, indicating
-    whether the derivation is currently installed in the current
-    generation of the active profile.  This is by definition the case
-    for <code class="option">--installed</code>, but not for
-    <code class="option">--available</code>.  The second is <code class="literal">P</code>
-    or <code class="literal">-</code>, indicating whether the derivation is
-    present on the system.  This indicates whether installation of an
-    available derivation will require the derivation to be built.  The
-    third is <code class="literal">S</code> or <code class="literal">-</code>, indicating
-    whether a substitute is available for the
-    derivation.</p></dd><dt><span class="term"><code class="option">--attr-path</code>, </span><span class="term"><code class="option">-P</code></span></dt><dd><p>Print the <span class="emphasis"><em>attribute path</em></span> of
-    the derivation, which can be used to unambiguously select it using
-    the <a class="link" href="#opt-attr"><code class="option">--attr</code> option</a>
-    available in commands that install derivations like
-    <code class="literal">nix-env --install</code>.</p></dd><dt><span class="term"><code class="option">--no-name</code></span></dt><dd><p>Suppress printing of the <code class="literal">name</code>
-    attribute of each derivation.</p></dd><dt><span class="term"><code class="option">--compare-versions</code> /
-  <code class="option">-c</code></span></dt><dd><p>Compare installed versions to available versions,
-    or vice versa (if <code class="option">--available</code> is given).  This is
-    useful for quickly seeing whether upgrades for installed
-    packages are available in a Nix expression.  A column is added
-    with the following meaning:
-
-    </p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="literal">&lt;</code> <em class="replaceable"><code>version</code></em></span></dt><dd><p>A newer version of the package is available
-        or installed.</p></dd><dt><span class="term"><code class="literal">=</code> <em class="replaceable"><code>version</code></em></span></dt><dd><p>At most the same version of the package is
-        available or installed.</p></dd><dt><span class="term"><code class="literal">&gt;</code> <em class="replaceable"><code>version</code></em></span></dt><dd><p>Only older versions of the package are
-        available or installed.</p></dd><dt><span class="term"><code class="literal">- ?</code></span></dt><dd><p>No version of the package is available or
-        installed.</p></dd></dl></div><p>
-
-    </p></dd><dt><span class="term"><code class="option">--system</code></span></dt><dd><p>Print the <code class="literal">system</code> attribute of
-    the derivation.</p></dd><dt><span class="term"><code class="option">--drv-path</code></span></dt><dd><p>Print the path of the store
-    derivation.</p></dd><dt><span class="term"><code class="option">--out-path</code></span></dt><dd><p>Print the output path of the
-    derivation.</p></dd><dt><span class="term"><code class="option">--description</code></span></dt><dd><p>Print a short (one-line) description of the
-    derivation, if available.  The description is taken from the
-    <code class="literal">meta.description</code> attribute of the
-    derivation.</p></dd><dt><span class="term"><code class="option">--meta</code></span></dt><dd><p>Print all of the meta-attributes of the
-    derivation.  This option is only available with
-    <code class="option">--xml</code>.</p></dd></dl></div></div><div class="refsection"><a id="idm140737317081696"></a><h3>Examples</h3><p>To show installed packages:
-
-</p><pre class="screen">
-$ nix-env -q
-bison-1.875c
-docbook-xml-4.2
-firefox-1.0.4
-MPlayer-1.0pre7
-ORBit2-2.8.3
-<em class="replaceable"><code>…</code></em>
-</pre><p>
-
-</p><p>To show available packages:
-
-</p><pre class="screen">
-$ nix-env -qa
-firefox-1.0.7
-GConf-2.4.0.1
-MPlayer-1.0pre7
-ORBit2-2.8.3
-<em class="replaceable"><code>…</code></em>
-</pre><p>
-
-</p><p>To show the status of available packages:
-
-</p><pre class="screen">
-$ nix-env -qas
--P- firefox-1.0.7   <em class="lineannotation"><span class="lineannotation">(not installed but present)</span></em>
---S GConf-2.4.0.1   <em class="lineannotation"><span class="lineannotation">(not present, but there is a substitute for fast installation)</span></em>
---S MPlayer-1.0pre3 <em class="lineannotation"><span class="lineannotation">(i.e., this is not the installed MPlayer, even though the version is the same!)</span></em>
-IP- ORBit2-2.8.3    <em class="lineannotation"><span class="lineannotation">(installed and by definition present)</span></em>
-<em class="replaceable"><code>…</code></em>
-</pre><p>
-
-</p><p>To show available packages in the Nix expression <code class="filename">foo.nix</code>:
-
-</p><pre class="screen">
-$ nix-env -f ./foo.nix -qa
-foo-1.2.3
-</pre><p>
-
-</p><p>To compare installed versions to what’s available:
-
-</p><pre class="screen">
-$ nix-env -qc
-<em class="replaceable"><code>...</code></em>
-acrobat-reader-7.0 - ?      <em class="lineannotation"><span class="lineannotation">(package is not available at all)</span></em>
-autoconf-2.59      = 2.59   <em class="lineannotation"><span class="lineannotation">(same version)</span></em>
-firefox-1.0.4      &lt; 1.0.7  <em class="lineannotation"><span class="lineannotation">(a more recent version is available)</span></em>
-<em class="replaceable"><code>...</code></em>
-</pre><p>
-
-</p><p>To show all packages with “<code class="literal">zip</code>” in the name:
-
-</p><pre class="screen">
-$ nix-env -qa '.*zip.*'
-bzip2-1.0.6
-gzip-1.6
-zip-3.0
-<em class="replaceable"><code>…</code></em>
-</pre><p>
-
-</p><p>To show all packages with “<code class="literal">firefox</code>” or
-“<code class="literal">chromium</code>” in the name:
-
-</p><pre class="screen">
-$ nix-env -qa '.*(firefox|chromium).*'
-chromium-37.0.2062.94
-chromium-beta-38.0.2125.24
-firefox-32.0.3
-firefox-with-plugins-13.0.1
-<em class="replaceable"><code>…</code></em>
-</pre><p>
-
-</p><p>To show all packages in the latest revision of the Nixpkgs
-repository:
-
-</p><pre class="screen">
-$ nix-env -f https://github.com/NixOS/nixpkgs/archive/master.tar.gz -qa
-</pre><p>
-
-</p></div></div><div class="refsection"><a id="idm140737317065152"></a><h2>Operation <code class="option">--switch-profile</code></h2><div class="refsection"><a id="idm140737317064320"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-env</code>  { <code class="option">--switch-profile</code>  |   <code class="option">-S</code> } {<em class="replaceable"><code>path</code></em>}</p></div></div><div class="refsection"><a id="idm140737317059840"></a><h3>Description</h3><p>This operation makes <em class="replaceable"><code>path</code></em> the current
-profile for the user.  That is, the symlink
-<code class="filename">~/.nix-profile</code> is made to point to
-<em class="replaceable"><code>path</code></em>.</p></div><div class="refsection"><a id="idm140737317057472"></a><h3>Examples</h3><pre class="screen">
-$ nix-env -S ~/my-profile</pre></div></div><div class="refsection"><a id="idm140737317055792"></a><h2>Operation <code class="option">--list-generations</code></h2><div class="refsection"><a id="idm140737317054960"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-env</code>   <code class="option">--list-generations</code> </p></div></div><div class="refsection"><a id="idm140737317052672"></a><h3>Description</h3><p>This operation print a list of all the currently existing
-generations for the active profile.  These may be switched to using
-the <code class="option">--switch-generation</code> operation.  It also prints
-the creation date of the generation, and indicates the current
-generation.</p></div><div class="refsection"><a id="idm140737317050944"></a><h3>Examples</h3><pre class="screen">
-$ nix-env --list-generations
-  95   2004-02-06 11:48:24
-  96   2004-02-06 11:49:01
-  97   2004-02-06 16:22:45
-  98   2004-02-06 16:24:33   (current)</pre></div></div><div class="refsection"><a id="idm140737317049232"></a><h2>Operation <code class="option">--delete-generations</code></h2><div class="refsection"><a id="idm140737317048400"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-env</code>   <code class="option">--delete-generations</code>   <em class="replaceable"><code>generations</code></em>... </p></div></div><div class="refsection"><a id="idm140737317045024"></a><h3>Description</h3><p>This operation deletes the specified generations of the current
-profile.  The generations can be a list of generation numbers, the
-special value <code class="literal">old</code> to delete all non-current
-generations, or a value such as <code class="literal">30d</code> to delete all
-generations older than the specified number of days (except for the
-generation that was active at that point in time).
-Periodically deleting old generations is important to make garbage
-collection effective.</p></div><div class="refsection"><a id="idm140737317042800"></a><h3>Examples</h3><pre class="screen">
-$ nix-env --delete-generations 3 4 8
-
-$ nix-env --delete-generations 30d
-
-$ nix-env -p other_profile --delete-generations old</pre></div></div><div class="refsection"><a id="idm140737317041024"></a><h2>Operation <code class="option">--switch-generation</code></h2><div class="refsection"><a id="idm140737317040192"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-env</code>  { <code class="option">--switch-generation</code>  |   <code class="option">-G</code> } {<em class="replaceable"><code>generation</code></em>}</p></div></div><div class="refsection"><a id="idm140737317035712"></a><h3>Description</h3><p>This operation makes generation number
-<em class="replaceable"><code>generation</code></em> the current generation of the
-active profile.  That is, if the
-<code class="filename"><em class="replaceable"><code>profile</code></em></code> is the path to
-the active profile, then the symlink
-<code class="filename"><em class="replaceable"><code>profile</code></em></code> is made to
-point to
-<code class="filename"><em class="replaceable"><code>profile</code></em>-<em class="replaceable"><code>generation</code></em>-link</code>,
-which is in turn a symlink to the actual user environment in the Nix
-store.</p><p>Switching will fail if the specified generation does not exist.</p></div><div class="refsection"><a id="idm140737317031328"></a><h3>Examples</h3><pre class="screen">
-$ nix-env -G 42
-switching from generation 50 to 42</pre></div></div><div class="refsection"><a id="idm140737317029632"></a><h2>Operation <code class="option">--rollback</code></h2><div class="refsection"><a id="idm140737317028800"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-env</code>   <code class="option">--rollback</code> </p></div></div><div class="refsection"><a id="idm140737317026512"></a><h3>Description</h3><p>This operation switches to the “previous” generation of the
-active profile, that is, the highest numbered generation lower than
-the current generation, if it exists.  It is just a convenience
-wrapper around <code class="option">--list-generations</code> and
-<code class="option">--switch-generation</code>.</p></div><div class="refsection"><a id="idm140737317024160"></a><h3>Examples</h3><pre class="screen">
-$ nix-env --rollback
-switching from generation 92 to 91
-
-$ nix-env --rollback
-error: no generation older than the current (91) exists</pre></div></div></div><div class="refentry"><div class="refentry.separator"><hr /></div><a id="sec-nix-build"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-build — build a Nix expression</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-build</code>  [<code class="option">--help</code>] [<code class="option">--version</code>] [<code class="option">--verbose</code>...] [<code class="option">-v</code>...] [<code class="option">--no-build-output</code>] [<code class="option">-Q</code>] [
-  { <code class="option">--max-jobs</code>  |   <code class="option">-j</code> }
-  <em class="replaceable"><code>number</code></em>
-] [
-  <code class="option">--cores</code>
-  <em class="replaceable"><code>number</code></em>
-] [
-  <code class="option">--max-silent-time</code>
-  <em class="replaceable"><code>number</code></em>
-] [
-  <code class="option">--timeout</code>
-  <em class="replaceable"><code>number</code></em>
-] [<code class="option">--keep-going</code>] [<code class="option">-k</code>] [<code class="option">--keep-failed</code>] [<code class="option">-K</code>] [<code class="option">--fallback</code>] [<code class="option">--readonly-mode</code>] [<code class="option">--log-type</code> <em class="replaceable"><code>type</code></em>] [<code class="option">--show-trace</code>] [
-  <code class="option">-I</code>
-  <em class="replaceable"><code>path</code></em>
-] [
-  <code class="option">--option</code>
-  <em class="replaceable"><code>name</code></em>
-  <em class="replaceable"><code>value</code></em>
-]<br /> [<code class="option">--arg</code> <em class="replaceable"><code>name</code></em> <em class="replaceable"><code>value</code></em>] [<code class="option">--argstr</code> <em class="replaceable"><code>name</code></em> <em class="replaceable"><code>value</code></em>] [
-      { <code class="option">--attr</code>  |   <code class="option">-A</code> }
-      <em class="replaceable"><code>attrPath</code></em>
-    ] [<code class="option">--drv-link</code> <em class="replaceable"><code>drvlink</code></em>] [<code class="option">--add-drv-link</code>] [<code class="option">--no-out-link</code>] [
-      { <code class="option">--out-link</code>  |   <code class="option">-o</code> }
-      <em class="replaceable"><code>outlink</code></em>
-    ]  <em class="replaceable"><code>paths</code></em>... </p></div></div><div class="refsection"><a id="idm140737316989296"></a><h2>Description</h2><p>The <span class="command"><strong>nix-build</strong></span> command builds the derivations
-described by the Nix expressions in <em class="replaceable"><code>paths</code></em>.
-If the build succeeds, it places a symlink to the result in the
-current directory.  The symlink is called <code class="filename">result</code>.
-If there are multiple Nix expressions, or the Nix expressions evaluate
-to multiple derivations, multiple sequentially numbered symlinks are
-created (<code class="filename">result</code>, <code class="filename">result-2</code>,
-and so on).</p><p>If no <em class="replaceable"><code>paths</code></em> are specified, then
-<span class="command"><strong>nix-build</strong></span> will use <code class="filename">default.nix</code>
-in the current directory, if it exists.</p><p>If an element of <em class="replaceable"><code>paths</code></em> starts with
-<code class="literal">http://</code> or <code class="literal">https://</code>, it is
-interpreted as the URL of a tarball that will be downloaded and
-unpacked to a temporary location. The tarball must include a single
-top-level directory containing at least a file named
-<code class="filename">default.nix</code>.</p><p><span class="command"><strong>nix-build</strong></span> is essentially a wrapper around
-<a class="link" href="#sec-nix-instantiate" title="nix-instantiate"><span class="command"><strong>nix-instantiate</strong></span></a>
-(to translate a high-level Nix expression to a low-level store
-derivation) and <a class="link" href="#rsec-nix-store-realise" title="Operation --realise"><span class="command"><strong>nix-store
---realise</strong></span></a> (to build the store derivation).</p><div class="warning"><h3 class="title">Warning</h3><p>The result of the build is automatically registered as
-a root of the Nix garbage collector.  This root disappears
-automatically when the <code class="filename">result</code> symlink is deleted
-or renamed.  So don’t rename the symlink.</p></div></div><div class="refsection"><a id="idm140737316977936"></a><h2>Options</h2><p>All options not listed here are passed to <span class="command"><strong>nix-store
---realise</strong></span>, except for <code class="option">--arg</code> and
-<code class="option">--attr</code> / <code class="option">-A</code> which are passed to
-<span class="command"><strong>nix-instantiate</strong></span>.  <span class="phrase">See
-also <a class="xref" href="#sec-common-options" title="Chapter 17. Common Options">Chapter 17, <em>Common Options</em></a>.</span></p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--drv-link</code> <em class="replaceable"><code>drvlink</code></em></span></dt><dd><p>Add a symlink named
-    <em class="replaceable"><code>drvlink</code></em> to the store derivation
-    produced by <span class="command"><strong>nix-instantiate</strong></span>.  The derivation is
-    a root of the garbage collector until the symlink is deleted or
-    renamed.  If there are multiple derivations, numbers are suffixed
-    to <em class="replaceable"><code>drvlink</code></em> to distinguish between
-    them.</p></dd><dt><span class="term"><code class="option">--add-drv-link</code></span></dt><dd><p>Shorthand for <code class="option">--drv-link</code>
-    <code class="filename">./derivation</code>.</p></dd><dt><span class="term"><code class="option">--no-out-link</code></span></dt><dd><p>Do not create a symlink to the output path.  Note
-    that as a result the output does not become a root of the garbage
-    collector, and so might be deleted by <span class="command"><strong>nix-store
-    --gc</strong></span>.</p></dd><dt><a id="opt-out-link"></a><span class="term"><code class="option">--out-link</code> /
-  <code class="option">-o</code> <em class="replaceable"><code>outlink</code></em></span></dt><dd><p>Change the name of the symlink to the output path
-    created from <code class="filename">result</code> to
-    <em class="replaceable"><code>outlink</code></em>.</p></dd></dl></div><p>The following common options are supported:</p></div><div class="refsection"><a id="idm140737316961904"></a><h2>Examples</h2><pre class="screen">
-$ nix-build '&lt;nixpkgs&gt;' -A firefox
-store derivation is /nix/store/qybprl8sz2lc...-firefox-1.5.0.7.drv
-/nix/store/d18hyl92g30l...-firefox-1.5.0.7
-
-$ ls -l result
-lrwxrwxrwx  <em class="replaceable"><code>...</code></em>  result -&gt; /nix/store/d18hyl92g30l...-firefox-1.5.0.7
-
-$ ls ./result/bin/
-firefox  firefox-config</pre><p>If a derivation has multiple outputs,
-<span class="command"><strong>nix-build</strong></span> will build the default (first) output.
-You can also build all outputs:
-</p><pre class="screen">
-$ nix-build '&lt;nixpkgs&gt;' -A openssl.all
-</pre><p>
-This will create a symlink for each output named
-<code class="filename">result-<em class="replaceable"><code>outputname</code></em></code>.
-The suffix is omitted if the output name is <code class="literal">out</code>.
-So if <code class="literal">openssl</code> has outputs <code class="literal">out</code>,
-<code class="literal">bin</code> and <code class="literal">man</code>,
-<span class="command"><strong>nix-build</strong></span> will create symlinks
-<code class="literal">result</code>, <code class="literal">result-bin</code> and
-<code class="literal">result-man</code>.  It’s also possible to build a specific
-output:
-</p><pre class="screen">
-$ nix-build '&lt;nixpkgs&gt;' -A openssl.man
-</pre><p>
-This will create a symlink <code class="literal">result-man</code>.</p><p>Build a Nix expression given on the command line:
-
-</p><pre class="screen">
-$ nix-build -E 'with import &lt;nixpkgs&gt; { }; runCommand "foo" { } "echo bar &gt; $out"'
-$ cat ./result
-bar
-</pre><p>
-
-</p><p>Build the GNU Hello package from the latest revision of the
-master branch of Nixpkgs:
-
-</p><pre class="screen">
-$ nix-build https://github.com/NixOS/nixpkgs/archive/master.tar.gz -A hello
-</pre><p>
-
-</p></div></div><div class="refentry"><div class="refentry.separator"><hr /></div><a id="sec-nix-shell"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-shell — start an interactive shell based on a Nix expression</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-shell</code>  [<code class="option">--arg</code> <em class="replaceable"><code>name</code></em> <em class="replaceable"><code>value</code></em>] [<code class="option">--argstr</code> <em class="replaceable"><code>name</code></em> <em class="replaceable"><code>value</code></em>] [
-      { <code class="option">--attr</code>  |   <code class="option">-A</code> }
-      <em class="replaceable"><code>attrPath</code></em>
-    ] [<code class="option">--command</code> <em class="replaceable"><code>cmd</code></em>] [<code class="option">--run</code> <em class="replaceable"><code>cmd</code></em>] [<code class="option">--exclude</code> <em class="replaceable"><code>regexp</code></em>] [<code class="option">--pure</code>] { [ <code class="option">--packages</code>  |   <code class="option">-p</code> ]<em class="replaceable"><code>packages</code></em>  |  [<em class="replaceable"><code>path</code></em>]}</p></div></div><div class="refsection"><a id="idm140737316931280"></a><h2>Description</h2><p>The command <span class="command"><strong>nix-shell</strong></span> will build the
-dependencies of the specified derivation, but not the derivation
-itself.  It will then start an interactive shell in which all
-environment variables defined by the derivation
-<em class="replaceable"><code>path</code></em> have been set to their corresponding
-values, and the script <code class="literal">$stdenv/setup</code> has been
-sourced.  This is useful for reproducing the environment of a
-derivation for development.</p><p>If <em class="replaceable"><code>path</code></em> is not given,
-<span class="command"><strong>nix-shell</strong></span> defaults to
-<code class="filename">shell.nix</code> if it exists, and
-<code class="filename">default.nix</code> otherwise.</p><p>If <em class="replaceable"><code>path</code></em> starts with
-<code class="literal">http://</code> or <code class="literal">https://</code>, it is
-interpreted as the URL of a tarball that will be downloaded and
-unpacked to a temporary location. The tarball must include a single
-top-level directory containing at least a file named
-<code class="filename">default.nix</code>.</p><p>If the derivation defines the variable
-<code class="varname">shellHook</code>, it will be evaluated after
-<code class="literal">$stdenv/setup</code> has been sourced.  Since this hook is
-not executed by regular Nix builds, it allows you to perform
-initialisation specific to <span class="command"><strong>nix-shell</strong></span>.  For example,
-the derivation attribute
-
-</p><pre class="programlisting">
-shellHook =
-  ''
-    echo "Hello shell"
-  '';
-</pre><p>
-
-will cause <span class="command"><strong>nix-shell</strong></span> to print <code class="literal">Hello shell</code>.</p></div><div class="refsection"><a id="idm140737316920768"></a><h2>Options</h2><p>All options not listed here are passed to <span class="command"><strong>nix-store
---realise</strong></span>, except for <code class="option">--arg</code> and
-<code class="option">--attr</code> / <code class="option">-A</code> which are passed to
-<span class="command"><strong>nix-instantiate</strong></span>.  <span class="phrase">See
-also <a class="xref" href="#sec-common-options" title="Chapter 17. Common Options">Chapter 17, <em>Common Options</em></a>.</span></p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--command</code> <em class="replaceable"><code>cmd</code></em></span></dt><dd><p>In the environment of the derivation, run the
-    shell command <em class="replaceable"><code>cmd</code></em>. This command is
-    executed in an interactive shell. (Use <code class="option">--run</code> to
-    use a non-interactive shell instead.) However, a call to
-    <code class="literal">exit</code> is implicitly added to the command, so the
-    shell will exit after running the command. To prevent this, add
-    <code class="literal">return</code> at the end; e.g. <code class="literal">--command
-    "echo Hello; return"</code> will print <code class="literal">Hello</code>
-    and then drop you into the interactive shell. This can be useful
-    for doing any additional initialisation.</p></dd><dt><span class="term"><code class="option">--run</code> <em class="replaceable"><code>cmd</code></em></span></dt><dd><p>Like <code class="option">--command</code>, but executes the
-    command in a non-interactive shell. This means (among other
-    things) that if you hit Ctrl-C while the command is running, the
-    shell exits.</p></dd><dt><span class="term"><code class="option">--exclude</code> <em class="replaceable"><code>regexp</code></em></span></dt><dd><p>Do not build any dependencies whose store path
-    matches the regular expression <em class="replaceable"><code>regexp</code></em>.
-    This option may be specified multiple times.</p></dd><dt><span class="term"><code class="option">--pure</code></span></dt><dd><p>If this flag is specified, the environment is
-    almost entirely cleared before the interactive shell is started,
-    so you get an environment that more closely corresponds to the
-    “real” Nix build.  A few variables, in particular
-    <code class="envar">HOME</code>, <code class="envar">USER</code> and
-    <code class="envar">DISPLAY</code>, are retained.  Note that
-    <code class="filename">~/.bashrc</code> and (depending on your Bash
-    installation) <code class="filename">/etc/bashrc</code> are still sourced,
-    so any variables set there will affect the interactive
-    shell.</p></dd><dt><span class="term"><code class="option">--packages</code> / <code class="option">-p</code></span></dt><dd><p>Set up an environment in which the specified
-    packages are present.  The command line arguments are interpreted
-    as attribute names inside the Nix Packages collection.  Thus,
-    <code class="literal">nix-shell -p libjpeg openjdk</code> will start a shell
-    in which the packages denoted by the attribute names
-    <code class="varname">libjpeg</code> and <code class="varname">openjdk</code> are
-    present.</p></dd><dt><span class="term"><code class="option">-i</code> <em class="replaceable"><code>interpreter</code></em></span></dt><dd><p>The chained script interpreter to be invoked by
-    <span class="command"><strong>nix-shell</strong></span>. Only applicable in
-    <code class="literal">#!</code>-scripts (described <a class="link" href="#ssec-nix-shell-shebang" title="Use as a #!-interpreter">below</a>).</p></dd></dl></div><p>The following common options are supported:</p></div><div class="refsection"><a id="idm140737316895392"></a><h2>Environment variables</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="envar">NIX_BUILD_SHELL</code></span></dt><dd><p>Shell used to start the interactive environment. 
-    Defaults to the <span class="command"><strong>bash</strong></span> found in <code class="envar">PATH</code>.</p></dd></dl></div></div><div class="refsection"><a id="idm140737316892080"></a><h2>Examples</h2><p>To build the dependencies of the package Pan, and start an
-interactive shell in which to build it:
-
-</p><pre class="screen">
-$ nix-shell '&lt;nixpkgs&gt;' -A pan
-[nix-shell]$ unpackPhase
-[nix-shell]$ cd pan-*
-[nix-shell]$ configurePhase
-[nix-shell]$ buildPhase
-[nix-shell]$ ./pan/gui/pan
-</pre><p>
-
-To clear the environment first, and do some additional automatic
-initialisation of the interactive shell:
-
-</p><pre class="screen">
-$ nix-shell '&lt;nixpkgs&gt;' -A pan --pure \
-    --command 'export NIX_DEBUG=1; export NIX_CORES=8; return'
-</pre><p>
-
-Nix expressions can also be given on the command line.  For instance,
-the following starts a shell containing the packages
-<code class="literal">sqlite</code> and <code class="literal">libX11</code>:
-
-</p><pre class="screen">
-$ nix-shell -E 'with import &lt;nixpkgs&gt; { }; runCommand "dummy" { buildInputs = [ sqlite xorg.libX11 ]; } ""'
-</pre><p>
-
-A shorter way to do the same is:
-
-</p><pre class="screen">
-$ nix-shell -p sqlite xorg.libX11
-[nix-shell]$ echo $NIX_LDFLAGS
-… -L/nix/store/j1zg5v…-sqlite-3.8.0.2/lib -L/nix/store/0gmcz9…-libX11-1.6.1/lib …
-</pre><p>
-
-The <span class="command"><strong>-p</strong></span> flag looks up Nixpkgs in the Nix search
-path. You can override it by passing <code class="option">-I</code> or setting
-<code class="envar">NIX_PATH</code>. For example, the following gives you a shell
-containing the Pan package from a specific revision of Nixpkgs:
-
-</p><pre class="screen">
-$ nix-shell -p pan -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/8a3eea054838b55aca962c3fbde9c83c102b8bf2.tar.gz
-
-[nix-shell:~]$ pan --version
-Pan 0.139
-</pre><p>
-
-</p></div><div class="refsection"><a id="ssec-nix-shell-shebang"></a><h2>Use as a <code class="literal">#!</code>-interpreter</h2><p>You can use <span class="command"><strong>nix-shell</strong></span> as a script interpreter
-to allow scripts written in arbitrary languages to obtain their own
-dependencies via Nix. This is done by starting the script with the
-following lines:
-
-</p><pre class="programlisting">
-#! /usr/bin/env nix-shell
-#! nix-shell -i <em class="replaceable"><code>real-interpreter</code></em> -p <em class="replaceable"><code>packages</code></em>
-</pre><p>
-
-where <em class="replaceable"><code>real-interpreter</code></em> is the “real” script
-interpreter that will be invoked by <span class="command"><strong>nix-shell</strong></span> after
-it has obtained the dependencies and initialised the environment, and
-<em class="replaceable"><code>packages</code></em> are the attribute names of the
-dependencies in Nixpkgs.</p><p>The lines starting with <code class="literal">#! nix-shell</code> specify
-<span class="command"><strong>nix-shell</strong></span> options (see above). Note that you cannot
-write <code class="literal">#1 /usr/bin/env nix-shell -i ...</code> because
-many operating systems only allow one argument in
-<code class="literal">#!</code> lines.</p><p>For example, here is a Python script that depends on Python and
-the <code class="literal">prettytable</code> package:
-
-</p><pre class="programlisting">
-#! /usr/bin/env nix-shell
-#! nix-shell -i python -p python pythonPackages.prettytable
-
-import prettytable
-
-# Print a simple table.
-t = prettytable.PrettyTable(["N", "N^2"])
-for n in range(1, 10): t.add_row([n, n * n])
-print t
-</pre><p>
-
-</p><p>Similarly, the following is a Perl script that specifies that it
-requires Perl and the <code class="literal">HTML::TokeParser::Simple</code> and
-<code class="literal">LWP</code> packages:
-
-</p><pre class="programlisting">
-#! /usr/bin/env nix-shell
-#! nix-shell -i perl -p perl perlPackages.HTMLTokeParserSimple perlPackages.LWP
-
-use HTML::TokeParser::Simple;
-
-# Fetch nixos.org and print all hrefs.
-my $p = HTML::TokeParser::Simple-&gt;new(url =&gt; 'http://nixos.org/');
-
-while (my $token = $p-&gt;get_tag("a")) {
-    my $href = $token-&gt;get_attr("href");
-    print "$href\n" if $href;
-}
-</pre><p>
-
-</p><p>Finally, the following Haskell script uses a specific branch of
-Nixpkgs/NixOS (the 14.12 stable branch):
-
-</p><pre class="programlisting">
-#! /usr/bin/env nix-shell
-#! nix-shell -i runghc -p haskellPackages.ghc haskellPackages.HTTP haskellPackages.tagsoup
-#! nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz
-
-import Network.HTTP
-import Text.HTML.TagSoup
-
--- Fetch nixos.org and print all hrefs.
-main = do
-  resp &lt;- Network.HTTP.simpleHTTP (getRequest "http://nixos.org/")
-  body &lt;- getResponseBody resp
-  let tags = filter (isTagOpenName "a") $ parseTags body
-  let tags' = map (fromAttrib "href") tags
-  mapM_ putStrLn $ filter (/= "") tags'
-</pre><p>
-
-If you want to be even more precise, you can specify a specific
-revision of Nixpkgs:
-
-</p><pre class="programlisting">
-#! nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/0672315759b3e15e2121365f067c1c8c56bb4722.tar.gz
-</pre><p>
-
-</p><p>The examples above all used <code class="option">-p</code> to get
-dependencies from Nixpkgs. You can also use a Nix expression to build
-your own dependencies. For example, the Python example could have been
-written as:
-
-</p><pre class="programlisting">
-#! /usr/bin/env nix-shell
-#! nix-shell deps.nix -i python
-</pre><p>
-
-where the file <code class="filename">deps.nix</code> in the same directory
-as the <code class="literal">#!</code>-script contains:
-
-</p><pre class="programlisting">
-with import &lt;nixpkgs&gt; {};
-
-runCommand "dummy" { buildInputs = [ python pythonPackages.prettytable ]; } ""
-</pre><p>
-
-</p></div></div><div class="refentry"><div class="refentry.separator"><hr /></div><a id="sec-nix-store"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-store — manipulate or query the Nix store</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-store</code>  [<code class="option">--help</code>] [<code class="option">--version</code>] [<code class="option">--verbose</code>...] [<code class="option">-v</code>...] [<code class="option">--no-build-output</code>] [<code class="option">-Q</code>] [
-  { <code class="option">--max-jobs</code>  |   <code class="option">-j</code> }
-  <em class="replaceable"><code>number</code></em>
-] [
-  <code class="option">--cores</code>
-  <em class="replaceable"><code>number</code></em>
-] [
-  <code class="option">--max-silent-time</code>
-  <em class="replaceable"><code>number</code></em>
-] [
-  <code class="option">--timeout</code>
-  <em class="replaceable"><code>number</code></em>
-] [<code class="option">--keep-going</code>] [<code class="option">-k</code>] [<code class="option">--keep-failed</code>] [<code class="option">-K</code>] [<code class="option">--fallback</code>] [<code class="option">--readonly-mode</code>] [<code class="option">--log-type</code> <em class="replaceable"><code>type</code></em>] [<code class="option">--show-trace</code>] [
-  <code class="option">-I</code>
-  <em class="replaceable"><code>path</code></em>
-] [
-  <code class="option">--option</code>
-  <em class="replaceable"><code>name</code></em>
-  <em class="replaceable"><code>value</code></em>
-]<br /> [<code class="option">--add-root</code> <em class="replaceable"><code>path</code></em>] [<code class="option">--indirect</code>]  <em class="replaceable"><code>operation</code></em>  [<em class="replaceable"><code>options</code></em>...] [<em class="replaceable"><code>arguments</code></em>...]</p></div></div><div class="refsection"><a id="idm140737316842816"></a><h2>Description</h2><p>The command <span class="command"><strong>nix-store</strong></span> performs primitive
-operations on the Nix store.  You generally do not need to run this
-command manually.</p><p><span class="command"><strong>nix-store</strong></span> takes exactly one
-<span class="emphasis"><em>operation</em></span> flag which indicates the subcommand to
-be performed.  These are documented below.</p></div><div class="refsection"><a id="idm140737316839520"></a><h2>Common options</h2><p>This section lists the options that are common to all
-operations.  These options are allowed for every subcommand, though
-they may not always have an effect.  <span class="phrase">See
-also <a class="xref" href="#sec-common-options" title="Chapter 17. Common Options">Chapter 17, <em>Common Options</em></a> for a list of common
-options.</span></p><div class="variablelist"><dl class="variablelist"><dt><a id="opt-add-root"></a><span class="term"><code class="option">--add-root</code> <em class="replaceable"><code>path</code></em></span></dt><dd><p>Causes the result of a realisation
-    (<code class="option">--realise</code> and <code class="option">--force-realise</code>)
-    to be registered as a root of the garbage collector<span class="phrase"> (see <a class="xref" href="#ssec-gc-roots" title="10.1. Garbage Collector Roots">Section 10.1, “Garbage Collector Roots”</a>)</span>.  The root is stored in
-    <em class="replaceable"><code>path</code></em>, which must be inside a directory
-    that is scanned for roots by the garbage collector (i.e.,
-    typically in a subdirectory of
-    <code class="filename">/nix/var/nix/gcroots/</code>)
-    <span class="emphasis"><em>unless</em></span> the <code class="option">--indirect</code> flag
-    is used.</p><p>If there are multiple results, then multiple symlinks will
-    be created by sequentially numbering symlinks beyond the first one
-    (e.g., <code class="filename">foo</code>, <code class="filename">foo-2</code>,
-    <code class="filename">foo-3</code>, and so on).</p></dd><dt><span class="term"><code class="option">--indirect</code></span></dt><dd><p>In conjunction with <code class="option">--add-root</code>, this option
-    allows roots to be stored <span class="emphasis"><em>outside</em></span> of the GC
-    roots directory.  This is useful for commands such as
-    <span class="command"><strong>nix-build</strong></span> that place a symlink to the build
-    result in the current directory; such a build result should not be
-    garbage-collected unless the symlink is removed.</p><p>The <code class="option">--indirect</code> flag causes a uniquely named
-    symlink to <em class="replaceable"><code>path</code></em> to be stored in
-    <code class="filename">/nix/var/nix/gcroots/auto/</code>.  For instance,
-
-    </p><pre class="screen">
-$ nix-store --add-root /home/eelco/bla/result --indirect -r <em class="replaceable"><code>...</code></em>
-
-$ ls -l /nix/var/nix/gcroots/auto
-lrwxrwxrwx    1 ... 2005-03-13 21:10 dn54lcypm8f8... -&gt; /home/eelco/bla/result
-
-$ ls -l /home/eelco/bla/result
-lrwxrwxrwx    1 ... 2005-03-13 21:10 /home/eelco/bla/result -&gt; /nix/store/1r11343n6qd4...-f-spot-0.0.10</pre><p>
-
-    Thus, when <code class="filename">/home/eelco/bla/result</code> is removed,
-    the GC root in the <code class="filename">auto</code> directory becomes a
-    dangling symlink and will be ignored by the collector.</p><div class="warning"><h3 class="title">Warning</h3><p>Note that it is not possible to move or rename
-    indirect GC roots, since the symlink in the
-    <code class="filename">auto</code> directory will still point to the old
-    location.</p></div></dd></dl></div></div><div class="refsection"><a id="rsec-nix-store-realise"></a><h2>Operation <code class="option">--realise</code></h2><div class="refsection"><a id="idm140737316818512"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>  { <code class="option">--realise</code>  |   <code class="option">-r</code> }  <em class="replaceable"><code>paths</code></em>...  [<code class="option">--dry-run</code>]</p></div></div><div class="refsection"><a id="idm140737316813184"></a><h3>Description</h3><p>The operation <code class="option">--realise</code> essentially “builds”
-the specified store paths.  Realisation is a somewhat overloaded term:
-
-</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>If the store path is a
-  <span class="emphasis"><em>derivation</em></span>, realisation ensures that the output
-  paths of the derivation are <a class="link" href="#gloss-validity" title="validity">valid</a> (i.e., the output path and its
-  closure exist in the file system).  This can be done in several
-  ways.  First, it is possible that the outputs are already valid, in
-  which case we are done immediately.  Otherwise, there may be <a class="link" href="#gloss-substitute" title="substitute">substitutes</a> that produce the
-  outputs (e.g., by downloading them).  Finally, the outputs can be
-  produced by performing the build action described by the
-  derivation.</p></li><li class="listitem"><p>If the store path is not a derivation, realisation
-  ensures that the specified path is valid (i.e., it and its closure
-  exist in the file system).  If the path is already valid, we are
-  done immediately.  Otherwise, the path and any missing paths in its
-  closure may be produced through substitutes.  If there are no
-  (successful) subsitutes, realisation fails.</p></li></ul></div><p>
-
-</p><p>The output path of each derivation is printed on standard
-output.  (For non-derivations argument, the argument itself is
-printed.)</p><p>The following flags are available:</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--dry-run</code></span></dt><dd><p>Print on standard error a description of what
-    packages would be built or downloaded, without actually performing
-    the operation.</p></dd><dt><span class="term"><code class="option">--ignore-unknown</code></span></dt><dd><p>If a non-derivation path does not have a
-    substitute, then silently ignore it.</p></dd><dt><span class="term"><code class="option">--check</code></span></dt><dd><p>This option allows you to check whether a
-    derivation is deterministic. It rebuilds the specified derivation
-    and checks whether the result is bitwise-identical with the
-    existing outputs, printing an error if that’s not the case. The
-    outputs of the specified derivation must already exist. When used
-    with <code class="option">-K</code>, if an output path is not identical to
-    the corresponding output from the previous build, the new output
-    path is left in
-    <code class="filename">/nix/store/<em class="replaceable"><code>name</code></em>-check.</code></p><p>See also the <code class="option">build-repeat</code> configuration
-    option, which repeats a derivation a number of times and prevents
-    its outputs from being registered as “valid” in the Nix store
-    unless they are identical.</p></dd></dl></div></div><div class="refsection"><a id="idm140737316798752"></a><h3>Examples</h3><p>This operation is typically used to build store derivations
-produced by <a class="link" href="#sec-nix-instantiate" title="nix-instantiate"><span class="command"><strong>nix-instantiate</strong></span></a>:
-
-</p><pre class="screen">
-$ nix-store -r $(nix-instantiate ./test.nix)
-/nix/store/31axcgrlbfsxzmfff1gyj1bf62hvkby2-aterm-2.3.1</pre><p>
-
-This is essentially what <a class="link" href="#sec-nix-build" title="nix-build"><span class="command"><strong>nix-build</strong></span></a> does.</p><p>To test whether a previously-built derivation is deterministic:
-
-</p><pre class="screen">
-$ nix-build -r '&lt;nixpkgs&gt;' -A hello --check -K
-</pre><p>
-
-</p></div></div><div class="refsection"><a id="rsec-nix-store-gc"></a><h2>Operation <code class="option">--gc</code></h2><div class="refsection"><a id="idm140737316792640"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--gc</code>  [ <code class="option">--print-roots</code>  |   <code class="option">--print-live</code>  |   <code class="option">--print-dead</code>  |   <code class="option">--delete</code> ] [<code class="option">--max-freed</code> <em class="replaceable"><code>bytes</code></em>]</p></div></div><div class="refsection"><a id="idm140737316785744"></a><h3>Description</h3><p>Without additional flags, the operation <code class="option">--gc</code>
-performs a garbage collection on the Nix store.  That is, all paths in
-the Nix store not reachable via file system references from a set of
-“roots”, are deleted.</p><p>The following suboperations may be specified:</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--print-roots</code></span></dt><dd><p>This operation prints on standard output the set
-    of roots used by the garbage collector.  What constitutes a root
-    is described in <a class="xref" href="#ssec-gc-roots" title="10.1. Garbage Collector Roots">Section 10.1, “Garbage Collector Roots”</a>.</p></dd><dt><span class="term"><code class="option">--print-live</code></span></dt><dd><p>This operation prints on standard output the set
-    of “live” store paths, which are all the store paths reachable
-    from the roots.  Live paths should never be deleted, since that
-    would break consistency — it would become possible that
-    applications are installed that reference things that are no
-    longer present in the store.</p></dd><dt><span class="term"><code class="option">--print-dead</code></span></dt><dd><p>This operation prints out on standard output the
-    set of “dead” store paths, which is just the opposite of the set
-    of live paths: any path in the store that is not live (with
-    respect to the roots) is dead.</p></dd><dt><span class="term"><code class="option">--delete</code></span></dt><dd><p>This operation performs an actual garbage
-    collection.  All dead paths are removed from the
-    store.  This is the default.</p></dd></dl></div><p>By default, all unreachable paths are deleted.  The following
-options control what gets deleted and in what order:
-
-</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--max-freed</code> <em class="replaceable"><code>bytes</code></em></span></dt><dd><p>Keep deleting paths until at least
-    <em class="replaceable"><code>bytes</code></em> bytes have been deleted, then
-    stop.  The argument <em class="replaceable"><code>bytes</code></em> can be
-    followed by the multiplicative suffix <code class="literal">K</code>,
-    <code class="literal">M</code>, <code class="literal">G</code> or
-    <code class="literal">T</code>, denoting KiB, MiB, GiB or TiB
-    units.</p></dd></dl></div><p>
-
-</p><p>The behaviour of the collector is also influenced by the <a class="link" href="#conf-gc-keep-outputs"><code class="literal">gc-keep-outputs</code></a>
-and <a class="link" href="#conf-gc-keep-derivations"><code class="literal">gc-keep-derivations</code></a>
-variables in the Nix configuration file.</p><p>With <code class="option">--delete</code>, the collector prints the total
-number of freed bytes when it finishes (or when it is interrupted).
-With <code class="option">--print-dead</code>, it prints the number of bytes that
-would be freed.</p></div><div class="refsection"><a id="idm140737316766864"></a><h3>Examples</h3><p>To delete all unreachable paths, just do:
-
-</p><pre class="screen">
-$ nix-store --gc
-deleting `/nix/store/kq82idx6g0nyzsp2s14gfsc38npai7lf-cairo-1.0.4.tar.gz.drv'
-<em class="replaceable"><code>...</code></em>
-8825586 bytes freed (8.42 MiB)</pre><p>
-
-</p><p>To delete at least 100 MiBs of unreachable paths:
-
-</p><pre class="screen">
-$ nix-store --gc --max-freed $((100 * 1024 * 1024))</pre><p>
-
-</p></div></div><div class="refsection"><a id="idm140737316763344"></a><h2>Operation <code class="option">--delete</code></h2><div class="refsection"><a id="idm140737316762512"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--delete</code>  [<code class="option">--ignore-liveness</code>]  <em class="replaceable"><code>paths</code></em>... </p></div></div><div class="refsection"><a id="idm140737316758592"></a><h3>Description</h3><p>The operation <code class="option">--delete</code> deletes the store paths
-<em class="replaceable"><code>paths</code></em> from the Nix store, but only if it is
-safe to do so; that is, when the path is not reachable from a root of
-the garbage collector.  This means that you can only delete paths that
-would also be deleted by <code class="literal">nix-store --gc</code>.  Thus,
-<code class="literal">--delete</code> is a more targeted version of
-<code class="literal">--gc</code>.</p><p>With the option <code class="option">--ignore-liveness</code>, reachability
-from the roots is ignored.  However, the path still won’t be deleted
-if there are other paths in the store that refer to it (i.e., depend
-on it).</p></div><div class="refsection"><a id="idm140737316753904"></a><h3>Example</h3><pre class="screen">
-$ nix-store --delete /nix/store/zq0h41l75vlb4z45kzgjjmsjxvcv1qk7-mesa-6.4
-0 bytes freed (0.00 MiB)
-error: cannot delete path `/nix/store/zq0h41l75vlb4z45kzgjjmsjxvcv1qk7-mesa-6.4' since it is still alive</pre></div></div><div class="refsection"><a id="refsec-nix-store-query"></a><h2>Operation <code class="option">--query</code></h2><div class="refsection"><a id="idm140737316750880"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>  { <code class="option">--query</code>  |   <code class="option">-q</code> } { <code class="option">--outputs</code>  |   <code class="option">--requisites</code>  |   <code class="option">-R</code>  |   <code class="option">--references</code>  |   <code class="option">--referrers</code>  |   <code class="option">--referrers-closure</code>  |   <code class="option">--deriver</code>  |   <code class="option">--deriver</code>  |   <code class="option">--graph</code>  |   <code class="option">--tree</code>  |   <code class="option">--binding</code> <em class="replaceable"><code>name</code></em>  |   <code class="option">--hash</code>  |   <code class="option">--size</code>  |   <code class="option">--roots</code> } [<code class="option">--use-output</code>] [<code class="option">-u</code>] [<code class="option">--force-realise</code>] [<code class="option">-f</code>]  <em class="replaceable"><code>paths</code></em>... </p></div></div><div class="refsection"><a id="idm140737316731504"></a><h3>Description</h3><p>The operation <code class="option">--query</code> displays various bits of
-information about the store paths .  The queries are described below.  At
-most one query can be specified.  The default query is
-<code class="option">--outputs</code>.</p><p>The paths <em class="replaceable"><code>paths</code></em> may also be symlinks
-from outside of the Nix store, to the Nix store.  In that case, the
-query is applied to the target of the symlink.</p></div><div class="refsection"><a id="idm140737316728416"></a><h3>Common query options</h3><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--use-output</code>, </span><span class="term"><code class="option">-u</code></span></dt><dd><p>For each argument to the query that is a store
-    derivation, apply the query to the output path of the derivation
-    instead.</p></dd><dt><span class="term"><code class="option">--force-realise</code>, </span><span class="term"><code class="option">-f</code></span></dt><dd><p>Realise each argument to the query first (see
-    <a class="link" href="#rsec-nix-store-realise" title="Operation --realise"><span class="command"><strong>nix-store
-    --realise</strong></span></a>).</p></dd></dl></div></div><div class="refsection"><a id="nixref-queries"></a><h3>Queries</h3><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--outputs</code></span></dt><dd><p>Prints out the <a class="link" href="#gloss-output-path" title="output path">output paths</a> of the store
-    derivations <em class="replaceable"><code>paths</code></em>.  These are the paths
-    that will be produced when the derivation is
-    built.</p></dd><dt><span class="term"><code class="option">--requisites</code>, </span><span class="term"><code class="option">-R</code></span></dt><dd><p>Prints out the <a class="link" href="#gloss-closure" title="closure">closure</a> of the store path
-    <em class="replaceable"><code>paths</code></em>.</p><p>This query has one option:</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--include-outputs</code></span></dt><dd><p>Also include the output path of store
-        derivations, and their closures.</p></dd></dl></div><p>This query can be used to implement various kinds of
-    deployment.  A <span class="emphasis"><em>source deployment</em></span> is obtained
-    by distributing the closure of a store derivation.  A
-    <span class="emphasis"><em>binary deployment</em></span> is obtained by distributing
-    the closure of an output path.  A <span class="emphasis"><em>cache
-    deployment</em></span> (combined source/binary deployment,
-    including binaries of build-time-only dependencies) is obtained by
-    distributing the closure of a store derivation and specifying the
-    option <code class="option">--include-outputs</code>.</p></dd><dt><span class="term"><code class="option">--references</code></span></dt><dd><p>Prints the set of <a class="link" href="#gloss-reference" title="reference">references</a> of the store paths
-    <em class="replaceable"><code>paths</code></em>, that is, their immediate
-    dependencies.  (For <span class="emphasis"><em>all</em></span> dependencies, use
-    <code class="option">--requisites</code>.)</p></dd><dt><span class="term"><code class="option">--referrers</code></span></dt><dd><p>Prints the set of <span class="emphasis"><em>referrers</em></span> of
-    the store paths <em class="replaceable"><code>paths</code></em>, that is, the
-    store paths currently existing in the Nix store that refer to one
-    of <em class="replaceable"><code>paths</code></em>.  Note that contrary to the
-    references, the set of referrers is not constant; it can change as
-    store paths are added or removed.</p></dd><dt><span class="term"><code class="option">--referrers-closure</code></span></dt><dd><p>Prints the closure of the set of store paths
-    <em class="replaceable"><code>paths</code></em> under the referrers relation; that
-    is, all store paths that directly or indirectly refer to one of
-    <em class="replaceable"><code>paths</code></em>.  These are all the path currently
-    in the Nix store that are dependent on
-    <em class="replaceable"><code>paths</code></em>.</p></dd><dt><span class="term"><code class="option">--deriver</code></span></dt><dd><p>Prints the <a class="link" href="#gloss-deriver" title="deriver">deriver</a> of the store paths
-    <em class="replaceable"><code>paths</code></em>.  If the path has no deriver
-    (e.g., if it is a source file), or if the deriver is not known
-    (e.g., in the case of a binary-only deployment), the string
-    <code class="literal">unknown-deriver</code> is printed.</p></dd><dt><span class="term"><code class="option">--graph</code></span></dt><dd><p>Prints the references graph of the store paths
-    <em class="replaceable"><code>paths</code></em> in the format of the
-    <span class="command"><strong>dot</strong></span> tool of AT&amp;T's <a class="link" href="http://www.graphviz.org/" target="_top">Graphviz package</a>.
-    This can be used to visualise dependency graphs.  To obtain a
-    build-time dependency graph, apply this to a store derivation.  To
-    obtain a runtime dependency graph, apply it to an output
-    path.</p></dd><dt><span class="term"><code class="option">--tree</code></span></dt><dd><p>Prints the references graph of the store paths
-    <em class="replaceable"><code>paths</code></em> as a nested ASCII tree.
-    References are ordered by descending closure size; this tends to
-    flatten the tree, making it more readable.  The query only
-    recurses into a store path when it is first encountered; this
-    prevents a blowup of the tree representation of the
-    graph.</p></dd><dt><span class="term"><code class="option">--binding</code> <em class="replaceable"><code>name</code></em></span></dt><dd><p>Prints the value of the attribute
-    <em class="replaceable"><code>name</code></em> (i.e., environment variable) of
-    the store derivations <em class="replaceable"><code>paths</code></em>.  It is an
-    error for a derivation to not have the specified
-    attribute.</p></dd><dt><span class="term"><code class="option">--hash</code></span></dt><dd><p>Prints the SHA-256 hash of the contents of the
-    store paths <em class="replaceable"><code>paths</code></em> (that is, the hash of
-    the output of <span class="command"><strong>nix-store --dump</strong></span> on the given
-    paths).  Since the hash is stored in the Nix database, this is a
-    fast operation.</p></dd><dt><span class="term"><code class="option">--size</code></span></dt><dd><p>Prints the size in bytes of the contents of the
-    store paths <em class="replaceable"><code>paths</code></em> — to be precise, the
-    size of the output of <span class="command"><strong>nix-store --dump</strong></span> on the
-    given paths.  Note that the actual disk space required by the
-    store paths may be higher, especially on filesystems with large
-    cluster sizes.</p></dd><dt><span class="term"><code class="option">--roots</code></span></dt><dd><p>Prints the garbage collector roots that point,
-    directly or indirectly, at the store paths
-    <em class="replaceable"><code>paths</code></em>.</p></dd></dl></div></div><div class="refsection"><a id="idm140737316683664"></a><h3>Examples</h3><p>Print the closure (runtime dependencies) of the
-<span class="command"><strong>svn</strong></span> program in the current user environment:
-
-</p><pre class="screen">
-$ nix-store -qR $(which svn)
-/nix/store/5mbglq5ldqld8sj57273aljwkfvj22mc-subversion-1.1.4
-/nix/store/9lz9yc6zgmc0vlqmn2ipcpkjlmbi51vv-glibc-2.3.4
-<em class="replaceable"><code>...</code></em></pre><p>
-
-</p><p>Print the build-time dependencies of <span class="command"><strong>svn</strong></span>:
-
-</p><pre class="screen">
-$ nix-store -qR $(nix-store -qd $(which svn))
-/nix/store/02iizgn86m42q905rddvg4ja975bk2i4-grep-2.5.1.tar.bz2.drv
-/nix/store/07a2bzxmzwz5hp58nf03pahrv2ygwgs3-gcc-wrapper.sh
-/nix/store/0ma7c9wsbaxahwwl04gbw3fcd806ski4-glibc-2.3.4.drv
-<em class="replaceable"><code>... lots of other paths ...</code></em></pre><p>
-
-The difference with the previous example is that we ask the closure of
-the derivation (<code class="option">-qd</code>), not the closure of the output
-path that contains <span class="command"><strong>svn</strong></span>.</p><p>Show the build-time dependencies as a tree:
-
-</p><pre class="screen">
-$ nix-store -q --tree $(nix-store -qd $(which svn))
-/nix/store/7i5082kfb6yjbqdbiwdhhza0am2xvh6c-subversion-1.1.4.drv
-+---/nix/store/d8afh10z72n8l1cr5w42366abiblgn54-builder.sh
-+---/nix/store/fmzxmpjx2lh849ph0l36snfj9zdibw67-bash-3.0.drv
-|   +---/nix/store/570hmhmx3v57605cqg9yfvvyh0nnb8k8-bash
-|   +---/nix/store/p3srsbd8dx44v2pg6nbnszab5mcwx03v-builder.sh
-<em class="replaceable"><code>...</code></em></pre><p>
-
-</p><p>Show all paths that depend on the same OpenSSL library as
-<span class="command"><strong>svn</strong></span>:
-
-</p><pre class="screen">
-$ nix-store -q --referrers $(nix-store -q --binding openssl $(nix-store -qd $(which svn)))
-/nix/store/23ny9l9wixx21632y2wi4p585qhva1q8-sylpheed-1.0.0
-/nix/store/5mbglq5ldqld8sj57273aljwkfvj22mc-subversion-1.1.4
-/nix/store/dpmvp969yhdqs7lm2r1a3gng7pyq6vy4-subversion-1.1.3
-/nix/store/l51240xqsgg8a7yrbqdx1rfzyv6l26fx-lynx-2.8.5</pre><p>
-
-</p><p>Show all paths that directly or indirectly depend on the Glibc
-(C library) used by <span class="command"><strong>svn</strong></span>:
-
-</p><pre class="screen">
-$ nix-store -q --referrers-closure $(ldd $(which svn) | grep /libc.so | awk '{print $3}')
-/nix/store/034a6h4vpz9kds5r6kzb9lhh81mscw43-libgnomeprintui-2.8.2
-/nix/store/15l3yi0d45prm7a82pcrknxdh6nzmxza-gawk-3.1.4
-<em class="replaceable"><code>...</code></em></pre><p>
-
-Note that <span class="command"><strong>ldd</strong></span> is a command that prints out the
-dynamic libraries used by an ELF executable.</p><p>Make a picture of the runtime dependency graph of the current
-user environment:
-
-</p><pre class="screen">
-$ nix-store -q --graph ~/.nix-profile | dot -Tps &gt; graph.ps
-$ gv graph.ps</pre><p>
-
-</p><p>Show every garbage collector root that points to a store path
-that depends on <span class="command"><strong>svn</strong></span>:
-
-</p><pre class="screen">
-$ nix-store -q --roots $(which svn)
-/nix/var/nix/profiles/default-81-link
-/nix/var/nix/profiles/default-82-link
-/nix/var/nix/profiles/per-user/eelco/profile-97-link
-</pre><p>
-
-</p></div></div><div class="refsection"><a id="idm140737316669200"></a><h2>Operation <code class="option">--add</code></h2><div class="refsection"><a id="idm140737316668400"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--add</code>   <em class="replaceable"><code>paths</code></em>... </p></div></div><div class="refsection"><a id="idm140737316665024"></a><h3>Description</h3><p>The operation <code class="option">--add</code> adds the specified paths to
-the Nix store.  It prints the resulting paths in the Nix store on
-standard output.</p></div><div class="refsection"><a id="idm140737316663392"></a><h3>Example</h3><pre class="screen">
-$ nix-store --add ./foo.c
-/nix/store/m7lrha58ph6rcnv109yzx1nk1cj7k7zf-foo.c</pre></div></div><div class="refsection"><a id="refsec-nix-store-verify"></a><h2>Operation <code class="option">--verify</code></h2><div class="refsection"><a id="idm140737316660496"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--verify</code>  [<code class="option">--check-contents</code>] [<code class="option">--repair</code>]</p></div></div><div class="refsection"><a id="idm140737316656992"></a><h3>Description</h3><p>The operation <code class="option">--verify</code> verifies the internal
-consistency of the Nix database, and the consistency between the Nix
-database and the Nix store.  Any inconsistencies encountered are
-automatically repaired.  Inconsistencies are generally the result of
-the Nix store or database being modified by non-Nix tools, or of bugs
-in Nix itself.</p><p>This operation has the following options:
-
-</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--check-contents</code></span></dt><dd><p>Checks that the contents of every valid store path
-    has not been altered by computing a SHA-256 hash of the contents
-    and comparing it with the hash stored in the Nix database at build
-    time.  Paths that have been modified are printed out.  For large
-    stores, <code class="option">--check-contents</code> is obviously quite
-    slow.</p></dd><dt><span class="term"><code class="option">--repair</code></span></dt><dd><p>If any valid path is missing from the store, or
-    (if <code class="option">--check-contents</code> is given) the contents of a
-    valid path has been modified, then try to repair the path by
-    redownloading it.  See <span class="command"><strong>nix-store --repair-path</strong></span>
-    for details.</p></dd></dl></div><p>
-
-</p></div></div><div class="refsection"><a id="idm140737316649376"></a><h2>Operation <code class="option">--verify-path</code></h2><div class="refsection"><a id="idm140737316648544"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--verify-path</code>   <em class="replaceable"><code>paths</code></em>... </p></div></div><div class="refsection"><a id="idm140737316645040"></a><h3>Description</h3><p>The operation <code class="option">--verify-path</code> compares the
-contents of the given store paths to their cryptographic hashes stored
-in Nix’s database.  For every changed path, it prints a warning
-message.  The exit status is 0 if no path has changed, and 1
-otherwise.</p></div><div class="refsection"><a id="idm140737316643072"></a><h3>Example</h3><p>To verify the integrity of the <span class="command"><strong>svn</strong></span> command and all its dependencies:
-
-</p><pre class="screen">
-$ nix-store --verify-path $(nix-store -qR $(which svn))
-</pre><p>
-
-</p></div></div><div class="refsection"><a id="idm140737316640576"></a><h2>Operation <code class="option">--repair-path</code></h2><div class="refsection"><a id="idm140737316639744"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--repair-path</code>   <em class="replaceable"><code>paths</code></em>... </p></div></div><div class="refsection"><a id="idm140737316636240"></a><h3>Description</h3><p>The operation <code class="option">--repair-path</code> attempts to
-“repair” the specified paths by redownloading them using the available
-substituters.  If no substitutes are available, then repair is not
-possible.</p><div class="warning"><h3 class="title">Warning</h3><p>During repair, there is a very small time window during
-which the old path (if it exists) is moved out of the way and replaced
-with the new path.  If repair is interrupted in between, then the
-system may be left in a broken state (e.g., if the path contains a
-critical system component like the GNU C Library).</p></div></div><div class="refsection"><a id="idm140737316633552"></a><h3>Example</h3><pre class="screen">
-$ nix-store --verify-path /nix/store/dj7a81wsm1ijwwpkks3725661h3263p5-glibc-2.13
-path `/nix/store/dj7a81wsm1ijwwpkks3725661h3263p5-glibc-2.13' was modified!
-  expected hash `2db57715ae90b7e31ff1f2ecb8c12ec1cc43da920efcbe3b22763f36a1861588',
-  got `481c5aa5483ebc97c20457bb8bca24deea56550d3985cda0027f67fe54b808e4'
-
-$ nix-store --repair-path /nix/store/dj7a81wsm1ijwwpkks3725661h3263p5-glibc-2.13
-fetching path `/nix/store/d7a81wsm1ijwwpkks3725661h3263p5-glibc-2.13'...
-…
-</pre></div></div><div class="refsection"><a id="refsec-nix-store-dump"></a><h2>Operation <code class="option">--dump</code></h2><div class="refsection"><a id="idm140737316629840"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--dump</code>   <em class="replaceable"><code>path</code></em> </p></div></div><div class="refsection"><a id="idm140737316626608"></a><h3>Description</h3><p>The operation <code class="option">--dump</code> produces a NAR (Nix
-ARchive) file containing the contents of the file system tree rooted
-at <em class="replaceable"><code>path</code></em>.  The archive is written to
-standard output.</p><p>A NAR archive is like a TAR or Zip archive, but it contains only
-the information that Nix considers important.  For instance,
-timestamps are elided because all files in the Nix store have their
-timestamp set to 0 anyway.  Likewise, all permissions are left out
-except for the execute bit, because all files in the Nix store have
-644 or 755 permission.</p><p>Also, a NAR archive is <span class="emphasis"><em>canonical</em></span>, meaning
-that “equal” paths always produce the same NAR archive.  For instance,
-directory entries are always sorted so that the actual on-disk order
-doesn’t influence the result.  This means that the cryptographic hash
-of a NAR dump of a path is usable as a fingerprint of the contents of
-the path.  Indeed, the hashes of store paths stored in Nix’s database
-(see <a class="link" href="#refsec-nix-store-query" title="Operation --query"><code class="literal">nix-store -q
---hash</code></a>) are SHA-256 hashes of the NAR dump of each
-store path.</p><p>NAR archives support filenames of unlimited length and 64-bit
-file sizes.  They can contain regular files, directories, and symbolic
-links, but not other types of files (such as device nodes).</p><p>A Nix archive can be unpacked using <code class="literal">nix-store
---restore</code>.</p></div></div><div class="refsection"><a id="idm140737316619456"></a><h2>Operation <code class="option">--restore</code></h2><div class="refsection"><a id="idm140737316618624"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--restore</code>   <em class="replaceable"><code>path</code></em> </p></div></div><div class="refsection"><a id="idm140737316615392"></a><h3>Description</h3><p>The operation <code class="option">--restore</code> unpacks a NAR archive
-to <em class="replaceable"><code>path</code></em>, which must not already exist.  The
-archive is read from standard input.</p></div></div><div class="refsection"><a id="refsec-nix-store-export"></a><h2>Operation <code class="option">--export</code></h2><div class="refsection"><a id="idm140737316611584"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--export</code>   <em class="replaceable"><code>paths</code></em>... </p></div></div><div class="refsection"><a id="idm140737316608080"></a><h3>Description</h3><p>The operation <code class="option">--export</code> writes a serialisation
-of the specified store paths to standard output in a format that can
-be imported into another Nix store with <span class="command"><strong><a class="command" href="#refsec-nix-store-import" title="Operation --import">nix-store --import</a></strong></span>.  This
-is like <span class="command"><strong><a class="command" href="#refsec-nix-store-dump" title="Operation --dump">nix-store
---dump</a></strong></span>, except that the NAR archive produced by that command
-doesn’t contain the necessary meta-information to allow it to be
-imported into another Nix store (namely, the set of references of the
-path).</p><p>This command does not produce a <span class="emphasis"><em>closure</em></span> of
-the specified paths, so if a store path references other store paths
-that are missing in the target Nix store, the import will fail.  To
-copy a whole closure, do something like
-
-</p><pre class="screen">
-$ nix-store --export $(nix-store -qR <em class="replaceable"><code>paths</code></em>) &gt; out</pre><p>
-
-</p><p>For an example of how <code class="option">--export</code> and
-<code class="option">--import</code> can be used, see the source of the <span class="command"><strong><a class="command" href="#sec-nix-copy-closure" title="nix-copy-closure">nix-copy-closure</a></strong></span>
-command.</p></div></div><div class="refsection"><a id="refsec-nix-store-import"></a><h2>Operation <code class="option">--import</code></h2><div class="refsection"><a id="idm140737316598832"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--import</code> </p></div></div><div class="refsection"><a id="idm140737316596416"></a><h3>Description</h3><p>The operation <code class="option">--import</code> reads a serialisation of
-a set of store paths produced by <span class="command"><strong><a class="command" href="#refsec-nix-store-export" title="Operation --export">nix-store --export</a></strong></span> from
-standard input and adds those store paths to the Nix store.  Paths
-that already exist in the Nix store are ignored.  If a path refers to
-another path that doesn’t exist in the Nix store, the import
-fails.</p></div></div><div class="refsection"><a id="idm140737316593200"></a><h2>Operation <code class="option">--optimise</code></h2><div class="refsection"><a id="idm140737316592368"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--optimise</code> </p></div></div><div class="refsection"><a id="idm140737316589952"></a><h3>Description</h3><p>The operation <code class="option">--optimise</code> reduces Nix store disk
-space usage by finding identical files in the store and hard-linking
-them to each other.  It typically reduces the size of the store by
-something like 25-35%.  Only regular files and symlinks are
-hard-linked in this manner.  Files are considered identical when they
-have the same NAR archive serialisation: that is, regular files must
-have the same contents and permission (executable or non-executable),
-and symlinks must have the same contents.</p><p>After completion, or when the command is interrupted, a report
-on the achieved savings is printed on standard error.</p><p>Use <code class="option">-vv</code> or <code class="option">-vvv</code> to get some
-progress indication.</p></div><div class="refsection"><a id="idm140737316586160"></a><h3>Example</h3><pre class="screen">
-$ nix-store --optimise
-hashing files in `/nix/store/qhqx7l2f1kmwihc9bnxs7rc159hsxnf3-gcc-4.1.1'
-<em class="replaceable"><code>...</code></em>
-541838819 bytes (516.74 MiB) freed by hard-linking 54143 files;
-there are 114486 files with equal contents out of 215894 files in total
-</pre></div></div><div class="refsection"><a id="idm140737316583952"></a><h2>Operation <code class="option">--read-log</code></h2><div class="refsection"><a id="idm140737316583120"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>  { <code class="option">--read-log</code>  |   <code class="option">-l</code> }  <em class="replaceable"><code>paths</code></em>... </p></div></div><div class="refsection"><a id="idm140737316578160"></a><h3>Description</h3><p>The operation <code class="option">--read-log</code> prints the build log
-of the specified store paths on standard output.  The build log is
-whatever the builder of a derivation wrote to standard output and
-standard error.  If a store path is not a derivation, the deriver of
-the store path is used.</p><p>Build logs are kept in
-<code class="filename">/nix/var/log/nix/drvs</code>.  However, there is no
-guarantee that a build log is available for any particular store path.
-For instance, if the path was downloaded as a pre-built binary through
-a substitute, then the log is unavailable. If the log is not available
-locally, then <span class="command"><strong>nix-store</strong></span> will try to download the
-log from the servers specified in the Nix option
-<code class="option">log-servers</code>. For example, if it’s set to
-<code class="literal">http://hydra.nixos.org/log</code>, then Nix will check
-<code class="literal">http://hydra.nixos.org/log/<em class="replaceable"><code>base-name</code></em></code>.</p></div><div class="refsection"><a id="idm140737316573104"></a><h3>Example</h3><pre class="screen">
-$ nix-store -l $(which ktorrent)
-building /nix/store/dhc73pvzpnzxhdgpimsd9sw39di66ph1-ktorrent-2.2.1
-unpacking sources
-unpacking source archive /nix/store/p8n1jpqs27mgkjw07pb5269717nzf5f8-ktorrent-2.2.1.tar.gz
-ktorrent-2.2.1/
-ktorrent-2.2.1/NEWS
-<em class="replaceable"><code>...</code></em>
-</pre></div></div><div class="refsection"><a id="idm140737316570912"></a><h2>Operation <code class="option">--dump-db</code></h2><div class="refsection"><a id="idm140737316570080"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--dump-db</code> </p></div></div><div class="refsection"><a id="idm140737316567664"></a><h3>Description</h3><p>The operation <code class="option">--dump-db</code> writes a dump of the
-Nix database to standard output.  It can be loaded into an empty Nix
-store using <code class="option">--load-db</code>.  This is useful for making
-backups and when migrating to different database schemas.</p></div></div><div class="refsection"><a id="idm140737316565040"></a><h2>Operation <code class="option">--load-db</code></h2><div class="refsection"><a id="idm140737316564208"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--load-db</code> </p></div></div><div class="refsection"><a id="idm140737316561792"></a><h3>Description</h3><p>The operation <code class="option">--load-db</code> reads a dump of the Nix
-database created by <code class="option">--dump-db</code> from standard input and
-loads it into the Nix database.</p></div></div><div class="refsection"><a id="idm140737316559232"></a><h2>Operation <code class="option">--print-env</code></h2><div class="refsection"><a id="idm140737316558400"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--print-env</code>   <em class="replaceable"><code>drvpath</code></em> </p></div></div><div class="refsection"><a id="idm140737316555168"></a><h3>Description</h3><p>The operation <code class="option">--print-env</code> prints out the
-environment of a derivation in a format that can be evaluated by a
-shell.  The command line arguments of the builder are placed in the
-variable <code class="envar">_args</code>.</p></div><div class="refsection"><a id="idm140737316553072"></a><h3>Example</h3><pre class="screen">
-$ nix-store --print-env $(nix-instantiate '&lt;nixpkgs&gt;' -A firefox)
-<em class="replaceable"><code>…</code></em>
-export src; src='/nix/store/plpj7qrwcz94z2psh6fchsi7s8yihc7k-firefox-12.0.source.tar.bz2'
-export stdenv; stdenv='/nix/store/7c8asx3yfrg5dg1gzhzyq2236zfgibnn-stdenv'
-export system; system='x86_64-linux'
-export _args; _args='-e /nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25c-default-builder.sh'
-</pre></div></div><div class="refsection"><a id="idm140737316550688"></a><h2>Operation <code class="option">--query-failed-paths</code></h2><div class="refsection"><a id="idm140737316549856"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--query-failed-paths</code> </p></div></div><div class="refsection"><a id="idm140737316547504"></a><h3>Description</h3><p>If build failure caching is enabled through the
-<code class="literal">build-cache-failure</code> configuration option, the
-operation <code class="option">--query-failed-paths</code> will print out all
-store paths that have failed to build.</p></div><div class="refsection"><a id="idm140737316545424"></a><h3>Example</h3><pre class="screen">
-$ nix-store --query-failed-paths
-/nix/store/000zi5dcla86l92jn1g997jb06sidm7x-perl-PerlMagick-6.59
-/nix/store/0011iy7sfwbc1qj5a1f6ifjnbcdail8a-haskell-gitit-ghc7.0.4-0.8.1
-/nix/store/001c0yn1hkh86gprvrb46cxnz3pki7q3-gamin-0.1.10
-<em class="replaceable"><code>…</code></em>
-</pre></div></div><div class="refsection"><a id="idm140737316543136"></a><h2>Operation <code class="option">--clear-failed-paths</code></h2><div class="refsection"><a id="idm140737316542304"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   <code class="option">--clear-failed-paths</code>   <em class="replaceable"><code>paths</code></em>... </p></div></div><div class="refsection"><a id="idm140737316538800"></a><h3>Description</h3><p>If build failure caching is enabled through the
-<code class="literal">build-cache-failure</code> configuration option, the
-operation <code class="option">--clear-failed-paths</code> clears the “failed”
-state of the given store paths, allowing them to be built again.  This
-is useful if the failure was actually transient (e.g. because the disk
-was full).</p><p>If a path denotes a derivation, its output paths are cleared.
-You can provide the argument <code class="literal">*</code> to clear all store
-paths.</p></div><div class="refsection"><a id="idm140737316535504"></a><h3>Example</h3><pre class="screen">
-$ nix-store --clear-failed-paths /nix/store/000zi5dcla86l92jn1g997jb06sidm7x-perl-PerlMagick-6.59
-$ nix-store --clear-failed-paths *
-</pre></div></div><div class="refsection"><a id="rsec-nix-store-generate-binary-cache-key"></a><h2>Operation <code class="option">--generate-binary-cache-key</code></h2><div class="refsection"><a id="idm140737316532400"></a><h3>Synopsis</h3><div class="cmdsynopsis"><p><code class="command">nix-store</code>   
-      <code class="option">--generate-binary-cache-key</code>
-      <code class="option">key-name</code>
-      <code class="option">secret-key-file</code>
-      <code class="option">public-key-file</code>
-     </p></div></div><div class="refsection"><a id="idm140737316528464"></a><h3>Description</h3><p>This command generates an <a class="link" href="http://ed25519.cr.yp.to/" target="_top">Ed25519 key pair</a> that can
-be used to create a signed binary cache. It takes three mandatory
-parameters:
-
-</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p>A key name, such as
-  <code class="literal">cache.example.org-1</code>, that is used to look up keys
-  on the client when it verifies signatures. It can be anything, but
-  it’s suggested to use the host name of your cache
-  (e.g. <code class="literal">cache.example.org</code>) with a suffix denoting
-  the number of the key (to be incremented every time you need to
-  revoke a key).</p></li><li class="listitem"><p>The file name where the secret key is to be
-  stored.</p></li><li class="listitem"><p>The file name where the public key is to be
-  stored.</p></li></ol></div><p>
-
-For an example, see the manual page for <span class="command"><strong><a class="command" href="#sec-nix-push" title="nix-push">nix-push</a></strong></span>.</p></div></div></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="ch-utilities"></a>Chapter 20. Utilities</h2></div></div></div><p>This section lists utilities that you can use when you
-work with Nix.</p><div class="refentry"><a id="sec-nix-channel"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-channel — manage Nix channels</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-channel</code>  { <code class="option">--add</code> <em class="replaceable"><code>url</code></em>  [<em class="replaceable"><code>name</code></em>]  |   <code class="option">--remove</code> <em class="replaceable"><code>name</code></em>  |   <code class="option">--list</code>  |   <code class="option">--update</code>  [<em class="replaceable"><code>names</code></em>...]  |   <code class="option">--rollback</code>  [<em class="replaceable"><code>generation</code></em>] }</p></div></div><div class="refsection"><a id="idm140737316506336"></a><h2>Description</h2><p>A Nix channel is mechanism that allows you to automatically stay
-up-to-date with a set of pre-built Nix expressions.  A Nix channel is
-just a URL that points to a place containing both a set of Nix
-expressions and a pointer to a binary cache.  <span class="phrase">See also <a class="xref" href="#sec-channels" title="Chapter 11. Channels">Chapter 11, <em>Channels</em></a>.</span></p><p>This command has the following operations:
-
-</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--add</code> <em class="replaceable"><code>url</code></em> [<em class="replaceable"><code>name</code></em>]</span></dt><dd><p>Adds a channel named
-    <em class="replaceable"><code>name</code></em> with URL
-    <em class="replaceable"><code>url</code></em> to the list of subscribed channels.
-    If <em class="replaceable"><code>name</code></em> is omitted, it defaults to the
-    last component of <em class="replaceable"><code>url</code></em>, with the
-    suffixes <code class="literal">-stable</code> or
-    <code class="literal">-unstable</code> removed.</p></dd><dt><span class="term"><code class="option">--remove</code> <em class="replaceable"><code>name</code></em></span></dt><dd><p>Removes the channel named
-    <em class="replaceable"><code>name</code></em> from the list of subscribed
-    channels.</p></dd><dt><span class="term"><code class="option">--list</code></span></dt><dd><p>Prints the names and URLs of all subscribed
-    channels on standard output.</p></dd><dt><span class="term"><code class="option">--update</code> [<em class="replaceable"><code>names</code></em>…]</span></dt><dd><p>Downloads the Nix expressions of all subscribed
-    channels (or only those included in
-    <em class="replaceable"><code>names</code></em> if specified), makes them the
-    default for <span class="command"><strong>nix-env</strong></span> operations (by symlinking
-    them from the directory <code class="filename">~/.nix-defexpr</code>), and
-    performs a <span class="command"><strong>nix-pull</strong></span> on the manifests of all
-    channels to make pre-built binaries available.</p></dd><dt><span class="term"><code class="option">--rollback</code> [<em class="replaceable"><code>generation</code></em>]</span></dt><dd><p>Reverts the previous call to <span class="command"><strong>nix-channel
-    --update</strong></span>. Optionally, you can specify a specific channel
-    generation number to restore.</p></dd></dl></div><p>
-
-</p><p>Note that <code class="option">--add</code> does not automatically perform
-an update.</p><p>The list of subscribed channels is stored in
-<code class="filename">~/.nix-channels</code>.</p></div><div class="refsection"><a id="idm140737316486336"></a><h2>Examples</h2><p>To subscribe to the Nixpkgs channel and install the GNU Hello package:</p><pre class="screen">
-$ nix-channel --add https://nixos.org/channels/nixpkgs-unstable
-$ nix-channel --update
-$ nix-env -iA nixpkgs.hello</pre><p>You can revert channel updates using <code class="option">--rollback</code>:</p><pre class="screen">
-$ nix-instantiate --eval -E '(import &lt;nixpkgs&gt; {}).lib.nixpkgsVersion'
-"14.04.527.0e935f1"
-
-$ nix-channel --rollback
-switching from generation 483 to 482
-
-$ nix-instantiate --eval -E '(import &lt;nixpkgs&gt; {}).lib.nixpkgsVersion'
-"14.04.526.dbadfad"
-</pre></div><div class="refsection"><a id="idm140737316482992"></a><h2>Files</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="filename">/nix/var/nix/profiles/per-user/<em class="replaceable"><code>username</code></em>/channels</code></span></dt><dd><p><span class="command"><strong>nix-channel</strong></span> uses a
-    <span class="command"><strong>nix-env</strong></span> profile to keep track of previous
-    versions of the subscribed channels. Every time you run
-    <span class="command"><strong>nix-channel --update</strong></span>, a new channel generation
-    (that is, a symlink to the channel Nix expressions in the Nix store)
-    is created. This enables <span class="command"><strong>nix-channel --rollback</strong></span>
-    to revert to previous versions.</p></dd><dt><span class="term"><code class="filename">~/.nix-defexpr/channels</code></span></dt><dd><p>This is a symlink to
-    <code class="filename">/nix/var/nix/profiles/per-user/<em class="replaceable"><code>username</code></em>/channels</code>. It
-    ensures that <span class="command"><strong>nix-env</strong></span> can find your channels. In
-    a multi-user installation, you may also have
-    <code class="filename">~/.nix-defexpr/channels_root</code>, which links to
-    the channels of the root user.</p></dd></dl></div></div><div class="refsection"><a id="idm140737316475008"></a><h2>Channel format</h2><p>A channel URL should point to a directory containing the
-following files:</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="filename">nixexprs.tar.xz</code></span></dt><dd><p>A tarball containing Nix expressions and files
-    referenced by them (such as build scripts and patches). At
-    top-level, the tarball should contain a single directory. That
-    directory must contain a file <code class="filename">default.nix</code>
-    that serves as the channel’s “entry point”.</p></dd><dt><span class="term"><code class="filename">binary-cache-url</code></span></dt><dd><p>A file containing the URL to a binary cache (such
-    as <code class="uri">https://cache.nixos.org</code>. Nix will automatically
-    check this cache for pre-built binaries, if the user has
-    sufficient rights to add binary caches. For instance, in a
-    multi-user Nix setup, the binary caches provided by the channels
-    of the root user are used automatically, but caches corresponding
-    to the channels of non-root users are ignored. Binary caches can
-    be created and maintained using
-    <span class="command"><strong>nix-push</strong></span>.</p></dd><dt><span class="term"><code class="filename">MANIFEST.bz2</code></span></dt><dd><p>(Deprecated in favour of binary caches.) A
-    manifest as created by <span class="command"><strong>nix-push</strong></span>. Only used if
-    <code class="filename">binary-cache-url</code> is not present or if the
-    <code class="filename">nix.conf</code> option
-    <code class="option">force-manifest</code> is set.</p></dd></dl></div></div></div><div class="refentry"><div class="refentry.separator"><hr /></div><a id="sec-nix-collect-garbage"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-collect-garbage — delete unreachable store paths</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-collect-garbage</code>  [<code class="option">--delete-old</code>] [<code class="option">-d</code>] [<code class="option">--delete-older-than</code> <em class="replaceable"><code>period</code></em>] [ <code class="option">--print-roots</code>  |   <code class="option">--print-live</code>  |   <code class="option">--print-dead</code>  |   <code class="option">--delete</code> ] [<code class="option">--max-freed</code> <em class="replaceable"><code>bytes</code></em>] [<code class="option">--dry-run</code>]</p></div></div><div class="refsection"><a id="idm140737316452160"></a><h2>Description</h2><p>The command <span class="command"><strong>nix-collect-garbage</strong></span> is mostly an
-alias of <a class="link" href="#rsec-nix-store-gc" title="Operation --gc"><span class="command"><strong>nix-store
---gc</strong></span></a>, that is, it deletes all unreachable paths in
-the Nix store to clean up your system.  However, it provides two
-additional options: <code class="option">-d</code> (<code class="option">--delete-old</code>),
-which deletes all old generations of all profiles in
-<code class="filename">/nix/var/nix/profiles</code> by invoking
-<code class="literal">nix-env --delete-generations old</code> on all profiles
-(of course, this makes rollbacks to previous configurations
-impossible); and
-<code class="option">--delete-older-than</code> <em class="replaceable"><code>period</code></em>,
-where period is a value such as <code class="literal">30d</code>, which deletes
-all generations older than the specified number of days in all profiles
-in <code class="filename">/nix/var/nix/profiles</code> (except for the generations
-that were active at that point in time).
-</p></div><div class="refsection"><a id="idm140737316445920"></a><h2>Example</h2><p>To delete from the Nix store everything that is not used by the
-current generations of each profile, do
-
-</p><pre class="screen">
-$ nix-collect-garbage -d</pre><p>
-
-</p></div></div><div class="refentry"><div class="refentry.separator"><hr /></div><a id="sec-nix-copy-closure"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-copy-closure — copy a closure to or from a remote machine via SSH</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-copy-closure</code>  [ <code class="option">--to</code>  |   <code class="option">--from</code> ] [<code class="option">--sign</code>] [<code class="option">--gzip</code>] [<code class="option">--include-outputs</code>] [<code class="option">--use-substitutes</code>] [<code class="option">-s</code>] [<code class="option">-v</code>]  
-      <em class="replaceable"><code>user@</code></em><em class="replaceable"><code>machine</code></em>
-       <em class="replaceable"><code>paths</code></em> </p></div></div><div class="refsection"><a id="idm140737316430784"></a><h2>Description</h2><p><span class="command"><strong>nix-copy-closure</strong></span> gives you an easy and
-efficient way to exchange software between machines.  Given one or
-more Nix store <em class="replaceable"><code>paths</code></em> on the local
-machine, <span class="command"><strong>nix-copy-closure</strong></span> computes the closure of
-those paths (i.e. all their dependencies in the Nix store), and copies
-all paths in the closure to the remote machine via the
-<span class="command"><strong>ssh</strong></span> (Secure Shell) command.  With the
-<code class="option">--from</code>, the direction is reversed:
-the closure of <em class="replaceable"><code>paths</code></em> on a remote machine is
-copied to the Nix store on the local machine.</p><p>This command is efficient because it only sends the store paths
-that are missing on the target machine.</p><p>Since <span class="command"><strong>nix-copy-closure</strong></span> calls
-<span class="command"><strong>ssh</strong></span>, you may be asked to type in the appropriate
-password or passphrase.  In fact, you may be asked
-<span class="emphasis"><em>twice</em></span> because <span class="command"><strong>nix-copy-closure</strong></span>
-currently connects twice to the remote machine, first to get the set
-of paths missing on the target machine, and second to send the dump of
-those paths.  If this bothers you, use
-<span class="command"><strong>ssh-agent</strong></span>.</p><div class="refsection"><a id="idm140737316423680"></a><h3>Options</h3><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--to</code></span></dt><dd><p>Copy the closure of
-    <em class="replaceable"><code>paths</code></em> from the local Nix store to the
-    Nix store on <em class="replaceable"><code>machine</code></em>.  This is the
-    default.</p></dd><dt><span class="term"><code class="option">--from</code></span></dt><dd><p>Copy the closure of
-    <em class="replaceable"><code>paths</code></em> from the Nix store on
-    <em class="replaceable"><code>machine</code></em> to the local Nix
-    store.</p></dd><dt><span class="term"><code class="option">--sign</code></span></dt><dd><p>Let the sending machine cryptographically sign the
-    dump of each path with the key in
-    <code class="filename"><em class="replaceable"><code>sysconfdir</code></em>/nix/signing-key.sec</code>.
-    If the user on the target machine does not have direct access to
-    the Nix store (i.e., if the target machine has a multi-user Nix
-    installation), then the target machine will check the dump against
-    <code class="filename"><em class="replaceable"><code>sysconfdir</code></em>/nix/signing-key.pub</code>
-    before unpacking it in its Nix store.  This allows secure sharing
-    of store paths between untrusted users on two machines, provided
-    that there is a trust relation between the Nix installations on
-    both machines (namely, they have matching public/secret
-    keys).</p></dd><dt><span class="term"><code class="option">--gzip</code></span></dt><dd><p>Enable compression of the SSH
-    connection.</p></dd><dt><span class="term"><code class="option">--include-outputs</code></span></dt><dd><p>Also copy the outputs of store derivations
-    included in the closure.</p></dd><dt><span class="term"><code class="option">--use-substitutes</code> / <code class="option">-s</code></span></dt><dd><p>Attempt to download missing paths on the target
-    machine using Nix’s substitute mechanism.  Any paths that cannot
-    be substituted on the target are still copied normally from the
-    source.  This is useful, for instance, if the connection between
-    the source and target machine is slow, but the connection between
-    the target machine and <code class="literal">nixos.org</code> (the default
-    binary cache server) is fast.</p></dd><dt><span class="term"><code class="option">-v</code></span></dt><dd><p>Show verbose output.</p></dd></dl></div></div><div class="refsection"><a id="idm140737316407152"></a><h3>Environment variables</h3><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="envar">NIX_SSHOPTS</code></span></dt><dd><p>Additional options to be passed to
-    <span class="command"><strong>ssh</strong></span> on the command line.</p></dd></dl></div></div><div class="refsection"><a id="idm140737316404320"></a><h3>Examples</h3><p>Copy Firefox with all its dependencies to a remote machine:
-
-</p><pre class="screen">
-$ nix-copy-closure --to alice@itchy.labs $(type -tP firefox)</pre><p>
-
-</p><p>Copy Subversion from a remote machine and then install it into a
-user environment:
-
-</p><pre class="screen">
-$ nix-copy-closure --from alice@itchy.labs \
-    /nix/store/0dj0503hjxy5mbwlafv1rsbdiyx1gkdy-subversion-1.4.4
-$ nix-env -i /nix/store/0dj0503hjxy5mbwlafv1rsbdiyx1gkdy-subversion-1.4.4
-</pre><p>
-
-</p></div></div></div><div class="refentry"><div class="refentry.separator"><hr /></div><a id="sec-nix-daemon"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-daemon — Nix multi-user support daemon</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-daemon</code> </p></div></div><div class="refsection"><a id="idm140737316395584"></a><h2>Description</h2><p>The Nix daemon is necessary in multi-user Nix installations.  It
-performs build actions and other operations on the Nix store on behalf
-of unprivileged users.</p></div></div><div class="refentry"><div class="refentry.separator"><hr /></div><a id="sec-nix-hash"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-hash — compute the cryptographic hash of a path</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-hash</code>  [<code class="option">--flat</code>] [<code class="option">--base32</code>] [<code class="option">--truncate</code>] [<code class="option">--type</code> <em class="replaceable"><code>hashAlgo</code></em>]  <em class="replaceable"><code>path</code></em>... </p></div><div class="cmdsynopsis"><p><code class="command">nix-hash</code>   <code class="option">--to-base16</code>   <em class="replaceable"><code>hash</code></em>... </p></div><div class="cmdsynopsis"><p><code class="command">nix-hash</code>   <code class="option">--to-base32</code>   <em class="replaceable"><code>hash</code></em>... </p></div></div><div class="refsection"><a id="idm140737316378944"></a><h2>Description</h2><p>The command <span class="command"><strong>nix-hash</strong></span> computes the
-cryptographic hash of the contents of each
-<em class="replaceable"><code>path</code></em> and prints it on standard output.  By
-default, it computes an MD5 hash, but other hash algorithms are
-available as well.  The hash is printed in hexadecimal.</p><p>The hash is computed over a <span class="emphasis"><em>serialisation</em></span>
-of each path: a dump of the file system tree rooted at the path.  This
-allows directories and symlinks to be hashed as well as regular files.
-The dump is in the <span class="emphasis"><em>NAR format</em></span> produced by <a class="link" href="#refsec-nix-store-dump" title="Operation --dump"><span class="command"><strong>nix-store</strong></span>
-<code class="option">--dump</code></a>.  Thus, <code class="literal">nix-hash
-<em class="replaceable"><code>path</code></em></code> yields the same
-cryptographic hash as <code class="literal">nix-store --dump
-<em class="replaceable"><code>path</code></em> | md5sum</code>.</p></div><div class="refsection"><a id="idm140737316372416"></a><h2>Options</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--flat</code></span></dt><dd><p>Print the cryptographic hash of the contents of
-    each regular file <em class="replaceable"><code>path</code></em>.  That is, do
-    not compute the hash over the dump of
-    <em class="replaceable"><code>path</code></em>.  The result is identical to that
-    produced by the GNU commands <span class="command"><strong>md5sum</strong></span> and
-    <span class="command"><strong>sha1sum</strong></span>.</p></dd><dt><span class="term"><code class="option">--base32</code></span></dt><dd><p>Print the hash in a base-32 representation rather
-    than hexadecimal.  This base-32 representation is more compact and
-    can be used in Nix expressions (such as in calls to
-    <code class="function">fetchurl</code>).</p></dd><dt><span class="term"><code class="option">--truncate</code></span></dt><dd><p>Truncate hashes longer than 160 bits (such as
-    SHA-256) to 160 bits.</p></dd><dt><span class="term"><code class="option">--type</code> <em class="replaceable"><code>hashAlgo</code></em></span></dt><dd><p>Use the specified cryptographic hash algorithm,
-    which can be one of <code class="literal">md5</code>,
-    <code class="literal">sha1</code>, and
-    <code class="literal">sha256</code>.</p></dd><dt><span class="term"><code class="option">--to-base16</code></span></dt><dd><p>Don’t hash anything, but convert the base-32 hash
-    representation <em class="replaceable"><code>hash</code></em> to
-    hexadecimal.</p></dd><dt><span class="term"><code class="option">--to-base32</code></span></dt><dd><p>Don’t hash anything, but convert the hexadecimal
-    hash representation <em class="replaceable"><code>hash</code></em> to
-    base-32.</p></dd></dl></div></div><div class="refsection"><a id="idm140737316357856"></a><h2>Examples</h2><p>Computing hashes:
-
-</p><pre class="screen">
-$ mkdir test
-$ echo "hello" &gt; test/world
-
-$ nix-hash test/ <em class="lineannotation"><span class="lineannotation">(MD5 hash; default)</span></em>
-8179d3caeff1869b5ba1744e5a245c04
-
-$ nix-store --dump test/ | md5sum <em class="lineannotation"><span class="lineannotation">(for comparison)</span></em>
-8179d3caeff1869b5ba1744e5a245c04  -
-
-$ nix-hash --type sha1 test/
-e4fd8ba5f7bbeaea5ace89fe10255536cd60dab6
-
-$ nix-hash --type sha1 --base32 test/
-nvd61k9nalji1zl9rrdfmsmvyyjqpzg4
-
-$ nix-hash --type sha256 --flat test/
-error: reading file `test/': Is a directory
-
-$ nix-hash --type sha256 --flat test/world
-5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03</pre><p>
-
-</p><p>Converting between hexadecimal and base-32:
-
-</p><pre class="screen">
-$ nix-hash --type sha1 --to-base32 e4fd8ba5f7bbeaea5ace89fe10255536cd60dab6
-nvd61k9nalji1zl9rrdfmsmvyyjqpzg4
-
-$ nix-hash --type sha1 --to-base16 nvd61k9nalji1zl9rrdfmsmvyyjqpzg4
-e4fd8ba5f7bbeaea5ace89fe10255536cd60dab6</pre><p>
-
-</p></div></div><div class="refentry"><div class="refentry.separator"><hr /></div><a id="sec-nix-install-package"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-install-package — install a Nix Package file</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-install-package</code>  [<code class="option">--non-interactive</code>] [
-      { <code class="option">--profile</code>  |   <code class="option">-p</code> }
-      <em class="replaceable"><code>path</code></em>
-    ] [<code class="option">--set</code>]<br /> {{
-        <code class="option">--url</code>
-          <em class="replaceable"><code>url</code></em> 
-      } |  {
-         <em class="replaceable"><code>file</code></em> 
-      }}</p></div></div><div class="refsection"><a id="idm140737316339696"></a><h2>Description</h2><p>The command <span class="command"><strong>nix-install-package</strong></span> interactively
-installs a Nix Package file (<code class="filename">*.nixpkg</code>), which is
-a small file that contains a store path to be installed along with the
-URL of a binary cache.  The Nix Package file is either
-<em class="replaceable"><code>file</code></em>, or automatically downloaded from
-<em class="replaceable"><code>url</code></em> if the <code class="option">--url</code> switch is
-used.</p><p><span class="command"><strong>nix-install-package</strong></span> is used in <a class="link" href="#sec-one-click" title="Chapter 12. One-Click Installation">one-click installs</a> to download and
-install pre-built binary packages with all necessary dependencies.
-<span class="command"><strong>nix-install-package</strong></span> is intended to be associated
-with the MIME type <code class="literal">application/nix-package</code> in a web
-browser so that it is invoked automatically when you click on
-<code class="filename">*.nixpkg</code> files.  When invoked, it restarts itself
-in a terminal window (since otherwise it would be invisible when run
-from a browser), asks the user to confirm whether to install the
-package, and if so downloads and installs the package into the user’s
-current profile.</p><p>To obtain a window, <span class="command"><strong>nix-install-package</strong></span> tries
-to restart itself with <span class="command"><strong>xterm</strong></span>,
-<span class="command"><strong>konsole</strong></span> and
-<span class="command"><strong>gnome-terminal</strong></span>.</p></div><div class="refsection"><a id="idm140737316330624"></a><h2>Options</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--non-interactive</code></span></dt><dd><p>Do not open a new terminal window and do not ask
-    for confirmation.</p></dd><dt><span class="term"><code class="option">--profile</code>, </span><span class="term"><code class="option">-p</code></span></dt><dd><p>Install the package into the specified profile
-    rather than the user’s current profile.</p></dd><dt><span class="term"><code class="option">--set</code></span></dt><dd><p>Install the package as the profile so that the
-    profile contains exactly the contents of the package.</p></dd></dl></div></div><div class="refsection"><a id="idm140737316324704"></a><h2>Examples</h2><p>To install <code class="filename">subversion-1.4.0.nixpkg</code> into the
-user’s current profile, without any prompting:
-
-</p><pre class="screen">
-$ nix-install-package --non-interactive subversion-1.4.0.nixpkg</pre><p>
-
-</p><p>To install the same package from some URL into a different
-profile:
-
-</p><pre class="screen">
-$ nix-install-package --non-interactive -p /nix/var/nix/profiles/eelco \
-    --url http://nix.cs.uu.nl/dist/nix/nixpkgs-0.10pre6622/pkgs/subversion-1.4.0-i686-linux.nixpkg</pre><p>
-
-</p></div><div class="refsection"><a id="idm140737316321552"></a><h2>Format of <code class="literal">nixpkg</code> files</h2><p>A Nix Package file consists of a single line with the following
-format:
-
-</p><pre class="screen">
-NIXPKG1 <em class="replaceable"><code>manifestURL</code></em> <em class="replaceable"><code>name</code></em> <em class="replaceable"><code>system</code></em> <em class="replaceable"><code>drvPath</code></em> <em class="replaceable"><code>outPath</code></em></pre><p>
-
-The elements are as follows:
-
-</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="literal">NIXPKG1</code></span></dt><dd><p>The version of the Nix Package
-    file.</p></dd><dt><span class="term"><em class="replaceable"><code>manifestURL</code></em></span></dt><dd><p>The manifest to be pulled by
-    <span class="command"><strong>nix-pull</strong></span>.  The manifest must contain
-    <em class="replaceable"><code>outPath</code></em>.</p></dd><dt><span class="term"><em class="replaceable"><code>name</code></em></span></dt><dd><p>The symbolic name and version of the
-    package.</p></dd><dt><span class="term"><em class="replaceable"><code>system</code></em></span></dt><dd><p>The platform identifier of the platform for which
-    this binary package is intended.</p></dd><dt><span class="term"><em class="replaceable"><code>drvPath</code></em></span></dt><dd><p>The path in the Nix store of the derivation from
-    which <em class="replaceable"><code>outPath</code></em> was built.  Not currently
-    used.</p></dd><dt><span class="term"><em class="replaceable"><code>outPath</code></em></span></dt><dd><p>The path in the Nix store of the
-    package.</p></dd><dt><span class="term"><em class="replaceable"><code>binaryCacheURL</code></em></span></dt><dd><p>The URL of a binary cache containing the closure
-    of <em class="replaceable"><code>outPath</code></em>.</p></dd></dl></div><p>
-
-</p><p>An example follows:
-
-</p><pre class="screen">
-NIXPKG1 http://.../nixpkgs-0.10pre6622/MANIFEST subversion-1.4.0 i686-darwin \
-  /nix/store/4kh60jkp...-subversion-1.4.0.drv \
-  /nix/store/nkw7wpgb...-subversion-1.4.0</pre><p>
-
-(The line breaks (<code class="literal">\</code>) are for presentation purposes
-and not part of the actual file.)
-
-</p></div></div><div class="refentry"><div class="refentry.separator"><hr /></div><a id="sec-nix-instantiate"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-instantiate — instantiate store derivations from Nix expressions</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-instantiate</code>  [ <code class="option">--parse</code>  |   
-        <code class="option">--eval</code>
-         [<code class="option">--strict</code>]
-         [<code class="option">--xml</code>]
-       ] [<code class="option">--read-write-mode</code>] [<code class="option">--arg</code> <em class="replaceable"><code>name</code></em> <em class="replaceable"><code>value</code></em>] [
-      { <code class="option">--attr</code>  |   <code class="option">-A</code> }
-      <em class="replaceable"><code>attrPath</code></em>
-    ] [<code class="option">--add-root</code> <em class="replaceable"><code>path</code></em>] [<code class="option">--indirect</code>] { <code class="option">--expr</code>  |   <code class="option">-E</code> }  <em class="replaceable"><code>files</code></em>... </p></div><div class="cmdsynopsis"><p><code class="command">nix-instantiate</code>   <code class="option">--find-file</code>   <em class="replaceable"><code>files</code></em>... </p></div></div><div class="refsection"><a id="idm140737316282448"></a><h2>Description</h2><p>The command <span class="command"><strong>nix-instantiate</strong></span> generates <a class="link" href="#gloss-derivation" title="derivation">store derivations</a> from (high-level)
-Nix expressions.  It evaluates the Nix expressions in each of
-<em class="replaceable"><code>files</code></em> (which defaults to
-<em class="replaceable"><code>./default.nix</code></em>).  Each top-level expression
-should evaluate to a derivation, a list of derivations, or a set of
-derivations.  The paths of the resulting store derivations are printed
-on standard output.</p><p>If <em class="replaceable"><code>files</code></em> is the character
-<code class="literal">-</code>, then a Nix expression will be read from standard
-input.</p><p>See also <a class="xref" href="#sec-common-options" title="Chapter 17. Common Options">Chapter 17, <em>Common Options</em></a> for a list of common options.</p></div><div class="refsection"><a id="idm140737316276496"></a><h2>Options</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--add-root</code> <em class="replaceable"><code>path</code></em>, </span><span class="term"><code class="option">--indirect</code></span></dt><dd><p>See the <a class="link" href="#opt-add-root">corresponding
-    options</a> in <span class="command"><strong>nix-store</strong></span>.</p></dd><dt><span class="term"><code class="option">--parse</code></span></dt><dd><p>Just parse the input files, and print their
-    abstract syntax trees on standard output in ATerm
-    format.</p></dd><dt><span class="term"><code class="option">--eval</code></span></dt><dd><p>Just parse and evaluate the input files, and print
-    the resulting values on standard output.  No instantiation of
-    store derivations takes place.</p></dd><dt><span class="term"><code class="option">--find-file</code></span></dt><dd><p>Look up the given files in Nix’s search path (as
-    specified by the <code class="envar"><a class="envar" href="#env-NIX_PATH">NIX_PATH</a></code>
-    environment variable).  If found, print the corresponding absolute
-    paths on standard output.  For instance, if
-    <code class="envar">NIX_PATH</code> is
-    <code class="literal">nixpkgs=/home/alice/nixpkgs</code>, then
-    <code class="literal">nix-instantiate --find-file nixpkgs/default.nix</code>
-    will print
-    <code class="literal">/home/alice/nixpkgs/default.nix</code>.</p></dd><dt><span class="term"><code class="option">--xml</code></span></dt><dd><p>When used with <code class="option">--parse</code> and
-    <code class="option">--eval</code>, print the resulting expression as an
-    XML representation of the abstract syntax tree rather than as an
-    ATerm.  The schema is the same as that used by the <a class="link" href="#builtin-toXML"><code class="function">toXML</code>
-    built-in</a>.</p></dd><dt><span class="term"><code class="option">--json</code></span></dt><dd><p>When used with <code class="option">--parse</code> and
-    <code class="option">--eval</code>, print the resulting expression as an
-    JSON representation of the abstract syntax tree rather than as an
-    ATerm.</p></dd><dt><span class="term"><code class="option">--strict</code></span></dt><dd><p>When used with <code class="option">--eval</code>,
-    recursively evaluate list elements and attributes.  Normally, such
-    sub-expressions are left unevaluated (since the Nix expression
-    language is lazy).</p><div class="warning"><h3 class="title">Warning</h3><p>This option can cause non-termination, because lazy
-    data structures can be infinitely large.</p></div></dd><dt><span class="term"><code class="option">--read-write-mode</code></span></dt><dd><p>When used with <code class="option">--eval</code>, perform
-    evaluation in read/write mode so nix language features that
-    require it will still work (at the cost of needing to do
-    instantiation of every evaluated derivation).</p></dd></dl></div></div><div class="refsection"><a id="idm140737316254336"></a><h2>Examples</h2><p>Instantiating store derivations from a Nix expression, and
-building them using <span class="command"><strong>nix-store</strong></span>:
-
-</p><pre class="screen">
-$ nix-instantiate test.nix <em class="lineannotation"><span class="lineannotation">(instantiate)</span></em>
-/nix/store/cigxbmvy6dzix98dxxh9b6shg7ar5bvs-perl-BerkeleyDB-0.26.drv
-
-$ nix-store -r $(nix-instantiate test.nix) <em class="lineannotation"><span class="lineannotation">(build)</span></em>
-<em class="replaceable"><code>...</code></em>
-/nix/store/qhqk4n8ci095g3sdp93x7rgwyh9rdvgk-perl-BerkeleyDB-0.26 <em class="lineannotation"><span class="lineannotation">(output path)</span></em>
-
-$ ls -l /nix/store/qhqk4n8ci095g3sdp93x7rgwyh9rdvgk-perl-BerkeleyDB-0.26
-dr-xr-xr-x    2 eelco    users        4096 1970-01-01 01:00 lib
-...</pre><p>
-
-</p><p>You can also give a Nix expression on the command line:
-
-</p><pre class="screen">
-$ nix-instantiate -E 'with import &lt;nixpkgs&gt; { }; hello'
-/nix/store/j8s4zyv75a724q38cb0r87rlczaiag4y-hello-2.8.drv
-</pre><p>
-
-This is equivalent to:
-
-</p><pre class="screen">
-$ nix-instantiate '&lt;nixpkgs&gt;' -A hello
-</pre><p>
-
-</p><p>Parsing and evaluating Nix expressions:
-
-</p><pre class="screen">
-$ nix-instantiate --parse -E '1 + 2'
-1 + 2
-
-$ nix-instantiate --eval -E '1 + 2'
-3
-
-$ nix-instantiate --eval --xml -E '1 + 2'
-&lt;?xml version='1.0' encoding='utf-8'?&gt;
-&lt;expr&gt;
-  &lt;int value="3" /&gt;
-&lt;/expr&gt;</pre><p>
-
-</p><p>The difference between non-strict and strict evaluation:
-
-</p><pre class="screen">
-$ nix-instantiate --eval --xml -E 'rec { x = "foo"; y = x; }'
-<em class="replaceable"><code>...</code></em>
-  &lt;attr name="x"&gt;
-    &lt;string value="foo" /&gt;
-  &lt;/attr&gt;
-  &lt;attr name="y"&gt;
-    &lt;unevaluated /&gt;
-  &lt;/attr&gt;
-<em class="replaceable"><code>...</code></em></pre><p>
-
-Note that <code class="varname">y</code> is left unevaluated (the XML
-representation doesn’t attempt to show non-normal forms).
-
-</p><pre class="screen">
-$ nix-instantiate --eval --xml --strict -E 'rec { x = "foo"; y = x; }'
-<em class="replaceable"><code>...</code></em>
-  &lt;attr name="x"&gt;
-    &lt;string value="foo" /&gt;
-  &lt;/attr&gt;
-  &lt;attr name="y"&gt;
-    &lt;string value="foo" /&gt;
-  &lt;/attr&gt;
-<em class="replaceable"><code>...</code></em></pre><p>
-
-</p></div></div><div class="refentry"><div class="refentry.separator"><hr /></div><a id="sec-nix-prefetch-url"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-prefetch-url — copy a file from a URL into the store and print its hash</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-prefetch-url</code>  [<code class="option">--type</code> <em class="replaceable"><code>hashAlgo</code></em>] [<code class="option">--print-path</code>]  <em class="replaceable"><code>url</code></em>  [<em class="replaceable"><code>hash</code></em>]</p></div></div><div class="refsection"><a id="idm140737316234944"></a><h2>Description</h2><p>The command <span class="command"><strong>nix-prefetch-url</strong></span> downloads the
-file referenced by the URL <em class="replaceable"><code>url</code></em>, prints its
-cryptographic hash, and copies it into the Nix store.  The file name
-in the store is
-<code class="filename"><em class="replaceable"><code>hash</code></em>-<em class="replaceable"><code>baseName</code></em></code>,
-where <em class="replaceable"><code>baseName</code></em> is everything following the
-final slash in <em class="replaceable"><code>url</code></em>.</p><p>This command is just a convenience for Nix expression writers.
-Often a Nix expression fetches some source distribution from the
-network using the <code class="literal">fetchurl</code> expression contained in
-Nixpkgs.  However, <code class="literal">fetchurl</code> requires a
-cryptographic hash.  If you don't know the hash, you would have to
-download the file first, and then <code class="literal">fetchurl</code> would
-download it again when you build your Nix expression.  Since
-<code class="literal">fetchurl</code> uses the same name for the downloaded file
-as <span class="command"><strong>nix-prefetch-url</strong></span>, the redundant download can be
-avoided.</p><p>If <em class="replaceable"><code>hash</code></em> is specified, then a download
-is not performed if the Nix store already contains a file with the
-same hash and base name.  Otherwise, the file is downloaded, and an
-error if signaled if the actual hash of the file does not match the
-specified hash.</p><p>This command prints the hash on standard output.  Additionally,
-if the option <code class="option">--print-path</code> is used, the path of the
-downloaded file in the Nix store is also printed.</p></div><div class="refsection"><a id="idm140737316225936"></a><h2>Options</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--type</code> <em class="replaceable"><code>hashAlgo</code></em></span></dt><dd><p>Use the specified cryptographic hash algorithm,
-    which can be one of <code class="literal">md5</code>,
-    <code class="literal">sha1</code>, and
-    <code class="literal">sha256</code>.</p></dd><dt><span class="term"><code class="option">--print-path</code></span></dt><dd><p>Print the store path of the downloaded file on
-    standard output.</p></dd><dt><span class="term"><code class="option">--unpack</code></span></dt><dd><p>Unpack the archive (which must be a tarball or zip
-    file) and add the result to the Nix store. The resulting hash can
-    be used with functions such as Nixpkgs’s
-    <code class="varname">fetchzip</code> or
-    <code class="varname">fetchFromGitHub</code>.</p></dd><dt><span class="term"><code class="option">--name</code></span></dt><dd><p>Override the name of the file in the Nix store. By
-    default, this is
-    <code class="literal"><em class="replaceable"><code>hash</code></em>-<em class="replaceable"><code>basename</code></em></code>,
-    where <em class="replaceable"><code>basename</code></em> is the last component of
-    <em class="replaceable"><code>url</code></em>. Overriding the name is necessary
-    when <em class="replaceable"><code>basename</code></em> contains characters that
-    are not allowed in Nix store paths.</p></dd></dl></div></div><div class="refsection"><a id="idm140737316214032"></a><h2>Examples</h2><pre class="screen">
-$ nix-prefetch-url ftp://ftp.gnu.org/pub/gnu/hello/hello-2.10.tar.gz
-0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i
-
-$ nix-prefetch-url --print-path mirror://gnu/hello/hello-2.10.tar.gz
-0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i
-/nix/store/3x7dwzq014bblazs7kq20p9hyzz0qh8g-hello-2.10.tar.gz
-
-$ nix-prefetch-url --unpack --print-path https://github.com/NixOS/patchelf/archive/0.8.tar.gz
-079agjlv0hrv7fxnx9ngipx14gyncbkllxrp9cccnh3a50fxcmy7
-/nix/store/19zrmhm3m40xxaw81c8cqm6aljgrnwj2-0.8.tar.gz
-</pre></div></div><div class="refentry"><div class="refentry.separator"><hr /></div><a id="sec-nix-pull"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-pull — register availability of pre-built binaries (deprecated)</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-pull</code>   <em class="replaceable"><code>url</code></em> </p></div></div><div class="refsection"><a id="idm140737316205648"></a><h2>Description</h2><div class="note"><h3 class="title">Note</h3><p>This command and the use of manifests is deprecated. It is
-better to use binary caches.</p></div><p>The command <span class="command"><strong>nix-pull</strong></span> obtains a list of
-pre-built store paths from the URL <em class="replaceable"><code>url</code></em>, and
-for each of these store paths, registers a substitute derivation that
-downloads and unpacks it into the Nix store.  This is used to speed up
-installations: if you attempt to install something that has already
-been built and stored into the network cache, Nix can transparently
-re-use the pre-built store paths.</p><p>The file at <em class="replaceable"><code>url</code></em> must be compatible
-with the files created by <em class="replaceable"><code>nix-push</code></em>.</p></div><div class="refsection"><a id="idm140737316201472"></a><h2>Examples</h2><pre class="screen">
-$ nix-pull https://nixos.org/releases/nixpkgs/nixpkgs-15.05pre54468.69858d7/MANIFEST</pre></div></div><div class="refentry"><div class="refentry.separator"><hr /></div><a id="sec-nix-push"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix-push — generate a binary cache</p></div><div class="refsynopsisdiv"><h2>Synopsis</h2><div class="cmdsynopsis"><p><code class="command">nix-push</code>   <code class="option">--dest</code> <em class="replaceable"><code>dest-dir</code></em>  [<code class="option">--bzip2</code>] [<code class="option">--none</code>] [<code class="option">--force</code>] [<code class="option">--link</code>] [<code class="option">--manifest</code>] [<code class="option">--manifest-path</code> <em class="replaceable"><code>filename</code></em>] [<code class="option">--url-prefix</code> <em class="replaceable"><code>url</code></em>] [<code class="option">--key-file</code> <em class="replaceable"><code>path</code></em>]  <em class="replaceable"><code>paths</code></em>... </p></div></div><div class="refsection"><a id="idm140737316186448"></a><h2>Description</h2><p>The command <span class="command"><strong>nix-push</strong></span> produces a
-<span class="emphasis"><em>binary cache</em></span>, a directory containing compressed
-Nix archives (NARs) plus some metadata of the closure of the specified
-store paths.  This directory can then be made available through a web
-server to other Nix installations, allowing them to skip building from
-source and instead download binaries from the cache
-automatically.</p><p><span class="command"><strong>nix-push</strong></span> performs the following actions.
-
-</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p>Each path in <em class="replaceable"><code>paths</code></em> is
-  built (using <a class="link" href="#rsec-nix-store-realise" title="Operation --realise"><span class="command"><strong>nix-store
-  --realise</strong></span></a>).</p></li><li class="listitem"><p>All paths in the closure of
-  <em class="replaceable"><code>paths</code></em> are determined (using
-  <span class="command"><strong>nix-store --query --requisites
-  --include-outputs</strong></span>).  Note that since the
-  <code class="option">--include-outputs</code> flag is used, if
-  <em class="replaceable"><code>paths</code></em> includes a store derivation, you
-  get a combined source/binary distribution (e.g., source tarballs
-  will be included).</p></li><li class="listitem"><p>All store paths determined in the previous step are
-  packaged into a NAR (using <span class="command"><strong>nix-store --dump</strong></span>) and
-  compressed using <span class="command"><strong>xz</strong></span> or <span class="command"><strong>bzip2</strong></span>.
-  The resulting files have the extension <code class="filename">.nar.xz</code>
-  or <code class="filename">.nar.bz2</code>.  Also for each store path, Nix
-  generates a file with extension <code class="filename">.narinfo</code>
-  containing metadata such as the references, cryptographic hash and
-  size of each path.</p></li><li class="listitem"><p>Optionally, a single <span class="emphasis"><em>manifest</em></span>
-  file is created that contains the same metadata as the
-  <code class="filename">.narinfo</code> files.  This is for compatibility with
-  Nix versions prior to 1.2 (see <span class="command"><strong>nix-pull</strong></span> for
-  details).</p></li><li class="listitem"><p>A file named <code class="option">nix-cache-info</code> is
-  placed in the destination directory.  The existence of this file
-  marks the directory as a binary cache.</p></li></ol></div><p>
-
-</p></div><div class="refsection"><a id="idm140737316171888"></a><h2>Options</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="option">--dest</code> <em class="replaceable"><code>dest-dir</code></em></span></dt><dd><p>Set the destination directory to
-    <em class="replaceable"><code>dir</code></em>, which is created if it does not
-    exist.  This flag is required.</p></dd><dt><span class="term"><code class="option">--bzip2</code></span></dt><dd><p>Compress NARs using <span class="command"><strong>bzip2</strong></span>
-    instead of <span class="command"><strong>xz</strong></span>.  The latter compresses about 30%
-    better on typical archives, decompresses about twice as fast, but
-    compresses a lot slower and is not supported by Nix prior to
-    version 1.2.</p></dd><dt><span class="term"><code class="option">--none</code></span></dt><dd><p>Do not compress NARs.</p></dd><dt><span class="term"><code class="option">--force</code></span></dt><dd><p>Overwrite <code class="filename">.narinfo</code> files if
-    they already exist.</p></dd><dt><span class="term"><code class="option">--link</code></span></dt><dd><p>By default, NARs are generated in the Nix store
-    and then copied to <em class="replaceable"><code>dest-dir</code></em>.  If this
-    option is given, hard links are used instead.  This only works if
-    <em class="replaceable"><code>dest-dir</code></em> is on the same filesystem as
-    the Nix store.</p></dd><dt><span class="term"><code class="option">--manifest</code></span></dt><dd><p>Force the generation of a manifest suitable for
-    use by <span class="command"><strong>nix-pull</strong></span>.  The manifest is stored as
-    <code class="filename"><em class="replaceable"><code>dest-dir</code></em>/MANIFEST</code>.</p></dd><dt><span class="term"><code class="option">--manifest-path</code> <em class="replaceable"><code>filename</code></em></span></dt><dd><p>Like <code class="option">--manifest</code>, but store the
-    manifest in <em class="replaceable"><code>filename</code></em>.</p></dd><dt><span class="term"><code class="option">--url-prefix</code> <em class="replaceable"><code>url</code></em></span></dt><dd><p>Manifests are expected to contain the absolute
-    URLs of NARs.  For generating these URLs, the prefix
-    <em class="replaceable"><code>url</code></em> is used.  It defaults to
-    <code class="uri">file://<em class="replaceable"><code>dest-dir</code></em></code>.</p></dd><dt><span class="term"><code class="option">--key-file</code> <em class="replaceable"><code>path</code></em></span></dt><dd><p>Sign the binary cache using the secret key stored
-    in <em class="replaceable"><code>path</code></em>. This secret key must have been
-    created using <span class="command"><strong><a class="command" href="#rsec-nix-store-generate-binary-cache-key" title="Operation --generate-binary-cache-key">nix-store
-    --generate-binary-cache-key</a></strong></span>. Users of this binary cache
-    should add the corresponding public key to the option
-    <code class="option">binary-cache-public-keys</code> in
-    <code class="filename">nix.conf</code>.</p></dd></dl></div></div><div class="refsection"><a id="idm140737316148432"></a><h2>Examples</h2><p>To add the closure of Thunderbird to a binary cache:
-
-</p><pre class="screen">
-$ nix-push --dest /tmp/cache $(nix-build -A thunderbird)
-</pre><p>
-
-Assuming that <code class="filename">/tmp/cache</code> is exported by a web
-server as <code class="uri">http://example.org/cache</code>, you can then use this
-cache on another machine to speed up the installation of Thunderbird:
-
-</p><pre class="screen">
-$ nix-build -A thunderbird --option binary-caches http://example.org/cache
-</pre><p>
-
-Alternatively, you could add <code class="literal">binary-caches =
-http://example.org/cache</code> to
-<code class="filename">nix.conf</code>.</p><p>To also include build-time dependencies (such as source
-tarballs):
-
-</p><pre class="screen">
-$ nix-push --dest /tmp/cache $(nix-instantiate -A thunderbird)
-</pre><p>
-
-</p><p>To generate a manifest suitable for <span class="command"><strong>nix-pull</strong></span>:
-
-</p><pre class="screen">
-$ nix-push --dest /tmp/cache $(nix-build -A thunderbird) --manifest
-</pre><p>
-
-On another machine you can then do:
-
-</p><pre class="screen">
-$ nix-pull http://example.org/cache
-</pre><p>
-
-to cause the binaries to be used by subsequent Nix operations.</p><p>To generate a signed binary cache, you must first generate a key
-pair, in this example called <code class="literal">cache.example.org-1</code>,
-storing the secret key in <code class="filename">./sk</code> and the public key
-in <code class="filename">./pk</code>:
-
-</p><pre class="screen">
-$ nix-store --generate-binary-cache-key cache.example.org-1 sk pk
-
-$ cat sk
-cache.example.org-1:jcMRQYFo8pQKzTtimpQLIPeHkMYZjfhB24hGfwF+u9PuX8H8FO7q564+X3G/JDlqqIqGar3OXRRwS9N3Wh3vbw==
-
-$ cat pk
-cache.example.org-1:7l/B/BTu6ueuPl9xvyQ5aqiKhmq9zl0UcEvTd1od728=
-</pre><p>
-
-You can then generate a binary cache signed with the secret key:
-
-</p><pre class="screen">
-$ nix-push --dest /tmp/cache --key-file ./sk $(type -p firefox)
-</pre><p>
-
-Users who wish to verify the integrity of binaries downloaded from
-your cache would add the following to their
-<code class="filename">nix.conf</code>:
-
-</p><pre class="programlisting">
-binary-caches = http://cache.example.org
-signed-binary-caches = *
-binary-cache-public-keys = cache.example.org-1:7l/B/BTu6ueuPl9xvyQ5aqiKhmq9zl0UcEvTd1od728=
-</pre><p>
-
-Nix will then ignore any binary that has a missing, incorrect or
-unrecognised signature.</p></div><div class="refsection"><a id="idm140737316137344"></a><h2>Binary cache format and operation</h2><p>A binary cache with URL <em class="replaceable"><code>url</code></em> only
-denotes a valid binary cache if the file
-<code class="uri"><em class="replaceable"><code>url</code></em>/nix-cache-info</code> exists.  If
-this file does not exist (or cannot be downloaded), the cache is
-ignored.  If it does exist, it must be a text file containing cache
-properties.  Here’s an example:
-
-</p><pre class="screen">
-StoreDir: /nix/store
-WantMassQuery: 1
-Priority: 10
-</pre><p>
-
-The properties that are currently supported are:
-
-</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="literal">StoreDir</code></span></dt><dd><p>The path of the Nix store to which this binary
-    cache applies.  Binaries are not relocatable — a binary built for
-    <code class="filename">/nix/store</code> won’t generally work in
-    <code class="filename">/home/alice/store</code> — so to prevent binaries
-    from being used in a wrong store, a binary cache is only used if
-    its <code class="literal">StoreDir</code> matches the local Nix
-    configuration.  The default is
-    <code class="filename">/nix/store</code>.</p></dd><dt><span class="term"><code class="literal">WantMassQuery</code></span></dt><dd><p>Query operations such as <span class="command"><strong>nix-env
-    -qas</strong></span> can cause thousands of cache queries, and thus
-    thousands of HTTP requests, to determine which packages are
-    available in binary form.  While these requests are small, not
-    every server may appreciate a potential onslaught of queries.  If
-    <code class="literal">WantMassQuery</code> is set to <code class="literal">0</code>
-    (default), “mass queries” such as <span class="command"><strong>nix-env -qas</strong></span>
-    will skip this cache.  Thus a package may appear not to have a
-    binary substitute.  However, the binary will still be used when
-    you actually install the package.  If
-    <code class="literal">WantMassQuery</code> is set to <code class="literal">1</code>,
-    mass queries will use this cache.</p></dd><dt><span class="term"><code class="literal">Priority</code></span></dt><dd><p>Each binary cache has a priority (defaulting to
-    50).  Binary caches are checked for binaries in order of ascending
-    priority; thus a higher number denotes a lower priority.  The
-    binary cache <code class="uri">https://cache.nixos.org</code> has priority
-    40.</p></dd></dl></div><p>
-
-</p><p>Every time Nix needs to build some store path
-<em class="replaceable"><code>p</code></em>, it will check each configured binary
-cache to see if it has a NAR file for <em class="replaceable"><code>p</code></em>,
-until it finds one.  If no cache has a NAR, Nix will fall back to
-building the path from source (if applicable).  To see if a cache with
-URL <em class="replaceable"><code>url</code></em> has a binary for
-<em class="replaceable"><code>p</code></em>, Nix fetches
-<em class="replaceable"><code>url/h</code></em>, where <em class="replaceable"><code>h</code></em>
-is the hash part of <em class="replaceable"><code>p</code></em>.  Thus, if we have a
-cache <code class="uri">https://cache.nixos.org</code> and we want to obtain the
-store path
-</p><pre class="screen">
-/nix/store/a8922c0h87iilxzzvwn2hmv8x210aqb9-glibc-2.7
-</pre><p>
-then Nix will attempt to fetch
-</p><pre class="screen">
-https://cache.nixos.org/a8922c0h87iilxzzvwn2hmv8x210aqb9.narinfo
-</pre><p>
-(Commands such as <span class="command"><strong>nix-env -qas</strong></span> will issue an HTTP
-HEAD request, since it only needs to know if the
-<code class="filename">.narinfo</code> file exists.)  The
-<code class="filename">.narinfo</code> file is a simple text file that looks
-like this:
-
-</p><pre class="screen">
-StorePath: /nix/store/a8922c0h87iilxzzvwn2hmv8x210aqb9-glibc-2.7
-URL: nar/0zzjpdz46mdn74v09m053yczlz4am038g8r74iy8w43gx8801h70.nar.bz2
-Compression: bzip2
-FileHash: sha256:0zzjpdz46mdn74v09m053yczlz4am038g8r74iy8w43gx8801h70
-FileSize: 24473768
-NarHash: sha256:0s491y1h9hxj5ghiizlxk7ax6jwbha00zwn7lpyd5xg5bhf60vzg
-NarSize: 109521136
-References: 2ma2k0ys8knh4an48n28vigcmc2z8773-linux-headers-2.6.23.16 ...
-Deriver: 7akyyc87ka32xwmqza9dvyg5pwx3j212-glibc-2.7.drv
-Sig: cache.example.org-1:WepnSp2UT0odDpR3NRjPVhJBHmdBgSBSTbHpdh4SCz92nGXwFY82bkPEmISoC0hGqBXDXEmB6y3Ohgna3mMgDg==
-</pre><p>
-
-The fields are as follows:
-
-</p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="literal">StorePath</code></span></dt><dd><p>The full store path, including the name part
-    (e.g., <code class="literal">glibc-2.7</code>).  It must match the
-    requested store path.</p></dd><dt><span class="term"><code class="literal">URL</code></span></dt><dd><p>The URL of the NAR, relative to the binary cache
-    URL.</p></dd><dt><span class="term"><code class="literal">Compression</code></span></dt><dd><p>The compression method; either
-    <code class="literal">xz</code> or
-    <code class="literal">bzip2</code>.</p></dd><dt><span class="term"><code class="literal">FileHash</code></span></dt><dd><p>The SHA-256 hash of the compressed
-    NAR.</p></dd><dt><span class="term"><code class="literal">FileSize</code></span></dt><dd><p>The size of the compressed NAR.</p></dd><dt><span class="term"><code class="literal">NarHash</code></span></dt><dd><p>The SHA-256 hash of the uncompressed NAR.  This is
-    equal to the hash of the store path as returned by
-    <span class="command"><strong>nix-store -q --hash
-    <em class="replaceable"><code>p</code></em></strong></span>.</p></dd><dt><span class="term"><code class="literal">NarSize</code></span></dt><dd><p>The size of the uncompressed NAR.</p></dd><dt><span class="term"><code class="literal">References</code></span></dt><dd><p>The references of the store path, without the Nix
-    store prefix.</p></dd><dt><span class="term"><code class="literal">Deriver</code></span></dt><dd><p>The deriver of the store path, without the Nix
-    store prefix.  This field is optional.</p></dd><dt><span class="term"><code class="literal">System</code></span></dt><dd><p>The Nix platform type of this binary, if known.
-    This field is optional.</p></dd><dt><span class="term"><code class="literal">Sig</code></span></dt><dd><p>A signature of the the form
-    <code class="literal"><em class="replaceable"><code>key-name</code></em>:<em class="replaceable"><code>sig</code></em></code>,
-    where <em class="replaceable"><code>key-name</code></em> is the symbolic name of
-    the key pair used to sign and verify the cache
-    (e.g. <code class="literal">cache.example.org-1</code>), and
-    <em class="replaceable"><code>sig</code></em> is the actual signature, computed
-    over the <code class="varname">StorePath</code>, <code class="varname">NarHash</code>,
-    <code class="varname">NarSize</code> and <code class="varname">References</code>
-    fields using the <a class="link" href="http://ed25519.cr.yp.to/" target="_top">Ed25519 public-key signature
-    system</a>.</p></dd></dl></div><p>
-
-</p><p>Thus, in our example, after recursively ensuring that the
-references exist (e.g.,
-<code class="filename">/nix/store/2ma2k0ys8knh4an48n28vigcmc2z8773-linux-headers-2.6.23.16</code>),
-Nix will fetch </p><pre class="screen">
-https://cache.nixos.org/nar/0zzjpdz46mdn74v09m053yczlz4am038g8r74iy8w43gx8801h70.nar.bz2
-</pre><p> and decompress and unpack it to
-<code class="filename">/nix/store/a8922c0h87iilxzzvwn2hmv8x210aqb9-glibc-2.7</code>.</p></div></div></div><div class="chapter"><div class="titlepage"><div><div><h2 class="title"><a id="ch-files"></a>Chapter 21. Files</h2></div></div></div><p>This section lists configuration files that you can use when you
-work with Nix.</p><div class="refentry"><a id="sec-conf-file"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>nix.conf — Nix configuration file</p></div><div class="refsection"><a id="idm140737316085312"></a><h2>Description</h2><p>A number of persistent settings of Nix are stored in the file
-<code class="filename"><em class="replaceable"><code>sysconfdir</code></em>/nix/nix.conf</code>.
-This file is a list of <code class="literal"><em class="replaceable"><code>name</code></em> =
-<em class="replaceable"><code>value</code></em></code> pairs, one per line.
-Comments start with a <code class="literal">#</code> character.  Here is an example
-configuration file:</p><pre class="programlisting">
-gc-keep-outputs = true       # Nice for developers
-gc-keep-derivations = true   # Idem
-env-keep-derivations = false
-</pre><p>You can override settings using the <code class="option">--option</code>
-flag, e.g. <code class="literal">--option gc-keep-outputs false</code>.</p><p>The following settings are currently available:
-
-</p><div class="variablelist"><dl class="variablelist"><dt><a id="conf-gc-keep-outputs"></a><span class="term"><code class="literal">gc-keep-outputs</code></span></dt><dd><p>If <code class="literal">true</code>, the garbage collector
-    will keep the outputs of non-garbage derivations.  If
-    <code class="literal">false</code> (default), outputs will be deleted unless
-    they are GC roots themselves (or reachable from other roots).</p><p>In general, outputs must be registered as roots separately.
-    However, even if the output of a derivation is registered as a
-    root, the collector will still delete store paths that are used
-    only at build time (e.g., the C compiler, or source tarballs
-    downloaded from the network).  To prevent it from doing so, set
-    this option to <code class="literal">true</code>.</p></dd><dt><a id="conf-gc-keep-derivations"></a><span class="term"><code class="literal">gc-keep-derivations</code></span></dt><dd><p>If <code class="literal">true</code> (default), the garbage
-    collector will keep the derivations from which non-garbage store
-    paths were built.  If <code class="literal">false</code>, they will be
-    deleted unless explicitly registered as a root (or reachable from
-    other roots).</p><p>Keeping derivation around is useful for querying and
-    traceability (e.g., it allows you to ask with what dependencies or
-    options a store path was built), so by default this option is on.
-    Turn it off to save a bit of disk space (or a lot if
-    <code class="literal">gc-keep-outputs</code> is also turned on).</p></dd><dt><span class="term"><code class="literal">env-keep-derivations</code></span></dt><dd><p>If <code class="literal">false</code> (default), derivations
-    are not stored in Nix user environments.  That is, the derivation
-    any build-time-only dependencies may be garbage-collected.</p><p>If <code class="literal">true</code>, when you add a Nix derivation to
-    a user environment, the path of the derivation is stored in the
-    user environment.  Thus, the derivation will not be
-    garbage-collected until the user environment generation is deleted
-    (<span class="command"><strong>nix-env --delete-generations</strong></span>).  To prevent
-    build-time-only dependencies from being collected, you should also
-    turn on <code class="literal">gc-keep-outputs</code>.</p><p>The difference between this option and
-    <code class="literal">gc-keep-derivations</code> is that this one is
-    “sticky”: it applies to any user environment created while this
-    option was enabled, while <code class="literal">gc-keep-derivations</code>
-    only applies at the moment the garbage collector is
-    run.</p></dd><dt><a id="conf-build-max-jobs"></a><span class="term"><code class="literal">build-max-jobs</code></span></dt><dd><p>This option defines the maximum number of jobs
-    that Nix will try to build in parallel.  The default is
-    <code class="literal">1</code>.  You should generally set it to the number
-    of CPUs in your system (e.g., <code class="literal">2</code> on an Athlon 64
-    X2).  It can be overridden using the <code class="option"><a class="option" href="#opt-max-jobs">--max-jobs</a></code> (<code class="option">-j</code>)
-    command line switch.</p></dd><dt><a id="conf-build-cores"></a><span class="term"><code class="literal">build-cores</code></span></dt><dd><p>Sets the value of the
-    <code class="envar">NIX_BUILD_CORES</code> environment variable in the
-    invocation of builders.  Builders can use this variable at their
-    discretion to control the maximum amount of parallelism.  For
-    instance, in Nixpkgs, if the derivation attribute
-    <code class="varname">enableParallelBuilding</code> is set to
-    <code class="literal">true</code>, the builder passes the
-    <code class="option">-j<em class="replaceable"><code>N</code></em></code> flag to GNU Make.
-    It can be overridden using the <code class="option"><a class="option" href="#opt-cores">--cores</a></code> command line switch and
-    defaults to <code class="literal">1</code>.  The value <code class="literal">0</code>
-    means that the builder should use all available CPU cores in the
-    system.</p></dd><dt><a id="conf-build-max-silent-time"></a><span class="term"><code class="literal">build-max-silent-time</code></span></dt><dd><p>This option defines the maximum number of seconds that a
-      builder can go without producing any data on standard output or
-      standard error.  This is useful (for instance in an automated
-      build system) to catch builds that are stuck in an infinite
-      loop, or to catch remote builds that are hanging due to network
-      problems.  It can be overridden using the <code class="option"><a class="option" href="#opt-max-silent-time">--max-silent-time</a></code> command
-      line switch.</p><p>The value <code class="literal">0</code> means that there is no
-      timeout.  This is also the default.</p></dd><dt><a id="conf-build-timeout"></a><span class="term"><code class="literal">build-timeout</code></span></dt><dd><p>This option defines the maximum number of seconds that a
-      builder can run.  This is useful (for instance in an automated
-      build system) to catch builds that are stuck in an infinite loop
-      but keep writing to their standard output or standard error.  It
-      can be overridden using the <code class="option"><a class="option" href="#opt-timeout">--timeout</a></code> command line
-      switch.</p><p>The value <code class="literal">0</code> means that there is no
-      timeout.  This is also the default.</p></dd><dt><a id="conf-build-max-log-size"></a><span class="term"><code class="literal">build-max-log-size</code></span></dt><dd><p>This option defines the maximum number of bytes that a
-      builder can write to its stdout/stderr.  If the builder exceeds
-      this limit, it’s killed.  A value of <code class="literal">0</code> (the
-      default) means that there is no limit.</p></dd><dt><a id="conf-build-users-group"></a><span class="term"><code class="literal">build-users-group</code></span></dt><dd><p>This options specifies the Unix group containing
-    the Nix build user accounts.  In multi-user Nix installations,
-    builds should not be performed by the Nix account since that would
-    allow users to arbitrarily modify the Nix store and database by
-    supplying specially crafted builders; and they cannot be performed
-    by the calling user since that would allow him/her to influence
-    the build result.</p><p>Therefore, if this option is non-empty and specifies a valid
-    group, builds will be performed under the user accounts that are a
-    member of the group specified here (as listed in
-    <code class="filename">/etc/group</code>).  Those user accounts should not
-    be used for any other purpose!</p><p>Nix will never run two builds under the same user account at
-    the same time.  This is to prevent an obvious security hole: a
-    malicious user writing a Nix expression that modifies the build
-    result of a legitimate Nix expression being built by another user.
-    Therefore it is good to have as many Nix build user accounts as
-    you can spare.  (Remember: uids are cheap.)</p><p>The build users should have permission to create files in
-    the Nix store, but not delete them.  Therefore,
-    <code class="filename">/nix/store</code> should be owned by the Nix
-    account, its group should be the group specified here, and its
-    mode should be <code class="literal">1775</code>.</p><p>If the build users group is empty, builds will be performed
-    under the uid of the Nix process (that is, the uid of the caller
-    if <code class="envar">NIX_REMOTE</code> is empty, the uid under which the Nix
-    daemon runs if <code class="envar">NIX_REMOTE</code> is
-    <code class="literal">daemon</code>).  Obviously, this should not be used in
-    multi-user settings with untrusted users.</p></dd><dt><span class="term"><code class="literal">build-use-sandbox</code></span></dt><dd><p>If set to <code class="literal">true</code>, builds will be
-    performed in a <span class="emphasis"><em>sandboxed environment</em></span>, i.e.,
-    they’re isolated from the normal file system hierarchy and will
-    only see their dependencies in the Nix store, the temporary build
-    directory, private versions of <code class="filename">/proc</code>,
-    <code class="filename">/dev</code>, <code class="filename">/dev/shm</code> and
-    <code class="filename">/dev/pts</code> (on Linux), and the paths configured with the
-    <a class="link" href="#conf-build-sandbox-paths"><code class="literal">build-sandbox-paths</code>
-    option</a>. This is useful to prevent undeclared dependencies
-    on files in directories such as <code class="filename">/usr/bin</code>. In
-    addition, on Linux, builds run in private PID, mount, network, IPC
-    and UTS namespaces to isolate them from other processes in the
-    system (except that fixed-output derivations do not run in private
-    network namespace to ensure they can access the network).</p><p>Currently, sandboxing only work on Linux and Mac OS X. The use
-    of a sandbox requires that Nix is run as root (so you should use
-    the <a class="link" href="#conf-build-users-group">“build users”
-    feature</a> to perform the actual builds under different users
-    than root).</p><p>If this option is set to <code class="literal">relaxed</code>, then
-    fixed-output derivations and derivations that have the
-    <code class="varname">__noChroot</code> attribute set to
-    <code class="literal">true</code> do not run in sandboxes.</p><p>The default is <code class="literal">false</code>.</p></dd><dt><a id="conf-build-sandbox-paths"></a><span class="term"><code class="literal">build-sandbox-paths</code></span></dt><dd><p>A list of paths bind-mounted into Nix sandbox
-    environments. You can use the syntax
-    <code class="literal"><em class="replaceable"><code>target</code></em>=<em class="replaceable"><code>source</code></em></code>
-    to mount a path in a different location in the sandbox; for
-    instance, <code class="literal">/bin=/nix-bin</code> will mount the path
-    <code class="literal">/nix-bin</code> as <code class="literal">/bin</code> inside the
-    sandbox. If <em class="replaceable"><code>source</code></em> is followed by
-    <code class="literal">?</code>, then it is not an error if
-    <em class="replaceable"><code>source</code></em> does not exist; for example,
-    <code class="literal">/dev/nvidiactl?</code> specifies that
-    <code class="filename">/dev/nvidiactl</code> will only be mounted in the
-    sandbox if it exists in the host filesystem.</p><p>Depending on how Nix was built, the default value for this option
-    may be empty or provide <code class="filename">/bin/sh</code> as a
-    bind-mount of <span class="command"><strong>bash</strong></span>.</p></dd><dt><a id="conf-build-extra-sandbox-paths"></a><span class="term"><code class="literal">build-extra-sandbox-paths</code></span></dt><dd><p>A list of additional paths appended to
-    <code class="option">build-sandbox-paths</code>. Useful if you want to extend
-    its default value.</p></dd><dt><span class="term"><code class="literal">build-use-substitutes</code></span></dt><dd><p>If set to <code class="literal">true</code> (default), Nix
-    will use binary substitutes if available.  This option can be
-    disabled to force building from source.</p></dd><dt><span class="term"><code class="literal">build-fallback</code></span></dt><dd><p>If set to <code class="literal">true</code>, Nix will fall
-    back to building from source if a binary substitute fails.  This
-    is equivalent to the <code class="option">--fallback</code> flag.  The
-    default is <code class="literal">false</code>.</p></dd><dt><span class="term"><code class="literal">build-cache-failure</code></span></dt><dd><p>If set to <code class="literal">true</code>, Nix will
-    “cache” build failures, meaning that it will remember (in its
-    database) that a derivation previously failed.  If you then try to
-    build the derivation again, Nix will immediately fail rather than
-    perform the build again.  Failures in fixed-output derivations
-    (such as <code class="function">fetchurl</code> calls) are never cached.
-    The “failed” status of a derivation can be cleared using
-    <span class="command"><strong>nix-store --clear-failed-paths</strong></span>.  By default,
-    failure caching is disabled.</p></dd><dt><span class="term"><code class="literal">build-keep-log</code></span></dt><dd><p>If set to <code class="literal">true</code> (the default),
-    Nix will write the build log of a derivation (i.e. the standard
-    output and error of its builder) to the directory
-    <code class="filename">/nix/var/log/nix/drvs</code>.  The build log can be
-    retrieved using the command <span class="command"><strong>nix-store -l
-    <em class="replaceable"><code>path</code></em></strong></span>.</p></dd><dt><span class="term"><code class="literal">build-compress-log</code></span></dt><dd><p>If set to <code class="literal">true</code> (the default),
-    build logs written to <code class="filename">/nix/var/log/nix/drvs</code>
-    will be compressed on the fly using bzip2.  Otherwise, they will
-    not be compressed.</p></dd><dt><span class="term"><code class="literal">use-binary-caches</code></span></dt><dd><p>If set to <code class="literal">true</code> (the default),
-    Nix will check the binary caches specified by
-    <code class="option">binary-caches</code> and related options to obtain
-    binary substitutes.</p></dd><dt><span class="term"><code class="literal">binary-caches</code></span></dt><dd><p>A list of URLs of binary caches, separated by
-    whitespace.  The default is
-    <code class="literal">https://cache.nixos.org</code>.</p></dd><dt><span class="term"><code class="literal">binary-caches-files</code></span></dt><dd><p>A list of names of files that will be read to
-    obtain additional binary cache URLs.  The default is
-    <code class="literal">/nix/var/nix/profiles/per-user/<em class="replaceable"><code>username</code></em>/channels/binary-caches/*</code>.
-    Note that when you’re using the Nix daemon,
-    <em class="replaceable"><code>username</code></em> is always equal to
-    <code class="literal">root</code>, so Nix will only use the binary caches
-    provided by the channels installed by root.  Do not set this
-    option to read files created by untrusted users!</p></dd><dt><span class="term"><code class="literal">trusted-binary-caches</code></span></dt><dd><p>A list of URLs of binary caches, separated by
-    whitespace.  These are not used by default, but can be enabled by
-    users of the Nix daemon by specifying <code class="literal">--option
-    binary-caches <em class="replaceable"><code>urls</code></em></code> on the
-    command line.  Unprivileged users are only allowed to pass a
-    subset of the URLs listed in <code class="literal">binary-caches</code> and
-    <code class="literal">trusted-binary-caches</code>.</p></dd><dt><span class="term"><code class="literal">extra-binary-caches</code></span></dt><dd><p>Additional binary caches appended to those
-    specified in <code class="option">binary-caches</code> and
-    <code class="option">binary-caches-files</code>.  When used by unprivileged
-    users, untrusted binary caches (i.e. those not listed in
-    <code class="option">trusted-binary-caches</code>) are silently
-    ignored.</p></dd><dt><span class="term"><code class="literal">signed-binary-caches</code></span></dt><dd><p>If set to <code class="literal">*</code>, Nix will only
-    download binaries if they are signed using one of the keys listed
-    in <code class="option">binary-cache-public-keys</code>.</p></dd><dt><span class="term"><code class="literal">binary-cache-public-keys</code></span></dt><dd><p>A whitespace-separated list of public keys
-    corresponding to the secret keys trusted to sign binary
-    caches. For example:
-    <code class="literal">cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
-    hydra.nixos.org-1:CNHJZBh9K4tP3EKF6FkkgeVYsS3ohTl+oS0Qa8bezVs=</code>.</p></dd><dt><span class="term"><code class="literal">binary-caches-parallel-connections</code></span></dt><dd><p>The maximum number of parallel HTTP connections
-    used by the binary cache substituter to get NAR info files.  This
-    number should be high to minimise latency.  It defaults to
-    25.</p></dd><dt><span class="term"><code class="literal">verify-https-binary-caches</code></span></dt><dd><p>Whether HTTPS binary caches are required to have a
-    certificate that can be verified. Defaults to
-    <code class="literal">true</code>.</p></dd><dt><span class="term"><code class="literal">force-manifest</code></span></dt><dd><p>If this option is set to <code class="literal">false</code>
-    (default) and a Nix channel provides both a manifest and a binary
-    cache, only the binary cache will be used.  If set to
-    <code class="literal">true</code>, the manifest will be fetched as well.
-    This is useful if you want to use binary patches (which are
-    currently not supported by binary caches).</p></dd><dt><span class="term"><code class="literal">netrc-file</code></span></dt><dd><p>If set to an absolute path to a <code class="filename">netrc</code>
-    file, Nix will use the HTTP authentication credentials in this file when
-    trying to download from a remote host through HTTP or HTTPS. Defaults to
-    <code class="filename">$NIX_CONF_DIR/netrc</code>.</p><p>The <code class="filename">netrc</code> file consists of a list of
-    accounts in the following format:
-
-</p><pre class="screen">
-machine <em class="replaceable"><code>my-machine</code></em>
-login <em class="replaceable"><code>my-username</code></em>
-password <em class="replaceable"><code>my-password</code></em>
-</pre><p>
-
-    For the exact syntax, see <a class="link" href="https://ec.haxx.se/usingcurl-netrc.html" target="_top">the
-    <code class="literal">curl</code> documentation.</a></p></dd><dt><span class="term"><code class="literal">system</code></span></dt><dd><p>This option specifies the canonical Nix system
-    name of the current installation, such as
-    <code class="literal">i686-linux</code> or
-    <code class="literal">powerpc-darwin</code>.  Nix can only build derivations
-    whose <code class="literal">system</code> attribute equals the value
-    specified here.  In general, it never makes sense to modify this
-    value from its default, since you can use it to ‘lie’ about the
-    platform you are building on (e.g., perform a Mac OS build on a
-    Linux machine; the result would obviously be wrong).  It only
-    makes sense if the Nix binaries can run on multiple platforms,
-    e.g., ‘universal binaries’ that run on <code class="literal">powerpc-darwin</code> and
-    <code class="literal">i686-darwin</code>.</p><p>It defaults to the canonical Nix system name detected by
-    <code class="filename">configure</code> at build time.</p></dd><dt><span class="term"><code class="literal">fsync-metadata</code></span></dt><dd><p>If set to <code class="literal">true</code>, changes to the
-    Nix store metadata (in <code class="filename">/nix/var/nix/db</code>) are
-    synchronously flushed to disk.  This improves robustness in case
-    of system crashes, but reduces performance.  The default is
-    <code class="literal">true</code>.</p></dd><dt><span class="term"><code class="literal">auto-optimise-store</code></span></dt><dd><p>If set to <code class="literal">true</code>, Nix
-    automatically detects files in the store that have identical
-    contents, and replaces them with hard links to a single copy.
-    This saves disk space.  If set to <code class="literal">false</code> (the
-    default), you can still run <span class="command"><strong>nix-store
-    --optimise</strong></span> to get rid of duplicate
-    files.</p></dd><dt><a id="conf-connect-timeout"></a><span class="term"><code class="literal">connect-timeout</code></span></dt><dd><p>The timeout (in seconds) for establishing connections in
-      the binary cache substituter.  It corresponds to
-      <span class="command"><strong>curl</strong></span>’s <code class="option">--connect-timeout</code>
-      option.</p></dd><dt><a id="conf-log-servers"></a><span class="term"><code class="literal">log-servers</code></span></dt><dd><p>A list of URL prefixes (such as
-      <code class="literal">http://hydra.nixos.org/log</code>) from which
-      <span class="command"><strong>nix-store -l</strong></span> will try to fetch build logs if
-      they’re not available locally.</p></dd><dt><a id="conf-trusted-users"></a><span class="term"><code class="literal">trusted-users</code></span></dt><dd><p>A list of names of users (separated by whitespace) that
-      have additional rights when connecting to the Nix daemon, such
-      as the ability to specify additional binary caches, or to import
-      unsigned NARs. You can also specify groups by prefixing them
-      with <code class="literal">@</code>; for instance,
-      <code class="literal">@wheel</code> means all users in the
-      <code class="literal">wheel</code> group. The default is
-      <code class="literal">root</code>.</p><div class="warning"><h3 class="title">Warning</h3><p>The users listed here have the ability to
-      compromise the security of a multi-user Nix store. For instance,
-      they could install Trojan horses subsequently executed by other
-      users. So you should consider carefully whether to add users to
-      this list.</p></div></dd><dt><a id="conf-allowed-users"></a><span class="term"><code class="literal">allowed-users</code></span></dt><dd><p>A list of names of users (separated by whitespace) that
-      are allowed to connect to the Nix daemon. As with the
-      <code class="option">trusted-users</code> option, you can specify groups by
-      prefixing them with <code class="literal">@</code>. Also, you can allow
-      all users by specifying <code class="literal">*</code>. The default is
-      <code class="literal">*</code>.</p><p>Note that trusted users are always allowed to connect.</p></dd><dt><a id="conf-restrict-eval"></a><span class="term"><code class="literal">restrict-eval</code></span></dt><dd><p>If set to <code class="literal">true</code>, the Nix evaluator will
-      not allow access to any files outside of the Nix search path (as
-      set via the <code class="envar">NIX_PATH</code> environment variable or the
-      <code class="option">-I</code> option). The default is
-      <code class="literal">false</code>.</p></dd><dt><a id="conf-pre-build-hook"></a><span class="term"><code class="literal">pre-build-hook</code></span></dt><dd><p>If set, the path to a program that can set extra
-      derivation-specific settings for this system. This is used for settings
-      that can't be captured by the derivation model itself and are too variable
-      between different versions of the same system to be hard-coded into nix.
-      </p><p>The hook is passed the derivation path and, if sandboxes are enabled,
-      the sandbox directory. It can then modify the sandbox and send a series of
-      commands to modify various settings to stdout. The currently recognized
-      commands are:</p><div class="variablelist"><dl class="variablelist"><dt><a id="extra-sandbox-paths"></a><span class="term"><code class="literal">extra-sandbox-paths</code></span></dt><dd><p>Pass a list of files and directories to be included in the
-            sandbox for this build. One entry per line, terminated by an empty
-            line. Entries have the same format as
-            <code class="literal">build-sandbox-paths</code>.</p></dd></dl></div></dd><dt><a id="conf-build-repeat"></a><span class="term"><code class="literal">build-repeat</code></span></dt><dd><p>How many times to repeat builds to check whether
-    they are deterministic. The default value is 0. If the value is
-    non-zero, every build is repeated the specified number of
-    times. If the contents of any of the runs differs from the
-    previous ones, the build is rejected and the resulting store paths
-    are not registered as “valid” in Nix’s database.</p></dd></dl></div><p>
-
-</p></div></div></div></div><div class="appendix"><div class="titlepage"><div><div><h1 class="title"><a id="ch-troubleshooting"></a>Appendix A. Troubleshooting</h1></div></div></div><p>This section provides solutions for some common problems.  See
-the <a class="link" href="https://github.com/NixOS/nix/issues" target="_top">Nix bug
-tracker</a> for a list of currently known issues.</p><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-collisions-nixenv"></a>A.1. Collisions in <span class="command"><strong>nix-env</strong></span></h2></div></div></div><p>Symptom: when installing or upgrading, you get an error message such as
-
-</p><pre class="screen">
-$ nix-env -i docbook-xml
-...
-adding /nix/store/s5hyxgm62gk2...-docbook-xml-4.2
-collision between `/nix/store/s5hyxgm62gk2...-docbook-xml-4.2/xml/dtd/docbook/calstblx.dtd'
-  and `/nix/store/06h377hr4b33...-docbook-xml-4.3/xml/dtd/docbook/calstblx.dtd'
-  at /nix/store/...-builder.pl line 62.</pre><p>
-
-</p><p>The cause is that two installed packages in the user environment
-have overlapping filenames (e.g.,
-<code class="filename">xml/dtd/docbook/calstblx.dtd</code>.  This usually
-happens when you accidentally try to install two versions of the same
-package.  For instance, in the example above, the Nix Packages
-collection contains two versions of <code class="literal">docbook-xml</code>, so
-<span class="command"><strong>nix-env -i</strong></span> will try to install both.  The default
-user environment builder has no way to way to resolve such conflicts,
-so it just gives up.</p><p>Solution: remove one of the offending packages from the user
-environment (if already installed) using <span class="command"><strong>nix-env
--e</strong></span>, or specify exactly which version should be installed
-(e.g., <code class="literal">nix-env -i docbook-xml-4.2</code>).</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sec-links-nix-store"></a>A.2. <span class="quote">“<span class="quote">Too many links</span>”</span> Error in the Nix store</h2></div></div></div><p>Symptom: when building something, you get an error message such as
-
-</p><pre class="screen">
-...
-<code class="literal">mkdir: cannot create directory `/nix/store/<em class="replaceable"><code>name</code></em>': Too many links</code></pre><p>
-
-</p><p>This is usually because you have more than 32,000 subdirectories
-in <code class="filename">/nix/store</code>, as can be seen using <span class="command"><strong>ls
--l</strong></span>:
-
-</p><pre class="screen">
-$ ls -ld /nix/store
-drwxrwxrwt 32000 nix nix 4620288 Sep 8 15:08 store</pre><p>
-
-The <code class="literal">ext2</code> file system is limited to an inode link
-count of 32,000 (each subdirectory increasing the count by one).
-Furthermore, the <code class="literal">st_nlink</code> field of the
-<code class="function">stat</code> system call is a 16-bit value.</p><p>This only happens on very large Nix installations (such as build
-machines).</p><p>Quick solution: run the garbage collector.  You may want to use
-the <code class="option">--max-links</code> option.</p><p>Real solution: put the Nix store on a file system that supports
-more than 32,000 subdirectories per directory, such as ext4.  (This
-doesn’t solve the <code class="literal">st_nlink</code> limit, but ext4 lies to
-the kernel by reporting a link count of 1 if it exceeds the
-limit.)</p></div></div><div class="appendix"><div class="titlepage"><div><div><h1 class="title"><a id="idm140737315914544"></a>Appendix B. Glossary</h1></div></div></div><div class="glosslist"><dl><dt><a id="gloss-derivation"></a><span class="glossterm">derivation</span></dt><dd class="glossdef"><p>A description of a build action.  The result of a
-  derivation is a store object.  Derivations are typically specified
-  in Nix expressions using the <a class="link" href="#ssec-derivation" title="15.4. Derivations"><code class="function">derivation</code>
-  primitive</a>.  These are translated into low-level
-  <span class="emphasis"><em>store derivations</em></span> (implicitly by
-  <span class="command"><strong>nix-env</strong></span> and <span class="command"><strong>nix-build</strong></span>, or
-  explicitly by <span class="command"><strong>nix-instantiate</strong></span>).</p></dd><dt><span class="glossterm">store</span></dt><dd class="glossdef"><p>The location in the file system where store objects
-  live.  Typically <code class="filename">/nix/store</code>.</p></dd><dt><span class="glossterm">store path</span></dt><dd class="glossdef"><p>The location in the file system of a store object,
-  i.e., an immediate child of the Nix store
-  directory.</p></dd><dt><span class="glossterm">store object</span></dt><dd class="glossdef"><p>A file that is an immediate child of the Nix store
-  directory.  These can be regular files, but also entire directory
-  trees.  Store objects can be sources (objects copied from outside of
-  the store), derivation outputs (objects produced by running a build
-  action), or derivations (files describing a build
-  action).</p></dd><dt><a id="gloss-substitute"></a><span class="glossterm">substitute</span></dt><dd class="glossdef"><p>A substitute is a command invocation stored in the
-  Nix database that describes how to build a store object, bypassing
-  normal the build mechanism (i.e., derivations).  Typically, the
-  substitute builds the store object by downloading a pre-built
-  version of the store object from some server.</p></dd><dt><span class="glossterm">purity</span></dt><dd class="glossdef"><p>The assumption that equal Nix derivations when run
-  always produce the same output.  This cannot be guaranteed in
-  general (e.g., a builder can rely on external inputs such as the
-  network or the system time) but the Nix model assumes
-  it.</p></dd><dt><span class="glossterm">Nix expression</span></dt><dd class="glossdef"><p>A high-level description of software packages and
-  compositions thereof.  Deploying software using Nix entails writing
-  Nix expressions for your packages.  Nix expressions are translated
-  to derivations that are stored in the Nix store.  These derivations
-  can then be built.</p></dd><dt><a id="gloss-reference"></a><span class="glossterm">reference</span></dt><dd class="glossdef"><p>A store path <code class="varname">P</code> is said to have a
-  reference to a store path <code class="varname">Q</code> if the store object
-  at <code class="varname">P</code> contains the path <code class="varname">Q</code>
-  somewhere.  This implies than an execution involving
-  <code class="varname">P</code> potentially needs <code class="varname">Q</code> to be
-  present.  The <span class="emphasis"><em>references</em></span> of a store path are
-  the set of store paths to which it has a reference.</p></dd><dt><a id="gloss-closure"></a><span class="glossterm">closure</span></dt><dd class="glossdef"><p>The closure of a store path is the set of store
-  paths that are directly or indirectly “reachable” from that store
-  path; that is, it’s the closure of the path under the <a class="link" href="#gloss-reference" title="reference">references</a> relation.  For instance,
-  if the store object at path <code class="varname">P</code> contains a
-  reference to path <code class="varname">Q</code>, then <code class="varname">Q</code> is
-  in the closure of <code class="varname">P</code>.  For correct deployment it
-  is necessary to deploy whole closures, since otherwise at runtime
-  files could be missing.  The command <span class="command"><strong>nix-store
-  -qR</strong></span> prints out closures of store paths.</p></dd><dt><a id="gloss-output-path"></a><span class="glossterm">output path</span></dt><dd class="glossdef"><p>A store path produced by a derivation.</p></dd><dt><a id="gloss-deriver"></a><span class="glossterm">deriver</span></dt><dd class="glossdef"><p>The deriver of an <a class="link" href="#gloss-output-path" title="output path">output path</a> is the store
-  derivation that built it.</p></dd><dt><a id="gloss-validity"></a><span class="glossterm">validity</span></dt><dd class="glossdef"><p>A store path is considered
-  <span class="emphasis"><em>valid</em></span> if it exists in the file system, is
-  listed in the Nix database as being valid, and if all paths in its
-  closure are also valid.</p></dd><dt><a id="gloss-user-env"></a><span class="glossterm">user environment</span></dt><dd class="glossdef"><p>An automatically generated store object that
-  consists of a set of symlinks to “active” applications, i.e., other
-  store paths.  These are generated automatically by <a class="link" href="#sec-nix-env" title="nix-env"><span class="command"><strong>nix-env</strong></span></a>.  See <a class="xref" href="#sec-profiles" title="Chapter 9. Profiles">Chapter 9, <em>Profiles</em></a>.</p></dd><dt><a id="gloss-profile"></a><span class="glossterm">profile</span></dt><dd class="glossdef"><p>A symlink to the current <a class="link" href="#gloss-user-env" title="user environment">user environment</a> of a user, e.g.,
-  <code class="filename">/nix/var/nix/profiles/default</code>.</p></dd><dt><a id="gloss-nar"></a><span class="glossterm">NAR</span></dt><dd class="glossdef"><p>A <span class="emphasis"><em>N</em></span>ix
-  <span class="emphasis"><em>AR</em></span>chive.  This is a serialisation of a path in
-  the Nix store.  It can contain regular files, directories and
-  symbolic links.  NARs are generated and unpacked using
-  <span class="command"><strong>nix-store --dump</strong></span> and <span class="command"><strong>nix-store
-  --restore</strong></span>.</p></dd></dl></div></div><div class="appendix"><div class="titlepage"><div><div><h1 class="title"><a id="chap-hacking"></a>Appendix C. Hacking</h1></div></div></div><p>This section provides some notes on how to hack on Nix.  To get
-the latest version of Nix from GitHub:
-</p><pre class="screen">
-$ git clone git://github.com/NixOS/nix.git
-$ cd nix
-</pre><p>
-</p><p>To build it and its dependencies:
-</p><pre class="screen">
-$ nix-build release.nix -A build.x86_64-linux
-</pre><p>
-</p><p>To build all dependencies and start a shell in which all
-environment variables are set up so that those dependencies can be
-found:
-</p><pre class="screen">
-$ ./dev-shell
-</pre><p>
-To build Nix itself in this shell:
-</p><pre class="screen">
-[nix-shell]$ ./bootstrap.sh
-[nix-shell]$ configurePhase
-[nix-shell]$ make
-</pre><p>
-To test it:
-</p><pre class="screen">
-[nix-shell]$ make install
-[nix-shell]$ make installcheck
-</pre><p>
-
-</p></div><div class="appendix"><div class="titlepage"><div><div><h1 class="title"><a id="sec-relnotes"></a>Appendix D. Nix Release Notes</h1></div></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.11.10"></a>D.1. Release 1.11.10 (2017-06-12)</h2></div></div></div><p>This release fixes a security bug in Nix’s “build user” build
-isolation mechanism. Previously, Nix builders had the ability to
-create setuid binaries owned by a <code class="literal">nixbld</code>
-user. Such a binary could then be used by an attacker to assume a
-<code class="literal">nixbld</code> identity and interfere with subsequent
-builds running under the same UID.</p><p>To prevent this issue, Nix now disallows builders to create
-setuid and setgid binaries. On Linux, this is done using a seccomp BPF
-filter. Note that this imposes a small performance penalty (e.g. 1%
-when building GNU Hello). Using seccomp, we now also prevent the
-creation of extended attributes and POSIX ACLs since these cannot be
-represented in the NAR format and (in the case of POSIX ACLs) allow
-bypassing regular Nix store permissions. On macOS, the restriction is
-implemented using the existing sandbox mechanism, which now uses a
-minimal “allow all except the creation of setuid/setgid binaries”
-profile when regular sandboxing is disabled. On other platforms, the
-“build user” mechanism is now disabled.</p><p>Thanks go to Linus Heckemann for discovering and reporting this
-bug.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.11"></a>D.2. Release 1.11 (2016-01-19)</h2></div></div></div><p>This is primarily a bug fix release. It also has a number of new
-features:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><span class="command"><strong>nix-prefetch-url</strong></span> can now download URLs
-    specified in a Nix expression. For example,
-
-</p><pre class="screen">
-$ nix-prefetch-url -A hello.src
-</pre><p>
-
-    will prefetch the file specified by the
-    <code class="function">fetchurl</code> call in the attribute
-    <code class="literal">hello.src</code> from the Nix expression in the
-    current directory, and print the cryptographic hash of the
-    resulting file on stdout. This differs from <code class="literal">nix-build -A
-    hello.src</code> in that it doesn't verify the hash, and is
-    thus useful when you’re updating a Nix expression.</p><p>You can also prefetch the result of functions that unpack a
-    tarball, such as <code class="function">fetchFromGitHub</code>. For example:
-
-</p><pre class="screen">
-$ nix-prefetch-url --unpack https://github.com/NixOS/patchelf/archive/0.8.tar.gz
-</pre><p>
-
-    or from a Nix expression:
-
-</p><pre class="screen">
-$ nix-prefetch-url -A nix-repl.src
-</pre><p>
-
-    </p></li><li class="listitem"><p>The builtin function
-    <code class="function">&lt;nix/fetchurl.nix&gt;</code> now supports
-    downloading and unpacking NARs. This removes the need to have
-    multiple downloads in the Nixpkgs stdenv bootstrap process (like a
-    separate busybox binary for Linux, or curl/mkdir/sh/bzip2 for
-    Darwin). Now all those files can be combined into a single NAR,
-    optionally compressed using <span class="command"><strong>xz</strong></span>.</p></li><li class="listitem"><p>Nix now supports SHA-512 hashes for verifying fixed-output
-    derivations, and in <code class="function">builtins.hashString</code>.</p></li><li class="listitem"><p>
-      The new flag <code class="option">--option build-repeat
-      <em class="replaceable"><code>N</code></em></code> will cause every build to
-      be executed <em class="replaceable"><code>N</code></em>+1 times. If the build
-      output differs between any round, the build is rejected, and the
-      output paths are not registered as valid. This is primarily
-      useful to verify build determinism. (We already had a
-      <code class="option">--check</code> option to repeat a previously succeeded
-      build. However, with <code class="option">--check</code>, non-deterministic
-      builds are registered in the DB. Preventing that is useful for
-      Hydra to ensure that non-deterministic builds don't end up
-      getting published to the binary cache.)
-    </p></li><li class="listitem"><p>
-      The options <code class="option">--check</code> and <code class="option">--option
-      build-repeat <em class="replaceable"><code>N</code></em></code>, if they
-      detect a difference between two runs of the same derivation and
-      <code class="option">-K</code> is given, will make the output of the other
-      run available under
-      <code class="filename"><em class="replaceable"><code>store-path</code></em>-check</code>. This
-      makes it easier to investigate the non-determinism using tools
-      like <span class="command"><strong>diffoscope</strong></span>, e.g.,
-
-</p><pre class="screen">
-$ nix-build pkgs/stdenv/linux -A stage1.pkgs.zlib --check -K
-error: derivation ‘/nix/store/l54i8wlw2265…-zlib-1.2.8.drv’ may not
-be deterministic: output ‘/nix/store/11a27shh6n2i…-zlib-1.2.8’
-differs from ‘/nix/store/11a27shh6n2i…-zlib-1.2.8-check’
-
-$ diffoscope /nix/store/11a27shh6n2i…-zlib-1.2.8 /nix/store/11a27shh6n2i…-zlib-1.2.8-check
-…
-├── lib/libz.a
-│   ├── metadata
-│   │ @@ -1,15 +1,15 @@
-│   │ -rw-r--r-- 30001/30000   3096 Jan 12 15:20 2016 adler32.o
-…
-│   │ +rw-r--r-- 30001/30000   3096 Jan 12 15:28 2016 adler32.o
-…
-</pre><p>
-
-    </p></li><li class="listitem"><p>Improved FreeBSD support.</p></li><li class="listitem"><p><span class="command"><strong>nix-env -qa --xml --meta</strong></span> now prints
-    license information.</p></li><li class="listitem"><p>The maximum number of parallel TCP connections that the
-    binary cache substituter will use has been decreased from 150 to
-    25. This should prevent upsetting some broken NAT routers, and
-    also improves performance.</p></li><li class="listitem"><p>All "chroot"-containing strings got renamed to "sandbox".
-      In particular, some Nix options got renamed, but the old names
-      are still accepted as lower-priority aliases.
-    </p></li></ul></div><p>This release has contributions from Anders Claesson, Anthony
-Cowley, Bjørn Forsman, Brian McKenna, Danny Wilson, davidak, Eelco Dolstra,
-Fabian Schmitthenner, FrankHB, Ilya Novoselov, janus, Jim Garrison, John
-Ericson, Jude Taylor, Ludovic Courtès, Manuel Jacob, Mathnerd314,
-Pascal Wittmann, Peter Simons, Philip Potter, Preston Bennes, Rommel
-M. Martinez, Sander van der Burg, Shea Levy, Tim Cuthbertson, Tuomas
-Tynkkynen, Utku Demir and Vladimír Čunát.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.10"></a>D.3. Release 1.10 (2015-09-03)</h2></div></div></div><p>This is primarily a bug fix release. It also has a number of new
-features:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>A number of builtin functions have been added to reduce
-    Nixpkgs/NixOS evaluation time and memory consumption:
-    <code class="function">all</code>,
-    <code class="function">any</code>,
-    <code class="function">concatStringsSep</code>,
-    <code class="function">foldl’</code>,
-    <code class="function">genList</code>,
-    <code class="function">replaceStrings</code>,
-    <code class="function">sort</code>.
-    </p></li><li class="listitem"><p>The garbage collector is more robust when the disk is full.</p></li><li class="listitem"><p>Nix supports a new API for building derivations that doesn’t
-    require a <code class="literal">.drv</code> file to be present on disk; it
-    only requires an in-memory representation of the derivation. This
-    is used by the Hydra continuous build system to make remote builds
-    more efficient.</p></li><li class="listitem"><p>The function <code class="literal">&lt;nix/fetchurl.nix&gt;</code> now
-    uses a <span class="emphasis"><em>builtin</em></span> builder (i.e. it doesn’t
-    require starting an external process; the download is performed by
-    Nix itself). This ensures that derivation paths don’t change when
-    Nix is upgraded, and obviates the need for ugly hacks to support
-    chroot execution.</p></li><li class="listitem"><p><code class="option">--version -v</code> now prints some configuration
-    information, in particular what compile-time optional features are
-    enabled, and the paths of various directories.</p></li><li class="listitem"><p>Build users have their supplementary groups set correctly.</p></li></ul></div><p>This release has contributions from Eelco Dolstra, Guillaume
-Maudoux, Iwan Aucamp, Jaka Hudoklin, Kirill Elagin, Ludovic Courtès,
-Manolis Ragkousis, Nicolas B. Pierron and Shea Levy.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.9"></a>D.4. Release 1.9 (2015-06-12)</h2></div></div></div><p>In addition to the usual bug fixes, this release has the
-following new features:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Signed binary cache support. You can enable signature
-    checking by adding the following to <code class="filename">nix.conf</code>:
-
-</p><pre class="programlisting">
-signed-binary-caches = *
-binary-cache-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
-</pre><p>
-
-    This will prevent Nix from downloading any binary from the cache
-    that is not signed by one of the keys listed in
-    <code class="option">binary-cache-public-keys</code>.</p><p>Signature checking is only supported if you built Nix with
-    the <code class="literal">libsodium</code> package.</p><p>Note that while Nix has had experimental support for signed
-    binary caches since version 1.7, this release changes the
-    signature format in a backwards-incompatible way.</p></li><li class="listitem"><p>Automatic downloading of Nix expression tarballs. In various
-    places, you can now specify the URL of a tarball containing Nix
-    expressions (such as Nixpkgs), which will be downloaded and
-    unpacked automatically. For example:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>In <span class="command"><strong>nix-env</strong></span>:
-
-</p><pre class="screen">
-$ nix-env -f https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz -iA firefox
-</pre><p>
-
-      This installs Firefox from the latest tested and built revision
-      of the NixOS 14.12 channel.</p></li><li class="listitem"><p>In <span class="command"><strong>nix-build</strong></span> and
-      <span class="command"><strong>nix-shell</strong></span>:
-
-</p><pre class="screen">
-$ nix-build https://github.com/NixOS/nixpkgs/archive/master.tar.gz -A hello
-</pre><p>
-
-      This builds GNU Hello from the latest revision of the Nixpkgs
-      master branch.</p></li><li class="listitem"><p>In the Nix search path (as specified via
-      <code class="envar">NIX_PATH</code> or <code class="option">-I</code>). For example, to
-      start a shell containing the Pan package from a specific version
-      of Nixpkgs:
-
-</p><pre class="screen">
-$ nix-shell -p pan -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/8a3eea054838b55aca962c3fbde9c83c102b8bf2.tar.gz
-</pre><p>
-
-      </p></li><li class="listitem"><p>In <span class="command"><strong>nixos-rebuild</strong></span> (on NixOS):
-
-</p><pre class="screen">
-$ nixos-rebuild test -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-unstable.tar.gz
-</pre><p>
-
-      </p></li><li class="listitem"><p>In Nix expressions, via the new builtin function <code class="function">fetchTarball</code>:
-
-</p><pre class="programlisting">
-with import (fetchTarball https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz) {}; …
-</pre><p>
-
-      (This is not allowed in restricted mode.)</p></li></ul></div></li><li class="listitem"><p><span class="command"><strong>nix-shell</strong></span> improvements:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p><span class="command"><strong>nix-shell</strong></span> now has a flag
-      <code class="option">--run</code> to execute a command in the
-      <span class="command"><strong>nix-shell</strong></span> environment,
-      e.g. <code class="literal">nix-shell --run make</code>. This is like
-      the existing <code class="option">--command</code> flag, except that it
-      uses a non-interactive shell (ensuring that hitting Ctrl-C won’t
-      drop you into the child shell).</p></li><li class="listitem"><p><span class="command"><strong>nix-shell</strong></span> can now be used as
-      a <code class="literal">#!</code>-interpreter. This allows you to write
-      scripts that dynamically fetch their own dependencies. For
-      example, here is a Haskell script that, when invoked, first
-      downloads GHC and the Haskell packages on which it depends:
-
-</p><pre class="programlisting">
-#! /usr/bin/env nix-shell
-#! nix-shell -i runghc -p haskellPackages.ghc haskellPackages.HTTP
-
-import Network.HTTP
-
-main = do
-  resp &lt;- Network.HTTP.simpleHTTP (getRequest "http://nixos.org/")
-  body &lt;- getResponseBody resp
-  print (take 100 body)
-</pre><p>
-
-      Of course, the dependencies are cached in the Nix store, so the
-      second invocation of this script will be much
-      faster.</p></li></ul></div></li><li class="listitem"><p>Chroot improvements:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>Chroot builds are now supported on Mac OS X
-      (using its sandbox mechanism).</p></li><li class="listitem"><p>If chroots are enabled, they are now used for
-      all derivations, including fixed-output derivations (such as
-      <code class="function">fetchurl</code>). The latter do have network
-      access, but can no longer access the host filesystem. If you
-      need the old behaviour, you can set the option
-      <code class="option">build-use-chroot</code> to
-      <code class="literal">relaxed</code>.</p></li><li class="listitem"><p>On Linux, if chroots are enabled, builds are
-      performed in a private PID namespace once again. (This
-      functionality was lost in Nix 1.8.)</p></li><li class="listitem"><p>Store paths listed in
-      <code class="option">build-chroot-dirs</code> are now automatically
-      expanded to their closure. For instance, if you want
-      <code class="filename">/nix/store/…-bash/bin/sh</code> mounted in your
-      chroot as <code class="filename">/bin/sh</code>, you only need to say
-      <code class="literal">build-chroot-dirs =
-      /bin/sh=/nix/store/…-bash/bin/sh</code>; it is no longer
-      necessary to specify the dependencies of Bash.</p></li></ul></div></li><li class="listitem"><p>The new derivation attribute
-  <code class="varname">passAsFile</code> allows you to specify that the
-  contents of derivation attributes should be passed via files rather
-  than environment variables. This is useful if you need to pass very
-  long strings that exceed the size limit of the environment. The
-  Nixpkgs function <code class="function">writeTextFile</code> uses
-  this.</p></li><li class="listitem"><p>You can now use <code class="literal">~</code> in Nix file
-  names to refer to your home directory, e.g. <code class="literal">import
-  ~/.nixpkgs/config.nix</code>.</p></li><li class="listitem"><p>Nix has a new option <code class="option">restrict-eval</code>
-  that allows limiting what paths the Nix evaluator has access to. By
-  passing <code class="literal">--option restrict-eval true</code> to Nix, the
-  evaluator will throw an exception if an attempt is made to access
-  any file outside of the Nix search path. This is primarily intended
-  for Hydra to ensure that a Hydra jobset only refers to its declared
-  inputs (and is therefore reproducible).</p></li><li class="listitem"><p><span class="command"><strong>nix-env</strong></span> now only creates a new
-  “generation” symlink in <code class="filename">/nix/var/nix/profiles</code>
-  if something actually changed.</p></li><li class="listitem"><p>The environment variable <code class="envar">NIX_PAGER</code>
-  can now be set to override <code class="envar">PAGER</code>. You can set it to
-  <code class="literal">cat</code> to disable paging for Nix commands
-  only.</p></li><li class="listitem"><p>Failing <code class="literal">&lt;...&gt;</code>
-  lookups now show position information.</p></li><li class="listitem"><p>Improved Boehm GC use: we disabled scanning for
-  interior pointers, which should reduce the “<code class="literal">Repeated
-  allocation of very large block</code>” warnings and associated
-  retention of memory.</p></li></ul></div><p>This release has contributions from aszlig, Benjamin Staffin,
-Charles Strahan, Christian Theune, Daniel Hahler, Danylo Hlynskyi
-Daniel Peebles, Dan Peebles, Domen Kožar, Eelco Dolstra, Harald van
-Dijk, Hoang Xuan Phu, Jaka Hudoklin, Jeff Ramnani, j-keck, Linquize,
-Luca Bruno, Michael Merickel, Oliver Dunkl, Rob Vermaas, Rok Garbas,
-Shea Levy, Tobias Geerinckx-Rice and William A. Kennington III.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.8"></a>D.5. Release 1.8 (2014-12-14)</h2></div></div></div><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Breaking change: to address a race condition, the
-  remote build hook mechanism now uses <span class="command"><strong>nix-store
-  --serve</strong></span> on the remote machine. This requires build slaves
-  to be updated to Nix 1.8.</p></li><li class="listitem"><p>Nix now uses HTTPS instead of HTTP to access the
-  default binary cache,
-  <code class="literal">cache.nixos.org</code>.</p></li><li class="listitem"><p><span class="command"><strong>nix-env</strong></span> selectors are now regular
-  expressions. For instance, you can do
-
-</p><pre class="screen">
-$ nix-env -qa '.*zip.*'
-</pre><p>
-
-  to query all packages with a name containing
-  <code class="literal">zip</code>.</p></li><li class="listitem"><p><span class="command"><strong>nix-store --read-log</strong></span> can now
-  fetch remote build logs. If a build log is not available locally,
-  then ‘nix-store -l’ will now try to download it from the servers
-  listed in the ‘log-servers’ option in nix.conf. For instance, if you
-  have the configuration option
-
-</p><pre class="programlisting">
-log-servers = http://hydra.nixos.org/log
-</pre><p>
-
-then it will try to get logs from
-<code class="literal">http://hydra.nixos.org/log/<em class="replaceable"><code>base name of the
-store path</code></em></code>. This allows you to do things like:
-
-</p><pre class="screen">
-$ nix-store -l $(which xterm)
-</pre><p>
-
-  and get a log even if <span class="command"><strong>xterm</strong></span> wasn't built
-  locally.</p></li><li class="listitem"><p>New builtin functions:
-  <code class="function">attrValues</code>, <code class="function">deepSeq</code>,
-  <code class="function">fromJSON</code>, <code class="function">readDir</code>,
-  <code class="function">seq</code>.</p></li><li class="listitem"><p><span class="command"><strong>nix-instantiate --eval</strong></span> now has a
-  <code class="option">--json</code> flag to print the resulting value in JSON
-  format.</p></li><li class="listitem"><p><span class="command"><strong>nix-copy-closure</strong></span> now uses
-  <span class="command"><strong>nix-store --serve</strong></span> on the remote side to send or
-  receive closures. This fixes a race condition between
-  <span class="command"><strong>nix-copy-closure</strong></span> and the garbage
-  collector.</p></li><li class="listitem"><p>Derivations can specify the new special attribute
-  <code class="varname">allowedRequisites</code>, which has a similar meaning to
-  <code class="varname">allowedReferences</code>. But instead of only enforcing
-  to explicitly specify the immediate references, it requires the
-  derivation to specify all the dependencies recursively (hence the
-  name, requisites) that are used by the resulting
-  output.</p></li><li class="listitem"><p>On Mac OS X, Nix now handles case collisions when
-  importing closures from case-sensitive file systems. This is mostly
-  useful for running NixOps on Mac OS X.</p></li><li class="listitem"><p>The Nix daemon has new configuration options
-  <code class="option">allowed-users</code> (specifying the users and groups that
-  are allowed to connect to the daemon) and
-  <code class="option">trusted-users</code> (specifying the users and groups that
-  can perform privileged operations like specifying untrusted binary
-  caches).</p></li><li class="listitem"><p>The configuration option
-  <code class="option">build-max-jobs</code> now defaults to the number of
-  available CPU cores.</p></li><li class="listitem"><p>Build users are now used by default when Nix is
-  invoked as root. This prevents builds from accidentally running as
-  root.</p></li><li class="listitem"><p>Nix now includes systemd units and Upstart
-  jobs.</p></li><li class="listitem"><p>Speed improvements to <span class="command"><strong>nix-store
-  --optimise</strong></span>.</p></li><li class="listitem"><p>Language change: the <code class="literal">==</code> operator
-  now ignores string contexts (the “dependencies” of a
-  string).</p></li><li class="listitem"><p>Nix now filters out Nix-specific ANSI escape
-  sequences on standard error. They are supposed to be invisible, but
-  some terminals show them anyway.</p></li><li class="listitem"><p>Various commands now automatically pipe their output
-  into the pager as specified by the <code class="envar">PAGER</code> environment
-  variable.</p></li><li class="listitem"><p>Several improvements to reduce memory consumption in
-  the evaluator.</p></li></ul></div><p>This release has contributions from Adam Szkoda, Aristid
-Breitkreuz, Bob van der Linden, Charles Strahan, darealshinji, Eelco
-Dolstra, Gergely Risko, Joel Taylor, Ludovic Courtès, Marko Durkovic,
-Mikey Ariel, Paul Colomiets, Ricardo M.  Correia, Ricky Elrod, Robert
-Helgesson, Rob Vermaas, Russell O'Connor, Shea Levy, Shell Turner,
-Sönke Hahn, Steve Purcell, Vladimír Čunát and Wout Mertens.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.7"></a>D.6. Release 1.7 (2014-04-11)</h2></div></div></div><p>In addition to the usual bug fixes, this release has the
-following new features:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Antiquotation is now allowed inside of quoted attribute
-    names (e.g. <code class="literal">set."${foo}"</code>). In the case where
-    the attribute name is just a single antiquotation, the quotes can
-    be dropped (e.g. the above example can be written
-    <code class="literal">set.${foo}</code>). If an attribute name inside of a
-    set declaration evaluates to <code class="literal">null</code> (e.g.
-    <code class="literal">{ ${null} = false; }</code>), then that attribute is
-    not added to the set.</p></li><li class="listitem"><p>Experimental support for cryptographically signed binary
-    caches.  See <a class="link" href="https://github.com/NixOS/nix/commit/0fdf4da0e979f992db75cc17376e455ddc5a96d8" target="_top">the
-    commit for details</a>.</p></li><li class="listitem"><p>An experimental new substituter,
-    <span class="command"><strong>download-via-ssh</strong></span>, that fetches binaries from
-    remote machines via SSH.  Specifying the flags <code class="literal">--option
-    use-ssh-substituter true --option ssh-substituter-hosts
-    <em class="replaceable"><code>user@hostname</code></em></code> will cause Nix
-    to download binaries from the specified machine, if it has
-    them.</p></li><li class="listitem"><p><span class="command"><strong>nix-store -r</strong></span> and
-    <span class="command"><strong>nix-build</strong></span> have a new flag,
-    <code class="option">--check</code>, that builds a previously built
-    derivation again, and prints an error message if the output is not
-    exactly the same. This helps to verify whether a derivation is
-    truly deterministic.  For example:
-
-</p><pre class="screen">
-$ nix-build '&lt;nixpkgs&gt;' -A patchelf
-<em class="replaceable"><code>…</code></em>
-$ nix-build '&lt;nixpkgs&gt;' -A patchelf --check
-<em class="replaceable"><code>…</code></em>
-error: derivation `/nix/store/1ipvxs…-patchelf-0.6' may not be deterministic:
-  hash mismatch in output `/nix/store/4pc1dm…-patchelf-0.6.drv'
-</pre><p>
-
-    </p></li><li class="listitem"><p>The <span class="command"><strong>nix-instantiate</strong></span> flags
-    <code class="option">--eval-only</code> and <code class="option">--parse-only</code>
-    have been renamed to <code class="option">--eval</code> and
-    <code class="option">--parse</code>, respectively.</p></li><li class="listitem"><p><span class="command"><strong>nix-instantiate</strong></span>,
-    <span class="command"><strong>nix-build</strong></span> and <span class="command"><strong>nix-shell</strong></span> now
-    have a flag <code class="option">--expr</code> (or <code class="option">-E</code>) that
-    allows you to specify the expression to be evaluated as a command
-    line argument.  For instance, <code class="literal">nix-instantiate --eval -E
-    '1 + 2'</code> will print <code class="literal">3</code>.</p></li><li class="listitem"><p><span class="command"><strong>nix-shell</strong></span> improvements:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>It has a new flag, <code class="option">--packages</code> (or
-        <code class="option">-p</code>), that sets up a build environment
-        containing the specified packages from Nixpkgs. For example,
-        the command
-
-</p><pre class="screen">
-$ nix-shell -p sqlite xorg.libX11 hello
-</pre><p>
-
-        will start a shell in which the given packages are
-        present.</p></li><li class="listitem"><p>It now uses <code class="filename">shell.nix</code> as the
-        default expression, falling back to
-        <code class="filename">default.nix</code> if the former doesn’t
-        exist.  This makes it convenient to have a
-        <code class="filename">shell.nix</code> in your project to set up a
-        nice development environment.</p></li><li class="listitem"><p>It evaluates the derivation attribute
-        <code class="varname">shellHook</code>, if set. Since
-        <code class="literal">stdenv</code> does not normally execute this hook,
-        it allows you to do <span class="command"><strong>nix-shell</strong></span>-specific
-        setup.</p></li><li class="listitem"><p>It preserves the user’s timezone setting.</p></li></ul></div></li><li class="listitem"><p>In chroots, Nix now sets up a <code class="filename">/dev</code>
-    containing only a minimal set of devices (such as
-    <code class="filename">/dev/null</code>). Note that it only does this if
-    you <span class="emphasis"><em>don’t</em></span> have <code class="filename">/dev</code>
-    listed in your <code class="option">build-chroot-dirs</code> setting;
-    otherwise, it will bind-mount the <code class="literal">/dev</code> from
-    outside the chroot.</p><p>Similarly, if you don’t have <code class="filename">/dev/pts</code> listed
-    in <code class="option">build-chroot-dirs</code>, Nix will mount a private
-    <code class="literal">devpts</code> filesystem on the chroot’s
-    <code class="filename">/dev/pts</code>.</p></li><li class="listitem"><p>New built-in function: <code class="function">builtins.toJSON</code>,
-    which returns a JSON representation of a value.</p></li><li class="listitem"><p><span class="command"><strong>nix-env -q</strong></span> has a new flag
-    <code class="option">--json</code> to print a JSON representation of the
-    installed or available packages.</p></li><li class="listitem"><p><span class="command"><strong>nix-env</strong></span> now supports meta attributes with
-    more complex values, such as attribute sets.</p></li><li class="listitem"><p>The <code class="option">-A</code> flag now allows attribute names with
-    dots in them, e.g.
-
-</p><pre class="screen">
-$ nix-instantiate --eval '&lt;nixos&gt;' -A 'config.systemd.units."nscd.service".text'
-</pre><p>
-
-    </p></li><li class="listitem"><p>The <code class="option">--max-freed</code> option to
-    <span class="command"><strong>nix-store --gc</strong></span> now accepts a unit
-    specifier. For example, <code class="literal">nix-store --gc --max-freed
-    1G</code> will free up to 1 gigabyte of disk space.</p></li><li class="listitem"><p><span class="command"><strong>nix-collect-garbage</strong></span> has a new flag
-    <code class="option">--delete-older-than</code>
-    <em class="replaceable"><code>N</code></em><code class="literal">d</code>, which deletes
-    all user environment generations older than
-    <em class="replaceable"><code>N</code></em> days.  Likewise, <span class="command"><strong>nix-env
-    --delete-generations</strong></span> accepts a
-    <em class="replaceable"><code>N</code></em><code class="literal">d</code> age limit.</p></li><li class="listitem"><p>Nix now heuristically detects whether a build failure was
-    due to a disk-full condition. In that case, the build is not
-    flagged as “permanently failed”. This is mostly useful for Hydra,
-    which needs to distinguish between permanent and transient build
-    failures.</p></li><li class="listitem"><p>There is a new symbol <code class="literal">__curPos</code> that
-    expands to an attribute set containing its file name and line and
-    column numbers, e.g. <code class="literal">{ file = "foo.nix"; line = 10;
-    column = 5; }</code>.  There also is a new builtin function,
-    <code class="varname">unsafeGetAttrPos</code>, that returns the position of
-    an attribute.  This is used by Nixpkgs to provide location
-    information in error messages, e.g.
-
-</p><pre class="screen">
-$ nix-build '&lt;nixpkgs&gt;' -A libreoffice --argstr system x86_64-darwin
-error: the package ‘libreoffice-4.0.5.2’ in ‘.../applications/office/libreoffice/default.nix:263’
-  is not supported on ‘x86_64-darwin’
-</pre><p>
-
-    </p></li><li class="listitem"><p>The garbage collector is now more concurrent with other Nix
-    processes because it releases certain locks earlier.</p></li><li class="listitem"><p>The binary tarball installer has been improved.  You can now
-    install Nix by running:
-
-</p><pre class="screen">
-$ bash &lt;(curl https://nixos.org/nix/install)
-</pre><p>
-
-    </p></li><li class="listitem"><p>More evaluation errors include position information. For
-    instance, selecting a missing attribute will print something like
-
-</p><pre class="screen">
-error: attribute `nixUnstabl' missing, at /etc/nixos/configurations/misc/eelco/mandark.nix:216:15
-</pre><p>
-
-    </p></li><li class="listitem"><p>The command <span class="command"><strong>nix-setuid-helper</strong></span> is
-    gone.</p></li><li class="listitem"><p>Nix no longer uses Automake, but instead has a
-    non-recursive, GNU Make-based build system.</p></li><li class="listitem"><p>All installed libraries now have the prefix
-    <code class="literal">libnix</code>.  In particular, this gets rid of
-    <code class="literal">libutil</code>, which could clash with libraries with
-    the same name from other packages.</p></li><li class="listitem"><p>Nix now requires a compiler that supports C++11.</p></li></ul></div><p>This release has contributions from Danny Wilson, Domen Kožar,
-Eelco Dolstra, Ian-Woo Kim, Ludovic Courtès, Maxim Ivanov, Petr
-Rockai, Ricardo M. Correia and Shea Levy.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.6.1"></a>D.7. Release 1.6.1 (2013-10-28)</h2></div></div></div><p>This is primarily a bug fix release.  Changes of interest
-are:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Nix 1.6 accidentally changed the semantics of antiquoted
-    paths in strings, such as <code class="literal">"${/foo}/bar"</code>.  This
-    release reverts to the Nix 1.5.3 behaviour.</p></li><li class="listitem"><p>Previously, Nix optimised expressions such as
-    <code class="literal">"${<em class="replaceable"><code>expr</code></em>}"</code> to
-    <em class="replaceable"><code>expr</code></em>.  Thus it neither checked whether
-    <em class="replaceable"><code>expr</code></em> could be coerced to a string, nor
-    applied such coercions.  This meant that
-    <code class="literal">"${123}"</code> evaluatued to <code class="literal">123</code>,
-    and <code class="literal">"${./foo}"</code> evaluated to
-    <code class="literal">./foo</code> (even though
-    <code class="literal">"${./foo} "</code> evaluates to
-    <code class="literal">"/nix/store/<em class="replaceable"><code>hash</code></em>-foo "</code>).
-    Nix now checks the type of antiquoted expressions and
-    applies coercions.</p></li><li class="listitem"><p>Nix now shows the exact position of undefined variables.  In
-    particular, undefined variable errors in a <code class="literal">with</code>
-    previously didn't show <span class="emphasis"><em>any</em></span> position
-    information, so this makes it a lot easier to fix such
-    errors.</p></li><li class="listitem"><p>Undefined variables are now treated consistently.
-    Previously, the <code class="function">tryEval</code> function would catch
-    undefined variables inside a <code class="literal">with</code> but not
-    outside.  Now <code class="function">tryEval</code> never catches undefined
-    variables.</p></li><li class="listitem"><p>Bash completion in <span class="command"><strong>nix-shell</strong></span> now works
-    correctly.</p></li><li class="listitem"><p>Stack traces are less verbose: they no longer show calls to
-    builtin functions and only show a single line for each derivation
-    on the call stack.</p></li><li class="listitem"><p>New built-in function: <code class="function">builtins.typeOf</code>,
-    which returns the type of its argument as a string.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.6.0"></a>D.8. Release 1.6 (2013-09-10)</h2></div></div></div><p>In addition to the usual bug fixes, this release has several new
-features:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>The command <span class="command"><strong>nix-build --run-env</strong></span> has been
-    renamed to <span class="command"><strong>nix-shell</strong></span>.</p></li><li class="listitem"><p><span class="command"><strong>nix-shell</strong></span> now sources
-    <code class="filename">$stdenv/setup</code> <span class="emphasis"><em>inside</em></span> the
-    interactive shell, rather than in a parent shell.  This ensures
-    that shell functions defined by <code class="literal">stdenv</code> can be
-    used in the interactive shell.</p></li><li class="listitem"><p><span class="command"><strong>nix-shell</strong></span> has a new flag
-    <code class="option">--pure</code> to clear the environment, so you get an
-    environment that more closely corresponds to the “real” Nix build.
-    </p></li><li class="listitem"><p><span class="command"><strong>nix-shell</strong></span> now sets the shell prompt
-    (<code class="envar">PS1</code>) to ensure that Nix shells are distinguishable
-    from your regular shells.</p></li><li class="listitem"><p><span class="command"><strong>nix-env</strong></span> no longer requires a
-    <code class="literal">*</code> argument to match all packages, so
-    <code class="literal">nix-env -qa</code> is equivalent to <code class="literal">nix-env
-    -qa '*'</code>.</p></li><li class="listitem"><p><span class="command"><strong>nix-env -i</strong></span> has a new flag
-    <code class="option">--remove-all</code> (<code class="option">-r</code>) to remove all
-    previous packages from the profile.  This makes it easier to do
-    declarative package management similar to NixOS’s
-    <code class="option">environment.systemPackages</code>.  For instance, if you
-    have a specification <code class="filename">my-packages.nix</code> like this:
-
-</p><pre class="programlisting">
-with import &lt;nixpkgs&gt; {};
-[ thunderbird
-  geeqie
-  ...
-]
-</pre><p>
-
-    then after any change to this file, you can run:
-
-</p><pre class="screen">
-$ nix-env -f my-packages.nix -ir
-</pre><p>
-
-    to update your profile to match the specification.</p></li><li class="listitem"><p>The ‘<code class="literal">with</code>’ language construct is now more
-    lazy.  It only evaluates its argument if a variable might actually
-    refer to an attribute in the argument.  For instance, this now
-    works:
-
-</p><pre class="programlisting">
-let
-  pkgs = with pkgs; { foo = "old"; bar = foo; } // overrides;
-  overrides = { foo = "new"; };
-in pkgs.bar
-</pre><p>
-
-    This evaluates to <code class="literal">"new"</code>, while previously it
-    gave an “infinite recursion” error.</p></li><li class="listitem"><p>Nix now has proper integer arithmetic operators. For
-    instance, you can write <code class="literal">x + y</code> instead of
-    <code class="literal">builtins.add x y</code>, or <code class="literal">x &lt;
-    y</code> instead of <code class="literal">builtins.lessThan x y</code>.
-    The comparison operators also work on strings.</p></li><li class="listitem"><p>On 64-bit systems, Nix integers are now 64 bits rather than
-    32 bits.</p></li><li class="listitem"><p>When using the Nix daemon, the <span class="command"><strong>nix-daemon</strong></span>
-    worker process now runs on the same CPU as the client, on systems
-    that support setting CPU affinity.  This gives a significant speedup
-    on some systems.</p></li><li class="listitem"><p>If a stack overflow occurs in the Nix evaluator, you now get
-    a proper error message (rather than “Segmentation fault”) on some
-    systems.</p></li><li class="listitem"><p>In addition to directories, you can now bind-mount regular
-    files in chroots through the (now misnamed) option
-    <code class="option">build-chroot-dirs</code>.</p></li></ul></div><p>This release has contributions from Domen Kožar, Eelco Dolstra,
-Florian Friesdorf, Gergely Risko, Ivan Kozik, Ludovic Courtès and Shea
-Levy.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.5.2"></a>D.9. Release 1.5.2 (2013-05-13)</h2></div></div></div><p>This is primarily a bug fix release.  It has contributions from
-Eelco Dolstra, Lluís Batlle i Rossell and Shea Levy.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.5"></a>D.10. Release 1.5 (2013-02-27)</h2></div></div></div><p>This is a brown paper bag release to fix a regression introduced
-by the hard link security fix in 1.4.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.4"></a>D.11. Release 1.4 (2013-02-26)</h2></div></div></div><p>This release fixes a security bug in multi-user operation.  It
-was possible for derivations to cause the mode of files outside of the
-Nix store to be changed to 444 (read-only but world-readable) by
-creating hard links to those files (<a class="link" href="https://github.com/NixOS/nix/commit/5526a282b5b44e9296e61e07d7d2626a79141ac4" target="_top">details</a>).</p><p>There are also the following improvements:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>New built-in function:
-  <code class="function">builtins.hashString</code>.</p></li><li class="listitem"><p>Build logs are now stored in
-  <code class="filename">/nix/var/log/nix/drvs/<em class="replaceable"><code>XX</code></em>/</code>,
-  where <em class="replaceable"><code>XX</code></em> is the first two characters of
-  the derivation.  This is useful on machines that keep a lot of build
-  logs (such as Hydra servers).</p></li><li class="listitem"><p>The function <code class="function">corepkgs/fetchurl</code>
-  can now make the downloaded file executable.  This will allow
-  getting rid of all bootstrap binaries in the Nixpkgs source
-  tree.</p></li><li class="listitem"><p>Language change: The expression <code class="literal">"${./path}
-  ..."</code> now evaluates to a string instead of a
-  path.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.3"></a>D.12. Release 1.3 (2013-01-04)</h2></div></div></div><p>This is primarily a bug fix release.  When this version is first
-run on Linux, it removes any immutable bits from the Nix store and
-increases the schema version of the Nix store.  (The previous release
-removed support for setting the immutable bit; this release clears any
-remaining immutable bits to make certain operations more
-efficient.)</p><p>This release has contributions from Eelco Dolstra and Stuart
-Pernsteiner.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.2"></a>D.13. Release 1.2 (2012-12-06)</h2></div></div></div><p>This release has the following improvements and changes:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Nix has a new binary substituter mechanism: the
-    <span class="emphasis"><em>binary cache</em></span>.  A binary cache contains
-    pre-built binaries of Nix packages.  Whenever Nix wants to build a
-    missing Nix store path, it will check a set of binary caches to
-    see if any of them has a pre-built binary of that path.  The
-    configuration setting <code class="option">binary-caches</code> contains a
-    list of URLs of binary caches.  For instance, doing
-</p><pre class="screen">
-$ nix-env -i thunderbird --option binary-caches http://cache.nixos.org
-</pre><p>
-    will install Thunderbird and its dependencies, using the available
-    pre-built binaries in <code class="uri">http://cache.nixos.org</code>.
-    The main advantage over the old “manifest”-based method of getting
-    pre-built binaries is that you don’t have to worry about your
-    manifest being in sync with the Nix expressions you’re installing
-    from; i.e., you don’t need to run <span class="command"><strong>nix-pull</strong></span> to
-    update your manifest.  It’s also more scalable because you don’t
-    need to redownload a giant manifest file every time.
-    </p><p>A Nix channel can provide a binary cache URL that will be
-    used automatically if you subscribe to that channel.  If you use
-    the Nixpkgs or NixOS channels
-    (<code class="uri">http://nixos.org/channels</code>) you automatically get the
-    cache <code class="uri">http://cache.nixos.org</code>.</p><p>Binary caches are created using <span class="command"><strong>nix-push</strong></span>.
-    For details on the operation and format of binary caches, see the
-    <span class="command"><strong>nix-push</strong></span> manpage.  More details are provided in
-    <a class="link" href="http://lists.science.uu.nl/pipermail/nix-dev/2012-September/009826.html" target="_top">this
-    nix-dev posting</a>.</p></li><li class="listitem"><p>Multiple output support should now be usable.  A derivation
-    can declare that it wants to produce multiple store paths by
-    saying something like
-</p><pre class="programlisting">
-outputs = [ "lib" "headers" "doc" ];
-</pre><p>
-    This will cause Nix to pass the intended store path of each output
-    to the builder through the environment variables
-    <code class="literal">lib</code>, <code class="literal">headers</code> and
-    <code class="literal">doc</code>.  Other packages can refer to a specific
-    output by referring to
-    <code class="literal"><em class="replaceable"><code>pkg</code></em>.<em class="replaceable"><code>output</code></em></code>,
-    e.g.
-</p><pre class="programlisting">
-buildInputs = [ pkg.lib pkg.headers ];
-</pre><p>
-    If you install a package with multiple outputs using
-    <span class="command"><strong>nix-env</strong></span>, each output path will be symlinked
-    into the user environment.</p></li><li class="listitem"><p>Dashes are now valid as part of identifiers and attribute
-    names.</p></li><li class="listitem"><p>The new operation <span class="command"><strong>nix-store --repair-path</strong></span>
-    allows corrupted or missing store paths to be repaired by
-    redownloading them.  <span class="command"><strong>nix-store --verify --check-contents
-    --repair</strong></span> will scan and repair all paths in the Nix
-    store.  Similarly, <span class="command"><strong>nix-env</strong></span>,
-    <span class="command"><strong>nix-build</strong></span>, <span class="command"><strong>nix-instantiate</strong></span>
-    and <span class="command"><strong>nix-store --realise</strong></span> have a
-    <code class="option">--repair</code> flag to detect and fix bad paths by
-    rebuilding or redownloading them.</p></li><li class="listitem"><p>Nix no longer sets the immutable bit on files in the Nix
-    store.  Instead, the recommended way to guard the Nix store
-    against accidental modification on Linux is to make it a read-only
-    bind mount, like this:
-
-</p><pre class="screen">
-$ mount --bind /nix/store /nix/store
-$ mount -o remount,ro,bind /nix/store
-</pre><p>
-
-    Nix will automatically make <code class="filename">/nix/store</code>
-    writable as needed (using a private mount namespace) to allow
-    modifications.</p></li><li class="listitem"><p>Store optimisation (replacing identical files in the store
-    with hard links) can now be done automatically every time a path
-    is added to the store.  This is enabled by setting the
-    configuration option <code class="literal">auto-optimise-store</code> to
-    <code class="literal">true</code> (disabled by default).</p></li><li class="listitem"><p>Nix now supports <span class="command"><strong>xz</strong></span> compression for NARs
-    in addition to <span class="command"><strong>bzip2</strong></span>.  It compresses about 30%
-    better on typical archives and decompresses about twice as
-    fast.</p></li><li class="listitem"><p>Basic Nix expression evaluation profiling: setting the
-    environment variable <code class="envar">NIX_COUNT_CALLS</code> to
-    <code class="literal">1</code> will cause Nix to print how many times each
-    primop or function was executed.</p></li><li class="listitem"><p>New primops: <code class="varname">concatLists</code>,
-    <code class="varname">elem</code>, <code class="varname">elemAt</code> and
-    <code class="varname">filter</code>.</p></li><li class="listitem"><p>The command <span class="command"><strong>nix-copy-closure</strong></span> has a new
-    flag <code class="option">--use-substitutes</code> (<code class="option">-s</code>) to
-    download missing paths on the target machine using the substitute
-    mechanism.</p></li><li class="listitem"><p>The command <span class="command"><strong>nix-worker</strong></span> has been renamed
-    to <span class="command"><strong>nix-daemon</strong></span>.  Support for running the Nix
-    worker in “slave” mode has been removed.</p></li><li class="listitem"><p>The <code class="option">--help</code> flag of every Nix command now
-    invokes <span class="command"><strong>man</strong></span>.</p></li><li class="listitem"><p>Chroot builds are now supported on systemd machines.</p></li></ul></div><p>This release has contributions from Eelco Dolstra, Florian
-Friesdorf, Mats Erik Andersson and Shea Levy.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.1"></a>D.14. Release 1.1 (2012-07-18)</h2></div></div></div><p>This release has the following improvements:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>On Linux, when doing a chroot build, Nix now uses various
-    namespace features provided by the Linux kernel to improve
-    build isolation.  Namely:
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>The private network namespace ensures that
-      builders cannot talk to the outside world (or vice versa): each
-      build only sees a private loopback interface.  This also means
-      that two concurrent builds can listen on the same port (e.g. as
-      part of a test) without conflicting with each
-      other.</p></li><li class="listitem"><p>The PID namespace causes each build to start as
-      PID 1.  Processes outside of the chroot are not visible to those
-      on the inside.  On the other hand, processes inside the chroot
-      <span class="emphasis"><em>are</em></span> visible from the outside (though with
-      different PIDs).</p></li><li class="listitem"><p>The IPC namespace prevents the builder from
-      communicating with outside processes using SysV IPC mechanisms
-      (shared memory, message queues, semaphores).  It also ensures
-      that all IPC objects are destroyed when the builder
-      exits.</p></li><li class="listitem"><p>The UTS namespace ensures that builders see a
-      hostname of <code class="literal">localhost</code> rather than the actual
-      hostname.</p></li><li class="listitem"><p>The private mount namespace was already used by
-      Nix to ensure that the bind-mounts used to set up the chroot are
-      cleaned up automatically.</p></li></ul></div><p>
-    </p></li><li class="listitem"><p>Build logs are now compressed using
-    <span class="command"><strong>bzip2</strong></span>.  The command <span class="command"><strong>nix-store
-    -l</strong></span> decompresses them on the fly.  This can be disabled
-    by setting the option <code class="literal">build-compress-log</code> to
-    <code class="literal">false</code>.</p></li><li class="listitem"><p>The creation of build logs in
-    <code class="filename">/nix/var/log/nix/drvs</code> can be disabled by
-    setting the new option <code class="literal">build-keep-log</code> to
-    <code class="literal">false</code>.  This is useful, for instance, for Hydra
-    build machines.</p></li><li class="listitem"><p>Nix now reserves some space in
-    <code class="filename">/nix/var/nix/db/reserved</code> to ensure that the
-    garbage collector can run successfully if the disk is full.  This
-    is necessary because SQLite transactions fail if the disk is
-    full.</p></li><li class="listitem"><p>Added a basic <code class="function">fetchurl</code> function.  This
-    is not intended to replace the <code class="function">fetchurl</code> in
-    Nixpkgs, but is useful for bootstrapping; e.g., it will allow us
-    to get rid of the bootstrap binaries in the Nixpkgs source tree
-    and download them instead.  You can use it by doing
-    <code class="literal">import &lt;nix/fetchurl.nix&gt; { url =
-    <em class="replaceable"><code>url</code></em>; sha256 =
-    "<em class="replaceable"><code>hash</code></em>"; }</code>. (Shea Levy)</p></li><li class="listitem"><p>Improved RPM spec file. (Michel Alexandre Salim)</p></li><li class="listitem"><p>Support for on-demand socket-based activation in the Nix
-    daemon with <span class="command"><strong>systemd</strong></span>.</p></li><li class="listitem"><p>Added a manpage for
-    <span class="citerefentry"><span class="refentrytitle">nix.conf</span>(5)</span>.</p></li><li class="listitem"><p>When using the Nix daemon, the <code class="option">-s</code> flag in
-    <span class="command"><strong>nix-env -qa</strong></span> is now much faster.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-1.0"></a>D.15. Release 1.0 (2012-05-11)</h2></div></div></div><p>There have been numerous improvements and bug fixes since the
-previous release.  Here are the most significant:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Nix can now optionally use the Boehm garbage collector.
-    This significantly reduces the Nix evaluator’s memory footprint,
-    especially when evaluating large NixOS system configurations.  It
-    can be enabled using the <code class="option">--enable-gc</code> configure
-    option.</p></li><li class="listitem"><p>Nix now uses SQLite for its database.  This is faster and
-    more flexible than the old <span class="emphasis"><em>ad hoc</em></span> format.
-    SQLite is also used to cache the manifests in
-    <code class="filename">/nix/var/nix/manifests</code>, resulting in a
-    significant speedup.</p></li><li class="listitem"><p>Nix now has an search path for expressions.  The search path
-    is set using the environment variable <code class="envar">NIX_PATH</code> and
-    the <code class="option">-I</code> command line option.  In Nix expressions,
-    paths between angle brackets are used to specify files that must
-    be looked up in the search path.  For instance, the expression
-    <code class="literal">&lt;nixpkgs/default.nix&gt;</code> looks for a file
-    <code class="filename">nixpkgs/default.nix</code> relative to every element
-    in the search path.</p></li><li class="listitem"><p>The new command <span class="command"><strong>nix-build --run-env</strong></span>
-    builds all dependencies of a derivation, then starts a shell in an
-    environment containing all variables from the derivation.  This is
-    useful for reproducing the environment of a derivation for
-    development.</p></li><li class="listitem"><p>The new command <span class="command"><strong>nix-store --verify-path</strong></span>
-    verifies that the contents of a store path have not
-    changed.</p></li><li class="listitem"><p>The new command <span class="command"><strong>nix-store --print-env</strong></span>
-    prints out the environment of a derivation in a format that can be
-    evaluated by a shell.</p></li><li class="listitem"><p>Attribute names can now be arbitrary strings.  For instance,
-    you can write <code class="literal">{ "foo-1.2" = …; "bla bla" = …; }."bla
-    bla"</code>.</p></li><li class="listitem"><p>Attribute selection can now provide a default value using
-    the <code class="literal">or</code> operator.  For instance, the expression
-    <code class="literal">x.y.z or e</code> evaluates to the attribute
-    <code class="literal">x.y.z</code> if it exists, and <code class="literal">e</code>
-    otherwise.</p></li><li class="listitem"><p>The right-hand side of the <code class="literal">?</code> operator can
-    now be an attribute path, e.g., <code class="literal">attrs ?
-    a.b.c</code>.</p></li><li class="listitem"><p>On Linux, Nix will now make files in the Nix store immutable
-    on filesystems that support it.  This prevents accidental
-    modification of files in the store by the root user.</p></li><li class="listitem"><p>Nix has preliminary support for derivations with multiple
-    outputs.  This is useful because it allows parts of a package to
-    be deployed and garbage-collected separately.  For instance,
-    development parts of a package such as header files or static
-    libraries would typically not be part of the closure of an
-    application, resulting in reduced disk usage and installation
-    time.</p></li><li class="listitem"><p>The Nix store garbage collector is faster and holds the
-    global lock for a shorter amount of time.</p></li><li class="listitem"><p>The option <code class="option">--timeout</code> (corresponding to the
-    configuration setting <code class="literal">build-timeout</code>) allows you
-    to set an absolute timeout on builds — if a build runs for more than
-    the given number of seconds, it is terminated.  This is useful for
-    recovering automatically from builds that are stuck in an infinite
-    loop but keep producing output, and for which
-    <code class="literal">--max-silent-time</code> is ineffective.</p></li><li class="listitem"><p>Nix development has moved to GitHub (<a class="link" href="https://github.com/NixOS/nix" target="_top">https://github.com/NixOS/nix</a>).</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-0.16"></a>D.16. Release 0.16 (2010-08-17)</h2></div></div></div><p>This release has the following improvements:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>The Nix expression evaluator is now much faster in most
-    cases: typically, <a class="link" href="http://www.mail-archive.com/nix-dev@cs.uu.nl/msg04113.html" target="_top">3
-    to 8 times compared to the old implementation</a>.  It also
-    uses less memory.  It no longer depends on the ATerm
-    library.</p></li><li class="listitem"><p>
-      Support for configurable parallelism inside builders.  Build
-      scripts have always had the ability to perform multiple build
-      actions in parallel (for instance, by running <span class="command"><strong>make -j
-      2</strong></span>), but this was not desirable because the number of
-      actions to be performed in parallel was not configurable.  Nix
-      now has an option <code class="option">--cores
-      <em class="replaceable"><code>N</code></em></code> as well as a configuration
-      setting <code class="varname">build-cores =
-      <em class="replaceable"><code>N</code></em></code> that causes the
-      environment variable <code class="envar">NIX_BUILD_CORES</code> to be set to
-      <em class="replaceable"><code>N</code></em> when the builder is invoked.  The
-      builder can use this at its discretion to perform a parallel
-      build, e.g., by calling <span class="command"><strong>make -j
-      <em class="replaceable"><code>N</code></em></strong></span>.  In Nixpkgs, this can be
-      enabled on a per-package basis by setting the derivation
-      attribute <code class="varname">enableParallelBuilding</code> to
-      <code class="literal">true</code>.
-    </p></li><li class="listitem"><p><span class="command"><strong>nix-store -q</strong></span> now supports XML output
-    through the <code class="option">--xml</code> flag.</p></li><li class="listitem"><p>Several bug fixes.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-0.15"></a>D.17. Release 0.15 (2010-03-17)</h2></div></div></div><p>This is a bug-fix release.  Among other things, it fixes
-building on Mac OS X (Snow Leopard), and improves the contents of
-<code class="filename">/etc/passwd</code> and <code class="filename">/etc/group</code>
-in <code class="literal">chroot</code> builds.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-0.14"></a>D.18. Release 0.14 (2010-02-04)</h2></div></div></div><p>This release has the following improvements:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>The garbage collector now starts deleting garbage much
-    faster than before.  It no longer determines liveness of all paths
-    in the store, but does so on demand.</p></li><li class="listitem"><p>Added a new operation, <span class="command"><strong>nix-store --query
-    --roots</strong></span>, that shows the garbage collector roots that
-    directly or indirectly point to the given store paths.</p></li><li class="listitem"><p>Removed support for converting Berkeley DB-based Nix
-    databases to the new schema.</p></li><li class="listitem"><p>Removed the <code class="option">--use-atime</code> and
-    <code class="option">--max-atime</code> garbage collector options.  They were
-    not very useful in practice.</p></li><li class="listitem"><p>On Windows, Nix now requires Cygwin 1.7.x.</p></li><li class="listitem"><p>A few bug fixes.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-0.13"></a>D.19. Release 0.13 (2009-11-05)</h2></div></div></div><p>This is primarily a bug fix release.  It has some new
-features:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Syntactic sugar for writing nested attribute sets.  Instead of
-
-</p><pre class="programlisting">
-{
-  foo = {
-    bar = 123;
-    xyzzy = true;
-  };
-  a = { b = { c = "d"; }; };
-}
-</pre><p>
-
-    you can write
-
-</p><pre class="programlisting">
-{
-  foo.bar = 123;
-  foo.xyzzy = true;
-  a.b.c = "d";
-}
-</pre><p>
-
-    This is useful, for instance, in NixOS configuration files.</p></li><li class="listitem"><p>Support for Nix channels generated by Hydra, the Nix-based
-    continuous build system.  (Hydra generates NAR archives on the
-    fly, so the size and hash of these archives isn’t known in
-    advance.)</p></li><li class="listitem"><p>Support <code class="literal">i686-linux</code> builds directly on
-    <code class="literal">x86_64-linux</code> Nix installations.  This is
-    implemented using the <code class="function">personality()</code> syscall,
-    which causes <span class="command"><strong>uname</strong></span> to return
-    <code class="literal">i686</code> in child processes.</p></li><li class="listitem"><p>Various improvements to the <code class="literal">chroot</code>
-    support.  Building in a <code class="literal">chroot</code> works quite well
-    now.</p></li><li class="listitem"><p>Nix no longer blocks if it tries to build a path and another
-    process is already building the same path.  Instead it tries to
-    build another buildable path first.  This improves
-    parallelism.</p></li><li class="listitem"><p>Support for large (&gt; 4 GiB) files in NAR archives.</p></li><li class="listitem"><p>Various (performance) improvements to the remote build
-    mechanism.</p></li><li class="listitem"><p>New primops: <code class="varname">builtins.addErrorContext</code> (to
-    add a string to stack traces — useful for debugging),
-    <code class="varname">builtins.isBool</code>,
-    <code class="varname">builtins.isString</code>,
-    <code class="varname">builtins.isInt</code>,
-    <code class="varname">builtins.intersectAttrs</code>.</p></li><li class="listitem"><p>OpenSolaris support (Sander van der Burg).</p></li><li class="listitem"><p>Stack traces are no longer displayed unless the
-    <code class="option">--show-trace</code> option is used.</p></li><li class="listitem"><p>The scoping rules for <code class="literal">inherit
-    (<em class="replaceable"><code>e</code></em>) ...</code> in recursive
-    attribute sets have changed.  The expression
-    <em class="replaceable"><code>e</code></em> can now refer to the attributes
-    defined in the containing set.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-0.12"></a>D.20. Release 0.12 (2008-11-20)</h2></div></div></div><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Nix no longer uses Berkeley DB to store Nix store metadata.
-    The principal advantages of the new storage scheme are: it works
-    properly over decent implementations of NFS (allowing Nix stores
-    to be shared between multiple machines); no recovery is needed
-    when a Nix process crashes; no write access is needed for
-    read-only operations; no more running out of Berkeley DB locks on
-    certain operations.</p><p>You still need to compile Nix with Berkeley DB support if
-    you want Nix to automatically convert your old Nix store to the
-    new schema.  If you don’t need this, you can build Nix with the
-    <code class="filename">configure</code> option
-    <code class="option">--disable-old-db-compat</code>.</p><p>After the automatic conversion to the new schema, you can
-    delete the old Berkeley DB files:
-
-    </p><pre class="screen">
-$ cd /nix/var/nix/db
-$ rm __db* log.* derivers references referrers reserved validpaths DB_CONFIG</pre><p>
-
-    The new metadata is stored in the directories
-    <code class="filename">/nix/var/nix/db/info</code> and
-    <code class="filename">/nix/var/nix/db/referrer</code>.  Though the
-    metadata is stored in human-readable plain-text files, they are
-    not intended to be human-editable, as Nix is rather strict about
-    the format.</p><p>The new storage schema may or may not require less disk
-    space than the Berkeley DB environment, mostly depending on the
-    cluster size of your file system.  With 1 KiB clusters (which
-    seems to be the <code class="literal">ext3</code> default nowadays) it
-    usually takes up much less space.</p></li><li class="listitem"><p>There is a new substituter that copies paths
-  directly from other (remote) Nix stores mounted somewhere in the
-  filesystem.  For instance, you can speed up an installation by
-  mounting some remote Nix store that already has the packages in
-  question via NFS or <code class="literal">sshfs</code>.  The environment
-  variable <code class="envar">NIX_OTHER_STORES</code> specifies the locations of
-  the remote Nix directories,
-  e.g. <code class="literal">/mnt/remote-fs/nix</code>.</p></li><li class="listitem"><p>New <span class="command"><strong>nix-store</strong></span> operations
-  <code class="option">--dump-db</code> and <code class="option">--load-db</code> to dump
-  and reload the Nix database.</p></li><li class="listitem"><p>The garbage collector has a number of new options to
-  allow only some of the garbage to be deleted.  The option
-  <code class="option">--max-freed <em class="replaceable"><code>N</code></em></code> tells the
-  collector to stop after at least <em class="replaceable"><code>N</code></em> bytes
-  have been deleted.  The option <code class="option">--max-links
-  <em class="replaceable"><code>N</code></em></code> tells it to stop after the
-  link count on <code class="filename">/nix/store</code> has dropped below
-  <em class="replaceable"><code>N</code></em>.  This is useful for very large Nix
-  stores on filesystems with a 32000 subdirectories limit (like
-  <code class="literal">ext3</code>).  The option <code class="option">--use-atime</code>
-  causes store paths to be deleted in order of ascending last access
-  time.  This allows non-recently used stuff to be deleted.  The
-  option <code class="option">--max-atime <em class="replaceable"><code>time</code></em></code>
-  specifies an upper limit to the last accessed time of paths that may
-  be deleted.  For instance,
-
-    </p><pre class="screen">
-    $ nix-store --gc -v --max-atime $(date +%s -d "2 months ago")</pre><p>
-
-  deletes everything that hasn’t been accessed in two months.</p></li><li class="listitem"><p><span class="command"><strong>nix-env</strong></span> now uses optimistic
-  profile locking when performing an operation like installing or
-  upgrading, instead of setting an exclusive lock on the profile.
-  This allows multiple <span class="command"><strong>nix-env -i / -u / -e</strong></span>
-  operations on the same profile in parallel.  If a
-  <span class="command"><strong>nix-env</strong></span> operation sees at the end that the profile
-  was changed in the meantime by another process, it will just
-  restart.  This is generally cheap because the build results are
-  still in the Nix store.</p></li><li class="listitem"><p>The option <code class="option">--dry-run</code> is now
-  supported by <span class="command"><strong>nix-store -r</strong></span> and
-  <span class="command"><strong>nix-build</strong></span>.</p></li><li class="listitem"><p>The information previously shown by
-  <code class="option">--dry-run</code> (i.e., which derivations will be built
-  and which paths will be substituted) is now always shown by
-  <span class="command"><strong>nix-env</strong></span>, <span class="command"><strong>nix-store -r</strong></span> and
-  <span class="command"><strong>nix-build</strong></span>.  The total download size of
-  substitutable paths is now also shown.  For instance, a build will
-  show something like
-
-    </p><pre class="screen">
-the following derivations will be built:
-  /nix/store/129sbxnk5n466zg6r1qmq1xjv9zymyy7-activate-configuration.sh.drv
-  /nix/store/7mzy971rdm8l566ch8hgxaf89x7lr7ik-upstart-jobs.drv
-  ...
-the following paths will be downloaded/copied (30.02 MiB):
-  /nix/store/4m8pvgy2dcjgppf5b4cj5l6wyshjhalj-samba-3.2.4
-  /nix/store/7h1kwcj29ip8vk26rhmx6bfjraxp0g4l-libunwind-0.98.6
-  ...</pre><p>
-
-  </p></li><li class="listitem"><p>Language features:
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>@-patterns as in Haskell.  For instance, in a
-      function definition
-
-      </p><pre class="programlisting">f = args @ {x, y, z}: <em class="replaceable"><code>...</code></em>;</pre><p>
-
-      <code class="varname">args</code> refers to the argument as a whole, which
-      is further pattern-matched against the attribute set pattern
-      <code class="literal">{x, y, z}</code>.</p></li><li class="listitem"><p>“<code class="literal">...</code>” (ellipsis) patterns.
-      An attribute set pattern can now say <code class="literal">...</code>  at
-      the end of the attribute name list to specify that the function
-      takes <span class="emphasis"><em>at least</em></span> the listed attributes, while
-      ignoring additional attributes.  For instance,
-
-      </p><pre class="programlisting">{stdenv, fetchurl, fuse, ...}: <em class="replaceable"><code>...</code></em></pre><p>
-
-      defines a function that accepts any attribute set that includes
-      at least the three listed attributes.</p></li><li class="listitem"><p>New primops:
-      <code class="varname">builtins.parseDrvName</code> (split a package name
-      string like <code class="literal">"nix-0.12pre12876"</code> into its name
-      and version components, e.g. <code class="literal">"nix"</code> and
-      <code class="literal">"0.12pre12876"</code>),
-      <code class="varname">builtins.compareVersions</code> (compare two version
-      strings using the same algorithm that <span class="command"><strong>nix-env</strong></span>
-      uses), <code class="varname">builtins.length</code> (efficiently compute
-      the length of a list), <code class="varname">builtins.mul</code> (integer
-      multiplication), <code class="varname">builtins.div</code> (integer
-      division).
-      
-      </p></li></ul></div><p>
-
-  </p></li><li class="listitem"><p><span class="command"><strong>nix-prefetch-url</strong></span> now supports
-  <code class="literal">mirror://</code> URLs, provided that the environment
-  variable <code class="envar">NIXPKGS_ALL</code> points at a Nixpkgs
-  tree.</p></li><li class="listitem"><p>Removed the commands
-  <span class="command"><strong>nix-pack-closure</strong></span> and
-  <span class="command"><strong>nix-unpack-closure</strong></span>.   You can do almost the same
-  thing but much more efficiently by doing <code class="literal">nix-store --export
-  $(nix-store -qR <em class="replaceable"><code>paths</code></em>) &gt; closure</code> and
-  <code class="literal">nix-store --import &lt;
-  closure</code>.</p></li><li class="listitem"><p>Lots of bug fixes, including a big performance bug in
-  the handling of <code class="literal">with</code>-expressions.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ssec-relnotes-0.11"></a>D.21. Release 0.11 (2007-12-31)</h2></div></div></div><p>Nix 0.11 has many improvements over the previous stable release.
-The most important improvement is secure multi-user support.  It also
-features many usability enhancements and language extensions, many of
-them prompted by NixOS, the purely functional Linux distribution based
-on Nix.  Here is an (incomplete) list:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Secure multi-user support.  A single Nix store can
-  now be shared between multiple (possible untrusted) users.  This is
-  an important feature for NixOS, where it allows non-root users to
-  install software.  The old setuid method for sharing a store between
-  multiple users has been removed.  Details for setting up a
-  multi-user store can be found in the manual.</p></li><li class="listitem"><p>The new command <span class="command"><strong>nix-copy-closure</strong></span>
-  gives you an easy and efficient way to exchange software between
-  machines.  It copies the missing parts of the closure of a set of
-  store path to or from a remote machine via
-  <span class="command"><strong>ssh</strong></span>.</p></li><li class="listitem"><p>A new kind of string literal: strings between double
-  single-quotes (<code class="literal">''</code>) have indentation
-  “intelligently” removed.  This allows large strings (such as shell
-  scripts or configuration file fragments in NixOS) to cleanly follow
-  the indentation of the surrounding expression.  It also requires
-  much less escaping, since <code class="literal">''</code> is less common in
-  most languages than <code class="literal">"</code>.</p></li><li class="listitem"><p><span class="command"><strong>nix-env</strong></span> <code class="option">--set</code>
-  modifies the current generation of a profile so that it contains
-  exactly the specified derivation, and nothing else.  For example,
-  <code class="literal">nix-env -p /nix/var/nix/profiles/browser --set
-  firefox</code> lets the profile named
-  <code class="filename">browser</code> contain just Firefox.</p></li><li class="listitem"><p><span class="command"><strong>nix-env</strong></span> now maintains
-  meta-information about installed packages in profiles.  The
-  meta-information is the contents of the <code class="varname">meta</code>
-  attribute of derivations, such as <code class="varname">description</code> or
-  <code class="varname">homepage</code>.  The command <code class="literal">nix-env -q --xml
-  --meta</code> shows all meta-information.</p></li><li class="listitem"><p><span class="command"><strong>nix-env</strong></span> now uses the
-  <code class="varname">meta.priority</code> attribute of derivations to resolve
-  filename collisions between packages.  Lower priority values denote
-  a higher priority.  For instance, the GCC wrapper package and the
-  Binutils package in Nixpkgs both have a file
-  <code class="filename">bin/ld</code>, so previously if you tried to install
-  both you would get a collision.  Now, on the other hand, the GCC
-  wrapper declares a higher priority than Binutils, so the former’s
-  <code class="filename">bin/ld</code> is symlinked in the user
-  environment.</p></li><li class="listitem"><p><span class="command"><strong>nix-env -i / -u</strong></span>: instead of
-  breaking package ties by version, break them by priority and version
-  number.  That is, if there are multiple packages with the same name,
-  then pick the package with the highest priority, and only use the
-  version if there are multiple packages with the same
-  priority.</p><p>This makes it possible to mark specific versions/variant in
-  Nixpkgs more or less desirable than others.  A typical example would
-  be a beta version of some package (e.g.,
-  <code class="literal">gcc-4.2.0rc1</code>) which should not be installed even
-  though it is the highest version, except when it is explicitly
-  selected (e.g., <code class="literal">nix-env -i
-  gcc-4.2.0rc1</code>).</p></li><li class="listitem"><p><span class="command"><strong>nix-env --set-flag</strong></span> allows meta
-  attributes of installed packages to be modified.  There are several
-  attributes that can be usefully modified, because they affect the
-  behaviour of <span class="command"><strong>nix-env</strong></span> or the user environment
-  build script:
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p><code class="varname">meta.priority</code> can be changed
-      to resolve filename clashes (see above).</p></li><li class="listitem"><p><code class="varname">meta.keep</code> can be set to
-      <code class="literal">true</code> to prevent the package from being
-      upgraded or replaced.  Useful if you want to hang on to an older
-      version of a package.</p></li><li class="listitem"><p><code class="varname">meta.active</code> can be set to
-      <code class="literal">false</code> to “disable” the package.  That is, no
-      symlinks will be generated to the files of the package, but it
-      remains part of the profile (so it won’t be garbage-collected).
-      Set it back to <code class="literal">true</code> to re-enable the
-      package.</p></li></ul></div><p>
-
-  </p></li><li class="listitem"><p><span class="command"><strong>nix-env -q</strong></span> now has a flag
-  <code class="option">--prebuilt-only</code> (<code class="option">-b</code>) that causes
-  <span class="command"><strong>nix-env</strong></span> to show only those derivations whose
-  output is already in the Nix store or that can be substituted (i.e.,
-  downloaded from somewhere).  In other words, it shows the packages
-  that can be installed “quickly”, i.e., don’t need to be built from
-  source.  The <code class="option">-b</code> flag is also available in
-  <span class="command"><strong>nix-env -i</strong></span> and <span class="command"><strong>nix-env -u</strong></span> to
-  filter out derivations for which no pre-built binary is
-  available.</p></li><li class="listitem"><p>The new option <code class="option">--argstr</code> (in
-  <span class="command"><strong>nix-env</strong></span>, <span class="command"><strong>nix-instantiate</strong></span> and
-  <span class="command"><strong>nix-build</strong></span>) is like <code class="option">--arg</code>, except
-  that the value is a string.  For example, <code class="literal">--argstr system
-  i686-linux</code> is equivalent to <code class="literal">--arg system
-  \"i686-linux\"</code> (note that <code class="option">--argstr</code>
-  prevents annoying quoting around shell arguments).</p></li><li class="listitem"><p><span class="command"><strong>nix-store</strong></span> has a new operation
-  <code class="option">--read-log</code> (<code class="option">-l</code>)
-  <em class="parameter"><code>paths</code></em> that shows the build log of the given
-  paths.</p></li><li class="listitem"><p>Nix now uses Berkeley DB 4.5.  The database is
-  upgraded automatically, but you should be careful not to use old
-  versions of Nix that still use Berkeley DB 4.4.</p></li><li class="listitem"><p>The option <code class="option">--max-silent-time</code>
-  (corresponding to the configuration setting
-  <code class="literal">build-max-silent-time</code>) allows you to set a
-  timeout on builds — if a build produces no output on
-  <code class="literal">stdout</code> or <code class="literal">stderr</code> for the given
-  number of seconds, it is terminated.  This is useful for recovering
-  automatically from builds that are stuck in an infinite
-  loop.</p></li><li class="listitem"><p><span class="command"><strong>nix-channel</strong></span>: each subscribed
-  channel is its own attribute in the top-level expression generated
-  for the channel.  This allows disambiguation (e.g. <code class="literal">nix-env
-  -i -A nixpkgs_unstable.firefox</code>).</p></li><li class="listitem"><p>The substitutes table has been removed from the
-  database.  This makes operations such as <span class="command"><strong>nix-pull</strong></span>
-  and <span class="command"><strong>nix-channel --update</strong></span> much, much
-  faster.</p></li><li class="listitem"><p><span class="command"><strong>nix-pull</strong></span> now supports
-  bzip2-compressed manifests.  This speeds up
-  channels.</p></li><li class="listitem"><p><span class="command"><strong>nix-prefetch-url</strong></span> now has a
-  limited form of caching.  This is used by
-  <span class="command"><strong>nix-channel</strong></span> to prevent unnecessary downloads when
-  the channel hasn’t changed.</p></li><li class="listitem"><p><span class="command"><strong>nix-prefetch-url</strong></span> now by default
-  computes the SHA-256 hash of the file instead of the MD5 hash.  In
-  calls to <code class="function">fetchurl</code> you should pass the
-  <code class="literal">sha256</code> attribute instead of
-  <code class="literal">md5</code>.  You can pass either a hexadecimal or a
-  base-32 encoding of the hash.</p></li><li class="listitem"><p>Nix can now perform builds in an automatically
-  generated “chroot”.  This prevents a builder from accessing stuff
-  outside of the Nix store, and thus helps ensure purity.  This is an
-  experimental feature.</p></li><li class="listitem"><p>The new command <span class="command"><strong>nix-store
-  --optimise</strong></span> reduces Nix store disk space usage by finding
-  identical files in the store and hard-linking them to each other.
-  It typically reduces the size of the store by something like
-  25-35%.</p></li><li class="listitem"><p><code class="filename">~/.nix-defexpr</code> can now be a
-  directory, in which case the Nix expressions in that directory are
-  combined into an attribute set, with the file names used as the
-  names of the attributes.  The command <span class="command"><strong>nix-env
-  --import</strong></span> (which set the
-  <code class="filename">~/.nix-defexpr</code> symlink) is
-  removed.</p></li><li class="listitem"><p>Derivations can specify the new special attribute
-  <code class="varname">allowedReferences</code> to enforce that the references
-  in the output of a derivation are a subset of a declared set of
-  paths.  For example, if <code class="varname">allowedReferences</code> is an
-  empty list, then the output must not have any references.  This is
-  used in NixOS to check that generated files such as initial ramdisks
-  for booting Linux don’t have any dependencies.</p></li><li class="listitem"><p>The new attribute
-  <code class="varname">exportReferencesGraph</code> allows builders access to
-  the references graph of their inputs.  This is used in NixOS for
-  tasks such as generating ISO-9660 images that contain a Nix store
-  populated with the closure of certain paths.</p></li><li class="listitem"><p>Fixed-output derivations (like
-  <code class="function">fetchurl</code>) can define the attribute
-  <code class="varname">impureEnvVars</code> to allow external environment
-  variables to be passed to builders.  This is used in Nixpkgs to
-  support proxy configuration, among other things.</p></li><li class="listitem"><p>Several new built-in functions:
-  <code class="function">builtins.attrNames</code>,
-  <code class="function">builtins.filterSource</code>,
-  <code class="function">builtins.isAttrs</code>,
-  <code class="function">builtins.isFunction</code>,
-  <code class="function">builtins.listToAttrs</code>,
-  <code class="function">builtins.stringLength</code>,
-  <code class="function">builtins.sub</code>,
-  <code class="function">builtins.substring</code>,
-  <code class="function">throw</code>,
-  <code class="function">builtins.trace</code>,
-  <code class="function">builtins.readFile</code>.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch-relnotes-0.10.1"></a>D.22. Release 0.10.1 (2006-10-11)</h2></div></div></div><p>This release fixes two somewhat obscure bugs that occur when
-evaluating Nix expressions that are stored inside the Nix store
-(<code class="literal">NIX-67</code>).  These do not affect most users.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch-relnotes-0.10"></a>D.23. Release 0.10 (2006-10-06)</h2></div></div></div><div class="note"><h3 class="title">Note</h3><p>This version of Nix uses Berkeley DB 4.4 instead of 4.3.
-The database is upgraded automatically, but you should be careful not
-to use old versions of Nix that still use Berkeley DB 4.3.  In
-particular, if you use a Nix installed through Nix, you should run
-
-</p><pre class="screen">
-$ nix-store --clear-substitutes</pre><p>
-
-first.</p></div><div class="warning"><h3 class="title">Warning</h3><p>Also, the database schema has changed slighted to fix a
-performance issue (see below).  When you run any Nix 0.10 command for
-the first time, the database will be upgraded automatically.  This is
-irreversible.</p></div><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p><span class="command"><strong>nix-env</strong></span> usability improvements:
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>An option <code class="option">--compare-versions</code>
-      (or <code class="option">-c</code>) has been added to <span class="command"><strong>nix-env
-      --query</strong></span> to allow you to compare installed versions of
-      packages to available versions, or vice versa.  An easy way to
-      see if you are up to date with what’s in your subscribed
-      channels is <code class="literal">nix-env -qc \*</code>.</p></li><li class="listitem"><p><code class="literal">nix-env --query</code> now takes as
-      arguments a list of package names about which to show
-      information, just like <code class="option">--install</code>, etc.: for
-      example, <code class="literal">nix-env -q gcc</code>.  Note that to show
-      all derivations, you need to specify
-      <code class="literal">\*</code>.</p></li><li class="listitem"><p><code class="literal">nix-env -i
-      <em class="replaceable"><code>pkgname</code></em></code> will now install
-      the highest available version of
-      <em class="replaceable"><code>pkgname</code></em>, rather than installing all
-      available versions (which would probably give collisions)
-      (<code class="literal">NIX-31</code>).</p></li><li class="listitem"><p><code class="literal">nix-env (-i|-u) --dry-run</code> now
-      shows exactly which missing paths will be built or
-      substituted.</p></li><li class="listitem"><p><code class="literal">nix-env -qa --description</code>
-      shows human-readable descriptions of packages, provided that
-      they have a <code class="literal">meta.description</code> attribute (which
-      most packages in Nixpkgs don’t have yet).</p></li></ul></div><p>
-
-  </p></li><li class="listitem"><p>New language features:
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>Reference scanning (which happens after each
-      build) is much faster and takes a constant amount of
-      memory.</p></li><li class="listitem"><p>String interpolation.  Expressions like
-
-</p><pre class="programlisting">
-"--with-freetype2-library=" + freetype + "/lib"</pre><p>
-
-      can now be written as
-
-</p><pre class="programlisting">
-"--with-freetype2-library=${freetype}/lib"</pre><p>
-
-      You can write arbitrary expressions within
-      <code class="literal">${<em class="replaceable"><code>...</code></em>}</code>, not just
-      identifiers.</p></li><li class="listitem"><p>Multi-line string literals.</p></li><li class="listitem"><p>String concatenations can now involve
-      derivations, as in the example <code class="code">"--with-freetype2-library="
-      + freetype + "/lib"</code>.  This was not previously possible
-      because we need to register that a derivation that uses such a
-      string is dependent on <code class="literal">freetype</code>.  The
-      evaluator now properly propagates this information.
-      Consequently, the subpath operator (<code class="literal">~</code>) has
-      been deprecated.</p></li><li class="listitem"><p>Default values of function arguments can now
-      refer to other function arguments; that is, all arguments are in
-      scope in the default values
-      (<code class="literal">NIX-45</code>).</p></li><li class="listitem"><p>Lots of new built-in primitives, such as
-      functions for list manipulation and integer arithmetic.  See the
-      manual for a complete list.  All primops are now available in
-      the set <code class="varname">builtins</code>, allowing one to test for
-      the availability of primop in a backwards-compatible
-      way.</p></li><li class="listitem"><p>Real let-expressions: <code class="literal">let x = ...;
-      ... z = ...; in ...</code>.</p></li></ul></div><p>
-
-  </p></li><li class="listitem"><p>New commands <span class="command"><strong>nix-pack-closure</strong></span> and
-  <span class="command"><strong>nix-unpack-closure</strong></span> than can be used to easily
-  transfer a store path with all its dependencies to another machine.
-  Very convenient whenever you have some package on your machine and
-  you want to copy it somewhere else.</p></li><li class="listitem"><p>XML support:
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p><code class="literal">nix-env -q --xml</code> prints the
-      installed or available packages in an XML representation for
-      easy processing by other tools.</p></li><li class="listitem"><p><code class="literal">nix-instantiate --eval-only
-      --xml</code> prints an XML representation of the resulting
-      term.  (The new flag <code class="option">--strict</code> forces ‘deep’
-      evaluation of the result, i.e., list elements and attributes are
-      evaluated recursively.)</p></li><li class="listitem"><p>In Nix expressions, the primop
-      <code class="function">builtins.toXML</code> converts a term to an XML
-      representation.  This is primarily useful for passing structured
-      information to builders.</p></li></ul></div><p>
-
-  </p></li><li class="listitem"><p>You can now unambiguously specify which derivation to
-  build or install in <span class="command"><strong>nix-env</strong></span>,
-  <span class="command"><strong>nix-instantiate</strong></span> and <span class="command"><strong>nix-build</strong></span>
-  using the <code class="option">--attr</code> / <code class="option">-A</code> flags, which
-  takes an attribute name as argument.  (Unlike symbolic package names
-  such as <code class="literal">subversion-1.4.0</code>, attribute names in an
-  attribute set are unique.)  For instance, a quick way to perform a
-  test build of a package in Nixpkgs is <code class="literal">nix-build
-  pkgs/top-level/all-packages.nix -A
-  <em class="replaceable"><code>foo</code></em></code>.  <code class="literal">nix-env -q
-  --attr</code> shows the attribute names corresponding to each
-  derivation.</p></li><li class="listitem"><p>If the top-level Nix expression used by
-  <span class="command"><strong>nix-env</strong></span>, <span class="command"><strong>nix-instantiate</strong></span> or
-  <span class="command"><strong>nix-build</strong></span> evaluates to a function whose arguments
-  all have default values, the function will be called automatically.
-  Also, the new command-line switch <code class="option">--arg
-  <em class="replaceable"><code>name</code></em>
-  <em class="replaceable"><code>value</code></em></code> can be used to specify
-  function arguments on the command line.</p></li><li class="listitem"><p><code class="literal">nix-install-package --url
-  <em class="replaceable"><code>URL</code></em></code> allows a package to be
-  installed directly from the given URL.</p></li><li class="listitem"><p>Nix now works behind an HTTP proxy server; just set
-  the standard environment variables <code class="envar">http_proxy</code>,
-  <code class="envar">https_proxy</code>, <code class="envar">ftp_proxy</code> or
-  <code class="envar">all_proxy</code> appropriately.  Functions such as
-  <code class="function">fetchurl</code> in Nixpkgs also respect these
-  variables.</p></li><li class="listitem"><p><code class="literal">nix-build -o
-  <em class="replaceable"><code>symlink</code></em></code> allows the symlink to
-  the build result to be named something other than
-  <code class="literal">result</code>.</p></li><li class="listitem"><p>Platform support:
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>Support for 64-bit platforms, provided a <a class="link" href="http://bugzilla.sen.cwi.nl:8080/show_bug.cgi?id=606" target="_top">suitably
-      patched ATerm library</a> is used.  Also, files larger than 2
-      GiB are now supported.</p></li><li class="listitem"><p>Added support for Cygwin (Windows,
-      <code class="literal">i686-cygwin</code>), Mac OS X on Intel
-      (<code class="literal">i686-darwin</code>) and Linux on PowerPC
-      (<code class="literal">powerpc-linux</code>).</p></li><li class="listitem"><p>Users of SMP and multicore machines will
-      appreciate that the number of builds to be performed in parallel
-      can now be specified in the configuration file in the
-      <code class="literal">build-max-jobs</code> setting.</p></li></ul></div><p>
-
-  </p></li><li class="listitem"><p>Garbage collector improvements:
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>Open files (such as running programs) are now
-      used as roots of the garbage collector.  This prevents programs
-      that have been uninstalled from being garbage collected while
-      they are still running.  The script that detects these
-      additional runtime roots
-      (<code class="filename">find-runtime-roots.pl</code>) is inherently
-      system-specific, but it should work on Linux and on all
-      platforms that have the <span class="command"><strong>lsof</strong></span>
-      utility.</p></li><li class="listitem"><p><code class="literal">nix-store --gc</code>
-      (a.k.a. <span class="command"><strong>nix-collect-garbage</strong></span>) prints out the
-      number of bytes freed on standard output.  <code class="literal">nix-store
-      --gc --print-dead</code> shows how many bytes would be freed
-      by an actual garbage collection.</p></li><li class="listitem"><p><code class="literal">nix-collect-garbage -d</code>
-      removes all old generations of <span class="emphasis"><em>all</em></span> profiles
-      before calling the actual garbage collector (<code class="literal">nix-store
-      --gc</code>).  This is an easy way to get rid of all old
-      packages in the Nix store.</p></li><li class="listitem"><p><span class="command"><strong>nix-store</strong></span> now has an
-      operation <code class="option">--delete</code> to delete specific paths
-      from the Nix store.  It won’t delete reachable (non-garbage)
-      paths unless <code class="option">--ignore-liveness</code> is
-      specified.</p></li></ul></div><p>
-
-  </p></li><li class="listitem"><p>Berkeley DB 4.4’s process registry feature is used
-  to recover from crashed Nix processes.</p></li><li class="listitem"><p>A performance issue has been fixed with the
-  <code class="literal">referer</code> table, which stores the inverse of the
-  <code class="literal">references</code> table (i.e., it tells you what store
-  paths refer to a given path).  Maintaining this table could take a
-  quadratic amount of time, as well as a quadratic amount of Berkeley
-  DB log file space (in particular when running the garbage collector)
-  (<code class="literal">NIX-23</code>).</p></li><li class="listitem"><p>Nix now catches the <code class="literal">TERM</code> and
-  <code class="literal">HUP</code> signals in addition to the
-  <code class="literal">INT</code> signal.  So you can now do a <code class="literal">killall
-  nix-store</code> without triggering a database
-  recovery.</p></li><li class="listitem"><p><span class="command"><strong>bsdiff</strong></span> updated to version
-  4.3.</p></li><li class="listitem"><p>Substantial performance improvements in expression
-  evaluation and <code class="literal">nix-env -qa</code>, all thanks to <a class="link" href="http://valgrind.org/" target="_top">Valgrind</a>.  Memory use has
-  been reduced by a factor 8 or so.  Big speedup by memoisation of
-  path hashing.</p></li><li class="listitem"><p>Lots of bug fixes, notably:
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>Make sure that the garbage collector can run
-      successfully when the disk is full
-      (<code class="literal">NIX-18</code>).</p></li><li class="listitem"><p><span class="command"><strong>nix-env</strong></span> now locks the profile
-      to prevent races between concurrent <span class="command"><strong>nix-env</strong></span>
-      operations on the same profile
-      (<code class="literal">NIX-7</code>).</p></li><li class="listitem"><p>Removed misleading messages from
-      <code class="literal">nix-env -i</code> (e.g., <code class="literal">installing
-      `foo'</code> followed by <code class="literal">uninstalling
-      `foo'</code>) (<code class="literal">NIX-17</code>).</p></li></ul></div><p>
-
-  </p></li><li class="listitem"><p>Nix source distributions are a lot smaller now since
-  we no longer include a full copy of the Berkeley DB source
-  distribution (but only the bits we need).</p></li><li class="listitem"><p>Header files are now installed so that external
-  programs can use the Nix libraries.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch-relnotes-0.9.2"></a>D.24. Release 0.9.2 (2005-09-21)</h2></div></div></div><p>This bug fix release fixes two problems on Mac OS X:
-
-</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>If Nix was linked against statically linked versions
-  of the ATerm or Berkeley DB library, there would be dynamic link
-  errors at runtime.</p></li><li class="listitem"><p><span class="command"><strong>nix-pull</strong></span> and
-  <span class="command"><strong>nix-push</strong></span> intermittently failed due to race
-  conditions involving pipes and child processes with error messages
-  such as <code class="literal">open2: open(GLOB(0x180b2e4), &gt;&amp;=9) failed: Bad
-  file descriptor at /nix/bin/nix-pull line 77</code> (issue
-  <code class="literal">NIX-14</code>).</p></li></ul></div><p>
-
-</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch-relnotes-0.9.1"></a>D.25. Release 0.9.1 (2005-09-20)</h2></div></div></div><p>This bug fix release addresses a problem with the ATerm library
-when the <code class="option">--with-aterm</code> flag in
-<span class="command"><strong>configure</strong></span> was <span class="emphasis"><em>not</em></span> used.</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch-relnotes-0.9"></a>D.26. Release 0.9 (2005-09-16)</h2></div></div></div><p>NOTE: this version of Nix uses Berkeley DB 4.3 instead of 4.2.
-The database is upgraded automatically, but you should be careful not
-to use old versions of Nix that still use Berkeley DB 4.2.  In
-particular, if you use a Nix installed through Nix, you should run
-
-</p><pre class="screen">
-$ nix-store --clear-substitutes</pre><p>
-
-first.</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Unpacking of patch sequences is much faster now
-  since we no longer do redundant unpacking and repacking of
-  intermediate paths.</p></li><li class="listitem"><p>Nix now uses Berkeley DB 4.3.</p></li><li class="listitem"><p>The <code class="function">derivation</code> primitive is
-  lazier.  Attributes of dependent derivations can mutually refer to
-  each other (as long as there are no data dependencies on the
-  <code class="varname">outPath</code> and <code class="varname">drvPath</code> attributes
-  computed by <code class="function">derivation</code>).</p><p>For example, the expression <code class="literal">derivation
-  attrs</code> now evaluates to (essentially)
-
-  </p><pre class="programlisting">
-attrs // {
-  type = "derivation";
-  outPath = derivation! attrs;
-  drvPath = derivation! attrs;
-}</pre><p>
-
-  where <code class="function">derivation!</code> is a primop that does the
-  actual derivation instantiation (i.e., it does what
-  <code class="function">derivation</code> used to do).  The advantage is that
-  it allows commands such as <span class="command"><strong>nix-env -qa</strong></span> and
-  <span class="command"><strong>nix-env -i</strong></span> to be much faster since they no longer
-  need to instantiate all derivations, just the
-  <code class="varname">name</code> attribute.</p><p>Also, it allows derivations to cyclically reference each
-  other, for example,
-
-  </p><pre class="programlisting">
-webServer = derivation {
-  ...
-  hostName = "svn.cs.uu.nl";
-  services = [svnService];
-};
- 
-svnService = derivation {
-  ...
-  hostName = webServer.hostName;
-};</pre><p>
-
-  Previously, this would yield a black hole (infinite recursion).</p></li><li class="listitem"><p><span class="command"><strong>nix-build</strong></span> now defaults to using
-  <code class="filename">./default.nix</code> if no Nix expression is
-  specified.</p></li><li class="listitem"><p><span class="command"><strong>nix-instantiate</strong></span>, when applied to
-  a Nix expression that evaluates to a function, will call the
-  function automatically if all its arguments have
-  defaults.</p></li><li class="listitem"><p>Nix now uses libtool to build dynamic libraries.
-  This reduces the size of executables.</p></li><li class="listitem"><p>A new list concatenation operator
-  <code class="literal">++</code>.  For example, <code class="literal">[1 2 3] ++ [4 5
-  6]</code> evaluates to <code class="literal">[1 2 3 4 5
-  6]</code>.</p></li><li class="listitem"><p>Some currently undocumented primops to support
-  low-level build management using Nix (i.e., using Nix as a Make
-  replacement).  See the commit messages for <code class="literal">r3578</code>
-  and <code class="literal">r3580</code>.</p></li><li class="listitem"><p>Various bug fixes and performance
-  improvements.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch-relnotes-0.8.1"></a>D.27. Release 0.8.1 (2005-04-13)</h2></div></div></div><p>This is a bug fix release.</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Patch downloading was broken.</p></li><li class="listitem"><p>The garbage collector would not delete paths that
-  had references from invalid (but substitutable)
-  paths.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch-relnotes-0.8"></a>D.28. Release 0.8 (2005-04-11)</h2></div></div></div><p>NOTE: the hashing scheme in Nix 0.8 changed (as detailed below).
-As a result, <span class="command"><strong>nix-pull</strong></span> manifests and channels built
-for Nix 0.7 and below will now work anymore.  However, the Nix
-expression language has not changed, so you can still build from
-source.  Also, existing user environments continue to work.  Nix 0.8
-will automatically upgrade the database schema of previous
-installations when it is first run.</p><p>If you get the error message
-
-</p><pre class="screen">
-you have an old-style manifest `/nix/var/nix/manifests/[...]'; please
-delete it</pre><p>
-
-you should delete previously downloaded manifests:
-
-</p><pre class="screen">
-$ rm /nix/var/nix/manifests/*</pre><p>
-
-If <span class="command"><strong>nix-channel</strong></span> gives the error message
-
-</p><pre class="screen">
-manifest `http://catamaran.labs.cs.uu.nl/dist/nix/channels/[channel]/MANIFEST'
-is too old (i.e., for Nix &lt;= 0.7)</pre><p>
-
-then you should unsubscribe from the offending channel
-(<span class="command"><strong>nix-channel --remove
-<em class="replaceable"><code>URL</code></em></strong></span>; leave out
-<code class="literal">/MANIFEST</code>), and subscribe to the same URL, with
-<code class="literal">channels</code> replaced by <code class="literal">channels-v3</code>
-(e.g., <a class="link" href="http://catamaran.labs.cs.uu.nl/dist/nix/channels-v3/nixpkgs-unstable" target="_top">http://catamaran.labs.cs.uu.nl/dist/nix/channels-v3/nixpkgs-unstable</a>).</p><p>Nix 0.8 has the following improvements:
-
-</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>The cryptographic hashes used in store paths are now
-  160 bits long, but encoded in base-32 so that they are still only 32
-  characters long (e.g.,
-  <code class="filename">/nix/store/csw87wag8bqlqk7ipllbwypb14xainap-atk-1.9.0</code>).
-  (This is actually a 160 bit truncation of a SHA-256
-  hash.)</p></li><li class="listitem"><p>Big cleanups and simplifications of the basic store
-  semantics.  The notion of “closure store expressions” is gone (and
-  so is the notion of “successors”); the file system references of a
-  store path are now just stored in the database.</p><p>For instance, given any store path, you can query its closure:
-
-  </p><pre class="screen">
-$ nix-store -qR $(which firefox)
-... lots of paths ...</pre><p>
-
-  Also, Nix now remembers for each store path the derivation that
-  built it (the “deriver”):
-
-  </p><pre class="screen">
-$ nix-store -qR $(which firefox)
-/nix/store/4b0jx7vq80l9aqcnkszxhymsf1ffa5jd-firefox-1.0.1.drv</pre><p>
-
-  So to see the build-time dependencies, you can do
-
-  </p><pre class="screen">
-$ nix-store -qR $(nix-store -qd $(which firefox))</pre><p>
-
-  or, in a nicer format:
-
-  </p><pre class="screen">
-$ nix-store -q --tree $(nix-store -qd $(which firefox))</pre><p>
-
-  </p><p>File system references are also stored in reverse.  For
-  instance, you can query all paths that directly or indirectly use a
-  certain Glibc:
-
-  </p><pre class="screen">
-$ nix-store -q --referrers-closure \
-    /nix/store/8lz9yc6zgmc0vlqmn2ipcpkjlmbi51vv-glibc-2.3.4</pre><p>
-
-  </p></li><li class="listitem"><p>The concept of fixed-output derivations has been
-  formalised.  Previously, functions such as
-  <code class="function">fetchurl</code> in Nixpkgs used a hack (namely,
-  explicitly specifying a store path hash) to prevent changes to, say,
-  the URL of the file from propagating upwards through the dependency
-  graph, causing rebuilds of everything.  This can now be done cleanly
-  by specifying the <code class="varname">outputHash</code> and
-  <code class="varname">outputHashAlgo</code> attributes.  Nix itself checks
-  that the content of the output has the specified hash.  (This is
-  important for maintaining certain invariants necessary for future
-  work on secure shared stores.)</p></li><li class="listitem"><p>One-click installation :-) It is now possible to
-  install any top-level component in Nixpkgs directly, through the web
-  — see, e.g., <a class="link" href="http://catamaran.labs.cs.uu.nl/dist/nixpkgs-0.8/" target="_top">http://catamaran.labs.cs.uu.nl/dist/nixpkgs-0.8/</a>.
-  All you have to do is associate
-  <code class="filename">/nix/bin/nix-install-package</code> with the MIME type
-  <code class="literal">application/nix-package</code> (or the extension
-  <code class="filename">.nixpkg</code>), and clicking on a package link will
-  cause it to be installed, with all appropriate dependencies.  If you
-  just want to install some specific application, this is easier than
-  subscribing to a channel.</p></li><li class="listitem"><p><span class="command"><strong>nix-store -r
-  <em class="replaceable"><code>PATHS</code></em></strong></span> now builds all the
-  derivations PATHS in parallel.  Previously it did them sequentially
-  (though exploiting possible parallelism between subderivations).
-  This is nice for build farms.</p></li><li class="listitem"><p><span class="command"><strong>nix-channel</strong></span> has new operations
-  <code class="option">--list</code> and
-  <code class="option">--remove</code>.</p></li><li class="listitem"><p>New ways of installing components into user
-  environments:
-
-  </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>Copy from another user environment:
-
-    </p><pre class="screen">
-$ nix-env -i --from-profile .../other-profile firefox</pre><p>
-
-    </p></li><li class="listitem"><p>Install a store derivation directly (bypassing the
-    Nix expression language entirely):
-
-    </p><pre class="screen">
-$ nix-env -i /nix/store/z58v41v21xd3...-aterm-2.3.1.drv</pre><p>
-
-    (This is used to implement <span class="command"><strong>nix-install-package</strong></span>,
-    which is therefore immune to evolution in the Nix expression
-    language.)</p></li><li class="listitem"><p>Install an already built store path directly:
-
-    </p><pre class="screen">
-$ nix-env -i /nix/store/hsyj5pbn0d9i...-aterm-2.3.1</pre><p>
-
-    </p></li><li class="listitem"><p>Install the result of a Nix expression specified
-    as a command-line argument:
-
-    </p><pre class="screen">
-$ nix-env -f .../i686-linux.nix -i -E 'x: x.firefoxWrapper'</pre><p>
-
-    The difference with the normal installation mode is that
-    <code class="option">-E</code> does not use the <code class="varname">name</code>
-    attributes of derivations.  Therefore, this can be used to
-    disambiguate multiple derivations with the same
-    name.</p></li></ul></div></li><li class="listitem"><p>A hash of the contents of a store path is now stored
-  in the database after a successful build.  This allows you to check
-  whether store paths have been tampered with: <span class="command"><strong>nix-store
-  --verify --check-contents</strong></span>.</p></li><li class="listitem"><p>Implemented a concurrent garbage collector.  It is now
-    always safe to run the garbage collector, even if other Nix
-    operations are happening simultaneously.</p><p>However, there can still be GC races if you use
-    <span class="command"><strong>nix-instantiate</strong></span> and <span class="command"><strong>nix-store
-    --realise</strong></span> directly to build things.  To prevent races,
-    use the <code class="option">--add-root</code> flag of those commands.</p></li><li class="listitem"><p>The garbage collector now finally deletes paths in
-  the right order (i.e., topologically sorted under the “references”
-  relation), thus making it safe to interrupt the collector without
-  risking a store that violates the closure
-  invariant.</p></li><li class="listitem"><p>Likewise, the substitute mechanism now downloads
-  files in the right order, thus preserving the closure invariant at
-  all times.</p></li><li class="listitem"><p>The result of <span class="command"><strong>nix-build</strong></span> is now
-  registered as a root of the garbage collector.  If the
-  <code class="filename">./result</code> link is deleted, the GC root
-  disappears automatically.</p></li><li class="listitem"><p>The behaviour of the garbage collector can be changed
-    globally by setting options in
-    <code class="filename">/nix/etc/nix/nix.conf</code>.
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p><code class="literal">gc-keep-derivations</code> specifies
-      whether deriver links should be followed when searching for live
-      paths.</p></li><li class="listitem"><p><code class="literal">gc-keep-outputs</code> specifies
-      whether outputs of derivations should be followed when searching
-      for live paths.</p></li><li class="listitem"><p><code class="literal">env-keep-derivations</code>
-      specifies whether user environments should store the paths of
-      derivations when they are added (thus keeping the derivations
-      alive).</p></li></ul></div><p>
-
-  </p></li><li class="listitem"><p>New <span class="command"><strong>nix-env</strong></span> query flags
-  <code class="option">--drv-path</code> and
-  <code class="option">--out-path</code>.</p></li><li class="listitem"><p><span class="command"><strong>fetchurl</strong></span> allows SHA-1 and SHA-256
-  in addition to MD5.  Just specify the attribute
-  <code class="varname">sha1</code> or <code class="varname">sha256</code> instead of
-  <code class="varname">md5</code>.</p></li><li class="listitem"><p>Manual updates.</p></li></ul></div><p>
-
-</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch-relnotes-0.7"></a>D.29. Release 0.7 (2005-01-12)</h2></div></div></div><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Binary patching.  When upgrading components using
-  pre-built binaries (through nix-pull / nix-channel), Nix can
-  automatically download and apply binary patches to already installed
-  components instead of full downloads.  Patching is “smart”: if there
-  is a <span class="emphasis"><em>sequence</em></span> of patches to an installed
-  component, Nix will use it.  Patches are currently generated
-  automatically between Nixpkgs (pre-)releases.</p></li><li class="listitem"><p>Simplifications to the substitute
-  mechanism.</p></li><li class="listitem"><p>Nix-pull now stores downloaded manifests in
-  <code class="filename">/nix/var/nix/manifests</code>.</p></li><li class="listitem"><p>Metadata on files in the Nix store is canonicalised
-  after builds: the last-modified timestamp is set to 0 (00:00:00
-  1/1/1970), the mode is set to 0444 or 0555 (readable and possibly
-  executable by all; setuid/setgid bits are dropped), and the group is
-  set to the default.  This ensures that the result of a build and an
-  installation through a substitute is the same; and that timestamp
-  dependencies are revealed.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch-relnotes-0.6"></a>D.30. Release 0.6 (2004-11-14)</h2></div></div></div><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>Rewrite of the normalisation engine.
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>Multiple builds can now be performed in parallel
-      (option <code class="option">-j</code>).</p></li><li class="listitem"><p>Distributed builds.  Nix can now call a shell
-      script to forward builds to Nix installations on remote
-      machines, which may or may not be of the same platform
-      type.</p></li><li class="listitem"><p>Option <code class="option">--fallback</code> allows
-      recovery from broken substitutes.</p></li><li class="listitem"><p>Option <code class="option">--keep-going</code> causes
-      building of other (unaffected) derivations to continue if one
-      failed.</p></li></ul></div><p>
-
-    </p></li><li class="listitem"><p>Improvements to the garbage collector (i.e., it
-  should actually work now).</p></li><li class="listitem"><p>Setuid Nix installations allow a Nix store to be
-  shared among multiple users.</p></li><li class="listitem"><p>Substitute registration is much faster
-  now.</p></li><li class="listitem"><p>A utility <span class="command"><strong>nix-build</strong></span> to build a
-  Nix expression and create a symlink to the result int the current
-  directory; useful for testing Nix derivations.</p></li><li class="listitem"><p>Manual updates.</p></li><li class="listitem"><p><span class="command"><strong>nix-env</strong></span> changes:
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>Derivations for other platforms are filtered out
-      (which can be overridden using
-      <code class="option">--system-filter</code>).</p></li><li class="listitem"><p><code class="option">--install</code> by default now
-      uninstall previous derivations with the same
-      name.</p></li><li class="listitem"><p><code class="option">--upgrade</code> allows upgrading to a
-      specific version.</p></li><li class="listitem"><p>New operation
-      <code class="option">--delete-generations</code> to remove profile
-      generations (necessary for effective garbage
-      collection).</p></li><li class="listitem"><p>Nicer output (sorted,
-      columnised).</p></li></ul></div><p>
-
-    </p></li><li class="listitem"><p>More sensible verbosity levels all around (builder
-  output is now shown always, unless <code class="option">-Q</code> is
-  given).</p></li><li class="listitem"><p>Nix expression language changes:
-
-    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: circle; "><li class="listitem"><p>New language construct: <code class="literal">with
-      <em class="replaceable"><code>E1</code></em>;
-      <em class="replaceable"><code>E2</code></em></code> brings all attributes
-      defined in the attribute set <em class="replaceable"><code>E1</code></em> in
-      scope in <em class="replaceable"><code>E2</code></em>.</p></li><li class="listitem"><p>Added a <code class="function">map</code>
-      function.</p></li><li class="listitem"><p>Various new operators (e.g., string
-      concatenation).</p></li></ul></div><p>
-
-    </p></li><li class="listitem"><p>Expression evaluation is much
-  faster.</p></li><li class="listitem"><p>An Emacs mode for editing Nix expressions (with
-  syntax highlighting and indentation) has been
-  added.</p></li><li class="listitem"><p>Many bug fixes.</p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="ch-relnotes-0.5"></a>D.31. Release 0.5 and earlier</h2></div></div></div><p>Please refer to the Subversion commit log messages.</p></div></div></div></body></html>
\ No newline at end of file
--- nix-1.11.15.orig/doc/manual/manual.xmli
+++ /dev/null
@@ -1,17554 +0,0 @@
-<?xml version="1.0"?>
-<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0">
-
-  <info>
-    <title>Nix Package Manager Guide</title>
-    <subtitle>Version 1.11.15</subtitle>
-
-    <author>
-      <personname>
-        <firstname>Eelco</firstname>
-        <surname>Dolstra</surname>
-      </personname>
-      <affiliation>
-        <orgname>LogicBlox</orgname>
-      </affiliation>
-      <contrib>Author</contrib>
-    </author>
-
-    <copyright>
-      <year>2004-2014</year>
-      <holder>Eelco Dolstra</holder>
-    </copyright>
-
-    <date>November 2014</date>
-
-  </info>
-
-  <!--
-  <preface>
-    <title>Preface</title>
-    <para>This manual describes how to set up and use the Nix package
-    manager.</para>
-  </preface>
-  -->
-
-  <part xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="chap-introduction" xml:base="introduction/introduction.xml">
-
-<title>Introduction</title>
-
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-about-nix">
-
-<title>About Nix</title>
-
-<para>Nix is a <emphasis>purely functional package manager</emphasis>.
-This means that it treats packages like values in purely functional
-programming languages such as Haskell &#x2014; they are built by functions
-that don&#x2019;t have side-effects, and they never change after they have
-been built.  Nix stores packages in the <emphasis>Nix
-store</emphasis>, usually the directory
-<filename>/nix/store</filename>, where each package has its own unique
-subdirectory such as
-
-<programlisting>
-/nix/store/b6gvzjyb2pg0kjfwrjmg1vfhh54ad73z-firefox-33.1/
-</programlisting>
-
-where <literal>b6gvzjyb2pg0&#x2026;</literal> is a unique identifier for the
-package that captures all its dependencies (it&#x2019;s a cryptographic hash
-of the package&#x2019;s build dependency graph).  This enables many powerful
-features.</para>
-
-
-<simplesect><title>Multiple versions</title>
-
-<para>You can have multiple versions or variants of a package
-installed at the same time.  This is especially important when
-different applications have dependencies on different versions of the
-same package &#x2014; it prevents the &#x201C;DLL hell&#x201D;.  Because of the hashing
-scheme, different versions of a package end up in different paths in
-the Nix store, so they don&#x2019;t interfere with each other.</para>
-
-<para>An important consequence is that operations like upgrading or
-uninstalling an application cannot break other applications, since
-these operations never &#x201C;destructively&#x201D; update or delete files that are
-used by other packages.</para>
-
-</simplesect>
-
-
-<simplesect><title>Complete dependencies</title>
-
-<para>Nix helps you make sure that package dependency specifications
-are complete.  In general, when you&#x2019;re making a package for a package
-management system like RPM, you have to specify for each package what
-its dependencies are, but there are no guarantees that this
-specification is complete.  If you forget a dependency, then the
-package will build and work correctly on <emphasis>your</emphasis>
-machine if you have the dependency installed, but not on the end
-user's machine if it's not there.</para>
-
-<para>Since Nix on the other hand doesn&#x2019;t install packages in &#x201C;global&#x201D;
-locations like <filename>/usr/bin</filename> but in package-specific
-directories, the risk of incomplete dependencies is greatly reduced.
-This is because tools such as compilers don&#x2019;t search in per-packages
-directories such as
-<filename>/nix/store/5lbfaxb722zp&#x2026;-openssl-0.9.8d/include</filename>,
-so if a package builds correctly on your system, this is because you
-specified the dependency explicitly.</para>
-
-<para>Runtime dependencies are found by scanning binaries for the hash
-parts of Nix store paths (such as <literal>r8vvq9kq&#x2026;</literal>).  This
-sounds risky, but it works extremely well.</para>
-
-</simplesect>
-
-
-<simplesect><title>Multi-user support</title>
-
-<para>Nix has multi-user support.  This means that non-privileged
-users can securely install software.  Each user can have a different
-<emphasis>profile</emphasis>, a set of packages in the Nix store that
-appear in the user&#x2019;s <envar>PATH</envar>.  If a user installs a
-package that another user has already installed previously, the
-package won&#x2019;t be built or downloaded a second time.  At the same time,
-it is not possible for one user to inject a Trojan horse into a
-package that might be used by another user.</para>
-
-</simplesect>
-
-
-<simplesect><title>Atomic upgrades and rollbacks</title>
-
-<para>Since package management operations never overwrite packages in
-the Nix store but just add new versions in different paths, they are
-<emphasis>atomic</emphasis>.  So during a package upgrade, there is no
-time window in which the package has some files from the old version
-and some files from the new version &#x2014; which would be bad because a
-program might well crash if it&#x2019;s started during that period.</para>
-
-<para>And since package aren&#x2019;t overwritten, the old versions are still
-there after an upgrade.  This means that you can <emphasis>roll
-back</emphasis> to the old version:</para>
-
-<screen>
-$ nix-env --upgrade <replaceable>some-packages</replaceable>
-$ nix-env --rollback
-</screen>
-
-</simplesect>
-
-
-<simplesect><title>Garbage collection</title>
-
-<para>When you uninstall a package like this&#x2026;
-
-<screen>
-$ nix-env --uninstall firefox
-</screen>
-
-the package isn&#x2019;t deleted from the system right away (after all, you
-might want to do a rollback, or it might be in the profiles of other
-users).  Instead, unused packages can be deleted safely by running the
-<emphasis>garbage collector</emphasis>:
-
-<screen>
-$ nix-collect-garbage
-</screen>
-
-This deletes all packages that aren&#x2019;t in use by any user profile or by
-a currently running program.</para>
-
-</simplesect>
-
-
-<simplesect><title>Functional package language</title>
-
-<para>Packages are built from <emphasis>Nix expressions</emphasis>,
-which is a simple functional language.  A Nix expression describes
-everything that goes into a package build action (a &#x201C;derivation&#x201D;):
-other packages, sources, the build script, environment variables for
-the build script, etc.  Nix tries very hard to ensure that Nix
-expressions are <emphasis>deterministic</emphasis>: building a Nix
-expression twice should yield the same result.</para>
-
-<para>Because it&#x2019;s a functional language, it&#x2019;s easy to support
-building variants of a package: turn the Nix expression into a
-function and call it any number of times with the appropriate
-arguments.  Due to the hashing scheme, variants don&#x2019;t conflict with
-each other in the Nix store.</para>
-
-</simplesect>
-
-
-<simplesect><title>Transparent source/binary deployment</title>
-
-<para>Nix expressions generally describe how to build a package from
-source, so an installation action like
-
-<screen>
-$ nix-env --install firefox
-</screen>
-
-<emphasis>could</emphasis> cause quite a bit of build activity, as not
-only Firefox but also all its dependencies (all the way up to the C
-library and the compiler) would have to built, at least if they are
-not already in the Nix store.  This is a <emphasis>source deployment
-model</emphasis>.  For most users, building from source is not very
-pleasant as it takes far too long.  However, Nix can automatically
-skip building from source and instead use a <emphasis>binary
-cache</emphasis>, a web server that provides pre-built binaries. For
-instance, when asked to build
-<literal>/nix/store/b6gvzjyb2pg0&#x2026;-firefox-33.1</literal> from source,
-Nix would first check if the file
-<uri>https://cache.nixos.org/b6gvzjyb2pg0&#x2026;.narinfo</uri> exists, and
-if so, fetch the pre-built binary referenced from there; otherwise, it
-would fall back to building from source.</para>
-
-</simplesect>
-
-
-<!--
-<simplesect><title>Binary patching</title>
-
-<para>In addition to downloading binaries automatically if they’re
-available, Nix can download binary deltas that patch an existing
-package in the Nix store into a new version.  This speeds up
-upgrades.</para>
-
-</simplesect>
--->
-
-
-<simplesect><title>Nix Packages collection</title>
-
-<para>We provide a large set of Nix expressions containing hundreds of
-existing Unix packages, the <emphasis>Nix Packages
-collection</emphasis> (Nixpkgs).</para>
-
-</simplesect>
-
-
-<simplesect><title>Managing build environments</title>
-
-<para>Nix is extremely useful for developers as it makes it easy to
-automatically set up the build environment for a package. Given a
-Nix expression that describes the dependencies of your package, the
-command <command>nix-shell</command> will build or download those
-dependencies if they&#x2019;re not already in your Nix store, and then start
-a Bash shell in which all necessary environment variables (such as
-compiler search paths) are set.</para>
-
-<para>For example, the following command gets all dependencies of the
-Pan newsreader, as described by <link xlink:href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/networking/newsreaders/pan/default.nix">its
-Nix expression</link>:</para>
-
-<screen>
-$ nix-shell '&lt;nixpkgs&gt;' -A pan
-</screen>
-
-<para>You&#x2019;re then dropped into a shell where you can edit, build and test
-the package:</para>
-
-<screen>
-[nix-shell]$ tar xf $src
-[nix-shell]$ cd pan-*
-[nix-shell]$ ./configure
-[nix-shell]$ make
-[nix-shell]$ ./pan/gui/pan
-</screen>
-
-<!--
-<para>Since Nix packages are reproducible and have complete dependency
-specifications, Nix makes an excellent basis for <a
-href="[%root%]hydra">a continuous build system</a>.</para>
--->
-
-</simplesect>
-
-
-<simplesect><title>Portability</title>
-
-<para>Nix runs on Linux and Mac OS X.</para>
-
-</simplesect>
-
-
-<simplesect><title>NixOS</title>
-
-<para>NixOS is a Linux distribution based on Nix.  It uses Nix not
-just for package management but also to manage the system
-configuration (e.g., to build configuration files in
-<filename>/etc</filename>).  This means, among other things, that it
-is easy to roll back the entire configuration of the system to an
-earlier state.  Also, users can install software without root
-privileges.  For more information and downloads, see the <link xlink:href="http://nixos.org/">NixOS homepage</link>.</para>
-
-</simplesect>
-
-
-<simplesect><title>License</title>
-
-<para>Nix is released under the terms of the <link xlink:href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html">GNU
-LGPLv2.1 or (at your option) any later version</link>.</para>
-
-</simplesect>
-
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="chap-quick-start">
-
-<title>Quick Start</title>
-
-<para>This chapter is for impatient people who don't like reading
-documentation.  For more in-depth information you are kindly referred
-to subsequent chapters.</para>
-
-<procedure>
-
-<step><para>Install single-user Nix by running the following:
-
-<screen>
-$ curl https://nixos.org/nix/install | sh
-</screen>
-
-This will install Nix in <filename>/nix</filename>. The install script
-will create <filename>/nix</filename> using <command>sudo</command>,
-so make sure you have sufficient rights.  (For other installation
-methods, see <xref linkend="chap-installation"/>.)</para></step>
-
-<step><para>See what installable packages are currently available
-in the channel:
-
-<screen>
-$ nix-env -qa
-docbook-xml-4.3
-docbook-xml-4.5
-firefox-33.0.2
-hello-2.9
-libxslt-1.1.28
-<replaceable>...</replaceable></screen>
-
-</para></step>
-
-<step><para>Install some packages from the channel:
-
-<screen>
-$ nix-env -i hello <replaceable>...</replaceable> </screen>
-
-This should download pre-built packages; it should not build them
-locally (if it does, something went wrong).</para></step>
-
-<step><para>Test that they work:
-
-<screen>
-$ which hello
-/home/eelco/.nix-profile/bin/hello
-$ hello
-Hello, world!
-</screen>
-
-</para></step>
-
-<step><para>Uninstall a package:
-
-<screen>
-$ nix-env -e hello</screen>
-
-</para></step>
-
-<step><para>You can also test a package without installing it:
-
-<screen>
-$ nix-shell -p hello
-</screen>
-
-This builds or downloads GNU Hello and its dependencies, then drops
-you into a Bash shell where the <command>hello</command> command is
-present, all without affecting your normal environment:
-
-<screen>
-[nix-shell:~]$ hello
-Hello, world!
-
-[nix-shell:~]$ exit
-
-$ hello
-hello: command not found
-</screen>
-
-</para></step>
-
-<step><para>To keep up-to-date with the channel, do:
-
-<screen>
-$ nix-channel --update nixpkgs
-$ nix-env -u '*'</screen>
-
-The latter command will upgrade each installed package for which there
-is a &#x201C;newer&#x201D; version (as determined by comparing the version
-numbers).</para></step>
-
-<!--
-<step><para>You can also install specific packages directly from
-your web browser.  For instance, you can go to <link
-xlink:href="http://hydra.nixos.org/jobset/nixpkgs/trunk/channel/latest"
-/> and click on any link for the individual packages for your
-platform.  Associate <literal>application/nix-package</literal> with
-the program <command>nix-install-package</command>.  A window should
-appear asking you whether it’s okay to install the package.  Say
-<literal>Y</literal>.  The package and all its dependencies will be
-installed.</para></step>
--->
-
-<step><para>If you're unhappy with the result of a
-<command>nix-env</command> action (e.g., an upgraded package turned
-out not to work properly), you can go back:
-
-<screen>
-$ nix-env --rollback</screen>
-
-</para></step>
-
-<step><para>You should periodically run the Nix garbage collector
-to get rid of unused packages, since uninstalls or upgrades don't
-actually delete them:
-
-<screen>
-$ nix-collect-garbage -d</screen>
-
-<!--
-The first command deletes old “generations” of your profile (making
-rollbacks impossible, but also making the packages in those old
-generations available for garbage collection), while the second
-command actually deletes them.-->
-
-</para></step>
-
-</procedure>
-
-</chapter>
-
-</part>
-  <part xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="chap-installation" xml:base="installation/installation.xml">
-
-<title>Installation</title>
-
-<partintro>
-<para>This section describes how to install and configure Nix for first-time use.</para>
-</partintro>
-
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-supported-platforms">
-
-<title>Supported Platforms</title>
-
-<para>Nix is currently supported on the following platforms:
-
-<itemizedlist>
-
-  <listitem><para>Linux (i686, x86_64).</para></listitem>
-
-  <listitem><para>Mac OS X (x86_64).</para></listitem>
-
-  <!--
-  <listitem><para>FreeBSD (only tested on Intel).</para></listitem>
-  -->
-
-  <!--
-  <listitem><para>Windows through <link
-  xlink:href="http://www.cygwin.com/">Cygwin</link>.</para>
-
-  <warning><para>On Cygwin, Nix <emphasis>must</emphasis> be installed
-  on an NTFS partition.  It will not work correctly on a FAT
-  partition.</para></warning>
-
-  </listitem>
-  -->
-
-</itemizedlist>
-
-</para>
-
-<para>Nix is fairly portable, so it should work on most platforms that
-support POSIX threads and have a C++11 compiler.</para>
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-installing-binary">
-
-<title>Installing a Binary Distribution</title>
-
-<para>If you are using Linux or Mac OS X, the easiest way to install
-Nix is to run the following command:
-
-<screen>
-$ bash &lt;(curl https://nixos.org/nix/install)
-</screen>
-
-This will perform a single-user installation of Nix, meaning that
-<filename>/nix</filename> is owned by the invoking user.  You should
-run this under your usual user account, <emphasis>not</emphasis> as
-root.  The script will invoke <command>sudo</command> to create
-<filename>/nix</filename> if it doesn&#x2019;t already exist.  If you don&#x2019;t
-have <command>sudo</command>, you should manually create
-<command>/nix</command> first as root, e.g.:
-
-<screen>
-$ mkdir /nix
-$ chown alice /nix
-</screen>
-
-</para>
-
-<!--
-<para>You can also manually download and install a binary package.
-Binary packages of the latest stable release are available for Fedora,
-Debian, Ubuntu, Mac OS X and various other systems from the <link
-xlink:href="http://nixos.org/nix/download.html">Nix homepage</link>.
-You can also get builds of the latest development release from our
-<link
-xlink:href="http://hydra.nixos.org/job/nix/master/release/latest-finished#tabs-constituents">continuous
-build system</link>.</para>
-
-<para>For Fedora, RPM packages are available.  These can be installed
-or upgraded using <command>rpm -U</command>.  For example,
-
-<screen>
-$ rpm -U nix-1.8-1.i386.rpm</screen>
-
-</para>
-
-<para>For Debian and Ubuntu, you can download a Deb package and
-install it like this:
-
-<screen>
-$ dpkg -i nix_1.8-1_amd64.deb</screen>
-
-</para>
-
-<para>You can also download a binary tarball that contains Nix and all
-its dependencies.  (This is what the install script at
-<uri>https://nixos.org/nix/install</uri> does automatically.)  You
-should unpack it somewhere (e.g. in <filename>/tmp</filename>), and
-then run the script named <command>install</command> inside the binary
-tarball:
-
-<screen>
-alice$ cd /tmp
-alice$ tar xfj nix-1.8-x86_64-darwin.tar.bz2
-alice$ cd nix-1.8-x86_64-darwin
-alice$ ./install
-</screen>
-
-</para>
-
-<para>Nix can be uninstalled using <command>rpm -e nix</command> or
-<command>dpkg -r nix</command> on RPM- and Dpkg-based systems,
-respectively.  After this you should manually remove the Nix store and
-other auxiliary data, if desired:
-
-<screen>
-$ rm -rf /nix</screen>
-
-</para>
--->
-
-<para>You can uninstall Nix simply by running:
-
-<screen>
-$ rm -rf /nix
-</screen>
-
-</para>
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-installing-source">
-
-<title>Installing Nix from Source</title>
-
-<para>If no binary package is available, you can download and compile
-a source distribution.</para>
-
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-prerequisites-source">
-
-<title>Prerequisites</title>
-
-<itemizedlist>
-
-  <listitem><para>GNU Make.</para></listitem>
-
-  <listitem><para>A version of GCC or Clang that supports C++11.</para></listitem>
-
-  <listitem><para>Perl 5.8 or higher.</para></listitem>
-
-  <listitem><para><command>pkg-config</command> to locate
-  dependencies.  If your distribution does not provide it, you can get
-  it from <link xlink:href="http://www.freedesktop.org/wiki/Software/pkg-config"/>.</para></listitem>
-
-  <listitem><para>The bzip2 compressor program and the
-  <literal>libbz2</literal> library.  Thus you must have bzip2
-  installed, including development headers and libraries.  If your
-  distribution does not provide these, you can obtain bzip2 from <link xlink:href="http://www.bzip.org/"/>.</para></listitem>
-
-  <listitem><para>The SQLite embedded database library, version 3.6.19
-  or higher.  If your distribution does not provide it, please install
-  it from <link xlink:href="http://www.sqlite.org/"/>.</para></listitem>
-
-  <listitem><para>The Perl DBI, DBD::SQLite, and WWW::Curl libraries, which are
-  available from <link xlink:href="http://search.cpan.org/">CPAN</link> if your
-  distribution does not provide them.</para></listitem>
-
-  <listitem><para>The <link xlink:href="http://www.hboehm.info/gc/">Boehm
-  garbage collector</link> to reduce the evaluator&#x2019;s memory
-  consumption (optional).  To enable it, install
-  <literal>pkgconfig</literal> and the Boehm garbage collector, and
-  pass the flag <option>--enable-gc</option> to
-  <command>configure</command>.</para></listitem>
-
-  <listitem><para>The <command>xmllint</command> and
-  <command>xsltproc</command> programs to build this manual and the
-  man-pages.  These are part of the <literal>libxml2</literal> and
-  <literal>libxslt</literal> packages, respectively.  You also need
-  the <link xlink:href="http://docbook.sourceforge.net/projects/xsl/">DocBook
-  XSL stylesheets</link> and optionally the <link xlink:href="http://www.docbook.org/schemas/5x"> DocBook 5.0 RELAX NG
-  schemas</link>.  Note that these are only required if you modify the
-  manual sources or when you are building from the Git
-  repository.</para></listitem>
-
-  <listitem><para>Recent versions of Bison and Flex to build the
-  parser.  (This is because Nix needs GLR support in Bison and
-  reentrancy support in Flex.)  For Bison, you need version 2.6, which
-  can be obtained from the <link xlink:href="ftp://alpha.gnu.org/pub/gnu/bison">GNU FTP
-  server</link>.  For Flex, you need version 2.5.35, which is
-  available on <link xlink:href="http://lex.sourceforge.net/">SourceForge</link>.
-  Slightly older versions may also work, but ancient versions like the
-  ubiquitous 2.5.4a won't.  Note that these are only required if you
-  modify the parser or when you are building from the Git
-  repository.</para></listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-obtaining-source">
-
-<title>Obtaining a Source Distribution</title>
-
-<para>The source tarball of the most recent stable release can be
-downloaded from the <link xlink:href="http://nixos.org/nix/download.html">Nix homepage</link>.
-You can also grab the <link xlink:href="http://hydra.nixos.org/job/nix/master/release/latest-finished#tabs-constituents">most
-recent development release</link>.</para>
-
-<para>Alternatively, the most recent sources of Nix can be obtained
-from its <link xlink:href="https://github.com/NixOS/nix">Git
-repository</link>.  For example, the following command will check out
-the latest revision into a directory called
-<filename>nix</filename>:</para>
-
-<screen>
-$ git clone https://github.com/NixOS/nix</screen>
-
-<para>Likewise, specific releases can be obtained from the <link xlink:href="https://github.com/NixOS/nix/tags">tags</link> of the
-repository.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-building-source">
-
-<title>Building Nix from Source</title>
-
-<para>After unpacking or checking out the Nix sources, issue the
-following commands:
-
-<screen>
-$ ./configure <replaceable>options...</replaceable>
-$ make
-$ make install</screen>
-
-Nix requires GNU Make so you may need to invoke
-<command>gmake</command> instead.</para>
-
-<para>When building from the Git repository, these should be preceded
-by the command:
-
-<screen>
-$ ./bootstrap.sh</screen>
-
-</para>
-
-<para>The installation path can be specified by passing the
-<option>--prefix=<replaceable>prefix</replaceable></option> to
-<command>configure</command>.  The default installation directory is
-<filename>/usr/local</filename>.  You can change this to any location
-you like.  You must have write permission to the
-<replaceable>prefix</replaceable> path.</para>
-
-<para>Nix keeps its <emphasis>store</emphasis> (the place where
-packages are stored) in <filename>/nix/store</filename> by default.
-This can be changed using
-<option>--with-store-dir=<replaceable>path</replaceable></option>.</para>
-
-<warning><para>It is best <emphasis>not</emphasis> to change the Nix
-store from its default, since doing so makes it impossible to use
-pre-built binaries from the standard Nixpkgs channels &#x2014; that is, all
-packages will need to be built from source.</para></warning>
-
-<para>Nix keeps state (such as its database and log files) in
-<filename>/nix/var</filename> by default.  This can be changed using
-<option>--localstatedir=<replaceable>path</replaceable></option>.</para>
-
-</section>
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-nix-security">
-
-<title>Security</title>
-
-<para>Nix has two basic security models.  First, it can be used in
-&#x201C;single-user mode&#x201D;, which is similar to what most other package
-management tools do: there is a single user (typically <systemitem class="username">root</systemitem>) who performs all package
-management operations.  All other users can then use the installed
-packages, but they cannot perform package management operations
-themselves.</para>
-
-<para>Alternatively, you can configure Nix in &#x201C;multi-user mode&#x201D;.  In
-this model, all users can perform package management operations &#x2014; for
-instance, every user can install software without requiring root
-privileges.  Nix ensures that this is secure.  For instance, it&#x2019;s not
-possible for one user to overwrite a package used by another user with
-a Trojan horse.</para>
-
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-single-user">
-
-<title>Single-User Mode</title>
-
-<para>In single-user mode, all Nix operations that access the database
-in <filename><replaceable>prefix</replaceable>/var/nix/db</filename>
-or modify the Nix store in
-<filename><replaceable>prefix</replaceable>/store</filename> must be
-performed under the user ID that owns those directories.  This is
-typically <systemitem class="username">root</systemitem>.  (If you
-install from RPM packages, that&#x2019;s in fact the default ownership.)
-However, on single-user machines, it is often convenient to
-<command>chown</command> those directories to your normal user account
-so that you don&#x2019;t have to <command>su</command> to <systemitem class="username">root</systemitem> all the time.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-multi-user">
-
-<title>Multi-User Mode</title>
-
-<para>To allow a Nix store to be shared safely among multiple users,
-it is important that users are not able to run builders that modify
-the Nix store or database in arbitrary ways, or that interfere with
-builds started by other users.  If they could do so, they could
-install a Trojan horse in some package and compromise the accounts of
-other users.</para>
-
-<para>To prevent this, the Nix store and database are owned by some
-privileged user (usually <literal>root</literal>) and builders are
-executed under special user accounts (usually named
-<literal>nixbld1</literal>, <literal>nixbld2</literal>, etc.).  When a
-unprivileged user runs a Nix command, actions that operate on the Nix
-store (such as builds) are forwarded to a <emphasis>Nix
-daemon</emphasis> running under the owner of the Nix store/database
-that performs the operation.</para>
-
-<note><para>Multi-user mode has one important limitation: only
-<systemitem class="username">root</systemitem> and a set of trusted
-users specified in <filename>nix.conf</filename> can specify arbitrary
-binary caches. So while unprivileged users may install packages from
-arbitrary Nix expressions, they may not get pre-built
-binaries.</para></note>
-
-
-<simplesect>
-
-<title>Setting up the build users</title>
-
-<para>The <emphasis>build users</emphasis> are the special UIDs under
-which builds are performed.  They should all be members of the
-<emphasis>build users group</emphasis> <literal>nixbld</literal>.
-This group should have no other members.  The build users should not
-be members of any other group. On Linux, you can create the group and
-users as follows:
-
-<screen>
-$ groupadd -r nixbld
-$ for n in $(seq 1 10); do useradd -c "Nix build user $n" \
-    -d /var/empty -g nixbld -G nixbld -M -N -r -s "$(which nologin)" \
-    nixbld$n; done
-</screen>
-
-This creates 10 build users. There can never be more concurrent builds
-than the number of build users, so you may want to increase this if
-you expect to do many builds at the same time.</para>
-
-<para>On Mac OS X, you can create the required group and users by
-running the following script:
-
-<programlisting>
-#! /bin/bash -e
-
-dseditgroup -o create nixbld -q
-
-gid=$(dscl . -read /Groups/nixbld | awk '($1 == "PrimaryGroupID:") {print $2 }')
-
-echo "created nixbld group with gid $gid"
-
-for i in $(seq 1 10); do
-    user=/Users/nixbld$i
-    uid="$((30000 + $i))"
-    dscl . create $user
-    dscl . create $user RealName "Nix build user $i"
-    dscl . create $user PrimaryGroupID "$gid"
-    dscl . create $user UserShell /usr/bin/false
-    dscl . create $user NFSHomeDirectory /var/empty
-    dscl . create $user UniqueID "$uid"
-    dseditgroup -o edit -a nixbld$i -t user nixbld
-    echo "created nixbld$i user with uid $uid"
-done
-</programlisting>
-
-</para>
-
-</simplesect>
-
-
-<simplesect>
-
-<title>Running the daemon</title>
-
-<para>The <link linkend="sec-nix-daemon">Nix daemon</link> should be
-started as follows (as <literal>root</literal>):
-
-<screen>
-$ nix-daemon</screen>
-
-You&#x2019;ll want to put that line somewhere in your system&#x2019;s boot
-scripts.</para>
-
-<para>To let unprivileged users use the daemon, they should set the
-<link linkend="envar-remote"><envar>NIX_REMOTE</envar> environment
-variable</link> to <literal>daemon</literal>.  So you should put a
-line like
-
-<programlisting>
-export NIX_REMOTE=daemon</programlisting>
-
-into the users&#x2019; login scripts.</para>
-
-</simplesect>
-
-
-<simplesect>
-
-<title>Restricting access</title>
-
-<para>To limit which users can perform Nix operations, you can use the
-permissions on the directory
-<filename>/nix/var/nix/daemon-socket</filename>.  For instance, if you
-want to restrict the use of Nix to the members of a group called
-<literal>nix-users</literal>, do
-
-<screen>
-$ chgrp nix-users /nix/var/nix/daemon-socket
-$ chmod ug=rwx,o= /nix/var/nix/daemon-socket
-</screen>
-
-This way, users who are not in the <literal>nix-users</literal> group
-cannot connect to the Unix domain socket
-<filename>/nix/var/nix/daemon-socket/socket</filename>, so they cannot
-perform Nix operations.</para>
-
-</simplesect>
-
-
-</section>
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-env-variables">
-
-<title>Environment Variables</title>
-
-<para>To use Nix, some environment variables should be set.  In
-particular, <envar>PATH</envar> should contain the directories
-<filename><replaceable>prefix</replaceable>/bin</filename> and
-<filename>~/.nix-profile/bin</filename>.  The first directory contains
-the Nix tools themselves, while <filename>~/.nix-profile</filename> is
-a symbolic link to the current <emphasis>user environment</emphasis>
-(an automatically generated package consisting of symlinks to
-installed packages).  The simplest way to set the required environment
-variables is to include the file
-<filename><replaceable>prefix</replaceable>/etc/profile.d/nix.sh</filename>
-in your <filename>~/.profile</filename> (or similar), like this:</para>
-
-<screen>
-source <replaceable>prefix</replaceable>/etc/profile.d/nix.sh</screen>
-
-</chapter>
-
-<!-- TODO: should be updated
-<section><title>Upgrading Nix through Nix</title>
-
-<para>You can install the latest stable version of Nix through Nix
-itself by subscribing to the channel <link
-xlink:href="http://nixos.org/releases/nix/channels/nix-stable" />,
-or the latest unstable version by subscribing to the channel <link
-xlink:href="http://nixos.org/releases/nix/channels/nix-unstable" />.
-You can also do a <link linkend="sec-one-click">one-click
-installation</link> by clicking on the package links at <link
-xlink:href="http://nixos.org/releases/full-index-nix.html" />.</para>
-
-</section>
--->
-
-</part>
-  <part xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="chap-package-management" xml:base="packages/package-management.xml">
-
-<title>Package Management</title>
-
-<partintro>
-<para>This chapter discusses how to do package management with Nix,
-i.e., how to obtain, install, upgrade, and erase packages.  This is
-the &#x201C;user&#x2019;s&#x201D; perspective of the Nix system &#x2014; people
-who want to <emphasis>create</emphasis> packages should consult
-<xref linkend="chap-writing-nix-expressions"/>.</para>
-</partintro>
-
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-basic-package-mgmt">
-
-<title>Basic Package Management</title>
-
-<para>The main command for package management is <link linkend="sec-nix-env"><command>nix-env</command></link>.  You can use
-it to install, upgrade, and erase packages, and to query what
-packages are installed or are available for installation.</para>
-
-<para>In Nix, different users can have different &#x201C;views&#x201D;
-on the set of installed applications.  That is, there might be lots of
-applications present on the system (possibly in many different
-versions), but users can have a specific selection of those active &#x2014;
-where &#x201C;active&#x201D; just means that it appears in a directory
-in the user&#x2019;s <envar>PATH</envar>.  Such a view on the set of
-installed applications is called a <emphasis>user
-environment</emphasis>, which is just a directory tree consisting of
-symlinks to the files of the active applications.  </para>
-
-<para>Components are installed from a set of <emphasis>Nix
-expressions</emphasis> that tell Nix how to build those packages,
-including, if necessary, their dependencies.  There is a collection of
-Nix expressions called the Nix Package collection that contains
-packages ranging from basic development stuff such as GCC and Glibc,
-to end-user applications like Mozilla Firefox.  (Nix is however not
-tied to the Nix Package collection; you could write your own Nix
-expressions based on it, or completely new ones.)</para>
-
-<para>You can manually download the latest version of Nixpkgs from
-<link xlink:href="http://nixos.org/nixpkgs/download.html"/>. However,
-it&#x2019;s much more convenient to use the Nixpkgs
-<emphasis>channel</emphasis>, since it makes it easy to stay up to
-date with new versions of Nixpkgs. (Channels are described in more
-detail in <xref linkend="sec-channels"/>.) Nixpkgs is automatically
-added to your list of &#x201C;subscribed&#x201D; channels when you install
-Nix. If this is not the case for some reason, you can add it as
-follows:
-
-<screen>
-$ nix-channel --add https://nixos.org/channels/nixpkgs-unstable
-$ nix-channel --update
-</screen>
-
-</para>
-
-<note><para>On NixOS, you&#x2019;re automatically subscribed to a NixOS
-channel corresponding to your NixOS major release
-(e.g. <uri>http://nixos.org/channels/nixos-14.12</uri>). A NixOS
-channel is identical to the Nixpkgs channel, except that it contains
-only Linux binaries and is updated only if a set of regression tests
-succeed.</para></note>
-
-<para>You can view the set of available packages in Nixpkgs:
-
-<screen>
-$ nix-env -qa
-aterm-2.2
-bash-3.0
-binutils-2.15
-bison-1.875d
-blackdown-1.4.2
-bzip2-1.0.2
-&#x2026;</screen>
-
-The flag <option>-q</option> specifies a query operation, and
-<option>-a</option> means that you want to show the &#x201C;available&#x201D; (i.e.,
-installable) packages, as opposed to the installed packages. If you
-downloaded Nixpkgs yourself, or if you checked it out from GitHub,
-then you need to pass the path to your Nixpkgs tree using the
-<option>-f</option> flag:
-
-<screen>
-$ nix-env -qaf <replaceable>/path/to/nixpkgs</replaceable>
-</screen>
-
-where <replaceable>/path/to/nixpkgs</replaceable> is where you&#x2019;ve
-unpacked or checked out Nixpkgs.</para>
-
-<para>You can select specific packages by name:
-
-<screen>
-$ nix-env -qa firefox
-firefox-34.0.5
-firefox-with-plugins-34.0.5
-</screen>
-
-and using regular expressions:
-
-<screen>
-$ nix-env -qa 'firefox.*'
-</screen>
-
-</para>
-
-<para>It is also possible to see the <emphasis>status</emphasis> of
-available packages, i.e., whether they are installed into the user
-environment and/or present in the system:
-
-<screen>
-$ nix-env -qas
-&#x2026;
--PS bash-3.0
---S binutils-2.15
-IPS bison-1.875d
-&#x2026;</screen>
-
-The first character (<literal>I</literal>) indicates whether the
-package is installed in your current user environment.  The second
-(<literal>P</literal>) indicates whether it is present on your system
-(in which case installing it into your user environment would be a
-very quick operation).  The last one (<literal>S</literal>) indicates
-whether there is a so-called <emphasis>substitute</emphasis> for the
-package, which is Nix&#x2019;s mechanism for doing binary deployment.  It
-just means that Nix knows that it can fetch a pre-built package from
-somewhere (typically a network server) instead of building it
-locally.</para>
-
-<para>You can install a package using <literal>nix-env -i</literal>.
-For instance,
-
-<screen>
-$ nix-env -i subversion</screen>
-
-will install the package called <literal>subversion</literal> (which
-is, of course, the <link xlink:href="http://subversion.tigris.org/">Subversion version
-management system</link>).</para>
-
-<note><para>When you ask Nix to install a package, it will first try
-to get it in pre-compiled form from a <emphasis>binary
-cache</emphasis>. By default, Nix will use the binary cache
-<uri>https://cache.nixos.org</uri>; it contains binaries for most
-packages in Nixpkgs. Only if no binary is available in the binary
-cache, Nix will build the package from source. So if <literal>nix-env
--i subversion</literal> results in Nix building stuff from source,
-then either the package is not built for your platform by the Nixpkgs
-build servers, or your version of Nixpkgs is too old or too new. For
-instance, if you have a very recent checkout of Nixpkgs, then the
-Nixpkgs build servers may not have had a chance to build everything
-and upload the resulting binaries to
-<uri>https://cache.nixos.org</uri>. The Nixpkgs channel is only
-updated after all binaries have been uploaded to the cache, so if you
-stick to the Nixpkgs channel (rather than using a Git checkout of the
-Nixpkgs tree), you will get binaries for most packages.</para></note>
-
-<para>Naturally, packages can also be uninstalled:
-
-<screen>
-$ nix-env -e subversion</screen>
-
-</para>
-
-<para>Upgrading to a new version is just as easy.  If you have a new
-release of Nix Packages, you can do:
-
-<screen>
-$ nix-env -u subversion</screen>
-
-This will <emphasis>only</emphasis> upgrade Subversion if there is a
-&#x201C;newer&#x201D; version in the new set of Nix expressions, as
-defined by some pretty arbitrary rules regarding ordering of version
-numbers (which generally do what you&#x2019;d expect of them).  To just
-unconditionally replace Subversion with whatever version is in the Nix
-expressions, use <parameter>-i</parameter> instead of
-<parameter>-u</parameter>; <parameter>-i</parameter> will remove
-whatever version is already installed.</para>
-
-<para>You can also upgrade all packages for which there are newer
-versions:
-
-<screen>
-$ nix-env -u</screen>
-
-</para>
-
-<para>Sometimes it&#x2019;s useful to be able to ask what
-<command>nix-env</command> would do, without actually doing it.  For
-instance, to find out what packages would be upgraded by
-<literal>nix-env -u</literal>, you can do
-
-<screen>
-$ nix-env -u --dry-run
-(dry run; not doing anything)
-upgrading `libxslt-1.1.0' to `libxslt-1.1.10'
-upgrading `graphviz-1.10' to `graphviz-1.12'
-upgrading `coreutils-5.0' to `coreutils-5.2.1'</screen>
-
-</para>
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-profiles">
-
-<title>Profiles</title>
-
-<para>Profiles and user environments are Nix&#x2019;s mechanism for
-implementing the ability to allow different users to have different
-configurations, and to do atomic upgrades and rollbacks.  To
-understand how they work, it&#x2019;s useful to know a bit about how Nix
-works.  In Nix, packages are stored in unique locations in the
-<emphasis>Nix store</emphasis> (typically,
-<filename>/nix/store</filename>).  For instance, a particular version
-of the Subversion package might be stored in a directory
-<filename>/nix/store/dpmvp969yhdqs7lm2r1a3gng7pyq6vy4-subversion-1.1.3/</filename>,
-while another version might be stored in
-<filename>/nix/store/5mq2jcn36ldlmh93yj1n8s9c95pj7c5s-subversion-1.1.2</filename>.
-The long strings prefixed to the directory names are cryptographic
-hashes<footnote><para>160-bit truncations of SHA-256 hashes encoded in
-a base-32 notation, to be precise.</para></footnote> of
-<emphasis>all</emphasis> inputs involved in building the package &#x2014;
-sources, dependencies, compiler flags, and so on.  So if two
-packages differ in any way, they end up in different locations in
-the file system, so they don&#x2019;t interfere with each other.  <xref linkend="fig-user-environments"/> shows a part of a typical Nix
-store.</para>
-
-<figure xml:id="fig-user-environments"><title>User environments</title>
-  <mediaobject>
-    <imageobject>
-      <imagedata fileref="../figures/user-environments.png" format="PNG"/>
-    </imageobject>
-  </mediaobject>
-</figure>
-
-<para>Of course, you wouldn&#x2019;t want to type
-
-<screen>
-$ /nix/store/dpmvp969yhdq...-subversion-1.1.3/bin/svn</screen>
-
-every time you want to run Subversion.  Of course we could set up the
-<envar>PATH</envar> environment variable to include the
-<filename>bin</filename> directory of every package we want to use,
-but this is not very convenient since changing <envar>PATH</envar>
-doesn&#x2019;t take effect for already existing processes.  The solution Nix
-uses is to create directory trees of symlinks to
-<emphasis>activated</emphasis> packages.  These are called
-<emphasis>user environments</emphasis> and they are packages
-themselves (though automatically generated by
-<command>nix-env</command>), so they too reside in the Nix store.  For
-instance, in <xref linkend="fig-user-environments"/> the user
-environment <filename>/nix/store/0c1p5z4kda11...-user-env</filename>
-contains a symlink to just Subversion 1.1.2 (arrows in the figure
-indicate symlinks).  This would be what we would obtain if we had done
-
-<screen>
-$ nix-env -i subversion</screen>
-
-on a set of Nix expressions that contained Subversion 1.1.2.</para>
-
-<para>This doesn&#x2019;t in itself solve the problem, of course; you
-wouldn&#x2019;t want to type
-<filename>/nix/store/0c1p5z4kda11...-user-env/bin/svn</filename>
-either.  That&#x2019;s why there are symlinks outside of the store that point
-to the user environments in the store; for instance, the symlinks
-<filename>default-42-link</filename> and
-<filename>default-43-link</filename> in the example.  These are called
-<emphasis>generations</emphasis> since every time you perform a
-<command>nix-env</command> operation, a new user environment is
-generated based on the current one.  For instance, generation 43 was
-created from generation 42 when we did
-
-<screen>
-$ nix-env -i subversion firefox</screen>
-
-on a set of Nix expressions that contained Firefox and a new version
-of Subversion.</para>
-
-<para>Generations are grouped together into
-<emphasis>profiles</emphasis> so that different users don&#x2019;t interfere
-with each other if they don&#x2019;t want to.  For example:
-
-<screen>
-$ ls -l /nix/var/nix/profiles/
-...
-lrwxrwxrwx  1 eelco ... default-42-link -&gt; /nix/store/0c1p5z4kda11...-user-env
-lrwxrwxrwx  1 eelco ... default-43-link -&gt; /nix/store/3aw2pdyx2jfc...-user-env
-lrwxrwxrwx  1 eelco ... default -&gt; default-43-link</screen>
-
-This shows a profile called <filename>default</filename>.  The file
-<filename>default</filename> itself is actually a symlink that points
-to the current generation.  When we do a <command>nix-env</command>
-operation, a new user environment and generation link are created
-based on the current one, and finally the <filename>default</filename>
-symlink is made to point at the new generation.  This last step is
-atomic on Unix, which explains how we can do atomic upgrades.  (Note
-that the building/installing of new packages doesn&#x2019;t interfere in
-any way with old packages, since they are stored in different
-locations in the Nix store.)</para>
-
-<para>If you find that you want to undo a <command>nix-env</command>
-operation, you can just do
-
-<screen>
-$ nix-env --rollback</screen>
-
-which will just make the current generation link point at the previous
-link.  E.g., <filename>default</filename> would be made to point at
-<filename>default-42-link</filename>.  You can also switch to a
-specific generation:
-
-<screen>
-$ nix-env --switch-generation 43</screen>
-
-which in this example would roll forward to generation 43 again.  You
-can also see all available generations:
-
-<screen>
-$ nix-env --list-generations</screen></para>
-
-<para>You generally wouldn&#x2019;t have
-<filename>/nix/var/nix/profiles/<replaceable>some-profile</replaceable>/bin</filename>
-in your <envar>PATH</envar>.  Rather, there is a symlink
-<filename>~/.nix-profile</filename> that points to your current
-profile.  This means that you should put
-<filename>~/.nix-profile/bin</filename> in your <envar>PATH</envar>
-(and indeed, that&#x2019;s what the initialisation script
-<filename>/nix/etc/profile.d/nix.sh</filename> does).  This makes it
-easier to switch to a different profile.  You can do that using the
-command <command>nix-env --switch-profile</command>:
-
-<screen>
-$ nix-env --switch-profile /nix/var/nix/profiles/my-profile
-
-$ nix-env --switch-profile /nix/var/nix/profiles/default</screen>
-
-These commands switch to the <filename>my-profile</filename> and
-default profile, respectively.  If the profile doesn&#x2019;t exist, it will
-be created automatically.  You should be careful about storing a
-profile in another location than the <filename>profiles</filename>
-directory, since otherwise it might not be used as a root of the
-garbage collector (see <xref linkend="sec-garbage-collection"/>).</para>
-
-<para>All <command>nix-env</command> operations work on the profile
-pointed to by <command>~/.nix-profile</command>, but you can override
-this using the <option>--profile</option> option (abbreviation
-<option>-p</option>):
-
-<screen>
-$ nix-env -p /nix/var/nix/profiles/other-profile -i subversion</screen>
-
-This will <emphasis>not</emphasis> change the
-<command>~/.nix-profile</command> symlink.</para>
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-garbage-collection">
-
-<title>Garbage Collection</title>
-
-<para><command>nix-env</command> operations such as upgrades
-(<option>-u</option>) and uninstall (<option>-e</option>) never
-actually delete packages from the system.  All they do (as shown
-above) is to create a new user environment that no longer contains
-symlinks to the &#x201C;deleted&#x201D; packages.</para>
-
-<para>Of course, since disk space is not infinite, unused packages
-should be removed at some point.  You can do this by running the Nix
-garbage collector.  It will remove from the Nix store any package
-not used (directly or indirectly) by any generation of any
-profile.</para>
-
-<para>Note however that as long as old generations reference a
-package, it will not be deleted.  After all, we wouldn&#x2019;t be able to
-do a rollback otherwise.  So in order for garbage collection to be
-effective, you should also delete (some) old generations.  Of course,
-this should only be done if you are certain that you will not need to
-roll back.</para>
-
-<para>To delete all old (non-current) generations of your current
-profile:
-
-<screen>
-$ nix-env --delete-generations old</screen>
-
-Instead of <literal>old</literal> you can also specify a list of
-generations, e.g.,
-
-<screen>
-$ nix-env --delete-generations 10 11 14</screen>
-
-To delete all generations older than a specified number of days
-(except the current generation), use the <literal>d</literal>
-suffix. For example,
-
-<screen>
-$ nix-env --delete-generations 14d</screen>
-
-deletes all generations older than two weeks.</para>
-
-<para>After removing appropriate old generations you can run the
-garbage collector as follows:
-
-<screen>
-$ nix-store --gc</screen>
-
-If you are feeling uncertain, you can also first view what files would
-be deleted:
-
-<screen>
-$ nix-store --gc --print-dead</screen>
-
-Likewise, the option <option>--print-live</option> will show the paths
-that <emphasis>won&#x2019;t</emphasis> be deleted.</para>
-
-<para>There is also a convenient little utility
-<command>nix-collect-garbage</command>, which when invoked with the
-<option>-d</option> (<option>--delete-old</option>) switch deletes all
-old generations of all profiles in
-<filename>/nix/var/nix/profiles</filename>.  So
-
-<screen>
-$ nix-collect-garbage -d</screen>
-
-is a quick and easy way to clean up your system.</para>
-
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-gc-roots">
-
-<title>Garbage Collector Roots</title>
-
-<para>The roots of the garbage collector are all store paths to which
-there are symlinks in the directory
-<filename><replaceable>prefix</replaceable>/nix/var/nix/gcroots</filename>.
-For instance, the following command makes the path
-<filename>/nix/store/d718ef...-foo</filename> a root of the collector:
-
-<screen>
-$ ln -s /nix/store/d718ef...-foo /nix/var/nix/gcroots/bar</screen>
-	
-That is, after this command, the garbage collector will not remove
-<filename>/nix/store/d718ef...-foo</filename> or any of its
-dependencies.</para>
-
-<para>Subdirectories of
-<filename><replaceable>prefix</replaceable>/nix/var/nix/gcroots</filename>
-are also searched for symlinks.  Symlinks to non-store paths are
-followed and searched for roots, but symlinks to non-store paths
-<emphasis>inside</emphasis> the paths reached in that way are not
-followed to prevent infinite recursion.</para>
-
-</section>
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-channels">
-
-<title>Channels</title>
-
-<para>If you want to stay up to date with a set of packages, it&#x2019;s not
-very convenient to manually download the latest set of Nix expressions
-for those packages and upgrade using <command>nix-env</command>.
-Fortunately, there&#x2019;s a better way: <emphasis>Nix
-channels</emphasis>.</para>
-
-<para>A Nix channel is just a URL that points to a place that contains
-a set of Nix expressions and a manifest.  Using the command <link linkend="sec-nix-channel"><command>nix-channel</command></link> you
-can automatically stay up to date with whatever is available at that
-URL.</para>
-
-<para>You can &#x201C;subscribe&#x201D; to a channel using
-<command>nix-channel --add</command>, e.g.,
-
-<screen>
-$ nix-channel --add https://nixos.org/channels/nixpkgs-unstable</screen>
-
-subscribes you to a channel that always contains that latest version
-of the Nix Packages collection.  (Subscribing really just means that
-the URL is added to the file <filename>~/.nix-channels</filename>,
-where it is read by subsequent calls to <command>nix-channel
---update</command>.) You can &#x201C;unsubscribe&#x201D; using <command>nix-channel
---remove</command>:
-
-<screen>
-$ nix-channel --remove nixpkgs
-</screen>
-</para>
-
-<para>To obtain the latest Nix expressions available in a channel, do
-
-<screen>
-$ nix-channel --update</screen>
-
-This downloads and unpacks the Nix expressions in every channel
-(downloaded from <literal><replaceable>url</replaceable>/nixexprs.tar.bz2</literal>).
-It also makes the union of each channel&#x2019;s Nix expressions available by
-default to <command>nix-env</command> operations (via the symlink
-<filename>~/.nix-defexpr/channels</filename>).  Consequently, you can
-then say
-
-<screen>
-$ nix-env -u</screen>
-
-to upgrade all packages in your profile to the latest versions
-available in the subscribed channels.</para>
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-one-click">
-
-<title>One-Click Installation</title>
-
-<para>Often, when you want to install a specific package (e.g., from
-the <link xlink:href="http://nixos.org/nixpkgs/">Nix
-Packages collection</link>), subscribing to a channel is a bit
-cumbersome.  And channels don&#x2019;t help you at all if you want to install
-an older version of a package than the one provided by the current
-contents of the channel, or a package that has been removed from the
-channel.  That&#x2019;s when <emphasis>one-click installs</emphasis> come in
-handy: you can just go to the web page that contains the package,
-click on it, and it will be installed with all the necessary
-dependencies.</para>
-
-<para>For instance, you can go to <link xlink:href="http://hydra.nixos.org/jobset/nixpkgs/trunk/channel/latest"/> and click on any link for the individual packages for your
-platform.  The first time you do this, your browser will ask what to
-do with <literal>application/nix-package</literal> files.  You should
-open them with <filename>/nix/bin/nix-install-package</filename>.
-This will open a window that asks you to confirm that you want to
-install the package.  When you answer <literal>Y</literal>, the
-package and all its dependencies will be installed.  This is a binary
-deployment mechanism &#x2014; you get packages pre-compiled for the selected
-platform type.</para>
-
-<para>You can also install <literal>application/nix-package</literal>
-files from the command line directly.  See <xref linkend="sec-nix-install-package"/> for details.</para>
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-sharing-packages">
-
-<title>Sharing Packages Between Machines</title>
-
-<para>Sometimes you want to copy a package from one machine to
-another.  Or, you want to install some packages and you know that
-another machine already has some or all of those packages or their
-dependencies.  In that case there are mechanisms to quickly copy
-packages between machines.</para>
-
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-binary-cache-substituter">
-
-<title>Serving a Nix store via HTTP</title>
-
-<para>You can easily share the Nix store of a machine via HTTP. This
-allows other machines to fetch store paths from that machine to speed
-up installations. It uses the same <emphasis>binary cache</emphasis>
-mechanism that Nix usually uses to fetch pre-built binaries from
-<uri>https://cache.nixos.org</uri>.</para>
-
-<para>The daemon that handles binary cache requests via HTTP,
-<command>nix-serve</command>, is not part of the Nix distribution, but
-you can install it from Nixpkgs:
-
-<screen>
-$ nix-env -i nix-serve
-</screen>
-
-You can then start the server, listening for HTTP connections on
-whatever port you like:
-
-<screen>
-$ nix-serve -p 8080
-</screen>
-
-To check whether it works, try the following on the client:
-
-<screen>
-$ curl http://avalon:8080/nix-cache-info
-</screen>
-
-which should print something like:
-
-<screen>
-StoreDir: /nix/store
-WantMassQuery: 1
-Priority: 30
-</screen>
-
-</para>
-
-<para>On the client side, you can tell Nix to use your binary cache
-using <option>--option extra-binary-caches</option>, e.g.:
-
-<screen>
-$ nix-env -i firefox --option extra-binary-caches http://avalon:8080/
-</screen>
-
-The option <option>extra-binary-caches</option> tells Nix to use this
-binary cache in addition to your default caches, such as
-<uri>https://cache.nixos.org</uri>. Thus, for any path in the closure
-of Firefox, Nix will first check if the path is available on the
-server <literal>avalon</literal> or another binary caches. If not, it
-will fall back to building from source.</para>
-
-<para>You can also tell Nix to always use your binary cache by adding
-a line to the <filename linkend="sec-conf-file">nix.conf</filename>
-configuration file like this:
-
-<programlisting>
-binary-caches = http://avalon:8080/ https://cache.nixos.org/
-</programlisting>
-
-</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-copy-closure">
-
-<title>Copying Closures Via SSH</title>
-
-<para>The command <command linkend="sec-nix-copy-closure">nix-copy-closure</command> copies a Nix
-store path along with all its dependencies to or from another machine
-via the SSH protocol.  It doesn&#x2019;t copy store paths that are already
-present on the target machine.  For example, the following command
-copies Firefox with all its dependencies:
-
-<screen>
-$ nix-copy-closure --to alice@itchy.example.org $(type -p firefox)</screen>
-
-See <xref linkend="sec-nix-copy-closure"/> for details.</para>
-
-<para>With <command linkend="refsec-nix-store-export">nix-store
---export</command> and <command linkend="refsec-nix-store-import">nix-store --import</command> you can
-write the closure of a store path (that is, the path and all its
-dependencies) to a file, and then unpack that file into another Nix
-store.  For example,
-
-<screen>
-$ nix-store --export $(nix-store -qR $(type -p firefox)) &gt; firefox.closure</screen>
-
-writes the closure of Firefox to a file.  You can then copy this file
-to another machine and install the closure:
-
-<screen>
-$ nix-store --import &lt; firefox.closure</screen>
-
-Any store paths in the closure that are already present in the target
-store are ignored.  It is also possible to pipe the export into
-another command, e.g. to copy and install a closure directly to/on
-another machine:
-
-<screen>
-$ nix-store --export $(nix-store -qR $(type -p firefox)) | bzip2 | \
-    ssh alice@itchy.example.org "bunzip2 | nix-store --import"</screen>
-
-However, <command>nix-copy-closure</command> is generally more
-efficient because it only copies paths that are not already present in
-the target Nix store.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-ssh-substituter">
-
-<title>Serving a Nix store via SSH</title>
-
-<para>You can tell Nix to automatically fetch needed binaries from a
-remote Nix store via SSH. For example, the following installs Firefox,
-automatically fetching any store paths in Firefox&#x2019;s closure if they
-are available on the server <literal>avalon</literal>:
-
-<screen>
-$ nix-env -i firefox --option ssh-substituter-hosts alice@avalon
-</screen>
-
-This works similar to the binary cache substituter that Nix usually
-uses, only using SSH instead of HTTP: if a store path
-<literal>P</literal> is needed, Nix will first check if it&#x2019;s available
-in the Nix store on <literal>avalon</literal>. If not, it will fall
-back to using the binary cache substituter, and then to building from
-source.</para>
-
-<note><para>The SSH substituter currently does not allow you to enter
-an SSH passphrase interactively. Therefore, you should use
-<command>ssh-add</command> to load the decrypted private key into
-<command>ssh-agent</command>.</para></note>
-
-<para>You can also copy the closure of some store path, without
-installing it into your profile, e.g.
-
-<screen>
-$ nix-store -r /nix/store/m85bxg&#x2026;-firefox-34.0.5 --option ssh-substituter-hosts alice@avalon
-</screen>
-
-This is essentially equivalent to doing
-
-<screen>
-$ nix-copy-closure --from alice@avalon /nix/store/m85bxg&#x2026;-firefox-34.0.5
-</screen>
-
-</para>
-
-<para>You can use SSH&#x2019;s <emphasis>forced command</emphasis> feature to
-set up a restricted user account for SSH substituter access, allowing
-read-only access to the local Nix store, but nothing more. For
-example, add the following lines to <filename>sshd_config</filename>
-to restrict the user <literal>nix-ssh</literal>:
-
-<programlisting>
-Match User nix-ssh
-  AllowAgentForwarding no
-  AllowTcpForwarding no
-  PermitTTY no
-  PermitTunnel no
-  X11Forwarding no
-  ForceCommand nix-store --serve
-Match All
-</programlisting>
-
-On NixOS, you can accomplish the same by adding the following to your
-<filename>configuration.nix</filename>:
-
-<programlisting>
-nix.sshServe.enable = true;
-nix.sshServe.keys = [ "ssh-dss AAAAB3NzaC1k... bob@example.org" ];
-</programlisting>
-
-where the latter line lists the public keys of users that are allowed
-to connect.</para>
-
-</section>
-
-</chapter>
-
-</part>
-  <part xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="chap-writing-nix-expressions" xml:base="expressions/writing-nix-expressions.xml">
-
-<title>Writing Nix Expressions</title>
-
-<partintro>
-<para>This chapter shows you how to write Nix expressions, which 
-instruct Nix how to build packages.  It starts with a
-simple example (a Nix expression for GNU Hello), and then moves
-on to a more in-depth look at the Nix expression language.</para>
-
-<note><para>This chapter is mostly about the Nix expression language.
-For more extensive information on adding packages to the Nix Packages
-collection (such as functions in the standard environment and coding
-conventions), please consult <link xlink:href="http://nixos.org/nixpkgs/manual/">its
-manual</link>.</para></note>
-</partintro>
-
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-simple-expression">
-
-<title>A Simple Nix Expression</title>
-
-<para>This section shows how to add and test the <link xlink:href="http://www.gnu.org/software/hello/hello.html">GNU Hello
-package</link> to the Nix Packages collection.  Hello is a program
-that prints out the text <quote>Hello, world!</quote>.</para>
-
-<para>To add a package to the Nix Packages collection, you generally
-need to do three things:
-
-<orderedlist>
-
-  <listitem><para>Write a Nix expression for the package.  This is a
-  file that describes all the inputs involved in building the package,
-  such as dependencies, sources, and so on.</para></listitem>
-
-  <listitem><para>Write a <emphasis>builder</emphasis>.  This is a
-  shell script<footnote><para>In fact, it can be written in any
-  language, but typically it's a <command>bash</command> shell
-  script.</para></footnote> that actually builds the package from
-  the inputs.</para></listitem>
-
-  <listitem><para>Add the package to the file
-  <filename>pkgs/top-level/all-packages.nix</filename>.  The Nix
-  expression written in the first step is a
-  <emphasis>function</emphasis>; it requires other packages in order
-  to build it.  In this step you put it all together, i.e., you call
-  the function with the right arguments to build the actual
-  package.</para></listitem>
-
-</orderedlist>
-
-</para>
-
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-expression-syntax">
-
-<title>Expression Syntax</title>
-
-<example xml:id="ex-hello-nix"><title>Nix expression for GNU Hello
-(<filename>default.nix</filename>)</title>
-<programlisting>
-{ stdenv, fetchurl, perl }: <co xml:id="ex-hello-nix-co-1"/>
-
-stdenv.mkDerivation { <co xml:id="ex-hello-nix-co-2"/>
-  name = "hello-2.1.1"; <co xml:id="ex-hello-nix-co-3"/>
-  builder = ./builder.sh; <co xml:id="ex-hello-nix-co-4"/>
-  src = fetchurl { <co xml:id="ex-hello-nix-co-5"/>
-    url = ftp://ftp.nluug.nl/pub/gnu/hello/hello-2.1.1.tar.gz;
-    md5 = "70c9ccf9fac07f762c24f2df2290784d";
-  };
-  inherit perl; <co xml:id="ex-hello-nix-co-6"/>
-}</programlisting>
-</example>
-
-<para><xref linkend="ex-hello-nix"/> shows a Nix expression for GNU
-Hello.  It's actually already in the Nix Packages collection in
-<filename>pkgs/applications/misc/hello/ex-1/default.nix</filename>.
-It is customary to place each package in a separate directory and call
-the single Nix expression in that directory
-<filename>default.nix</filename>.  The file has the following elements
-(referenced from the figure by number):
-
-<calloutlist>
-
-  <callout arearefs="ex-hello-nix-co-1">
-
-    <para>This states that the expression is a
-    <emphasis>function</emphasis> that expects to be called with three
-    arguments: <varname>stdenv</varname>, <varname>fetchurl</varname>,
-    and <varname>perl</varname>.  They are needed to build Hello, but
-    we don't know how to build them here; that's why they are function
-    arguments.  <varname>stdenv</varname> is a package that is used
-    by almost all Nix Packages packages; it provides a
-    <quote>standard</quote> environment consisting of the things you
-    would expect in a basic Unix environment: a C/C++ compiler (GCC,
-    to be precise), the Bash shell, fundamental Unix tools such as
-    <command>cp</command>, <command>grep</command>,
-    <command>tar</command>, etc.  <varname>fetchurl</varname> is a
-    function that downloads files.  <varname>perl</varname> is the
-    Perl interpreter.</para>
-
-    <para>Nix functions generally have the form <literal>{ x, y, ...,
-    z }: e</literal> where <varname>x</varname>, <varname>y</varname>,
-    etc. are the names of the expected arguments, and where
-    <replaceable>e</replaceable> is the body of the function.  So
-    here, the entire remainder of the file is the body of the
-    function; when given the required arguments, the body should
-    describe how to build an instance of the Hello package.</para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-nix-co-2">
-
-    <para>So we have to build a package.  Building something from
-    other stuff is called a <emphasis>derivation</emphasis> in Nix (as
-    opposed to sources, which are built by humans instead of
-    computers).  We perform a derivation by calling
-    <varname>stdenv.mkDerivation</varname>.
-    <varname>mkDerivation</varname> is a function provided by
-    <varname>stdenv</varname> that builds a package from a set of
-    <emphasis>attributes</emphasis>.  A set is just a list of
-    key/value pairs where each key is a string and each value is an
-    arbitrary Nix expression.  They take the general form <literal>{
-    <replaceable>name1</replaceable> =
-    <replaceable>expr1</replaceable>; <replaceable>...</replaceable>
-    <replaceable>nameN</replaceable> =
-    <replaceable>exprN</replaceable>; }</literal>.</para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-nix-co-3">
-
-    <para>The attribute <varname>name</varname> specifies the symbolic
-    name and version of the package.  Nix doesn't really care about
-    these things, but they are used by for instance <command>nix-env
-    -q</command> to show a <quote>human-readable</quote> name for
-    packages.  This attribute is required by
-    <varname>mkDerivation</varname>.</para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-nix-co-4">
-
-    <para>The attribute <varname>builder</varname> specifies the
-    builder.  This attribute can sometimes be omitted, in which case
-    <varname>mkDerivation</varname> will fill in a default builder
-    (which does a <literal>configure; make; make install</literal>, in
-    essence).  Hello is sufficiently simple that the default builder
-    would suffice, but in this case, we will show an actual builder
-    for educational purposes.  The value
-    <command>./builder.sh</command> refers to the shell script shown
-    in <xref linkend="ex-hello-builder"/>, discussed below.</para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-nix-co-5">
-
-    <para>The builder has to know what the sources of the package
-    are.  Here, the attribute <varname>src</varname> is bound to the
-    result of a call to the <command>fetchurl</command> function.
-    Given a URL and an MD5 hash of the expected contents of the file
-    at that URL, this function builds a derivation that downloads the
-    file and checks its hash.  So the sources are a dependency that
-    like all other dependencies is built before Hello itself is
-    built.</para>
-
-    <para>Instead of <varname>src</varname> any other name could have
-    been used, and in fact there can be any number of sources (bound
-    to different attributes).  However, <varname>src</varname> is
-    customary, and it's also expected by the default builder (which we
-    don't use in this example).</para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-nix-co-6">
-
-    <para>Since the derivation requires Perl, we have to pass the
-    value of the <varname>perl</varname> function argument to the
-    builder.  All attributes in the set are actually passed as
-    environment variables to the builder, so declaring an attribute
-
-    <programlisting>
-perl = perl;</programlisting>
-
-    will do the trick: it binds an attribute <varname>perl</varname>
-    to the function argument which also happens to be called
-    <varname>perl</varname>.  However, it looks a bit silly, so there
-    is a shorter syntax.  The <literal>inherit</literal> keyword
-    causes the specified attributes to be bound to whatever variables
-    with the same name happen to be in scope.</para>
-
-  </callout>
-
-</calloutlist>
-
-</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-build-script">
-
-<title>Build Script</title>
-
-<example xml:id="ex-hello-builder"><title>Build script for GNU Hello
-(<filename>builder.sh</filename>)</title>
-<programlisting>
-source $stdenv/setup <co xml:id="ex-hello-builder-co-1"/>
-
-PATH=$perl/bin:$PATH <co xml:id="ex-hello-builder-co-2"/>
-
-tar xvfz $src <co xml:id="ex-hello-builder-co-3"/>
-cd hello-*
-./configure --prefix=$out <co xml:id="ex-hello-builder-co-4"/>
-make <co xml:id="ex-hello-builder-co-5"/>
-make install</programlisting>
-</example>
-
-<para><xref linkend="ex-hello-builder"/> shows the builder referenced
-from Hello's Nix expression (stored in
-<filename>pkgs/applications/misc/hello/ex-1/builder.sh</filename>).
-The builder can actually be made a lot shorter by using the
-<emphasis>generic builder</emphasis> functions provided by
-<varname>stdenv</varname>, but here we write out the build steps to
-elucidate what a builder does.  It performs the following
-steps:</para>
-
-<calloutlist>
-
-  <callout arearefs="ex-hello-builder-co-1">
-
-    <para>When Nix runs a builder, it initially completely clears the
-    environment (except for the attributes declared in the
-    derivation).  For instance, the <envar>PATH</envar> variable is
-    empty<footnote><para>Actually, it's initialised to
-    <filename>/path-not-set</filename> to prevent Bash from setting it
-    to a default value.</para></footnote>.  This is done to prevent
-    undeclared inputs from being used in the build process.  If for
-    example the <envar>PATH</envar> contained
-    <filename>/usr/bin</filename>, then you might accidentally use
-    <filename>/usr/bin/gcc</filename>.</para>
-
-    <para>So the first step is to set up the environment.  This is
-    done by calling the <filename>setup</filename> script of the
-    standard environment.  The environment variable
-    <envar>stdenv</envar> points to the location of the standard
-    environment being used.  (It wasn't specified explicitly as an
-    attribute in <xref linkend="ex-hello-nix"/>, but
-    <varname>mkDerivation</varname> adds it automatically.)</para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-builder-co-2">
-
-    <para>Since Hello needs Perl, we have to make sure that Perl is in
-    the <envar>PATH</envar>.  The <envar>perl</envar> environment
-    variable points to the location of the Perl package (since it
-    was passed in as an attribute to the derivation), so
-    <filename><replaceable>$perl</replaceable>/bin</filename> is the
-    directory containing the Perl interpreter.</para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-builder-co-3">
-
-    <para>Now we have to unpack the sources.  The
-    <varname>src</varname> attribute was bound to the result of
-    fetching the Hello source tarball from the network, so the
-    <envar>src</envar> environment variable points to the location in
-    the Nix store to which the tarball was downloaded.  After
-    unpacking, we <command>cd</command> to the resulting source
-    directory.</para>
-
-    <para>The whole build is performed in a temporary directory
-    created in <varname>/tmp</varname>, by the way.  This directory is
-    removed after the builder finishes, so there is no need to clean
-    up the sources afterwards.  Also, the temporary directory is
-    always newly created, so you don't have to worry about files from
-    previous builds interfering with the current build.</para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-builder-co-4">
-
-    <para>GNU Hello is a typical Autoconf-based package, so we first
-    have to run its <filename>configure</filename> script.  In Nix
-    every package is stored in a separate location in the Nix store,
-    for instance
-    <filename>/nix/store/9a54ba97fb71b65fda531012d0443ce2-hello-2.1.1</filename>.
-    Nix computes this path by cryptographically hashing all attributes
-    of the derivation.  The path is passed to the builder through the
-    <envar>out</envar> environment variable.  So here we give
-    <filename>configure</filename> the parameter
-    <literal>--prefix=$out</literal> to cause Hello to be installed in
-    the expected location.</para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-builder-co-5">
-
-    <para>Finally we build Hello (<literal>make</literal>) and install
-    it into the location specified by <envar>out</envar>
-    (<literal>make install</literal>).</para>
-
-  </callout>
-
-</calloutlist>
-
-<para>If you are wondering about the absence of error checking on the
-result of various commands called in the builder: this is because the
-shell script is evaluated with Bash's <option>-e</option> option,
-which causes the script to be aborted if any command fails without an
-error check.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-arguments">
-
-<title>Arguments and Variables</title>
-
-<example xml:id="ex-hello-composition">
-
-<title>Composing GNU Hello
-(<filename>all-packages.nix</filename>)</title>
-<programlisting>
-...
-
-rec { <co xml:id="ex-hello-composition-co-1"/>
-
-  hello = import ../applications/misc/hello/ex-1 <co xml:id="ex-hello-composition-co-2"/> { <co xml:id="ex-hello-composition-co-3"/>
-    inherit fetchurl stdenv perl;
-  };
-
-  perl = import ../development/interpreters/perl { <co xml:id="ex-hello-composition-co-4"/>
-    inherit fetchurl stdenv;
-  };
-
-  fetchurl = import ../build-support/fetchurl {
-    inherit stdenv; ...
-  };
-
-  stdenv = ...;
-
-}
-</programlisting>
-</example>
-
-<para>The Nix expression in <xref linkend="ex-hello-nix"/> is a
-function; it is missing some arguments that have to be filled in
-somewhere.  In the Nix Packages collection this is done in the file
-<filename>pkgs/top-level/all-packages.nix</filename>, where all
-Nix expressions for packages are imported and called with the
-appropriate arguments.  <xref linkend="ex-hello-composition"/> shows
-some fragments of
-<filename>all-packages.nix</filename>.</para>
-
-<calloutlist>
-
-  <callout arearefs="ex-hello-composition-co-1">
-
-    <para>This file defines a set of attributes, all of which are
-    concrete derivations (i.e., not functions).  In fact, we define a
-    <emphasis>mutually recursive</emphasis> set of attributes.  That
-    is, the attributes can refer to each other.  This is precisely
-    what we want since we want to <quote>plug</quote> the
-    various packages into each other.</para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-composition-co-2">
-
-    <para>Here we <emphasis>import</emphasis> the Nix expression for
-    GNU Hello.  The import operation just loads and returns the
-    specified Nix expression. In fact, we could just have put the
-    contents of <xref linkend="ex-hello-nix"/> in
-    <filename>all-packages.nix</filename> at this point.  That
-    would be completely equivalent, but it would make the file rather
-    bulky.</para>
-
-    <para>Note that we refer to
-    <filename>../applications/misc/hello/ex-1</filename>, not
-    <filename>../applications/misc/hello/ex-1/default.nix</filename>.
-    When you try to import a directory, Nix automatically appends
-    <filename>/default.nix</filename> to the file name.</para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-composition-co-3">
-
-    <para>This is where the actual composition takes place.  Here we
-    <emphasis>call</emphasis> the function imported from
-    <filename>../applications/misc/hello/ex-1</filename> with a set
-    containing the things that the function expects, namely
-    <varname>fetchurl</varname>, <varname>stdenv</varname>, and
-    <varname>perl</varname>.  We use inherit again to use the
-    attributes defined in the surrounding scope (we could also have
-    written <literal>fetchurl = fetchurl;</literal>, etc.).</para>
-
-    <para>The result of this function call is an actual derivation
-    that can be built by Nix (since when we fill in the arguments of
-    the function, what we get is its body, which is the call to
-    <varname>stdenv.mkDerivation</varname> in <xref linkend="ex-hello-nix"/>).</para>
-
-    <note><para>Nixpkgs has a convenience function
-    <function>callPackage</function> that imports and calls a
-    function, filling in any missing arguments by passing the
-    corresponding attribute from the Nixpkgs set, like this:
-
-<programlisting>
-hello = callPackage ../applications/misc/hello/ex-1 { };
-</programlisting>
-
-    If necessary, you can set or override arguments:
-
-<programlisting>
-hello = callPackage ../applications/misc/hello/ex-1 { stdenv = myStdenv; };
-</programlisting>
-
-    </para></note>
-
-  </callout>
-
-  <callout arearefs="ex-hello-composition-co-4">
-
-    <para>Likewise, we have to instantiate Perl,
-    <varname>fetchurl</varname>, and the standard environment.</para>
-
-  </callout>
-
-</calloutlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-building-simple">
-
-<title>Building and Testing</title>
-
-<para>You can now try to build Hello.  Of course, you could do
-<literal>nix-env -i hello</literal>, but you may not want to install a
-possibly broken package just yet.  The best way to test the package is by
-using the command <command linkend="sec-nix-build">nix-build</command>,
-which builds a Nix expression and creates a symlink named
-<filename>result</filename> in the current directory:
-
-<screen>
-$ nix-build -A hello
-building path `/nix/store/632d2b22514d...-hello-2.1.1'
-hello-2.1.1/
-hello-2.1.1/intl/
-hello-2.1.1/intl/ChangeLog
-<replaceable>...</replaceable>
-
-$ ls -l result
-lrwxrwxrwx ... 2006-09-29 10:43 result -&gt; /nix/store/632d2b22514d...-hello-2.1.1
-
-$ ./result/bin/hello
-Hello, world!</screen>
-
-The <link linkend="opt-attr"><option>-A</option></link> option selects
-the <literal>hello</literal> attribute.  This is faster than using the
-symbolic package name specified by the <literal>name</literal>
-attribute (which also happens to be <literal>hello</literal>) and is
-unambiguous (there can be multiple packages with the symbolic name
-<literal>hello</literal>, but there can be only one attribute in a set
-named <literal>hello</literal>).</para>
-
-<para><command>nix-build</command> registers the
-<filename>./result</filename> symlink as a garbage collection root, so
-unless and until you delete the <filename>./result</filename> symlink,
-the output of the build will be safely kept on your system.  You can
-use <command>nix-build</command>&#x2019;s <option linkend="opt-out-link">-o</option> switch to give the symlink another
-name.</para>
-
-<para>Nix has a transactional semantics.  Once a build finishes
-successfully, Nix makes a note of this in its database: it registers
-that the path denoted by <envar>out</envar> is now
-<quote>valid</quote>.  If you try to build the derivation again, Nix
-will see that the path is already valid and finish immediately.  If a
-build fails, either because it returns a non-zero exit code, because
-Nix or the builder are killed, or because the machine crashes, then
-the output paths will not be registered as valid.  If you try to build
-the derivation again, Nix will remove the output paths if they exist
-(e.g., because the builder died half-way through <literal>make
-install</literal>) and try again.  Note that there is no
-<quote>negative caching</quote>: Nix doesn't remember that a build
-failed, and so a failed build can always be repeated.  This is because
-Nix cannot distinguish between permanent failures (e.g., a compiler
-error due to a syntax error in the source) and transient failures
-(e.g., a disk full condition).</para>
-
-<para>Nix also performs locking.  If you run multiple Nix builds
-simultaneously, and they try to build the same derivation, the first
-Nix instance that gets there will perform the build, while the others
-block (or perform other derivations if available) until the build
-finishes:
-
-<screen>
-$ nix-build -A hello
-waiting for lock on `/nix/store/0h5b7hp8d4hqfrw8igvx97x1xawrjnac-hello-2.1.1x'</screen>
-
-So it is always safe to run multiple instances of Nix in parallel
-(which isn&#x2019;t the case with, say, <command>make</command>).</para>
-
-<para>If you have a system with multiple CPUs, you may want to have
-Nix build different derivations in parallel (insofar as possible).
-Just pass the option <link linkend="opt-max-jobs"><option>-j
-<replaceable>N</replaceable></option></link>, where
-<replaceable>N</replaceable> is the maximum number of jobs to be run
-in parallel, or set.  Typically this should be the number of
-CPUs.</para>
-
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-debug-build">
-
-<title>Debugging Build Failures</title>
-
-<para>At the beginning of each phase of the build (such as unpacking,
-building or installing), the set of all shell variables is written to
-the file <filename>env-vars</filename> at the top-level build
-directory.  This is useful for debugging: it allows you to recreate
-the environment in which a build was performed.  For instance, if a
-build fails, then assuming you used the <option>-K</option> flag, you
-can go to the output directory and <quote>switch</quote> to the
-environment of the builder:
-
-<screen>
-$ nix-build -K ./foo.nix
-... fails, keeping build directory `/tmp/nix-1234-0'
-
-$ cd /tmp/nix-1234-0
-
-$ source env-vars
-
-<lineannotation>(edit some files...)</lineannotation>
-
-$ make
-
-<lineannotation>(execution continues with the same GCC, make, etc.)</lineannotation></screen>
-
-</para>
-
-</section>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-generic-builder">
-
-<title>Generic Builder Syntax</title>
-
-<para>Recall from <xref linkend="ex-hello-builder"/> that the builder
-looked something like this:
-
-<programlisting>
-PATH=$perl/bin:$PATH
-tar xvfz $src
-cd hello-*
-./configure --prefix=$out
-make
-make install</programlisting>
-
-The builders for almost all Unix packages look like this &#x2014; set up some
-environment variables, unpack the sources, configure, build, and
-install.  For this reason the standard environment provides some Bash
-functions that automate the build process.  A builder using the
-generic build facilities in shown in <xref linkend="ex-hello-builder2"/>.</para>
-
-<example xml:id="ex-hello-builder2"><title>Build script using the generic
-build functions</title>
-<programlisting>
-buildInputs="$perl" <co xml:id="ex-hello-builder2-co-1"/>
-
-source $stdenv/setup <co xml:id="ex-hello-builder2-co-2"/>
-
-genericBuild <co xml:id="ex-hello-builder2-co-3"/></programlisting>
-</example>
-
-<calloutlist>
-
-  <callout arearefs="ex-hello-builder2-co-1">
-
-    <para>The <envar>buildInputs</envar> variable tells
-    <filename>setup</filename> to use the indicated packages as
-    <quote>inputs</quote>.  This means that if a package provides a
-    <filename>bin</filename> subdirectory, it's added to
-    <envar>PATH</envar>; if it has a <filename>include</filename>
-    subdirectory, it's added to GCC's header search path; and so
-    on.<footnote><para>How does it work? <filename>setup</filename>
-    tries to source the file
-    <filename><replaceable>pkg</replaceable>/nix-support/setup-hook</filename>
-    of all dependencies.  These &#x201C;setup hooks&#x201D; can then set up whatever
-    environment variables they want; for instance, the setup hook for
-    Perl sets the <envar>PERL5LIB</envar> environment variable to
-    contain the <filename>lib/site_perl</filename> directories of all
-    inputs.</para></footnote>
-    </para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-builder2-co-2">
-
-    <para>The function <function>genericBuild</function> is defined in
-    the file <literal>$stdenv/setup</literal>.</para>
-
-  </callout>
-
-  <callout arearefs="ex-hello-builder2-co-3">
-
-    <para>The final step calls the shell function
-    <function>genericBuild</function>, which performs the steps that
-    were done explicitly in <xref linkend="ex-hello-builder"/>.  The
-    generic builder is smart enough to figure out whether to unpack
-    the sources using <command>gzip</command>,
-    <command>bzip2</command>, etc.  It can be customised in many ways;
-    see the Nixpkgs manual for details.</para>
-
-  </callout>
-
-</calloutlist>
-
-<para>Discerning readers will note that the
-<envar>buildInputs</envar> could just as well have been set in the Nix
-expression, like this:
-
-<programlisting>
-  buildInputs = [ perl ];</programlisting>
-
-The <varname>perl</varname> attribute can then be removed, and the
-builder becomes even shorter:
-
-<programlisting>
-source $stdenv/setup
-genericBuild</programlisting>
-
-In fact, <varname>mkDerivation</varname> provides a default builder
-that looks exactly like that, so it is actually possible to omit the
-builder for Hello entirely.</para>
-
-</section>
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-expression-language">
-
-<title>Nix Expression Language</title>
-
-<para>The Nix expression language is a pure, lazy, functional
-language.  Purity means that operations in the language don't have
-side-effects (for instance, there is no variable assignment).
-Laziness means that arguments to functions are evaluated only when
-they are needed.  Functional means that functions are
-<quote>normal</quote> values that can be passed around and manipulated
-in interesting ways.  The language is not a full-featured, general
-purpose language.  Its main job is to describe packages,
-compositions of packages, and the variability within
-packages.</para>
-
-<para>This section presents the various features of the
-language.</para>
-
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-values">
-
-<title>Values</title>
-
-
-<simplesect><title>Simple Values</title>
-
-<para>Nix has the following basic data types:
-
-<itemizedlist>
-
-  <listitem>
-
-    <para><emphasis>Strings</emphasis> can be written in three
-    ways.</para>
-
-    <para>The most common way is to enclose the string between double
-    quotes, e.g., <literal>"foo bar"</literal>.  Strings can span
-    multiple lines.  The special characters <literal>"</literal> and
-    <literal>\</literal> and the character sequence
-    <literal>${</literal> must be escaped by prefixing them with a
-    backslash (<literal>\</literal>).  Newlines, carriage returns and
-    tabs can be written as <literal>\n</literal>,
-    <literal>\r</literal> and <literal>\t</literal>,
-    respectively.</para>
-
-    <para>You can include the result of an expression into a string by
-    enclosing it in
-    <literal>${<replaceable>...</replaceable>}</literal>, a feature
-    known as <emphasis>antiquotation</emphasis>.  The enclosed
-    expression must evaluate to something that can be coerced into a
-    string (meaning that it must be a string, a path, or a
-    derivation).  For instance, rather than writing
-
-<programlisting>
-"--with-freetype2-library=" + freetype + "/lib"</programlisting>
-
-    (where <varname>freetype</varname> is a derivation), you can
-    instead write the more natural
-
-<programlisting>
-"--with-freetype2-library=${freetype}/lib"</programlisting>
-
-    The latter is automatically translated to the former.  A more
-    complicated example (from the Nix expression for <link xlink:href="http://www.trolltech.com/products/qt">Qt</link>):
-
-<programlisting>
-configureFlags = "
-  -system-zlib -system-libpng -system-libjpeg
-  ${if openglSupport then "-dlopen-opengl
-    -L${mesa}/lib -I${mesa}/include
-    -L${libXmu}/lib -I${libXmu}/include" else ""}
-  ${if threadSupport then "-thread" else "-no-thread"}
-";</programlisting>
-
-    Note that Nix expressions and strings can be arbitrarily nested;
-    in this case the outer string contains various antiquotations that
-    themselves contain strings (e.g., <literal>"-thread"</literal>),
-    some of which in turn contain expressions (e.g.,
-    <literal>${mesa}</literal>).</para>
-
-    <para>The second way to write string literals is as an
-    <emphasis>indented string</emphasis>, which is enclosed between
-    pairs of <emphasis>double single-quotes</emphasis>, like so:
-
-<programlisting>
-''
-  This is the first line.
-  This is the second line.
-    This is the third line.
-''</programlisting>
-
-    This kind of string literal intelligently strips indentation from
-    the start of each line.  To be precise, it strips from each line a
-    number of spaces equal to the minimal indentation of the string as
-    a whole (disregarding the indentation of empty lines).  For
-    instance, the first and second line are indented two space, while
-    the third line is indented four spaces.  Thus, two spaces are
-    stripped from each line, so the resulting string is
-
-<programlisting>
-"This is the first line.\nThis is the second line.\n  This is the third line.\n"</programlisting>
-
-    </para>
-
-    <para>Note that the whitespace and newline following the opening
-    <literal>''</literal> is ignored if there is no non-whitespace
-    text on the initial line.</para>
-
-    <para>Antiquotation
-    (<literal>${<replaceable>expr</replaceable>}</literal>) is
-    supported in indented strings.</para>
-
-    <para>Since <literal>${</literal> and <literal>''</literal> have
-    special meaning in indented strings, you need a way to quote them.
-    <literal>${</literal> can be escaped by prefixing it with
-    <literal>''</literal> (that is, two single quotes), i.e.,
-    <literal>''${</literal>.  <literal>''</literal> can be escaped by
-    prefixing it with <literal>'</literal>, i.e.,
-    <literal>'''</literal>.  Finally, linefeed, carriage-return and
-    tab characters can be written as <literal>''\n</literal>,
-    <literal>''\r</literal>, <literal>''\t</literal>.</para>
-
-    <para>Indented strings are primarily useful in that they allow
-    multi-line string literals to follow the indentation of the
-    enclosing Nix expression, and that less escaping is typically
-    necessary for strings representing languages such as shell scripts
-    and configuration files because <literal>''</literal> is much less
-    common than <literal>"</literal>.  Example:
-
-<programlisting>
-stdenv.mkDerivation {
-  <replaceable>...</replaceable>
-  postInstall =
-    ''
-      mkdir $out/bin $out/etc
-      cp foo $out/bin
-      echo "Hello World" &gt; $out/etc/foo.conf
-      ${if enableBar then "cp bar $out/bin" else ""}
-    '';
-  <replaceable>...</replaceable>
-}
-</programlisting>
-
-    </para>
-
-    <para>Finally, as a convenience, <emphasis>URIs</emphasis> as
-    defined in appendix B of <link xlink:href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</link>
-    can be written <emphasis>as is</emphasis>, without quotes.  For
-    instance, the string
-    <literal>"http://example.org/foo.tar.bz2"</literal>
-    can also be written as
-    <literal>http://example.org/foo.tar.bz2</literal>.</para>
-
-  </listitem>
-
-  <listitem><para><emphasis>Integers</emphasis>, e.g.,
-  <literal>123</literal>.</para></listitem>
-
-  <listitem><para><emphasis>Paths</emphasis>, e.g.,
-  <filename>/bin/sh</filename> or <filename>./builder.sh</filename>.
-  A path must contain at least one slash to be recognised as such; for
-  instance, <filename>builder.sh</filename> is not a
-  path<footnote><para>It's parsed as an expression that selects the
-  attribute <varname>sh</varname> from the variable
-  <varname>builder</varname>.</para></footnote>.  If the file name is
-  relative, i.e., if it does not begin with a slash, it is made
-  absolute at parse time relative to the directory of the Nix
-  expression that contained it.  For instance, if a Nix expression in
-  <filename>/foo/bar/bla.nix</filename> refers to
-  <filename>../xyzzy/fnord.nix</filename>, the absolute path is
-  <filename>/foo/xyzzy/fnord.nix</filename>.</para>
-
-  <para>If the first component of a path is a <literal>~</literal>,
-  it is interpreted as if the rest of the path were relative to the
-  user's home directory. e.g. <filename>~/foo</filename> would be
-  equivalent to <filename>/home/edolstra/foo</filename> for a user
-  whose home directory is <filename>/home/edolstra</filename>.
-  </para></listitem>
-
-  <listitem><para><emphasis>Booleans</emphasis> with values
-  <literal>true</literal> and
-  <literal>false</literal>.</para></listitem>
-
-  <listitem><para>The null value, denoted as
-  <literal>null</literal>.</para></listitem>
-
-</itemizedlist>
-
-</para>
-
-</simplesect>
-
-
-<simplesect><title>Lists</title>
-
-<para>Lists are formed by enclosing a whitespace-separated list of
-values between square brackets.  For example,
-
-<programlisting>
-[ 123 ./foo.nix "abc" (f { x = y; }) ]</programlisting>
-
-defines a list of four elements, the last being the result of a call
-to the function <varname>f</varname>.  Note that function calls have
-to be enclosed in parentheses.  If they had been omitted, e.g.,
-
-<programlisting>
-[ 123 ./foo.nix "abc" f { x = y; } ]</programlisting>
-
-the result would be a list of five elements, the fourth one being a
-function and the fifth being a set.</para>
-
-<para>Note that lists are only lazy in values, and they are strict in length.
-</para>
-
-</simplesect>
-
-
-<simplesect><title>Sets</title>
-
-<para>Sets are really the core of the language, since ultimately the
-Nix language is all about creating derivations, which are really just
-sets of attributes to be passed to build scripts.</para>
-
-<para>Sets are just a list of name/value pairs (called
-<emphasis>attributes</emphasis>) enclosed in curly brackets, where
-each value is an arbitrary expression terminated by a semicolon.  For
-example:
-
-<programlisting>
-{ x = 123;
-  text = "Hello";
-  y = f { bla = 456; };
-}</programlisting>
-
-This defines a set with attributes named <varname>x</varname>,
-<varname>text</varname>, <varname>y</varname>.  The order of the
-attributes is irrelevant.  An attribute name may only occur
-once.</para>
-
-<para>Attributes can be selected from a set using the
-<literal>.</literal> operator.  For instance,
-
-<programlisting>
-{ a = "Foo"; b = "Bar"; }.a</programlisting>
-
-evaluates to <literal>"Foo"</literal>.  It is possible to provide a
-default value in an attribute selection using the
-<literal>or</literal> keyword.  For example,
-
-<programlisting>
-{ a = "Foo"; b = "Bar"; }.c or "Xyzzy"</programlisting>
-
-will evaluate to <literal>"Xyzzy"</literal> because there is no
-<varname>c</varname> attribute in the set.</para>
-
-<para>You can use arbitrary double-quoted strings as attribute
-names:
-
-<programlisting>
-{ "foo ${bar}" = 123; "nix-1.0" = 456; }."foo ${bar}"
-</programlisting>
-
-This will evaluate to <literal>123</literal> (Assuming
-<literal>bar</literal> is antiquotable). In the case where an
-attribute name is just a single antiquotation, the quotes can be
-dropped:
-
-<programlisting>
-{ foo = 123; }.${bar} or 456 </programlisting>
-
-This will evaluate to <literal>123</literal> if
-<literal>bar</literal> evaluates to <literal>"foo"</literal> when
-coerced to a string and <literal>456</literal> otherwise (again
-assuming <literal>bar</literal> is antiquotable).</para>
-
-<para>In the special case where an attribute name inside of a set declaration
-evaluates to <literal>null</literal> (which is normally an error, as
-<literal>null</literal> is not antiquotable), that attribute is simply not
-added to the set:
-
-<programlisting>
-{ ${if foo then "bar" else null} = true; }</programlisting>
-
-This will evaluate to <literal>{}</literal> if <literal>foo</literal>
-evaluates to <literal>false</literal>.</para>
-
-
-</simplesect>
-
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-constructs">
-
-<title>Language Constructs</title>
-
-<simplesect><title>Recursive sets</title>
-
-<para>Recursive sets are just normal sets, but the attributes can
-refer to each other.  For example,
-
-<programlisting>
-rec {
-  x = y;
-  y = 123;
-}.x
-</programlisting>
-
-evaluates to <literal>123</literal>.  Note that without
-<literal>rec</literal> the binding <literal>x = y;</literal> would
-refer to the variable <varname>y</varname> in the surrounding scope,
-if one exists, and would be invalid if no such variable exists.  That
-is, in a normal (non-recursive) set, attributes are not added to the
-lexical scope; in a recursive set, they are.</para>
-
-<para>Recursive sets of course introduce the danger of infinite
-recursion.  For example,
-
-<programlisting>
-rec {
-  x = y;
-  y = x;
-}.x</programlisting>
-
-does not terminate<footnote><para>Actually, Nix detects infinite
-recursion in this case and aborts (<quote>infinite recursion
-encountered</quote>).</para></footnote>.</para>
-
-</simplesect>
-
-
-<simplesect><title>Let-expressions</title>
-
-<para>A let-expression allows you define local variables for an
-expression.  For instance,
-
-<programlisting>
-let
-  x = "foo";
-  y = "bar";
-in x + y</programlisting>
-
-evaluates to <literal>"foobar"</literal>.
-
-</para>
-
-</simplesect>
-
-
-<simplesect><title>Inheriting attributes</title>
-
-<para>When defining a set it is often convenient to copy variables
-from the surrounding lexical scope (e.g., when you want to propagate
-attributes).  This can be shortened using the
-<literal>inherit</literal> keyword.  For instance,
-
-<programlisting>
-let x = 123; in
-{ inherit x;
-  y = 456;
-}</programlisting>
-
-evaluates to <literal>{ x = 123; y = 456; }</literal>.  (Note that
-this works because <varname>x</varname> is added to the lexical scope
-by the <literal>let</literal> construct.)  It is also possible to
-inherit attributes from another set.  For instance, in this fragment
-from <filename>all-packages.nix</filename>,
-
-<programlisting>
-  graphviz = (import ../tools/graphics/graphviz) {
-    inherit fetchurl stdenv libpng libjpeg expat x11 yacc;
-    inherit (xlibs) libXaw;
-  };
-
-  xlibs = {
-    libX11 = ...;
-    libXaw = ...;
-    ...
-  }
-
-  libpng = ...;
-  libjpg = ...;
-  ...</programlisting>
-
-the set used in the function call to the function defined in
-<filename>../tools/graphics/graphviz</filename> inherits a number of
-variables from the surrounding scope (<varname>fetchurl</varname>
-... <varname>yacc</varname>), but also inherits
-<varname>libXaw</varname> (the X Athena Widgets) from the
-<varname>xlibs</varname> (X11 client-side libraries) set.</para>
-
-</simplesect>
-
-
-<simplesect xml:id="ss-functions"><title>Functions</title>
-
-<para>Functions have the following form:
-
-<programlisting>
-<replaceable>pattern</replaceable>: <replaceable>body</replaceable></programlisting>
-
-The pattern specifies what the argument of the function must look
-like, and binds variables in the body to (parts of) the
-argument.  There are three kinds of patterns:</para>
-
-<itemizedlist>
-
-
-  <listitem><para>If a pattern is a single identifier, then the
-  function matches any argument.  Example:
-
-  <programlisting>
-let negate = x: !x;
-    concat = x: y: x + y;
-in if negate true then concat "foo" "bar" else ""</programlisting>
-
-  Note that <function>concat</function> is a function that takes one
-  argument and returns a function that takes another argument.  This
-  allows partial parameterisation (i.e., only filling some of the
-  arguments of a function); e.g.,
-
-  <programlisting>
-map (concat "foo") [ "bar" "bla" "abc" ]</programlisting>
-
-  evaluates to <literal>[ "foobar" "foobla"
-  "fooabc" ]</literal>.</para></listitem>
-
-
-  <listitem><para>A <emphasis>set pattern</emphasis> of the form
-  <literal>{ name1, name2, &#x2026;, nameN }</literal> matches a set
-  containing the listed attributes, and binds the values of those
-  attributes to variables in the function body.  For example, the
-  function
-
-<programlisting>
-{ x, y, z }: z + y + x</programlisting>
-
-  can only be called with a set containing exactly the attributes
-  <varname>x</varname>, <varname>y</varname> and
-  <varname>z</varname>.  No other attributes are allowed.  If you want
-  to allow additional arguments, you can use an ellipsis
-  (<literal>...</literal>):
-
-<programlisting>
-{ x, y, z, ... }: z + y + x</programlisting>
-
-  This works on any set that contains at least the three named
-  attributes.</para>
-
-  <para>It is possible to provide <emphasis>default values</emphasis>
-  for attributes, in which case they are allowed to be missing.  A
-  default value is specified by writing
-  <literal><replaceable>name</replaceable> ?
-  <replaceable>e</replaceable></literal>, where
-  <replaceable>e</replaceable> is an arbitrary expression.  For example,
-
-<programlisting>
-{ x, y ? "foo", z ? "bar" }: z + y + x</programlisting>
-
-  specifies a function that only requires an attribute named
-  <varname>x</varname>, but optionally accepts <varname>y</varname>
-  and <varname>z</varname>.</para></listitem>
-
-
-  <listitem><para>An <literal>@</literal>-pattern provides a means of referring
-  to the whole value being matched:
-
-<programlisting>
-args@{ x, y, z, ... }: z + y + x + args.a</programlisting>
-
-  Here <varname>args</varname> is bound to the entire argument, which
-  is further matched against the pattern <literal>{ x, y, z,
-  ... }</literal>.</para></listitem>
-
-
-</itemizedlist>
-
-<para>Note that functions do not have names.  If you want to give them
-a name, you can bind them to an attribute, e.g.,
-
-<programlisting>
-let concat = { x, y }: x + y;
-in concat { x = "foo"; y = "bar"; }</programlisting>
-
-</para>
-
-<para>A set that has a <literal>__functor</literal> attribute whose value
-is callable (i.e. is itself a function or a set with a
-<literal>__functor</literal> attribute whose value is callable) can be
-applied as if it were a function, with the set itself passed in first
-, e.g.,
-
-<programlisting>
-let add = { __functor = self: x: x + self.x; };
-    inc = add // { x = 1; };
-in inc 1
-</programlisting>
-
-evaluates to <literal>2</literal>. This can be used to attach metadata to a
-function without the caller needing to treat it specially, or to implement
-a form of object-oriented programming, for example.
-
-</para>
-
-</simplesect>
-
-
-<simplesect><title>Conditionals</title>
-
-<para>Conditionals look like this:
-
-<programlisting>
-if <replaceable>e1</replaceable> then <replaceable>e2</replaceable> else <replaceable>e3</replaceable></programlisting>
-
-where <replaceable>e1</replaceable> is an expression that should
-evaluate to a Boolean value (<literal>true</literal> or
-<literal>false</literal>).</para>
-
-</simplesect>
-
-
-<simplesect><title>Assertions</title>
-
-<para>Assertions are generally used to check that certain requirements
-on or between features and dependencies hold.  They look like this:
-
-<programlisting>
-assert <replaceable>e1</replaceable>; <replaceable>e2</replaceable></programlisting>
-
-where <replaceable>e1</replaceable> is an expression that should
-evaluate to a Boolean value.  If it evaluates to
-<literal>true</literal>, <replaceable>e2</replaceable> is returned;
-otherwise expression evaluation is aborted and a backtrace is printed.</para>
-
-<example xml:id="ex-subversion-nix"><title>Nix expression for Subversion</title>
-<programlisting>
-{ localServer ? false
-, httpServer ? false
-, sslSupport ? false
-, pythonBindings ? false
-, javaSwigBindings ? false
-, javahlBindings ? false
-, stdenv, fetchurl
-, openssl ? null, httpd ? null, db4 ? null, expat, swig ? null, j2sdk ? null
-}:
-
-assert localServer -&gt; db4 != null; <co xml:id="ex-subversion-nix-co-1"/>
-assert httpServer -&gt; httpd != null &amp;&amp; httpd.expat == expat; <co xml:id="ex-subversion-nix-co-2"/>
-assert sslSupport -&gt; openssl != null &amp;&amp; (httpServer -&gt; httpd.openssl == openssl); <co xml:id="ex-subversion-nix-co-3"/>
-assert pythonBindings -&gt; swig != null &amp;&amp; swig.pythonSupport;
-assert javaSwigBindings -&gt; swig != null &amp;&amp; swig.javaSupport;
-assert javahlBindings -&gt; j2sdk != null;
-
-stdenv.mkDerivation {
-  name = "subversion-1.1.1";
-  ...
-  openssl = if sslSupport then openssl else null; <co xml:id="ex-subversion-nix-co-4"/>
-  ...
-}</programlisting>
-</example>
-
-<para><xref linkend="ex-subversion-nix"/> show how assertions are
-used in the Nix expression for Subversion.</para>
-
-<calloutlist>
-
-  <callout arearefs="ex-subversion-nix-co-1">
-    <para>This assertion states that if Subversion is to have support
-    for local repositories, then Berkeley DB is needed.  So if the
-    Subversion function is called with the
-    <varname>localServer</varname> argument set to
-    <literal>true</literal> but the <varname>db4</varname> argument
-    set to <literal>null</literal>, then the evaluation fails.</para>
-  </callout>
-
-  <callout arearefs="ex-subversion-nix-co-2">
-    <para>This is a more subtle condition: if Subversion is built with
-    Apache (<literal>httpServer</literal>) support, then the Expat
-    library (an XML library) used by Subversion should be same as the
-    one used by Apache.  This is because in this configuration
-    Subversion code ends up being linked with Apache code, and if the
-    Expat libraries do not match, a build- or runtime link error or
-    incompatibility might occur.</para>
-  </callout>
-
-  <callout arearefs="ex-subversion-nix-co-3">
-    <para>This assertion says that in order for Subversion to have SSL
-    support (so that it can access <literal>https</literal> URLs), an
-    OpenSSL library must be passed.  Additionally, it says that
-    <emphasis>if</emphasis> Apache support is enabled, then Apache's
-    OpenSSL should match Subversion's.  (Note that if Apache support
-    is not enabled, we don't care about Apache's OpenSSL.)</para>
-  </callout>
-
-  <callout arearefs="ex-subversion-nix-co-4">
-    <para>The conditional here is not really related to assertions,
-    but is worth pointing out: it ensures that if SSL support is
-    disabled, then the Subversion derivation is not dependent on
-    OpenSSL, even if a non-<literal>null</literal> value was passed.
-    This prevents an unnecessary rebuild of Subversion if OpenSSL
-    changes.</para>
-  </callout>
-
-</calloutlist>
-
-</simplesect>
-
-
-
-<simplesect><title>With-expressions</title>
-
-<para>A <emphasis>with-expression</emphasis>,
-
-<programlisting>
-with <replaceable>e1</replaceable>; <replaceable>e2</replaceable></programlisting>
-
-introduces the set <replaceable>e1</replaceable> into the lexical
-scope of the expression <replaceable>e2</replaceable>.  For instance,
-
-<programlisting>
-let as = { x = "foo"; y = "bar"; };
-in with as; x + y</programlisting>
-
-evaluates to <literal>"foobar"</literal> since the
-<literal>with</literal> adds the <varname>x</varname> and
-<varname>y</varname> attributes of <varname>as</varname> to the
-lexical scope in the expression <literal>x + y</literal>.  The most
-common use of <literal>with</literal> is in conjunction with the
-<function>import</function> function.  E.g.,
-
-<programlisting>
-with (import ./definitions.nix); ...</programlisting>
-
-makes all attributes defined in the file
-<filename>definitions.nix</filename> available as if they were defined
-locally in a <literal>rec</literal>-expression.</para>
-
-</simplesect>
-
-
-<simplesect><title>Comments</title>
-
-<para>Comments can be single-line, started with a <literal>#</literal>
-character, or inline/multi-line, enclosed within <literal>/*
-... */</literal>.</para>
-
-</simplesect>
-
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-language-operators">
-
-<title>Operators</title>
-
-<para><xref linkend="table-operators"/> lists the operators in the
-Nix expression language, in order of precedence (from strongest to
-weakest binding).</para>
-
-<table xml:id="table-operators">
-  <title>Operators</title>
-  <tgroup cols="3">
-    <thead>
-      <row>
-        <entry>Syntax</entry>
-        <entry>Associativity</entry>
-        <entry>Description</entry>
-      </row>
-    </thead>
-    <tbody>
-      <row>
-        <entry><replaceable>e</replaceable> <literal>.</literal>
-        <replaceable>attrpath</replaceable>
-        [ <literal>or</literal> <replaceable>def</replaceable> ]
-        </entry>
-        <entry>none</entry>
-        <entry>Select attribute denoted by the attribute path
-        <replaceable>attrpath</replaceable> from set
-        <replaceable>e</replaceable>.  (An attribute path is a
-        dot-separated list of attribute names.)  If the attribute
-        doesn&#x2019;t exist, return <replaceable>def</replaceable> if
-        provided, otherwise abort evaluation.</entry>
-      </row>
-      <row>
-        <entry><replaceable>e1</replaceable> <replaceable>e2</replaceable></entry>
-        <entry>left</entry>
-        <entry>Call function <replaceable>e1</replaceable> with
-        argument <replaceable>e2</replaceable>.</entry>
-      </row>
-      <row>
-        <entry><replaceable>e</replaceable> <literal>?</literal>
-        <replaceable>attrpath</replaceable></entry>
-        <entry>none</entry>
-        <entry>Test whether set <replaceable>e</replaceable> contains
-        the attribute denoted by <replaceable>attrpath</replaceable>;
-        return <literal>true</literal> or
-        <literal>false</literal>.</entry>
-      </row>
-      <row>
-        <entry><replaceable>e1</replaceable> <literal>++</literal> <replaceable>e2</replaceable></entry>
-        <entry>right</entry>
-        <entry>List concatenation.</entry>
-      </row>
-      <row>
-        <entry><replaceable>e1</replaceable> <literal>+</literal> <replaceable>e2</replaceable></entry>
-        <entry>left</entry>
-        <entry>String or path concatenation.</entry>
-      </row>
-      <row>
-        <entry><literal>!</literal> <replaceable>e</replaceable></entry>
-        <entry>left</entry>
-        <entry>Boolean negation.</entry>
-      </row>
-      <row>
-        <entry><replaceable>e1</replaceable> <literal>//</literal>
-        <replaceable>e2</replaceable></entry>
-        <entry>right</entry>
-        <entry>Return a set consisting of the attributes in
-        <replaceable>e1</replaceable> and
-        <replaceable>e2</replaceable> (with the latter taking
-        precedence over the former in case of equally named
-        attributes).</entry>
-      </row>
-      <row>
-        <entry><replaceable>e1</replaceable> <literal>==</literal>
-        <replaceable>e2</replaceable></entry>
-        <entry>none</entry>
-        <entry>Equality.</entry>
-      </row>
-      <row>
-        <entry><replaceable>e1</replaceable> <literal>!=</literal>
-        <replaceable>e2</replaceable></entry>
-        <entry>none</entry>
-        <entry>Inequality.</entry>
-      </row>
-      <row>
-        <entry><replaceable>e1</replaceable> <literal>&amp;&amp;</literal>
-        <replaceable>e2</replaceable></entry>
-        <entry>left</entry>
-        <entry>Logical AND.</entry>
-      </row>
-      <row>
-        <entry><replaceable>e1</replaceable> <literal>||</literal>
-        <replaceable>e2</replaceable></entry>
-        <entry>left</entry>
-        <entry>Logical OR.</entry>
-      </row>
-      <row>
-        <entry><replaceable>e1</replaceable> <literal>-&gt;</literal>
-        <replaceable>e2</replaceable></entry>
-        <entry>none</entry>
-        <entry>Logical implication (equivalent to
-        <literal>!<replaceable>e1</replaceable> ||
-        <replaceable>e2</replaceable></literal>).</entry>
-      </row>
-    </tbody>
-  </tgroup>
-</table>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-derivation">
-
-<title>Derivations</title>
-
-<para>The most important built-in function is
-<function>derivation</function>, which is used to describe a single
-derivation (a build action).  It takes as input a set, the attributes
-of which specify the inputs of the build.</para>
-
-<itemizedlist>
-
-  <listitem xml:id="attr-system"><para>There must be an attribute named
-  <varname>system</varname> whose value must be a string specifying a
-  Nix platform identifier, such as <literal>"i686-linux"</literal> or
-  <literal>"powerpc-darwin"</literal><footnote><para>To figure out
-  your platform identifier, look at the line <quote>Checking for the
-  canonical Nix system name</quote> in the output of Nix's
-  <filename>configure</filename> script.</para></footnote> The build
-  can only be performed on a machine and operating system matching the
-  platform identifier.  (Nix can automatically forward builds for
-  other platforms by forwarding them to other machines; see <xref linkend="chap-distributed-builds"/>.)</para></listitem>
-
-  <listitem><para>There must be an attribute named
-  <varname>name</varname> whose value must be a string.  This is used
-  as a symbolic name for the package by <command>nix-env</command>,
-  and it is appended to the output paths of the
-  derivation.</para></listitem>
-
-  <listitem><para>There must be an attribute named
-  <varname>builder</varname> that identifies the program that is
-  executed to perform the build.  It can be either a derivation or a
-  source (a local file reference, e.g.,
-  <filename>./builder.sh</filename>).</para></listitem>
-
-  <listitem><para>Every attribute is passed as an environment variable
-  to the builder.  Attribute values are translated to environment
-  variables as follows:
-
-    <itemizedlist>
-
-      <listitem><para>Strings and integers are just passed
-      verbatim.</para></listitem>
-
-      <listitem><para>A <emphasis>path</emphasis> (e.g.,
-      <filename>../foo/sources.tar</filename>) causes the referenced
-      file to be copied to the store; its location in the store is put
-      in the environment variable.  The idea is that all sources
-      should reside in the Nix store, since all inputs to a derivation
-      should reside in the Nix store.</para></listitem>
-
-      <listitem><para>A <emphasis>derivation</emphasis> causes that
-      derivation to be built prior to the present derivation; its
-      default output path is put in the environment
-      variable.</para></listitem>
-
-      <listitem><para>Lists of the previous types are also allowed.
-      They are simply concatenated, separated by
-      spaces.</para></listitem>
-
-      <listitem><para><literal>true</literal> is passed as the string
-      <literal>1</literal>, <literal>false</literal> and
-      <literal>null</literal> are passed as an empty string.
-      </para></listitem>
-    </itemizedlist>
-
-  </para></listitem>
-
-  <listitem><para>The optional attribute <varname>args</varname>
-  specifies command-line arguments to be passed to the builder.  It
-  should be a list.</para></listitem>
-
-  <listitem><para>The optional attribute <varname>outputs</varname>
-  specifies a list of symbolic outputs of the derivation.  By default,
-  a derivation produces a single output path, denoted as
-  <literal>out</literal>.  However, derivations can produce multiple
-  output paths.  This is useful because it allows outputs to be
-  downloaded or garbage-collected separately.  For instance, imagine a
-  library package that provides a dynamic library, header files, and
-  documentation.  A program that links against the library doesn&#x2019;t
-  need the header files and documentation at runtime, and it doesn&#x2019;t
-  need the documentation at build time.  Thus, the library package
-  could specify:
-<programlisting>
-outputs = [ "lib" "headers" "doc" ];
-</programlisting>
-  This will cause Nix to pass environment variables
-  <literal>lib</literal>, <literal>headers</literal> and
-  <literal>doc</literal> to the builder containing the intended store
-  paths of each output.  The builder would typically do something like
-<programlisting>
-./configure --libdir=$lib/lib --includedir=$headers/include --docdir=$doc/share/doc
-</programlisting>
-  for an Autoconf-style package.  You can refer to each output of a
-  derivation by selecting it as an attribute, e.g.
-<programlisting>
-buildInputs = [ pkg.lib pkg.headers ];
-</programlisting>
-  The first element of <varname>output</varname> determines the
-  <emphasis>default output</emphasis>.  Thus, you could also write
-<programlisting>
-buildInputs = [ pkg pkg.headers ];
-</programlisting>
-  since <literal>pkg</literal> is equivalent to
-  <literal>pkg.lib</literal>.</para></listitem>
-
-</itemizedlist>
-
-<para>The function <function>mkDerivation</function> in the Nixpkgs
-standard environment is a wrapper around
-<function>derivation</function> that adds a default value for
-<varname>system</varname> and always uses Bash as the builder, to
-which the supplied builder is passed as a command-line argument.  See
-the Nixpkgs manual for details.</para>
-
-<para>The builder is executed as follows:
-
-<itemizedlist>
-
-  <listitem><para>A temporary directory is created under the directory
-  specified by <envar>TMPDIR</envar> (default
-  <filename>/tmp</filename>) where the build will take place.  The
-  current directory is changed to this directory.</para></listitem>
-
-  <listitem><para>The environment is cleared and set to the derivation
-  attributes, as specified above.</para></listitem>
-
-  <listitem><para>In addition, the following variables are set:
-
-  <itemizedlist>
-
-    <listitem><para><envar>NIX_BUILD_TOP</envar> contains the path of
-    the temporary directory for this build.</para></listitem>
-
-    <listitem><para>Also, <envar>TMPDIR</envar>,
-    <envar>TEMPDIR</envar>, <envar>TMP</envar>, <envar>TEMP</envar>
-    are set to point to the temporary directory.  This is to prevent
-    the builder from accidentally writing temporary files anywhere
-    else.  Doing so might cause interference by other
-    processes.</para></listitem>
-
-    <listitem><para><envar>PATH</envar> is set to
-    <filename>/path-not-set</filename> to prevent shells from
-    initialising it to their built-in default value.</para></listitem>
-
-    <listitem><para><envar>HOME</envar> is set to
-    <filename>/homeless-shelter</filename> to prevent programs from
-    using <filename>/etc/passwd</filename> or the like to find the
-    user's home directory, which could cause impurity.  Usually, when
-    <envar>HOME</envar> is set, it is used as the location of the home
-    directory, even if it points to a non-existent
-    path.</para></listitem>
-
-    <listitem><para><envar>NIX_STORE</envar> is set to the path of the
-    top-level Nix store directory (typically,
-    <filename>/nix/store</filename>).</para></listitem>
-
-    <listitem><para>For each output declared in
-    <varname>outputs</varname>, the corresponding environment variable
-    is set to point to the intended path in the Nix store for that
-    output.  Each output path is a concatenation of the cryptographic
-    hash of all build inputs, the <varname>name</varname> attribute
-    and the output name.  (The output name is omitted if it&#x2019;s
-    <literal>out</literal>.)</para></listitem>
-
-  </itemizedlist>
-
-  </para></listitem>
-
-  <listitem><para>If an output path already exists, it is removed.
-  Also, locks are acquired to prevent multiple Nix instances from
-  performing the same build at the same time.</para></listitem>
-
-  <listitem><para>A log of the combined standard output and error is
-  written to <filename>/nix/var/log/nix</filename>.</para></listitem>
-
-  <listitem><para>The builder is executed with the arguments specified
-  by the attribute <varname>args</varname>.  If it exits with exit
-  code 0, it is considered to have succeeded.</para></listitem>
-
-  <listitem><para>The temporary directory is removed (unless the
-  <option>-K</option> option was specified).</para></listitem>
-
-  <listitem><para>If the build was successful, Nix scans each output
-  path for references to input paths by looking for the hash parts of
-  the input paths.  Since these are potential runtime dependencies,
-  Nix registers them as dependencies of the output
-  paths.</para></listitem>
-
-  <listitem><para>After the build, Nix sets the last-modified
-  timestamp on all files in the build result to 1 (00:00:01 1/1/1970
-  UTC), sets the group to the default group, and sets the mode of the
-  file to 0444 or 0555 (i.e., read-only, with execute permission
-  enabled if the file was originally executable).  Note that possible
-  <literal>setuid</literal> and <literal>setgid</literal> bits are
-  cleared.  Setuid and setgid programs are not currently supported by
-  Nix.  This is because the Nix archives used in deployment have no
-  concept of ownership information, and because it makes the build
-  result dependent on the user performing the build.</para></listitem>
-
-</itemizedlist>
-
-</para>
-
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-advanced-attributes">
-
-<title>Advanced Attributes</title>
-
-<para>Derivations can declare some infrequently used optional
-attributes.</para>
-
-<variablelist>
-
-  <varlistentry><term><varname>allowedReferences</varname></term>
-
-    <listitem><para>The optional attribute
-    <varname>allowedReferences</varname> specifies a list of legal
-    references (dependencies) of the output of the builder.  For
-    example,
-
-<programlisting>
-allowedReferences = [];
-</programlisting>
-
-    enforces that the output of a derivation cannot have any runtime
-    dependencies on its inputs.  To allow an output to have a runtime
-    dependency on itself, use <literal>"out"</literal> as a list item.
-    This is used in NixOS to check that generated files such as
-    initial ramdisks for booting Linux don&#x2019;t have accidental
-    dependencies on other paths in the Nix store.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><varname>allowedRequisites</varname></term>
-
-    <listitem><para>This attribute is similar to
-    <varname>allowedReferences</varname>, but it specifies the legal
-    requisites of the whole closure, so all the dependencies
-    recursively.  For example,
-
-<programlisting>
-allowedRequisites = [ foobar ];
-</programlisting>
-
-    enforces that the output of a derivation cannot have any other
-    runtime dependency than <varname>foobar</varname>, and in addition
-    it enforces that <varname>foobar</varname> itself doesn't
-    introduce any other dependency itself.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><varname>exportReferencesGraph</varname></term>
-
-    <listitem><para>This attribute allows builders access to the
-    references graph of their inputs.  The attribute is a list of
-    inputs in the Nix store whose references graph the builder needs
-    to know.  The value of this attribute should be a list of pairs
-    <literal>[ <replaceable>name1</replaceable>
-    <replaceable>path1</replaceable> <replaceable>name2</replaceable>
-    <replaceable>path2</replaceable> <replaceable>...</replaceable>
-    ]</literal>.  The references graph of each
-    <replaceable>pathN</replaceable> will be stored in a text file
-    <replaceable>nameN</replaceable> in the temporary build directory.
-    The text files have the format used by <command>nix-store
-    --register-validity</command> (with the deriver fields left
-    empty).  For example, when the following derivation is built:
-
-<programlisting>
-derivation {
-  ...
-  exportReferencesGraph = [ "libfoo-graph" libfoo ];
-};
-</programlisting>
-
-    the references graph of <literal>libfoo</literal> is placed in the
-    file <filename>libfoo-graph</filename> in the temporary build
-    directory.</para>
-
-    <para><varname>exportReferencesGraph</varname> is useful for
-    builders that want to do something with the closure of a store
-    path.  Examples include the builders in NixOS that generate the
-    initial ramdisk for booting Linux (a <command>cpio</command>
-    archive containing the closure of the boot script) and the
-    ISO-9660 image for the installation CD (which is populated with a
-    Nix store containing the closure of a bootable NixOS
-    configuration).</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><varname>impureEnvVars</varname></term>
-
-    <listitem><para>This attribute allows you to specify a list of
-    environment variables that should be passed from the environment
-    of the calling user to the builder.  Usually, the environment is
-    cleared completely when the builder is executed, but with this
-    attribute you can allow specific environment variables to be
-    passed unmodified.  For example, <function>fetchurl</function> in
-    Nixpkgs has the line
-
-<programlisting>
-impureEnvVars = [ "http_proxy" "https_proxy" <replaceable>...</replaceable> ];
-</programlisting>
-
-    to make it use the proxy server configuration specified by the
-    user in the environment variables <envar>http_proxy</envar> and
-    friends.</para>
-
-    <para>This attribute is only allowed in <link linkend="fixed-output-drvs">fixed-output derivations</link>, where
-    impurities such as these are okay since (the hash of) the output
-    is known in advance.  It is ignored for all other
-    derivations.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="fixed-output-drvs">
-    <term><varname>outputHash</varname></term>
-    <term><varname>outputHashAlgo</varname></term>
-    <term><varname>outputHashMode</varname></term>
-
-    <listitem><para>These attributes declare that the derivation is a
-    so-called <emphasis>fixed-output derivation</emphasis>, which
-    means that a cryptographic hash of the output is already known in
-    advance.  When the build of a fixed-output derivation finishes,
-    Nix computes the cryptographic hash of the output and compares it
-    to the hash declared with these attributes.  If there is a
-    mismatch, the build fails.</para>
-
-    <para>The rationale for fixed-output derivations is derivations
-    such as those produced by the <function>fetchurl</function>
-    function.  This function downloads a file from a given URL.  To
-    ensure that the downloaded file has not been modified, the caller
-    must also specify a cryptographic hash of the file.  For example,
-
-<programlisting>
-fetchurl {
-  url = http://ftp.gnu.org/pub/gnu/hello/hello-2.1.1.tar.gz;
-  md5 = "70c9ccf9fac07f762c24f2df2290784d";
-}
-</programlisting>
-
-    It sometimes happens that the URL of the file changes, e.g.,
-    because servers are reorganised or no longer available.  We then
-    must update the call to <function>fetchurl</function>, e.g.,
-
-<programlisting>
-fetchurl {
-  url = ftp://ftp.nluug.nl/pub/gnu/hello/hello-2.1.1.tar.gz;
-  md5 = "70c9ccf9fac07f762c24f2df2290784d";
-}
-</programlisting>
-
-    If a <function>fetchurl</function> derivation was treated like a
-    normal derivation, the output paths of the derivation and
-    <emphasis>all derivations depending on it</emphasis> would change.
-    For instance, if we were to change the URL of the Glibc source
-    distribution in Nixpkgs (a package on which almost all other
-    packages depend) massive rebuilds would be needed.  This is
-    unfortunate for a change which we know cannot have a real effect
-    as it propagates upwards through the dependency graph.</para>
-
-    <para>For fixed-output derivations, on the other hand, the name of
-    the output path only depends on the <varname>outputHash*</varname>
-    and <varname>name</varname> attributes, while all other attributes
-    are ignored for the purpose of computing the output path.  (The
-    <varname>name</varname> attribute is included because it is part
-    of the path.)</para>
-
-    <para>As an example, here is the (simplified) Nix expression for
-    <varname>fetchurl</varname>:
-
-<programlisting>
-{ stdenv, curl }: # The <command>curl</command> program is used for downloading.
-
-{ url, md5 }:
-
-stdenv.mkDerivation {
-  name = baseNameOf (toString url);
-  builder = ./builder.sh;
-  buildInputs = [ curl ];
-
-  # This is a fixed-output derivation; the output must be a regular
-  # file with MD5 hash <varname>md5</varname>.
-  outputHashMode = "flat";
-  outputHashAlgo = "md5";
-  outputHash = md5;
-
-  inherit url;
-}
-</programlisting>
-
-    </para>
-
-    <para>The <varname>outputHashAlgo</varname> attribute specifies
-    the hash algorithm used to compute the hash.  It can currently be
-    <literal>"md5"</literal>, <literal>"sha1"</literal> or
-    <literal>"sha256"</literal>.</para>
-
-    <para>The <varname>outputHashMode</varname> attribute determines
-    how the hash is computed.  It must be one of the following two
-    values:
-
-    <variablelist>
-
-      <varlistentry><term><literal>"flat"</literal></term>
-
-        <listitem><para>The output must be a non-executable regular
-        file.  If it isn&#x2019;t, the build fails.  The hash is simply
-        computed over the contents of that file (so it&#x2019;s equal to what
-        Unix commands like <command>md5sum</command> or
-        <command>sha1sum</command> produce).</para>
-
-        <para>This is the default.</para></listitem>
-
-      </varlistentry>
-
-      <varlistentry><term><literal>"recursive"</literal></term>
-
-        <listitem><para>The hash is computed over the NAR archive dump
-        of the output (i.e., the result of <link linkend="refsec-nix-store-dump"><command>nix-store
-        --dump</command></link>).  In this case, the output can be
-        anything, including a directory tree.</para></listitem>
-
-      </varlistentry>
-
-    </variablelist>
-
-    </para>
-
-    <para>The <varname>outputHash</varname> attribute, finally, must
-    be a string containing the hash in either hexadecimal or base-32
-    notation.  (See the <link linkend="sec-nix-hash"><command>nix-hash</command> command</link>
-    for information about converting to and from base-32
-    notation.)</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><varname>passAsFile</varname></term>
-
-    <listitem><para>A list of names of attributes that should be
-    passed via files rather than environment variables.  For example,
-    if you have
-
-    <programlisting>
-passAsFile = ["big"];
-big = "a very long string";
-    </programlisting>
-
-    then when the builder runs, the environment variable
-    <envar>bigPath</envar> will contain the absolute path to a
-    temporary file containing <literal>a very long
-    string</literal>. That is, for any attribute
-    <replaceable>x</replaceable> listed in
-    <varname>passAsFile</varname>, Nix will pass an environment
-    variable <envar><replaceable>x</replaceable>Path</envar> holding
-    the path of the file containing the value of attribute
-    <replaceable>x</replaceable>. This is useful when you need to pass
-    large strings to a builder, since most operating systems impose a
-    limit on the size of the environment (typically, a few hundred
-    kilobyte).</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><varname>preferLocalBuild</varname></term>
-
-    <listitem><para>If this attribute is set to
-    <literal>true</literal>, it has two effects.  First, the
-    derivation will always be built, not substituted, even if a
-    substitute is available.  Second, if <link linkend="chap-distributed-builds">distributed building is
-    enabled</link>, then, if possible, the derivaton will be built
-    locally instead of forwarded to a remote machine.  This is
-    appropriate for trivial builders where the cost of doing a
-    download or remote build would exceed the cost of building
-    locally.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</section>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-builtins">
-
-<title>Built-in Functions</title>
-
-<para>This section lists the functions and constants built into the
-Nix expression evaluator.  (The built-in function
-<function>derivation</function> is discussed above.)  Some built-ins,
-such as <function>derivation</function>, are always in scope of every
-Nix expression; you can just access them right away.  But to prevent
-polluting the namespace too much, most built-ins are not in scope.
-Instead, you can access them through the <varname>builtins</varname>
-built-in value, which is a set that contains all built-in functions
-and values.  For instance, <function>derivation</function> is also
-available as <function>builtins.derivation</function>.</para>
-
-
-<variablelist>
-
-
-  <varlistentry><term><function>abort</function> <replaceable>s</replaceable></term>
-
-    <listitem><para>Abort Nix expression evaluation, print error
-    message <replaceable>s</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.add</function>
-  <replaceable>e1</replaceable> <replaceable>e2</replaceable></term>
-
-    <listitem><para>Return the sum of the integers
-    <replaceable>e1</replaceable> and
-    <replaceable>e2</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.all</function>
-  <replaceable>pred</replaceable> <replaceable>list</replaceable></term>
-
-    <listitem><para>Return <literal>true</literal> if the function
-    <replaceable>pred</replaceable> returns <literal>true</literal>
-    for all elements of <replaceable>list</replaceable>,
-    and <literal>false</literal> otherwise.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.any</function>
-  <replaceable>pred</replaceable> <replaceable>list</replaceable></term>
-
-    <listitem><para>Return <literal>true</literal> if the function
-    <replaceable>pred</replaceable> returns <literal>true</literal>
-    for at least one element of <replaceable>list</replaceable>,
-    and <literal>false</literal> otherwise.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.attrNames</function>
-  <replaceable>set</replaceable></term>
-
-    <listitem><para>Return the names of the attributes in the set
-    <replaceable>set</replaceable> in a sorted list.  For instance,
-    <literal>builtins.attrNames { y = 1; x = "foo"; }</literal>
-    evaluates to <literal>[ "x" "y" ]</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.attrValues</function>
-  <replaceable>set</replaceable></term>
-
-    <listitem><para>Return the values of the attributes in the set
-    <replaceable>set</replaceable> in the order corresponding to the
-    sorted attribute names.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>baseNameOf</function> <replaceable>s</replaceable></term>
-
-    <listitem><para>Return the <emphasis>base name</emphasis> of the
-    string <replaceable>s</replaceable>, that is, everything following
-    the final slash in the string.  This is similar to the GNU
-    <command>basename</command> command.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><varname>builtins</varname></term>
-
-    <listitem><para>The set <varname>builtins</varname> contains all
-    the built-in functions and values.  You can use
-    <varname>builtins</varname> to test for the availability of
-    features in the Nix installation, e.g.,
-
-<programlisting>
-if builtins ? getEnv then builtins.getEnv "PATH" else ""</programlisting>
-
-    This allows a Nix expression to fall back gracefully on older Nix
-    installations that don&#x2019;t have the desired built-in
-    function.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.compareVersions</function>
-  <replaceable>s1</replaceable> <replaceable>s2</replaceable></term>
-
-    <listitem><para>Compare two strings representing versions and
-    return <literal>-1</literal> if version
-    <replaceable>s1</replaceable> is older than version
-    <replaceable>s2</replaceable>, <literal>0</literal> if they are
-    the same, and <literal>1</literal> if
-    <replaceable>s1</replaceable> is newer than
-    <replaceable>s2</replaceable>.  The version comparison algorithm
-    is the same as the one used by <link linkend="ssec-version-comparisons"><command>nix-env
-    -u</command></link>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.concatLists</function>
-  <replaceable>lists</replaceable></term>
-
-    <listitem><para>Concatenate a list of lists into a single
-    list.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="builtin-currentSystem"><term><varname>builtins.currentSystem</varname></term>
-
-    <listitem><para>The built-in value <varname>currentSystem</varname>
-    evaluates to the Nix platform identifier for the Nix installation
-    on which the expression is being evaluated, such as
-    <literal>"i686-linux"</literal> or
-    <literal>"powerpc-darwin"</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <!--
-  <varlistentry><term><function>currentTime</function></term>
-
-    <listitem><para>The built-in value <varname>currentTime</varname>
-    returns the current system time in seconds since 00:00:00 1/1/1970
-    UTC.  Due to the evaluation model of Nix expressions
-    (<emphasis>maximal laziness</emphasis>), it always yields the same
-    value within an execution of Nix.</para></listitem>
-
-  </varlistentry>
-  -->
-
-
-  <!--
-  <varlistentry><term><function>dependencyClosure</function></term>
-
-    <listitem><para>TODO</para></listitem>
-
-  </varlistentry>
-  -->
-
-
-  <varlistentry><term><function>builtins.deepSeq</function>
-  <replaceable>e1</replaceable> <replaceable>e2</replaceable></term>
-
-    <listitem><para>This is like <literal>seq
-    <replaceable>e1</replaceable>
-    <replaceable>e2</replaceable></literal>, except that
-    <replaceable>e1</replaceable> is evaluated
-    <emphasis>deeply</emphasis>: if it&#x2019;s a list or set, its elements
-    or attributes are also evaluated recursively.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>derivation</function>
-  <replaceable>attrs</replaceable></term>
-
-    <listitem><para><function>derivation</function> is described in
-    <xref linkend="ssec-derivation"/>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>dirOf</function> <replaceable>s</replaceable></term>
-
-    <listitem><para>Return the directory part of the string
-    <replaceable>s</replaceable>, that is, everything before the final
-    slash in the string.  This is similar to the GNU
-    <command>dirname</command> command.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.div</function>
-  <replaceable>e1</replaceable> <replaceable>e2</replaceable></term>
-
-    <listitem><para>Return the quotient of the integers
-    <replaceable>e1</replaceable> and
-    <replaceable>e2</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.elem</function>
-  <replaceable>x</replaceable> <replaceable>xs</replaceable></term>
-
-    <listitem><para>Return <literal>true</literal> if a value equal to
-    <replaceable>x</replaceable> occurs in the list
-    <replaceable>xs</replaceable>, and <literal>false</literal>
-    otherwise.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.elemAt</function>
-  <replaceable>xs</replaceable> <replaceable>n</replaceable></term>
-
-    <listitem><para>Return element <replaceable>n</replaceable> from
-    the list <replaceable>xs</replaceable>.  Elements are counted
-    starting from 0.  A fatal error occurs in the index is out of
-    bounds.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.fetchurl</function>
-  <replaceable>url</replaceable></term>
-
-    <listitem><para>Download the specified URL and return the path of
-    the downloaded file. This function is not available if <link linkend="conf-restrict-eval">restricted evaluation mode</link> is
-    enabled.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>fetchTarball</function>
-  <replaceable>url</replaceable></term>
-
-    <listitem><para>Download the specified URL, unpack it and return
-    the path of the unpacked tree. The file must be a tape archive
-    (<filename>.tar</filename>) compressed with
-    <literal>gzip</literal>, <literal>bzip2</literal> or
-    <literal>xz</literal>. The top-level path component of the files
-    in the tarball is removed, so it is best if the tarball contains a
-    single directory at top level. The typical use of the function is
-    to obtain external Nix expression dependencies, such as a
-    particular version of Nixpkgs, e.g.
-
-<programlisting>
-with import (fetchTarball https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz) {};
-
-stdenv.mkDerivation { &#x2026; }
-</programlisting>
-
-    </para>
-
-    <para>This function is not available if <link linkend="conf-restrict-eval">restricted evaluation mode</link> is
-    enabled.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.filter</function>
-  <replaceable>f</replaceable> <replaceable>xs</replaceable></term>
-
-    <listitem><para>Return a list consisting of the elements of
-    <replaceable>xs</replaceable> for which the function
-    <replaceable>f</replaceable> returns
-    <literal>true</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.filterSource</function>
-  <replaceable>e1</replaceable> <replaceable>e2</replaceable></term>
-
-    <listitem>
-
-      <para>This function allows you to copy sources into the Nix
-      store while filtering certain files.  For instance, suppose that
-      you want to use the directory <filename>source-dir</filename> as
-      an input to a Nix expression, e.g.
-
-<programlisting>
-stdenv.mkDerivation {
-  ...
-  src = ./source-dir;
-}
-</programlisting>
-
-      However, if <filename>source-dir</filename> is a Subversion
-      working copy, then all those annoying <filename>.svn</filename>
-      subdirectories will also be copied to the store.  Worse, the
-      contents of those directories may change a lot, causing lots of
-      spurious rebuilds.  With <function>filterSource</function> you
-      can filter out the <filename>.svn</filename> directories:
-
-<programlisting>
-  src = builtins.filterSource
-    (path: type: type != "directory" || baseNameOf path != ".svn")
-    ./source-dir;
-</programlisting>
-
-      </para>
-
-      <para>Thus, the first argument <replaceable>e1</replaceable>
-      must be a predicate function that is called for each regular
-      file, directory or symlink in the source tree
-      <replaceable>e2</replaceable>.  If the function returns
-      <literal>true</literal>, the file is copied to the Nix store,
-      otherwise it is omitted.  The function is called with two
-      arguments.  The first is the full path of the file.  The second
-      is a string that identifies the type of the file, which is
-      either <literal>"regular"</literal>,
-      <literal>"directory"</literal>, <literal>"symlink"</literal> or
-      <literal>"unknown"</literal> (for other kinds of files such as
-      device nodes or fifos &#x2014; but note that those cannot be copied to
-      the Nix store, so if the predicate returns
-      <literal>true</literal> for them, the copy will fail).</para>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.foldl&#x2019;</function>
-    <replaceable>op</replaceable> <replaceable>nul</replaceable> <replaceable>list</replaceable></term>
-
-    <listitem><para>Reduce a list by applying a binary operator, from
-    left to right, e.g. <literal>foldl&#x2019; op nul [x0 x1 x2 ...] = op (op
-    (op nul x0) x1) x2) ...</literal>. The operator is applied
-    strictly, i.e., its arguments are evaluated first. For example,
-    <literal>foldl&#x2019; (x: y: x + y) 0 [1 2 3]</literal> evaluates to
-    6.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.functionArgs</function>
-    <replaceable>f</replaceable></term>
-
-    <listitem><para>
-    Return a set containing the names of the formal arguments expected
-    by the function <replaceable>f</replaceable>.
-    The value of each attribute is a Boolean denoting whether the corresponding
-    argument has a default value.  For instance,
-    <literal>functionArgs ({ x, y ? 123}: ...)  =  { x = false; y = true; }</literal>.
-    </para>
-
-    <para>"Formal argument" here refers to the attributes pattern-matched by
-    the function.  Plain lambdas are not included, e.g.
-    <literal>functionArgs (x: ...)  =  { }</literal>.
-    </para></listitem>
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.fromJSON</function> <replaceable>e</replaceable></term>
-
-    <listitem><para>Convert a JSON string to a Nix
-    value. For example,
-
-<programlisting>
-builtins.fromJSON ''{"x": [1, 2, 3], "y": null}''
-</programlisting>
-
-    returns the value <literal>{ x = [ 1 2 3 ]; y = null;
-    }</literal>. Floating point numbers are not
-    supported.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.genList</function>
-  <replaceable>generator</replaceable> <replaceable>length</replaceable></term>
-
-    <listitem><para>Generate list of size
-    <replaceable>length</replaceable>, with each element
-    <replaceable>i&gt;</replaceable> equal to the value returned by
-    <replaceable>generator</replaceable> <literal>i</literal>. For
-    example,
-
-<programlisting>
-builtins.genList (x: x * x) 5
-</programlisting>
-
-    returns the list <literal>[ 0 1 4 9 16 ]</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.getAttr</function>
-  <replaceable>s</replaceable> <replaceable>set</replaceable></term>
-
-    <listitem><para><function>getAttr</function> returns the attribute
-    named <replaceable>s</replaceable> from
-    <replaceable>set</replaceable>.  Evaluation aborts if the
-    attribute doesn&#x2019;t exist.  This is a dynamic version of the
-    <literal>.</literal> operator, since <replaceable>s</replaceable>
-    is an expression rather than an identifier.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.getEnv</function>
-  <replaceable>s</replaceable></term>
-
-    <listitem><para><function>getEnv</function> returns the value of
-    the environment variable <replaceable>s</replaceable>, or an empty
-    string if the variable doesn&#x2019;t exist.  This function should be
-    used with care, as it can introduce all sorts of nasty environment
-    dependencies in your Nix expression.</para>
-
-    <para><function>getEnv</function> is used in Nix Packages to
-    locate the file <filename>~/.nixpkgs/config.nix</filename>, which
-    contains user-local settings for Nix Packages.  (That is, it does
-    a <literal>getEnv "HOME"</literal> to locate the user&#x2019;s home
-    directory.)</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.hasAttr</function>
-  <replaceable>s</replaceable> <replaceable>set</replaceable></term>
-
-    <listitem><para><function>hasAttr</function> returns
-    <literal>true</literal> if <replaceable>set</replaceable> has an
-    attribute named <replaceable>s</replaceable>, and
-    <literal>false</literal> otherwise.  This is a dynamic version of
-    the <literal>?</literal>  operator, since
-    <replaceable>s</replaceable> is an expression rather than an
-    identifier.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.hashString</function>
-  <replaceable>type</replaceable> <replaceable>s</replaceable></term>
-
-    <listitem><para>Return a base-16 representation of the
-    cryptographic hash of string <replaceable>s</replaceable>.  The
-    hash algorithm specified by <replaceable>type</replaceable> must
-    be one of <literal>"md5"</literal>, <literal>"sha1"</literal> or
-    <literal>"sha256"</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.head</function>
-  <replaceable>list</replaceable></term>
-
-    <listitem><para>Return the first element of a list; abort
-    evaluation if the argument isn&#x2019;t a list or is an empty list.  You
-    can test whether a list is empty by comparing it with
-    <literal>[]</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>import</function>
-  <replaceable>path</replaceable></term>
-
-    <listitem><para>Load, parse and return the Nix expression in the
-    file <replaceable>path</replaceable>.  If <replaceable>path
-    </replaceable> is a directory, the file <filename>default.nix
-    </filename> in that directory is loaded.  Evaluation aborts if the
-    file doesn&#x2019;t exist or contains an incorrect Nix expression.
-    <function>import</function> implements Nix&#x2019;s module system: you
-    can put any Nix expression (such as a set or a function) in a
-    separate file, and use it from Nix expressions in other
-    files.</para>
-
-    <para>A Nix expression loaded by <function>import</function> must
-    not contain any <emphasis>free variables</emphasis> (identifiers
-    that are not defined in the Nix expression itself and are not
-    built-in).  Therefore, it cannot refer to variables that are in
-    scope at the call site.  For instance, if you have a calling
-    expression
-
-<programlisting>
-rec {
-  x = 123;
-  y = import ./foo.nix;
-}</programlisting>
-
-    then the following <filename>foo.nix</filename> will give an
-    error:
-
-<programlisting>
-x + 456</programlisting>
-
-    since <varname>x</varname> is not in scope in
-    <filename>foo.nix</filename>.  If you want <varname>x</varname>
-    to be available in <filename>foo.nix</filename>, you should pass
-    it as a function argument:
-
-<programlisting>
-rec {
-  x = 123;
-  y = import ./foo.nix x;
-}</programlisting>
-
-    and
-
-<programlisting>
-x: x + 456</programlisting>
-
-    (The function argument doesn&#x2019;t have to be called
-    <varname>x</varname> in <filename>foo.nix</filename>; any name
-    would work.)</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.intersectAttrs</function>
-  <replaceable>e1</replaceable> <replaceable>e2</replaceable></term>
-
-    <listitem><para>Return a set consisting of the attributes in the
-    set <replaceable>e2</replaceable> that also exist in the set
-    <replaceable>e1</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.isAttrs</function>
-  <replaceable>e</replaceable></term>
-
-    <listitem><para>Return <literal>true</literal> if
-    <replaceable>e</replaceable> evaluates to a set, and
-    <literal>false</literal> otherwise.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.isList</function>
-  <replaceable>e</replaceable></term>
-
-    <listitem><para>Return <literal>true</literal> if
-    <replaceable>e</replaceable> evaluates to a list, and
-    <literal>false</literal> otherwise.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.isFunction</function>
-  <replaceable>e</replaceable></term>
-
-    <listitem><para>Return <literal>true</literal> if
-    <replaceable>e</replaceable> evaluates to a function, and
-    <literal>false</literal> otherwise.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.isString</function>
-  <replaceable>e</replaceable></term>
-
-    <listitem><para>Return <literal>true</literal> if
-    <replaceable>e</replaceable> evaluates to a string, and
-    <literal>false</literal> otherwise.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.isInt</function>
-  <replaceable>e</replaceable></term>
-
-    <listitem><para>Return <literal>true</literal> if
-    <replaceable>e</replaceable> evaluates to an int, and
-    <literal>false</literal> otherwise.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.isBool</function>
-  <replaceable>e</replaceable></term>
-
-    <listitem><para>Return <literal>true</literal> if
-    <replaceable>e</replaceable> evaluates to a bool, and
-    <literal>false</literal> otherwise.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>isNull</function>
-  <replaceable>e</replaceable></term>
-
-    <listitem><para>Return <literal>true</literal> if
-    <replaceable>e</replaceable> evaluates to <literal>null</literal>,
-    and <literal>false</literal> otherwise.</para>
-
-    <warning><para>This function is <emphasis>deprecated</emphasis>;
-    just write <literal>e == null</literal> instead.</para></warning>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.length</function>
-  <replaceable>e</replaceable></term>
-
-    <listitem><para>Return the length of the list
-    <replaceable>e</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.lessThan</function>
-  <replaceable>e1</replaceable> <replaceable>e2</replaceable></term>
-
-    <listitem><para>Return <literal>true</literal> if the integer
-    <replaceable>e1</replaceable> is less than the integer
-    <replaceable>e2</replaceable>, and <literal>false</literal>
-    otherwise.  Evaluation aborts if either
-    <replaceable>e1</replaceable> or <replaceable>e2</replaceable>
-    does not evaluate to an integer.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.listToAttrs</function>
-  <replaceable>e</replaceable></term>
-
-    <listitem><para>Construct a set from a list specifying the names
-    and values of each attribute.  Each element of the list should be
-    a set consisting of a string-valued attribute
-    <varname>name</varname> specifying the name of the attribute, and
-    an attribute <varname>value</varname> specifying its value.
-    Example:
-
-<programlisting>
-builtins.listToAttrs
-  [ { name = "foo"; value = 123; }
-    { name = "bar"; value = 456; }
-  ]
-</programlisting>
-
-    evaluates to
-
-<programlisting>
-{ foo = 123; bar = 456; }
-</programlisting>
-
-    </para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><function>map</function>
-  <replaceable>f</replaceable> <replaceable>list</replaceable></term>
-
-    <listitem><para>Apply the function <replaceable>f</replaceable> to
-    each element in the list <replaceable>list</replaceable>.  For
-    example,
-
-<programlisting>
-map (x: "foo" + x) [ "bar" "bla" "abc" ]</programlisting>
-
-    evaluates to <literal>[ "foobar" "foobla" "fooabc"
-    ]</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.mul</function>
-  <replaceable>e1</replaceable> <replaceable>e2</replaceable></term>
-
-    <listitem><para>Return the product of the integers
-    <replaceable>e1</replaceable> and
-    <replaceable>e2</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.parseDrvName</function>
-  <replaceable>s</replaceable></term>
-
-    <listitem><para>Split the string <replaceable>s</replaceable> into
-    a package name and version.  The package name is everything up to
-    but not including the first dash followed by a digit, and the
-    version is everything following that dash.  The result is returned
-    in a set <literal>{ name, version }</literal>.  Thus,
-    <literal>builtins.parseDrvName "nix-0.12pre12876"</literal>
-    returns <literal>{ name = "nix"; version = "0.12pre12876";
-    }</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.pathExists</function>
-  <replaceable>path</replaceable></term>
-
-    <listitem><para>Return <literal>true</literal> if the path
-    <replaceable>path</replaceable> exists, and
-    <literal>false</literal> otherwise.  One application of this
-    function is to conditionally include a Nix expression containing
-    user configuration:
-
-<programlisting>
-let
-  fileName = builtins.getEnv "CONFIG_FILE";
-  config =
-    if fileName != "" &amp;&amp; builtins.pathExists (builtins.toPath fileName)
-    then import (builtins.toPath fileName)
-    else { someSetting = false; }; <lineannotation># default configuration</lineannotation>
-in config.someSetting</programlisting>
-
-    (Note that <envar>CONFIG_FILE</envar> must be an absolute path for
-    this to work.)</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.readDir</function>
-  <replaceable>path</replaceable></term>
-
-    <listitem><para>Return the contents of the directory
-    <replaceable>path</replaceable> as a set mapping directory entries
-    to the corresponding file type. For instance, if directory
-    <filename>A</filename> contains a regular file
-    <filename>B</filename> and another directory
-    <filename>C</filename>, then <literal>builtins.readDir
-    ./A</literal> will return the set
-
-<programlisting>
-{ B = "regular"; C = "directory"; }</programlisting>
-
-    The possible values for the file type are
-    <literal>"regular"</literal>, <literal>"directory"</literal>,
-    <literal>"symlink"</literal> and
-    <literal>"unknown"</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.readFile</function>
-  <replaceable>path</replaceable></term>
-
-    <listitem><para>Return the contents of the file
-    <replaceable>path</replaceable> as a string.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>removeAttrs</function>
-  <replaceable>set</replaceable> <replaceable>list</replaceable></term>
-
-    <listitem><para>Remove the attributes listed in
-    <replaceable>list</replaceable> from
-    <replaceable>set</replaceable>.  The attributes don&#x2019;t have to
-    exist in <replaceable>set</replaceable>. For instance,
-
-<programlisting>
-removeAttrs { x = 1; y = 2; z = 3; } [ "a" "x" "z" ]</programlisting>
-
-    evaluates to <literal>{ y = 2; }</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.replaceStrings</function>
-  <replaceable>from</replaceable> <replaceable>to</replaceable> <replaceable>s</replaceable></term>
-
-    <listitem><para>Given string <replaceable>s</replaceable>, replace
-    every occurrence of the strings in <replaceable>from</replaceable>
-    with the corresponding string in
-    <replaceable>to</replaceable>. For example,
-
-<programlisting>
-builtins.replaceStrings ["oo" "a"] ["a" "i"] "foobar"
-</programlisting>
-
-    evaluates to <literal>"fabir"</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.seq</function>
-  <replaceable>e1</replaceable> <replaceable>e2</replaceable></term>
-
-    <listitem><para>Evaluate <replaceable>e1</replaceable>, then
-    evaluate and return <replaceable>e2</replaceable>. This ensures
-    that a computation is strict in the value of
-    <replaceable>e1</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.sort</function>
-  <replaceable>comparator</replaceable> <replaceable>list</replaceable></term>
-
-    <listitem><para>Return <replaceable>list</replaceable> in sorted
-    order. It repeatedly calls the function
-    <replaceable>comparator</replaceable> with two elements. The
-    comparator should return <literal>true</literal> if the first
-    element is less than the second, and <literal>false</literal>
-    otherwise. For example,
-
-<programlisting>
-builtins.sort builtins.lessThan [ 483 249 526 147 42 77 ]
-</programlisting>
-
-    produces the list <literal>[ 42 77 147 249 483 526
-    ]</literal>.</para>
-
-    <para>This is a stable sort: it preserves the relative order of
-    elements deemed equal by the comparator.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.stringLength</function>
-  <replaceable>e</replaceable></term>
-
-    <listitem><para>Return the length of the string
-    <replaceable>e</replaceable>.  If <replaceable>e</replaceable> is
-    not a string, evaluation is aborted.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.sub</function>
-  <replaceable>e1</replaceable> <replaceable>e2</replaceable></term>
-
-    <listitem><para>Return the difference between the integers
-    <replaceable>e1</replaceable> and
-    <replaceable>e2</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.substring</function>
-  <replaceable>start</replaceable> <replaceable>len</replaceable>
-  <replaceable>s</replaceable></term>
-
-    <listitem><para>Return the substring of
-    <replaceable>s</replaceable> from character position
-    <replaceable>start</replaceable> (zero-based) up to but not
-    including <replaceable>start + len</replaceable>.  If
-    <replaceable>start</replaceable> is greater than the length of the
-    string, an empty string is returned, and if <replaceable>start +
-    len</replaceable> lies beyond the end of the string, only the
-    substring up to the end of the string is returned.
-    <replaceable>start</replaceable> must be
-    non-negative.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.tail</function>
-  <replaceable>list</replaceable></term>
-
-    <listitem><para>Return the second to last elements of a list;
-    abort evaluation if the argument isn&#x2019;t a list or is an empty
-    list.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>throw</function>
-  <replaceable>s</replaceable></term>
-
-    <listitem><para>Throw an error message
-    <replaceable>s</replaceable>.  This usually aborts Nix expression
-    evaluation, but in <command>nix-env -qa</command> and other
-    commands that try to evaluate a set of derivations to get
-    information about those derivations, a derivation that throws an
-    error is silently skipped (which is not the case for
-    <function>abort</function>).</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="builtin-toFile"><term><function>builtins.toFile</function>
-  <replaceable>name</replaceable> <replaceable>s</replaceable></term>
-
-    <listitem><para>Store the string <replaceable>s</replaceable> in a
-    file in the Nix store and return its path.  The file has suffix
-    <replaceable>name</replaceable>.  This file can be used as an
-    input to derivations.  One application is to write builders
-    &#x201C;inline&#x201D;.  For instance, the following Nix expression combines
-    <xref linkend="ex-hello-nix"/> and <xref linkend="ex-hello-builder"/> into one file:
-
-<programlisting>
-{ stdenv, fetchurl, perl }:
-
-stdenv.mkDerivation {
-  name = "hello-2.1.1";
-
-  builder = builtins.toFile "builder.sh" "
-    source $stdenv/setup
-
-    PATH=$perl/bin:$PATH
-
-    tar xvfz $src
-    cd hello-*
-    ./configure --prefix=$out
-    make
-    make install
-  ";
-
-  src = fetchurl {
-    url = http://nix.cs.uu.nl/dist/tarballs/hello-2.1.1.tar.gz;
-    md5 = "70c9ccf9fac07f762c24f2df2290784d";
-  };
-  inherit perl;
-}</programlisting>
-
-    </para>
-
-    <para>It is even possible for one file to refer to another, e.g.,
-
-<programlisting>
-  builder = let
-    configFile = builtins.toFile "foo.conf" "
-      # This is some dummy configuration file.
-      <replaceable>...</replaceable>
-    ";
-  in builtins.toFile "builder.sh" "
-    source $stdenv/setup
-    <replaceable>...</replaceable>
-    cp ${configFile} $out/etc/foo.conf
-  ";</programlisting>
-
-    Note that <literal>${configFile}</literal> is an antiquotation
-    (see <xref linkend="ssec-values"/>), so the result of the
-    expression <literal>configFile</literal> (i.e., a path like
-    <filename>/nix/store/m7p7jfny445k...-foo.conf</filename>) will be
-    spliced into the resulting string.</para>
-
-    <para>It is however <emphasis>not</emphasis> allowed to have files
-    mutually referring to each other, like so:
-
-<programlisting>
-let
-  foo = builtins.toFile "foo" "...${bar}...";
-  bar = builtins.toFile "bar" "...${foo}...";
-in foo</programlisting>
-
-    This is not allowed because it would cause a cyclic dependency in
-    the computation of the cryptographic hashes for
-    <varname>foo</varname> and <varname>bar</varname>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.toJSON</function> <replaceable>e</replaceable></term>
-
-    <listitem><para>Return a string containing a JSON representation
-    of <replaceable>e</replaceable>.  Strings, integers, booleans,
-    nulls and lists are mapped to their JSON equivalents.  Sets
-    (except derivations) are represented as objects.  Derivations are
-    translated to a JSON string containing the derivation&#x2019;s output
-    path.  Paths are copied to the store and represented as a JSON
-    string of the resulting store path.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.toPath</function> <replaceable>s</replaceable></term>
-
-    <listitem><para>Convert the string value
-    <replaceable>s</replaceable> into a path value.  The string
-    <replaceable>s</replaceable> must represent an absolute path
-    (i.e., must start with <literal>/</literal>).  The path need not
-    exist.  The resulting path is canonicalised, e.g.,
-    <literal>builtins.toPath "//foo/xyzzy/../bar/"</literal> returns
-    <literal>/foo/bar</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>toString</function> <replaceable>e</replaceable></term>
-
-    <listitem><para>Convert the expression
-    <replaceable>e</replaceable> to a string.
-    <replaceable>e</replaceable> can be a string (in which case
-    <function>toString</function> is a no-op) or a path (e.g.,
-    <literal>toString /foo/bar</literal> yields
-    <literal>"/foo/bar"</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="builtin-toXML"><term><function>builtins.toXML</function> <replaceable>e</replaceable></term>
-
-    <listitem><para>Return a string containing an XML representation
-    of <replaceable>e</replaceable>.  The main application for
-    <function>toXML</function> is to communicate information with the
-    builder in a more structured format than plain environment
-    variables.</para>
-
-    <!-- TODO: more formally describe the schema of the XML
-    representation -->
-
-    <para><xref linkend="ex-toxml"/> shows an example where this is
-    the case.  The builder is supposed to generate the configuration
-    file for a <link xlink:href="http://jetty.mortbay.org/">Jetty
-    servlet container</link>.  A servlet container contains a number
-    of servlets (<filename>*.war</filename> files) each exported under
-    a specific URI prefix.  So the servlet configuration is a list of
-    sets containing the <varname>path</varname> and
-    <varname>war</varname> of the servlet (<xref linkend="ex-toxml-co-servlets"/>).  This kind of information is
-    difficult to communicate with the normal method of passing
-    information through an environment variable, which just
-    concatenates everything together into a string (which might just
-    work in this case, but wouldn&#x2019;t work if fields are optional or
-    contain lists themselves).  Instead the Nix expression is
-    converted to an XML representation with
-    <function>toXML</function>, which is unambiguous and can easily be
-    processed with the appropriate tools.  For instance, in the
-    example an XSLT stylesheet (<xref linkend="ex-toxml-co-stylesheet"/>) is applied to it (<xref linkend="ex-toxml-co-apply"/>) to
-    generate the XML configuration file for the Jetty server.  The XML
-    representation produced from <xref linkend="ex-toxml-co-servlets"/> by <function>toXML</function> is shown in <xref linkend="ex-toxml-result"/>.</para>
-
-    <para>Note that <xref linkend="ex-toxml"/> uses the <function linkend="builtin-toFile">toFile</function> built-in to write the
-    builder and the stylesheet &#x201C;inline&#x201D; in the Nix expression.  The
-    path of the stylesheet is spliced into the builder at
-    <literal>xsltproc ${stylesheet}
-    <replaceable>...</replaceable></literal>.</para>
-
-    <example xml:id="ex-toxml"><title>Passing information to a builder
-    using <function>toXML</function></title>
-
-<programlisting><![CDATA[
-{ stdenv, fetchurl, libxslt, jira, uberwiki }:
-
-stdenv.mkDerivation (rec {
-  name = "web-server";
-
-  buildInputs = [ libxslt ];
-
-  builder = builtins.toFile "builder.sh" "
-    source $stdenv/setup
-    mkdir $out
-    echo $servlets | xsltproc ${stylesheet} - > $out/server-conf.xml]]> <co xml:id="ex-toxml-co-apply"/> <![CDATA[
-  ";
-
-  stylesheet = builtins.toFile "stylesheet.xsl"]]> <co xml:id="ex-toxml-co-stylesheet"/> <![CDATA[
-   "<?xml version='1.0' encoding='UTF-8'?>
-    <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
-      <xsl:template match='/'>
-        <Configure>
-          <xsl:for-each select='/expr/list/attrs'>
-            <Call name='addWebApplication'>
-              <Arg><xsl:value-of select=\"attr[@name = 'path']/string/@value\" /></Arg>
-              <Arg><xsl:value-of select=\"attr[@name = 'war']/path/@value\" /></Arg>
-            </Call>
-          </xsl:for-each>
-        </Configure>
-      </xsl:template>
-    </xsl:stylesheet>
-  ";
-
-  servlets = builtins.toXML []]> <co xml:id="ex-toxml-co-servlets"/> <![CDATA[
-    { path = "/bugtracker"; war = jira + "/lib/atlassian-jira.war"; }
-    { path = "/wiki"; war = uberwiki + "/uberwiki.war"; }
-  ];
-})]]></programlisting>
-
-    </example>
-
-    <example xml:id="ex-toxml-result"><title>XML representation produced by
-    <function>toXML</function></title>
-
-<programlisting><![CDATA[<?xml version='1.0' encoding='utf-8'?>
-<expr>
-  <list>
-    <attrs>
-      <attr name="path">
-        <string value="/bugtracker" />
-      </attr>
-      <attr name="war">
-        <path value="/nix/store/d1jh9pasa7k2...-jira/lib/atlassian-jira.war" />
-      </attr>
-    </attrs>
-    <attrs>
-      <attr name="path">
-        <string value="/wiki" />
-      </attr>
-      <attr name="war">
-        <path value="/nix/store/y6423b1yi4sx...-uberwiki/uberwiki.war" />
-      </attr>
-    </attrs>
-  </list>
-</expr>]]></programlisting>
-
-    </example>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.trace</function>
-  <replaceable>e1</replaceable> <replaceable>e2</replaceable></term>
-
-    <listitem><para>Evaluate <replaceable>e1</replaceable> and print its
-    abstract syntax representation on standard error.  Then return
-    <replaceable>e2</replaceable>.  This function is useful for
-    debugging.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><function>builtins.typeOf</function>
-  <replaceable>e</replaceable></term>
-
-    <listitem><para>Return a string representing the type of the value
-    <replaceable>e</replaceable>, namely <literal>"int"</literal>,
-    <literal>"bool"</literal>, <literal>"string"</literal>,
-    <literal>"path"</literal>, <literal>"null"</literal>,
-    <literal>"set"</literal>, <literal>"list"</literal> or
-    <literal>"lambda"</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-</variablelist>
-
-
-</section>
-
-
-</chapter>
-
-</part>
-  <part xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:base="advanced-topics/advanced-topics.xml">
-
-<title>Advanced Topics</title>
-
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="chap-distributed-builds">
-
-<title>Distributed Builds</title>
-
-<para>Nix supports distributed builds, where a local Nix installation can
-forward Nix builds to other machines over the network.  This allows
-multiple builds to be performed in parallel (thus improving
-performance) and allows Nix to perform multi-platform builds in a
-semi-transparent way.  For instance, if you perform a build for a
-<literal>powerpc-darwin</literal> on an <literal>i686-linux</literal>
-machine, Nix can automatically forward the build to a
-<literal>powerpc-darwin</literal> machine, if available.</para>
-
-<para>You can enable distributed builds by setting the environment
-variable <envar>NIX_BUILD_HOOK</envar> to point to a program that Nix
-will call whenever it wants to build a derivation.  The build hook
-(typically a shell or Perl script) can decline the build, in which Nix
-will perform it in the usual way if possible, or it can accept it, in
-which case it is responsible for somehow getting the inputs of the
-build to another machine, doing the build there, and getting the
-results back.  The details of the build hook protocol are described in
-the documentation of the <link linkend="envar-build-hook"><envar>NIX_BUILD_HOOK</envar>
-variable</link>.</para>
-
-<example xml:id="ex-remote-systems"><title>Remote machine configuration:
-<filename>remote-systems.conf</filename></title>
-<programlisting>
-nix@mcflurry.labs.cs.uu.nl  powerpc-darwin  /home/nix/.ssh/id_quarterpounder_auto  2
-nix@scratchy.labs.cs.uu.nl  i686-linux      /home/nix/.ssh/id_scratchy_auto        8 1 kvm
-nix@itchy.labs.cs.uu.nl     i686-linux      /home/nix/.ssh/id_scratchy_auto        8 2
-nix@poochie.labs.cs.uu.nl   i686-linux      /home/nix/.ssh/id_scratchy_auto        8 2 kvm perf
-</programlisting>
-</example>
-
-<para>Nix ships with a build hook that should be suitable for most
-purposes.  It uses <command>ssh</command> and
-<command>nix-copy-closure</command> to copy the build inputs and
-outputs and perform the remote build.  To use it, you should set
-<envar>NIX_BUILD_HOOK</envar> to
-<filename><replaceable>prefix</replaceable>/libexec/nix/build-remote.pl</filename>.
-You should also define a list of available build machines and point
-the environment variable <envar>NIX_REMOTE_SYSTEMS</envar> to it.  An
-example configuration is shown in <xref linkend="ex-remote-systems"/>.  Each line in the file specifies a machine, with the following
-bits of information:
-
-<orderedlist>
-
-  <listitem><para>The name of the remote machine, with optionally the
-  user under which the remote build should be performed.  This is
-  actually passed as an argument to <command>ssh</command>, so it can
-  be an alias defined in your
-  <filename>~/.ssh/config</filename>.</para></listitem>
-
-  <listitem><para>A comma-separated list of Nix platform type
-  identifiers, such as <literal>powerpc-darwin</literal>.  It is
-  possible for a machine to support multiple platform types, e.g.,
-  <literal>i686-linux,x86_64-linux</literal>.</para></listitem>
-
-  <listitem><para>The SSH private key to be used to log in to the
-  remote machine.  Since builds should be non-interactive, this key
-  should not have a passphrase!</para></listitem>
-
-  <listitem><para>The maximum number of builds that
-  <filename>build-remote.pl</filename> will execute in parallel on the
-  machine.  Typically this should be equal to the number of CPU cores.
-  For instance, the machine <literal>itchy</literal> in the example
-  will execute up to 8 builds in parallel.</para></listitem>
-
-  <listitem><para>The &#x201C;speed factor&#x201D;, indicating the relative speed of
-  the machine.  If there are multiple machines of the right type, Nix
-  will prefer the fastest, taking load into account.</para></listitem>
-
-  <listitem><para>A comma-separated list of <emphasis>supported
-  features</emphasis>.  If a derivation has the
-  <varname>requiredSystemFeatures</varname> attribute, then
-  <filename>build-remote.pl</filename> will only perform the
-  derivation on a machine that has the specified features.  For
-  instance, the attribute
-
-<programlisting>
-requiredSystemFeatures = [ "kvm" ];
-</programlisting>
-
-  will cause the build to be performed on a machine that has the
-  <literal>kvm</literal> feature (i.e., <literal>scratchy</literal> in
-  the example above).</para></listitem>
-
-  <listitem><para>A comma-separated list of <emphasis>mandatory
-  features</emphasis>.  A machine will only be used to build a
-  derivation if all of the machine&#x2019;s mandatory features appear in the
-  derivation&#x2019;s <varname>requiredSystemFeatures</varname> attribute.
-  Thus, in the example, the machine <literal>poochie</literal> will
-  only do derivations that have
-  <varname>requiredSystemFeatures</varname> set to <literal>["kvm"
-  "perf"]</literal> or <literal>["perf"]</literal>.</para></listitem>
-
-</orderedlist>
-
-You should also set up the environment variable
-<envar>NIX_CURRENT_LOAD</envar> to point at a directory (e.g.,
-<filename>/var/run/nix/current-load</filename>) that
-<filename>build-remote.pl</filename> uses to remember how many builds
-it is currently executing remotely.  It doesn't look at the actual
-load on the remote machine, so if you have multiple instances of Nix
-running, they should use the same <envar>NIX_CURRENT_LOAD</envar>
-file.  Maybe in the future <filename>build-remote.pl</filename> will
-look at the actual remote load.</para>
-
-</chapter>
-
-</part>
-  <part xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="part-command-ref" xml:base="command-ref/command-ref.xml">
-
-<title>Command Reference</title>
-
-<partintro>
-<para>This section lists commands and options that you can use when you
-work with Nix.</para>
-</partintro>
-
-<chapter xmlns="http://docbook.org/ns/docbook" xml:id="sec-common-options">
-
-<title>Common Options</title>
-
-
-<para>Most Nix commands accept the following command-line options:</para>
-
-<variablelist xml:id="opt-common">
-
-<varlistentry><term><option>--help</option></term>
-
-  <listitem><para>Prints out a summary of the command syntax and
-  exits.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><option>--version</option></term>
-
-  <listitem><para>Prints out the Nix version number on standard output
-  and exits.</para></listitem>
-</varlistentry>
-
-
-<varlistentry><term><option>--verbose</option></term>
-  <term><option>-v</option></term>
-
-  <listitem>
-
-  <para>Increases the level of verbosity of diagnostic messages
-  printed on standard error.  For each Nix operation, the information
-  printed on standard output is well-defined; any diagnostic
-  information is printed on standard error, never on standard
-  output.</para>
-
-  <para>This option may be specified repeatedly.  Currently, the
-  following verbosity levels exist:</para>
-
-  <variablelist>
-
-    <varlistentry><term>0</term>
-    <listitem><para>&#x201C;Errors only&#x201D;: only print messages
-    explaining why the Nix invocation failed.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>1</term>
-    <listitem><para>&#x201C;Informational&#x201D;: print
-    <emphasis>useful</emphasis> messages about what Nix is doing.
-    This is the default.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>2</term>
-    <listitem><para>&#x201C;Talkative&#x201D;: print more informational
-    messages.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>3</term>
-    <listitem><para>&#x201C;Chatty&#x201D;: print even more
-    informational messages.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>4</term>
-    <listitem><para>&#x201C;Debug&#x201D;: print debug
-    information.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>5</term>
-    <listitem><para>&#x201C;Vomit&#x201D;: print vast amounts of debug
-    information.</para></listitem>
-    </varlistentry>
-
-  </variablelist>
-
-  </listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><option>--no-build-output</option></term>
-  <term><option>-Q</option></term>
-
-  <listitem><para>By default, output written by builders to standard
-  output and standard error is echoed to the Nix command's standard
-  error.  This option suppresses this behaviour.  Note that the
-  builder's standard output and error are always written to a log file
-  in
-  <filename><replaceable>prefix</replaceable>/nix/var/log/nix</filename>.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry xml:id="opt-max-jobs"><term><option>--max-jobs</option></term>
-  <term><option>-j</option></term>
-
-  <listitem><para>Sets the maximum number of build jobs that Nix will
-  perform in parallel to the specified number.  The default is
-  specified by the <link linkend="conf-build-max-jobs"><literal>build-max-jobs</literal></link>
-  configuration setting, which itself defaults to
-  <literal>1</literal>.  A higher value is useful on SMP systems or to
-  exploit I/O latency.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry xml:id="opt-cores"><term><option>--cores</option></term>
-
-  <listitem><para>Sets the value of the <envar>NIX_BUILD_CORES</envar>
-  environment variable in the invocation of builders.  Builders can
-  use this variable at their discretion to control the maximum amount
-  of parallelism.  For instance, in Nixpkgs, if the derivation
-  attribute <varname>enableParallelBuilding</varname> is set to
-  <literal>true</literal>, the builder passes the
-  <option>-j<replaceable>N</replaceable></option> flag to GNU Make.
-  It defaults to the value of the <link linkend="conf-build-cores"><literal>build-cores</literal></link>
-  configuration setting, if set, or <literal>1</literal> otherwise.
-  The value <literal>0</literal> means that the builder should use all
-  available CPU cores in the system.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry xml:id="opt-max-silent-time"><term><option>--max-silent-time</option></term>
-
-  <listitem><para>Sets the maximum number of seconds that a builder
-  can go without producing any data on standard output or standard
-  error.  The default is specified by the <link linkend="conf-build-max-silent-time"><literal>build-max-silent-time</literal></link>
-  configuration setting.  <literal>0</literal> means no
-  time-out.</para></listitem>
-
-</varlistentry>
-
-<varlistentry xml:id="opt-timeout"><term><option>--timeout</option></term>
-
-  <listitem><para>Sets the maximum number of seconds that a builder
-  can run.  The default is specified by the <link linkend="conf-build-timeout"><literal>build-timeout</literal></link>
-  configuration setting.  <literal>0</literal> means no
-  timeout.</para></listitem>
-
-</varlistentry>
-
-<varlistentry><term><option>--keep-going</option></term>
-  <term><option>-k</option></term>
-
-  <listitem><para>Keep going in case of failed builds, to the
-  greatest extent possible.  That is, if building an input of some
-  derivation fails, Nix will still build the other inputs, but not the
-  derivation itself.  Without this option, Nix stops if any build
-  fails (except for builds of substitutes), possibly killing builds in
-  progress (in case of parallel or distributed builds).</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><option>--keep-failed</option></term>
-  <term><option>-K</option></term>
-
-  <listitem><para>Specifies that in case of a build failure, the
-  temporary directory (usually in <filename>/tmp</filename>) in which
-  the build takes place should not be deleted.  The path of the build
-  directory is printed as an informational message.
-    </para>
-  </listitem>
-</varlistentry>
-
-
-<varlistentry><term><option>--fallback</option></term>
-
-  <listitem>
-
-  <para>Whenever Nix attempts to build a derivation for which
-  substitutes are known for each output path, but realising the output
-  paths through the substitutes fails, fall back on building the
-  derivation.</para>
-
-  <para>The most common scenario in which this is useful is when we
-  have registered substitutes in order to perform binary distribution
-  from, say, a network repository.  If the repository is down, the
-  realisation of the derivation will fail.  When this option is
-  specified, Nix will build the derivation instead.  Thus,
-  installation from binaries falls back on installation from source.
-  This option is not the default since it is generally not desirable
-  for a transient failure in obtaining the substitutes to lead to a
-  full build from source (with the related consumption of
-  resources).</para>
-
-  </listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><option>--readonly-mode</option></term>
-
-  <listitem><para>When this option is used, no attempt is made to open
-  the Nix database.  Most Nix operations do need database access, so
-  those operations will fail.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry xml:id="opt-log-type"><term><option>--log-type</option>
-<replaceable>type</replaceable></term>
-
-  <listitem>
-
-  <para>This option determines how the output written to standard
-  error is formatted.  Nix&#x2019;s diagnostic messages are typically
-  <emphasis>nested</emphasis>.  For instance, when tracing Nix
-  expression evaluation (<command>nix-env -vvvvv</command>, messages
-  from subexpressions are nested inside their parent expressions.  Nix
-  builder output is also often nested.  For instance, the Nix Packages
-  generic builder nests the various build tasks (unpack, configure,
-  compile, etc.), and the GNU Make in <literal>stdenv-linux</literal>
-  has been patched to provide nesting for recursive Make
-  invocations.</para>
-
-  <para><replaceable>type</replaceable> can be one of the
-  following:
-
-  <variablelist>
-
-    <varlistentry><term><literal>pretty</literal></term>
-
-      <listitem><para>Pretty-print the output, indicating different
-      nesting levels using spaces.  This is the
-      default.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal>escapes</literal></term>
-
-      <listitem><para>Indicate nesting using escape codes that can be
-      interpreted by the <command>nix-log2xml</command> tool in the
-      Nix source distribution.  The resulting XML file can be fed into
-      the <command>log2html.xsl</command> stylesheet to create an HTML
-      file that can be browsed interactively, using JavaScript to
-      expand and collapse parts of the output.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal>flat</literal></term>
-
-      <listitem><para>Remove all nesting.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  </listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><option>--arg</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>This option is accepted by
-  <command>nix-env</command>, <command>nix-instantiate</command> and
-  <command>nix-build</command>.  When evaluating Nix expressions, the
-  expression evaluator will automatically try to call functions that
-  it encounters.  It can automatically call functions for which every
-  argument has a <link linkend="ss-functions">default value</link>
-  (e.g., <literal>{ <replaceable>argName</replaceable> ?
-  <replaceable>defaultValue</replaceable> }:
-  <replaceable>...</replaceable></literal>).  With
-  <option>--arg</option>, you can also call functions that have
-  arguments without a default value (or override a default value).
-  That is, if the evaluator encounters a function with an argument
-  named <replaceable>name</replaceable>, it will call it with value
-  <replaceable>value</replaceable>.</para>
-
-  <para>For instance, the file
-  <literal>pkgs/top-level/all-packages.nix</literal> in Nixpkgs is
-  actually a function:
-
-<programlisting>
-{ # The system (e.g., `i686-linux') for which to build the packages.
-  system ? builtins.currentSystem
-  <replaceable>...</replaceable>
-}: <replaceable>...</replaceable></programlisting>
-
-  So if you call this Nix expression (e.g., when you do
-  <literal>nix-env -i <replaceable>pkgname</replaceable></literal>),
-  the function will be called automatically using the value <link linkend="builtin-currentSystem"><literal>builtins.currentSystem</literal></link>
-  for the <literal>system</literal> argument.  You can override this
-  using <option>--arg</option>, e.g., <literal>nix-env -i
-  <replaceable>pkgname</replaceable> --arg system
-  \"i686-freebsd\"</literal>.  (Note that since the argument is a Nix
-  string literal, you have to escape the quotes.)</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><option>--argstr</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>This option is like <option>--arg</option>, only the
-  value is not a Nix expression but a string.  So instead of
-  <literal>--arg system \"i686-linux\"</literal> (the outer quotes are
-  to keep the shell happy) you can say <literal>--argstr system
-  i686-linux</literal>.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry xml:id="opt-attr"><term><option>--attr</option> / <option>-A</option>
-<replaceable>attrPath</replaceable></term>
-
-  <listitem><para>Select an attribute from the top-level Nix
-  expression being evaluated.  (<command>nix-env</command>,
-  <command>nix-instantiate</command>, <command>nix-build</command> and
-  <command>nix-shell</command> only.)  The <emphasis>attribute
-  path</emphasis> <replaceable>attrPath</replaceable> is a sequence of
-  attribute names separated by dots.  For instance, given a top-level
-  Nix expression <replaceable>e</replaceable>, the attribute path
-  <literal>xorg.xorgserver</literal> would cause the expression
-  <literal><replaceable>e</replaceable>.xorg.xorgserver</literal> to
-  be used.  See <link linkend="refsec-nix-env-install-examples"><command>nix-env
-  --install</command></link> for some concrete examples.</para>
-
-  <para>In addition to attribute names, you can also specify array
-  indices.  For instance, the attribute path
-  <literal>foo.3.bar</literal> selects the <literal>bar</literal>
-  attribute of the fourth element of the array in the
-  <literal>foo</literal> attribute of the top-level
-  expression.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><option>--expr</option> / <option>-E</option></term>
-
-  <listitem><para>Interpret the command line arguments as a list of
-  Nix expressions to be parsed and evaluated, rather than as a list
-  of file names of Nix expressions.
-  (<command>nix-instantiate</command>, <command>nix-build</command>
-  and <command>nix-shell</command> only.)</para></listitem>
-
-</varlistentry>
-
-<varlistentry><term><option>--show-trace</option></term>
-
-  <listitem><para>Causes Nix to print out a stack trace in case of Nix
-  expression evaluation errors.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry xml:id="opt-I"><term><option>-I</option> <replaceable>path</replaceable></term>
-
-  <listitem><para>Add a path to the Nix expression search path.  This
-  option may be given multiple times.  See the <envar linkend="env-NIX_PATH">NIX_PATH</envar> environment variable for
-  information on the semantics of the Nix search path.  Paths added
-  through <option>-I</option> take precedence over
-  <envar>NIX_PATH</envar>.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><option>--option</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>Set the Nix configuration option
-  <replaceable>name</replaceable> to <replaceable>value</replaceable>.
-  This overrides settings in the Nix configuration file (see
-  <citerefentry><refentrytitle>nix.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>).</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><option>--repair</option></term>
-
-  <listitem><para>Fix corrupted or missing store paths by
-  redownloading or rebuilding them.  Note that this is slow because it
-  requires computing a cryptographic hash of the contents of every
-  path in the closure of the build.  Also note the warning under
-  <command>nix-store --repair-path</command>.</para></listitem>
-
-</varlistentry>
-
-
-</variablelist>
-
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-common-env">
-
-<title>Common Environment Variables</title>
-
-
-<para>Most Nix commands interpret the following environment variables:</para>
-
-<variablelist xml:id="env-common">
-
-
-<varlistentry xml:id="env-NIX_PATH"><term><envar>NIX_PATH</envar></term>
-
-  <listitem>
-
-    <para>A colon-separated list of directories used to look up Nix
-    expressions enclosed in angle brackets (i.e.,
-    <literal>&lt;<replaceable>path</replaceable>&gt;</literal>).  For
-    instance, the value
-
-    <screen>
-/home/eelco/Dev:/etc/nixos</screen>
-
-    will cause Nix to look for paths relative to
-    <filename>/home/eelco/Dev</filename> and
-    <filename>/etc/nixos</filename>, in that order.  It is also
-    possible to match paths against a prefix.  For example, the value
-
-    <screen>
-nixpkgs=/home/eelco/Dev/nixpkgs-branch:/etc/nixos</screen>
-
-    will cause Nix to search for
-    <literal>&lt;nixpkgs/<replaceable>path</replaceable>&gt;</literal> in
-    <filename>/home/eelco/Dev/nixpkgs-branch/<replaceable>path</replaceable></filename>
-    and
-    <filename>/etc/nixos/nixpkgs/<replaceable>path</replaceable></filename>.</para>
-
-    <para>If a path in the Nix search path starts with
-    <literal>http://</literal> or <literal>https://</literal>, it is
-    interpreted as the URL of a tarball that will be downloaded and
-    unpacked to a temporary location. The tarball must consist of a
-    single top-level directory. For example, setting
-    <envar>NIX_PATH</envar> to
-
-    <screen>
-nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz</screen>
-
-    tells Nix to download the latest revision in the Nixpkgs/NixOS
-    14.12 channel.</para>
-
-    <para>The search path can be extended using the <option linkend="opt-I">-I</option> option, which takes precedence over
-    <envar>NIX_PATH</envar>.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><envar>NIX_IGNORE_SYMLINK_STORE</envar></term>
-
-  <listitem>
-
-  <para>Normally, the Nix store directory (typically
-  <filename>/nix/store</filename>) is not allowed to contain any
-  symlink components.  This is to prevent &#x201C;impure&#x201D; builds.  Builders
-  sometimes &#x201C;canonicalise&#x201D; paths by resolving all symlink components.
-  Thus, builds on different machines (with
-  <filename>/nix/store</filename> resolving to different locations)
-  could yield different results.  This is generally not a problem,
-  except when builds are deployed to machines where
-  <filename>/nix/store</filename> resolves differently.  If you are
-  sure that you&#x2019;re not going to do that, you can set
-  <envar>NIX_IGNORE_SYMLINK_STORE</envar> to <envar>1</envar>.</para>
-
-  <para>Note that if you&#x2019;re symlinking the Nix store so that you can
-  put it on another file system than the root file system, on Linux
-  you&#x2019;re better off using <literal>bind</literal> mount points, e.g.,
-
-  <screen>
-$ mkdir /nix
-$ mount -o bind /mnt/otherdisk/nix /nix</screen>
-
-  Consult the <citerefentry><refentrytitle>mount</refentrytitle>
-  <manvolnum>8</manvolnum></citerefentry> manual page for details.</para>
-
-  </listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><envar>NIX_STORE_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix store (default
-  <filename><replaceable>prefix</replaceable>/store</filename>).</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><envar>NIX_DATA_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix static data
-  directory (default
-  <filename><replaceable>prefix</replaceable>/share</filename>).</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><envar>NIX_LOG_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix log directory
-  (default <filename><replaceable>prefix</replaceable>/log/nix</filename>).</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><envar>NIX_STATE_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix state directory
-  (default <filename><replaceable>prefix</replaceable>/var/nix</filename>).</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><envar>NIX_DB_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix database (default
-  <filename><replaceable>$NIX_STATE_DIR</replaceable>/db</filename>, i.e.,
-  <filename><replaceable>prefix</replaceable>/var/nix/db</filename>).</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><envar>NIX_CONF_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix configuration
-  directory (default
-  <filename><replaceable>prefix</replaceable>/etc/nix</filename>).</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><envar>TMPDIR</envar></term>
-
-  <listitem><para>Use the specified directory to store temporary
-  files.  In particular, this includes temporary build directories;
-  these can take up substantial amounts of disk space.  The default is
-  <filename>/tmp</filename>.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry xml:id="envar-build-hook"><term><envar>NIX_BUILD_HOOK</envar></term>
-
-  <listitem>
-
-  <para>Specifies the location of the <emphasis>build hook</emphasis>,
-  which is a program (typically some script) that Nix will call
-  whenever it wants to build a derivation.  This is used to implement
-  distributed builds<phrase condition="manual"> (see <xref linkend="chap-distributed-builds"/>)</phrase>.</para>
-
-  <!--
-  The protocol by
-  which the calling Nix process and the build hook communicate is as
-  follows.
-
-  <para>The build hook is called with the following command-line
-  arguments:
-
-  <orderedlist>
-
-    <listitem><para>A boolean value <literal>0</literal> or
-    <literal>1</literal> specifying whether Nix can locally execute
-    more builds, as per the <link
-    linkend="opt-max-jobs"><option>- -max-jobs</option> option</link>.
-    The purpose of this argument is to allow the hook to not have to
-    maintain bookkeeping for the local machine.</para></listitem>
-
-    <listitem><para>The Nix platform identifier for the local machine
-    (e.g., <literal>i686-linux</literal>).</para></listitem>
-
-    <listitem><para>The Nix platform identifier for the derivation,
-    i.e., its <link linkend="attr-system"><varname>system</varname>
-    attribute</link>.</para></listitem>
-
-    <listitem><para>The store path of the derivation.</para></listitem>
-
-  </orderedlist>
-
-  </para>
-
-  <para>On the basis of this information, and whatever persistent
-  state the build hook keeps about other machines and their current
-  load, it has to decide what to do with the build.  It should print
-  out on standard error one of the following responses (terminated by
-  a newline, <literal>"\n"</literal>):
-
-  <variablelist>
-
-    <varlistentry><term><literal># decline</literal></term>
-
-      <listitem><para>The build hook is not willing or able to perform
-      the build; the calling Nix process should do the build itself,
-      if possible.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal># postpone</literal></term>
-
-      <listitem><para>The build hook cannot perform the build now, but
-      can do so in the future (e.g., because all available build slots
-      on remote machines are in use).  The calling Nix process should
-      postpone this build until at least one currently running build
-      has terminated.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal># accept</literal></term>
-
-      <listitem><para>The build hook has accepted the
-      build.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  <para>After sending <literal># accept</literal>, the hook should
-  read one line from standard input, which will be the string
-  <literal>okay</literal>.  It can then proceed with the build.
-  Before sending <literal>okay</literal>, Nix will store in the hook’s
-  current directory a number of text files that contain information
-  about the derivation:
-
-  <variablelist>
-
-    <varlistentry><term><filename>inputs</filename></term>
-
-      <listitem><para>The set of store paths that are inputs to the
-      build process (one per line).  These have to be copied
-      <emphasis>to</emphasis> the remote machine (in addition to the
-      store derivation itself).</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><filename>outputs</filename></term>
-
-      <listitem><para>The set of store paths that are outputs of the
-      derivation (one per line).  These have to be copied
-      <emphasis>from</emphasis> the remote machine if the build
-      succeeds.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><filename>references</filename></term>
-
-      <listitem><para>The reference graph of the inputs, in the format
-      accepted by the command <command>nix-store
-      - -register-validity</command>.  It is necessary to run this
-      command on the remote machine after copying the inputs to inform
-      Nix on the remote machine that the inputs are valid
-      paths.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  <para>The hook should copy the inputs to the remote machine,
-  register the validity of the inputs, perform the remote build, and
-  copy the outputs back to the local machine.  An exit code other than
-  <literal>0</literal> indicates that the hook has failed.  An exit
-  code equal to 100 means that the remote build failed (as opposed to,
-  e.g., a network error).</para>
-  -->
-
-  </listitem>
-
-
-</varlistentry>
-
-
-<varlistentry xml:id="envar-remote"><term><envar>NIX_REMOTE</envar></term>
-
-  <listitem><para>This variable should be set to
-  <literal>daemon</literal> if you want to use the Nix daemon to
-  execute Nix operations. This is necessary in <link linkend="ssec-multi-user">multi-user Nix installations</link>.
-  Otherwise, it should be left unset.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><envar>NIX_SHOW_STATS</envar></term>
-
-  <listitem><para>If set to <literal>1</literal>, Nix will print some
-  evaluation statistics, such as the number of values
-  allocated.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><envar>NIX_COUNT_CALLS</envar></term>
-
-  <listitem><para>If set to <literal>1</literal>, Nix will print how
-  often functions were called during Nix expression evaluation.  This
-  is useful for profiling your Nix expressions.</para></listitem>
-
-</varlistentry>
-
-
-<varlistentry><term><envar>GC_INITIAL_HEAP_SIZE</envar></term>
-
-  <listitem><para>If Nix has been configured to use the Boehm garbage
-  collector, this variable sets the initial size of the heap in bytes.
-  It defaults to 384 MiB.  Setting it to a low value reduces memory
-  consumption, but will increase runtime due to the overhead of
-  garbage collection.</para></listitem>
-
-</varlistentry>
-
-
-</variablelist>
-
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-main-commands">
-
-<title>Main Commands</title>
-
-<para>This section lists commands and options that you can use when you
-work with Nix.</para>
-
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-env">
-
-<refmeta>
-  <refentrytitle>nix-env</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-env</refname>
-  <refpurpose>manipulate or query Nix user environments</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-env</command>
-    <arg xmlns="http://docbook.org/ns/docbook"><option>--help</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--version</option></arg><arg xmlns="http://docbook.org/ns/docbook" rep="repeat"><option>--verbose</option></arg><arg xmlns="http://docbook.org/ns/docbook" rep="repeat"><option>-v</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--no-build-output</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>-Q</option></arg><arg xmlns="http://docbook.org/ns/docbook">
-  <group choice="req">
-    <arg choice="plain"><option>--max-jobs</option></arg>
-    <arg choice="plain"><option>-j</option></arg>
-  </group>
-  <replaceable>number</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>--cores</option>
-  <replaceable>number</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>--max-silent-time</option>
-  <replaceable>number</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>--timeout</option>
-  <replaceable>number</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook"><option>--keep-going</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>-k</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--keep-failed</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>-K</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--fallback</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--readonly-mode</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--log-type</option> <replaceable>type</replaceable></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--show-trace</option></arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>-I</option>
-  <replaceable>path</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>--option</option>
-  <replaceable>name</replaceable>
-  <replaceable>value</replaceable>
-</arg><sbr xmlns="http://docbook.org/ns/docbook"/>
-    <arg><option>--arg</option> <replaceable>name</replaceable> <replaceable>value</replaceable></arg>
-    <arg><option>--argstr</option> <replaceable>name</replaceable> <replaceable>value</replaceable></arg>
-    <arg>
-      <group choice="req">
-        <arg choice="plain"><option>--file</option></arg>
-        <arg choice="plain"><option>-f</option></arg>
-      </group>
-      <replaceable>path</replaceable>
-    </arg>
-    <arg>
-      <group choice="req">
-        <arg choice="plain"><option>--profile</option></arg>
-        <arg choice="plain"><option>-p</option></arg>
-      </group>
-      <replaceable>path</replaceable>
-    </arg>
-    <arg>
-      <arg choice="plain"><option>--system-filter</option></arg>
-      <replaceable>system</replaceable>
-    </arg>
-    <arg><option>--dry-run</option></arg>
-    <arg choice="plain"><replaceable>operation</replaceable></arg>
-    <arg rep="repeat"><replaceable>options</replaceable></arg>
-    <arg rep="repeat"><replaceable>arguments</replaceable></arg>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-
-<refsection><title>Description</title>
-
-<para>The command <command>nix-env</command> is used to manipulate Nix
-user environments.  User environments are sets of software packages
-available to a user at some point in time.  In other words, they are a
-synthesised view of the programs available in the Nix store.  There
-may be many user environments: different users can have different
-environments, and individual users can switch between different
-environments.</para>
-
-<para><command>nix-env</command> takes exactly one
-<emphasis>operation</emphasis> flag which indicates the subcommand to
-be performed.  These are documented below.</para>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Selectors</title>
-
-<para>Several commands, such as <command>nix-env -q</command> and
-<command>nix-env -i</command>, take a list of arguments that specify
-the packages on which to operate. These are extended regular
-expressions that must match the entire name of the package. (For
-details on regular expressions, see
-<citerefentry><refentrytitle>regex</refentrytitle><manvolnum>7</manvolnum></citerefentry>.)
-The match is case-sensitive. The regular expression can optionally be
-followed by a dash and a version number; if omitted, any version of
-the package will match.  Here are some examples:
-
-<variablelist>
-
-  <varlistentry>
-    <term><literal>firefox</literal></term>
-    <listitem><para>Matches the package name
-    <literal>firefox</literal> and any version.</para></listitem>
-  </varlistentry>
-
-  <varlistentry>
-    <term><literal>firefox-32.0</literal></term>
-    <listitem><para>Matches the package name
-    <literal>firefox</literal> and version
-    <literal>32.0</literal>.</para></listitem>
-  </varlistentry>
-
-  <varlistentry>
-    <term><literal>gtk\\+</literal></term>
-    <listitem><para>Matches the package name
-    <literal>gtk+</literal>. The <literal>+</literal> character must
-    be escaped using a backslash to prevent it from being interpreted
-    as a quantifier, and the backslash must be escaped in turn with
-    another backslash to ensure that the shell passes it
-    on.</para></listitem>
-  </varlistentry>
-
-  <varlistentry>
-    <term><literal>.\*</literal></term>
-    <listitem><para>Matches any package name. This is the default for
-    most commands.</para></listitem>
-  </varlistentry>
-
-  <varlistentry>
-    <term><literal>'.*zip.*'</literal></term>
-    <listitem><para>Matches any package name containing the string
-    <literal>zip</literal>. Note the dots: <literal>'*zip*'</literal>
-    does not work, because in a regular expression, the character
-    <literal>*</literal> is interpreted as a
-    quantifier.</para></listitem>
-  </varlistentry>
-
-  <varlistentry>
-    <term><literal>'.*(firefox|chromium).*'</literal></term>
-    <listitem><para>Matches any package name containing the strings
-    <literal>firefox</literal> or
-    <literal>chromium</literal>.</para></listitem>
-  </varlistentry>
-
-</variablelist>
-
-</para>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Common options</title>
-
-<para>This section lists the options that are common to all
-operations.  These options are allowed for every subcommand, though
-they may not always have an effect.  <phrase condition="manual">See
-also <xref linkend="sec-common-options"/>.</phrase></para>
-
-<variablelist>
-
-  <varlistentry><term><option>--file</option></term>
-    <term><option>-f</option></term>
-
-    <listitem><para>Specifies the Nix expression (designated below as
-    the <emphasis>active Nix expression</emphasis>) used by the
-    <option>--install</option>, <option>--upgrade</option>, and
-    <option>--query --available</option> operations to obtain
-    derivations.  The default is
-    <filename>~/.nix-defexpr</filename>.</para>
-
-    <para>If the argument starts with <literal>http://</literal> or
-    <literal>https://</literal>, it is interpreted as the URL of a
-    tarball that will be downloaded and unpacked to a temporary
-    location. The tarball must include a single top-level directory
-    containing at least a file named <filename>default.nix</filename>.</para>
-
-    </listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--profile</option></term>
-    <term><option>-p</option></term>
-
-    <listitem><para>Specifies the profile to be used by those
-    operations that operate on a profile (designated below as the
-    <emphasis>active profile</emphasis>).  A profile is a sequence of
-    user environments called <emphasis>generations</emphasis>, one of
-    which is the <emphasis>current
-    generation</emphasis>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--dry-run</option></term>
-
-    <listitem><para>For the <option>--install</option>,
-    <option>--upgrade</option>, <option>--uninstall</option>,
-    <option>--switch-generation</option>,
-    <option>--delete-generations</option> and
-    <option>--rollback</option> operations, this flag will cause
-    <command>nix-env</command> to print what
-    <emphasis>would</emphasis> be done if this flag had not been
-    specified, without actually doing it.</para>
-
-    <para><option>--dry-run</option> also prints out which paths will
-    be <link linkend="gloss-substitute">substituted</link> (i.e.,
-    downloaded) and which paths will be built from source (because no
-    substitute is available).</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--system-filter</option> <replaceable>system</replaceable></term>
-
-    <listitem><para>By default, operations such as <option>--query
-    --available</option> show derivations matching any platform.  This
-    option allows you to use derivations for the specified platform
-    <replaceable>system</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-<variablelist condition="manpage">
-  <varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--help</option></term>
-
-  <listitem><para>Prints out a summary of the command syntax and
-  exits.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--version</option></term>
-
-  <listitem><para>Prints out the Nix version number on standard output
-  and exits.</para></listitem>
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--verbose</option></term>
-  <term><option>-v</option></term>
-
-  <listitem>
-
-  <para>Increases the level of verbosity of diagnostic messages
-  printed on standard error.  For each Nix operation, the information
-  printed on standard output is well-defined; any diagnostic
-  information is printed on standard error, never on standard
-  output.</para>
-
-  <para>This option may be specified repeatedly.  Currently, the
-  following verbosity levels exist:</para>
-
-  <variablelist>
-
-    <varlistentry><term>0</term>
-    <listitem><para>&#x201C;Errors only&#x201D;: only print messages
-    explaining why the Nix invocation failed.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>1</term>
-    <listitem><para>&#x201C;Informational&#x201D;: print
-    <emphasis>useful</emphasis> messages about what Nix is doing.
-    This is the default.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>2</term>
-    <listitem><para>&#x201C;Talkative&#x201D;: print more informational
-    messages.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>3</term>
-    <listitem><para>&#x201C;Chatty&#x201D;: print even more
-    informational messages.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>4</term>
-    <listitem><para>&#x201C;Debug&#x201D;: print debug
-    information.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>5</term>
-    <listitem><para>&#x201C;Vomit&#x201D;: print vast amounts of debug
-    information.</para></listitem>
-    </varlistentry>
-
-  </variablelist>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--no-build-output</option></term>
-  <term><option>-Q</option></term>
-
-  <listitem><para>By default, output written by builders to standard
-  output and standard error is echoed to the Nix command's standard
-  error.  This option suppresses this behaviour.  Note that the
-  builder's standard output and error are always written to a log file
-  in
-  <filename><replaceable>prefix</replaceable>/nix/var/log/nix</filename>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-max-jobs"><term><option>--max-jobs</option></term>
-  <term><option>-j</option></term>
-
-  <listitem><para>Sets the maximum number of build jobs that Nix will
-  perform in parallel to the specified number.  The default is
-  specified by the <link linkend="conf-build-max-jobs"><literal>build-max-jobs</literal></link>
-  configuration setting, which itself defaults to
-  <literal>1</literal>.  A higher value is useful on SMP systems or to
-  exploit I/O latency.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-cores"><term><option>--cores</option></term>
-
-  <listitem><para>Sets the value of the <envar>NIX_BUILD_CORES</envar>
-  environment variable in the invocation of builders.  Builders can
-  use this variable at their discretion to control the maximum amount
-  of parallelism.  For instance, in Nixpkgs, if the derivation
-  attribute <varname>enableParallelBuilding</varname> is set to
-  <literal>true</literal>, the builder passes the
-  <option>-j<replaceable>N</replaceable></option> flag to GNU Make.
-  It defaults to the value of the <link linkend="conf-build-cores"><literal>build-cores</literal></link>
-  configuration setting, if set, or <literal>1</literal> otherwise.
-  The value <literal>0</literal> means that the builder should use all
-  available CPU cores in the system.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-max-silent-time"><term><option>--max-silent-time</option></term>
-
-  <listitem><para>Sets the maximum number of seconds that a builder
-  can go without producing any data on standard output or standard
-  error.  The default is specified by the <link linkend="conf-build-max-silent-time"><literal>build-max-silent-time</literal></link>
-  configuration setting.  <literal>0</literal> means no
-  time-out.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-timeout"><term><option>--timeout</option></term>
-
-  <listitem><para>Sets the maximum number of seconds that a builder
-  can run.  The default is specified by the <link linkend="conf-build-timeout"><literal>build-timeout</literal></link>
-  configuration setting.  <literal>0</literal> means no
-  timeout.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--keep-going</option></term>
-  <term><option>-k</option></term>
-
-  <listitem><para>Keep going in case of failed builds, to the
-  greatest extent possible.  That is, if building an input of some
-  derivation fails, Nix will still build the other inputs, but not the
-  derivation itself.  Without this option, Nix stops if any build
-  fails (except for builds of substitutes), possibly killing builds in
-  progress (in case of parallel or distributed builds).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--keep-failed</option></term>
-  <term><option>-K</option></term>
-
-  <listitem><para>Specifies that in case of a build failure, the
-  temporary directory (usually in <filename>/tmp</filename>) in which
-  the build takes place should not be deleted.  The path of the build
-  directory is printed as an informational message.
-    </para>
-  </listitem>
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--fallback</option></term>
-
-  <listitem>
-
-  <para>Whenever Nix attempts to build a derivation for which
-  substitutes are known for each output path, but realising the output
-  paths through the substitutes fails, fall back on building the
-  derivation.</para>
-
-  <para>The most common scenario in which this is useful is when we
-  have registered substitutes in order to perform binary distribution
-  from, say, a network repository.  If the repository is down, the
-  realisation of the derivation will fail.  When this option is
-  specified, Nix will build the derivation instead.  Thus,
-  installation from binaries falls back on installation from source.
-  This option is not the default since it is generally not desirable
-  for a transient failure in obtaining the substitutes to lead to a
-  full build from source (with the related consumption of
-  resources).</para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--readonly-mode</option></term>
-
-  <listitem><para>When this option is used, no attempt is made to open
-  the Nix database.  Most Nix operations do need database access, so
-  those operations will fail.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-log-type"><term><option>--log-type</option>
-<replaceable>type</replaceable></term>
-
-  <listitem>
-
-  <para>This option determines how the output written to standard
-  error is formatted.  Nix&#x2019;s diagnostic messages are typically
-  <emphasis>nested</emphasis>.  For instance, when tracing Nix
-  expression evaluation (<command>nix-env -vvvvv</command>, messages
-  from subexpressions are nested inside their parent expressions.  Nix
-  builder output is also often nested.  For instance, the Nix Packages
-  generic builder nests the various build tasks (unpack, configure,
-  compile, etc.), and the GNU Make in <literal>stdenv-linux</literal>
-  has been patched to provide nesting for recursive Make
-  invocations.</para>
-
-  <para><replaceable>type</replaceable> can be one of the
-  following:
-
-  <variablelist>
-
-    <varlistentry><term><literal>pretty</literal></term>
-
-      <listitem><para>Pretty-print the output, indicating different
-      nesting levels using spaces.  This is the
-      default.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal>escapes</literal></term>
-
-      <listitem><para>Indicate nesting using escape codes that can be
-      interpreted by the <command>nix-log2xml</command> tool in the
-      Nix source distribution.  The resulting XML file can be fed into
-      the <command>log2html.xsl</command> stylesheet to create an HTML
-      file that can be browsed interactively, using JavaScript to
-      expand and collapse parts of the output.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal>flat</literal></term>
-
-      <listitem><para>Remove all nesting.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--arg</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>This option is accepted by
-  <command>nix-env</command>, <command>nix-instantiate</command> and
-  <command>nix-build</command>.  When evaluating Nix expressions, the
-  expression evaluator will automatically try to call functions that
-  it encounters.  It can automatically call functions for which every
-  argument has a <link linkend="ss-functions">default value</link>
-  (e.g., <literal>{ <replaceable>argName</replaceable> ?
-  <replaceable>defaultValue</replaceable> }:
-  <replaceable>...</replaceable></literal>).  With
-  <option>--arg</option>, you can also call functions that have
-  arguments without a default value (or override a default value).
-  That is, if the evaluator encounters a function with an argument
-  named <replaceable>name</replaceable>, it will call it with value
-  <replaceable>value</replaceable>.</para>
-
-  <para>For instance, the file
-  <literal>pkgs/top-level/all-packages.nix</literal> in Nixpkgs is
-  actually a function:
-
-<programlisting>
-{ # The system (e.g., `i686-linux') for which to build the packages.
-  system ? builtins.currentSystem
-  <replaceable>...</replaceable>
-}: <replaceable>...</replaceable></programlisting>
-
-  So if you call this Nix expression (e.g., when you do
-  <literal>nix-env -i <replaceable>pkgname</replaceable></literal>),
-  the function will be called automatically using the value <link linkend="builtin-currentSystem"><literal>builtins.currentSystem</literal></link>
-  for the <literal>system</literal> argument.  You can override this
-  using <option>--arg</option>, e.g., <literal>nix-env -i
-  <replaceable>pkgname</replaceable> --arg system
-  \"i686-freebsd\"</literal>.  (Note that since the argument is a Nix
-  string literal, you have to escape the quotes.)</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--argstr</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>This option is like <option>--arg</option>, only the
-  value is not a Nix expression but a string.  So instead of
-  <literal>--arg system \"i686-linux\"</literal> (the outer quotes are
-  to keep the shell happy) you can say <literal>--argstr system
-  i686-linux</literal>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-attr"><term><option>--attr</option> / <option>-A</option>
-<replaceable>attrPath</replaceable></term>
-
-  <listitem><para>Select an attribute from the top-level Nix
-  expression being evaluated.  (<command>nix-env</command>,
-  <command>nix-instantiate</command>, <command>nix-build</command> and
-  <command>nix-shell</command> only.)  The <emphasis>attribute
-  path</emphasis> <replaceable>attrPath</replaceable> is a sequence of
-  attribute names separated by dots.  For instance, given a top-level
-  Nix expression <replaceable>e</replaceable>, the attribute path
-  <literal>xorg.xorgserver</literal> would cause the expression
-  <literal><replaceable>e</replaceable>.xorg.xorgserver</literal> to
-  be used.  See <link linkend="refsec-nix-env-install-examples"><command>nix-env
-  --install</command></link> for some concrete examples.</para>
-
-  <para>In addition to attribute names, you can also specify array
-  indices.  For instance, the attribute path
-  <literal>foo.3.bar</literal> selects the <literal>bar</literal>
-  attribute of the fourth element of the array in the
-  <literal>foo</literal> attribute of the top-level
-  expression.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--expr</option> / <option>-E</option></term>
-
-  <listitem><para>Interpret the command line arguments as a list of
-  Nix expressions to be parsed and evaluated, rather than as a list
-  of file names of Nix expressions.
-  (<command>nix-instantiate</command>, <command>nix-build</command>
-  and <command>nix-shell</command> only.)</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--show-trace</option></term>
-
-  <listitem><para>Causes Nix to print out a stack trace in case of Nix
-  expression evaluation errors.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-I"><term><option>-I</option> <replaceable>path</replaceable></term>
-
-  <listitem><para>Add a path to the Nix expression search path.  This
-  option may be given multiple times.  See the <envar linkend="env-NIX_PATH">NIX_PATH</envar> environment variable for
-  information on the semantics of the Nix search path.  Paths added
-  through <option>-I</option> take precedence over
-  <envar>NIX_PATH</envar>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--option</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>Set the Nix configuration option
-  <replaceable>name</replaceable> to <replaceable>value</replaceable>.
-  This overrides settings in the Nix configuration file (see
-  <citerefentry><refentrytitle>nix.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--repair</option></term>
-
-  <listitem><para>Fix corrupted or missing store paths by
-  redownloading or rebuilding them.  Note that this is slow because it
-  requires computing a cryptographic hash of the contents of every
-  path in the closure of the build.  Also note the warning under
-  <command>nix-store --repair-path</command>.</para></listitem>
-
-</varlistentry>
-</variablelist>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Files</title>
-
-<variablelist>
-
-  <varlistentry><term><filename>~/.nix-defexpr</filename></term>
-
-    <listitem><para>A directory that contains the default Nix
-    expressions used by the <option>--install</option>,
-    <option>--upgrade</option>, and <option>--query
-    --available</option> operations to obtain derivations.  The
-    <option>--file</option> option may be used to override this
-    default.</para>
-
-    <para>The Nix expressions in this directory are combined into a
-    single set, with each file as an attribute that has the name of
-    the file.  Thus, if <filename>~/.nix-defexpr</filename> contains
-    two files, <filename>foo</filename> and <filename>bar</filename>,
-    then the default Nix expression will essentially be
-
-<programlisting>
-{
-  foo = import ~/.nix-defexpr/foo;
-  bar = import ~/.nix-defexpr/bar;
-}</programlisting>
-
-    </para>
-
-    <para>The command <command>nix-channel</command> places symlinks
-    to the downloaded Nix expressions from each subscribed channel in
-    this directory.</para>
-
-    </listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><filename>~/.nix-profile</filename></term>
-
-    <listitem><para>A symbolic link to the user's current profile.  By
-    default, this symlink points to
-    <filename><replaceable>prefix</replaceable>/var/nix/profiles/default</filename>.
-    The <envar>PATH</envar> environment variable should include
-    <filename>~/.nix-profile/bin</filename> for the user environment
-    to be visible to the user.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection xml:id="rsec-nix-env-install"><title>Operation <option>--install</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-env</command>
-  <group choice="req">
-    <arg choice="plain"><option>--install</option></arg>
-    <arg choice="plain"><option>-i</option></arg>
-  </group>
-  <arg xmlns="http://docbook.org/ns/docbook">
-    <group choice="req">
-      <arg choice="plain"><option>--prebuilt-only</option></arg>
-      <arg choice="plain"><option>-b</option></arg>
-    </group>
-  </arg><arg xmlns="http://docbook.org/ns/docbook">
-    <group choice="req">
-      <arg choice="plain"><option>--attr</option></arg>
-      <arg choice="plain"><option>-A</option></arg>
-    </group>
-  </arg><arg xmlns="http://docbook.org/ns/docbook"><option>--from-expression</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>-E</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--from-profile</option> <replaceable>path</replaceable></arg>
-  <group choice="opt">
-    <arg choice="plain"><option>--preserve-installed</option></arg>
-    <arg choice="plain"><option>-P</option></arg>
-  </group>
-  <group choice="opt">
-    <arg choice="plain"><option>--remove-all</option></arg>
-    <arg choice="plain"><option>-r</option></arg>
-  </group>
-  <arg choice="plain" rep="repeat"><replaceable>args</replaceable></arg>
-</cmdsynopsis>
-
-</refsection>
-
-
-<refsection><title>Description</title>
-
-<para>The install operation creates a new user environment, based on
-the current generation of the active profile, to which a set of store
-paths described by <replaceable>args</replaceable> is added.  The
-arguments <replaceable>args</replaceable> map to store paths in a
-number of possible ways:
-
-<itemizedlist>
-
-  <listitem><para>By default, <replaceable>args</replaceable> is a set
-  of derivation names denoting derivations in the active Nix
-  expression.  These are realised, and the resulting output paths are
-  installed.  Currently installed derivations with a name equal to the
-  name of a derivation being added are removed unless the option
-  <option>--preserve-installed</option> is
-  specified.</para>
-
-  <para>If there are multiple derivations matching a name in
-  <replaceable>args</replaceable> that have the same name (e.g.,
-  <literal>gcc-3.3.6</literal> and <literal>gcc-4.1.1</literal>), then
-  the derivation with the highest <emphasis>priority</emphasis> is
-  used.  A derivation can define a priority by declaring the
-  <varname>meta.priority</varname> attribute.  This attribute should
-  be a number, with a higher value denoting a lower priority.  The
-  default priority is <literal>0</literal>.</para>
-
-  <para>If there are multiple matching derivations with the same
-  priority, then the derivation with the highest version will be
-  installed.</para>
-
-  <para>You can force the installation of multiple derivations with
-  the same name by being specific about the versions.  For instance,
-  <literal>nix-env -i gcc-3.3.6 gcc-4.1.1</literal> will install both
-  version of GCC (and will probably cause a user environment
-  conflict!).</para></listitem>
-
-  <listitem><para>If <link linkend="opt-attr"><option>--attr</option></link>
-  (<option>-A</option>) is specified, the arguments are
-  <emphasis>attribute paths</emphasis> that select attributes from the
-  top-level Nix expression.  This is faster than using derivation
-  names and unambiguous.  To find out the attribute paths of available
-  packages, use <literal>nix-env -qaP</literal>.</para></listitem>
-
-  <listitem><para>If <option>--from-profile</option>
-  <replaceable>path</replaceable> is given,
-  <replaceable>args</replaceable> is a set of names denoting installed
-  store paths in the profile <replaceable>path</replaceable>.  This is
-  an easy way to copy user environment elements from one profile to
-  another.</para></listitem>
-
-  <listitem><para>If <option>--from-expression</option> is given,
-  <replaceable>args</replaceable> are Nix <link linkend="ss-functions">functions</link> that are called with the
-  active Nix expression as their single argument.  The derivations
-  returned by those function calls are installed.  This allows
-  derivations to be specified in an unambiguous way, which is necessary
-  if there are multiple derivations with the same
-  name.</para></listitem>
-
-  <listitem><para>If <replaceable>args</replaceable> are store
-  derivations, then these are <link linkend="rsec-nix-store-realise">realised</link>, and the resulting
-  output paths are installed.</para></listitem>
-
-  <listitem><para>If <replaceable>args</replaceable> are store paths
-  that are not store derivations, then these are <link linkend="rsec-nix-store-realise">realised</link> and
-  installed.</para></listitem>
-
-  <listitem><para>By default all outputs are installed for each derivation.
-  That can be reduced by setting <literal>meta.outputsToInstall</literal>.
-  </para></listitem> <!-- TODO: link nixpkgs docs on the ability to override those. -->
-
-</itemizedlist>
-
-</para>
-
-</refsection>
-
-
-<refsection><title>Flags</title>
-
-<variablelist>
-
-  <varlistentry><term><option>--prebuilt-only</option> / <option>-b</option></term>
-
-    <listitem><para>Use only derivations for which a substitute is
-    registered, i.e., there is a pre-built binary available that can
-    be downloaded in lieu of building the derivation.  Thus, no
-    packages will be built from source.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--preserve-installed</option></term>
-    <term><option>-P</option></term>
-
-    <listitem><para>Do not remove derivations with a name matching one
-    of the derivations being installed.  Usually, trying to have two
-    versions of the same package installed in the same generation of a
-    profile will lead to an error in building the generation, due to
-    file name clashes between the two versions.  However, this is not
-    the case for all packages.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--remove-all</option></term>
-    <term><option>-r</option></term>
-
-    <listitem><para>Remove all previously installed packages first.
-    This is equivalent to running <literal>nix-env -e '.*'</literal>
-    first, except that everything happens in a single
-    transaction.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection xml:id="refsec-nix-env-install-examples"><title>Examples</title>
-
-<para>To install a specific version of <command>gcc</command> from the
-active Nix expression:
-
-<screen>
-$ nix-env --install gcc-3.3.2
-installing `gcc-3.3.2'
-uninstalling `gcc-3.1'</screen>
-
-Note the previously installed version is removed, since
-<option>--preserve-installed</option> was not specified.</para>
-
-<para>To install an arbitrary version:
-
-<screen>
-$ nix-env --install gcc
-installing `gcc-3.3.2'</screen>
-
-</para>
-
-<para>To install using a specific attribute:
-
-<screen>
-$ nix-env -i -A gcc40mips
-$ nix-env -i -A xorg.xorgserver</screen>
-
-</para>
-
-<para>To install all derivations in the Nix expression <filename>foo.nix</filename>:
-
-<screen>
-$ nix-env -f ~/foo.nix -i '.*'</screen>
-
-</para>
-
-<para>To copy the store path with symbolic name <literal>gcc</literal>
-from another profile:
-
-<screen>
-$ nix-env -i --from-profile /nix/var/nix/profiles/foo -i gcc</screen>
-
-</para>
-
-<para>To install a specific store derivation (typically created by
-<command>nix-instantiate</command>):
-
-<screen>
-$ nix-env -i /nix/store/fibjb1bfbpm5mrsxc4mh2d8n37sxh91i-gcc-3.4.3.drv</screen>
-
-</para>
-
-<para>To install a specific output path:
-
-<screen>
-$ nix-env -i /nix/store/y3cgx0xj1p4iv9x0pnnmdhr8iyg741vk-gcc-3.4.3</screen>
-
-</para>
-
-<para>To install from a Nix expression specified on the command-line:
-
-<screen>
-$ nix-env -f ./foo.nix -i -E \
-    'f: (f {system = "i686-linux";}).subversionWithJava'</screen>
-
-I.e., this evaluates to <literal>(f: (f {system =
-"i686-linux";}).subversionWithJava) (import ./foo.nix)</literal>, thus
-selecting the <literal>subversionWithJava</literal> attribute from the
-set returned by calling the function defined in
-<filename>./foo.nix</filename>.</para>
-
-<para>A dry-run tells you which paths will be downloaded or built from
-source:
-
-<screen>
-$ nix-env -f pkgs/top-level/all-packages.nix -i f-spot --dry-run
-(dry run; not doing anything)
-installing `f-spot-0.0.10'
-the following derivations will be built:
-  /nix/store/0g63jv9aagwbgci4nnzs2dkxqz84kdja-libgnomeprintui-2.12.1.tar.bz2.drv
-  /nix/store/0gfarvxq6sannsdw8a1ir40j1ys2mqb4-ORBit2-2.14.2.tar.bz2.drv
-  /nix/store/0i9gs5zc04668qiy60ga2rc16abkj7g8-sqlite-2.8.17.drv
-  <replaceable>...</replaceable>
-the following paths will be substituted:
-  /nix/store/8zbipvm4gp9jfqh9nnk1n3bary1a37gs-perl-XML-Parser-2.34
-  /nix/store/b8a2bg7gnyvvvjjibp4axg9x1hzkw36c-mono-1.1.4
-  <replaceable>...</replaceable></screen>
-
-</para>
-
-<para>To install Firefox from the latest revision in the Nixpkgs/NixOS
-14.12 channel:
-
-<screen>
-$ nix-env -f https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz -iA firefox
-</screen>
-
-(The GitHub repository <literal>nixpkgs-channels</literal> is updated
-automatically from the main <literal>nixpkgs</literal> repository
-after certain tests have succeeded and binaries have been built and
-uploaded to the binary cache at <uri>cache.nixos.org</uri>.)</para>
-
-</refsection>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection xml:id="rsec-nix-env-upgrade"><title>Operation <option>--upgrade</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-env</command>
-  <group choice="req">
-    <arg choice="plain"><option>--upgrade</option></arg>
-    <arg choice="plain"><option>-u</option></arg>
-  </group>
-  <arg xmlns="http://docbook.org/ns/docbook">
-    <group choice="req">
-      <arg choice="plain"><option>--prebuilt-only</option></arg>
-      <arg choice="plain"><option>-b</option></arg>
-    </group>
-  </arg><arg xmlns="http://docbook.org/ns/docbook">
-    <group choice="req">
-      <arg choice="plain"><option>--attr</option></arg>
-      <arg choice="plain"><option>-A</option></arg>
-    </group>
-  </arg><arg xmlns="http://docbook.org/ns/docbook"><option>--from-expression</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>-E</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--from-profile</option> <replaceable>path</replaceable></arg>
-  <group choice="opt">
-    <arg choice="plain"><option>--lt</option></arg>
-    <arg choice="plain"><option>--leq</option></arg>
-    <arg choice="plain"><option>--eq</option></arg>
-    <arg choice="plain"><option>--always</option></arg>
-  </group>
-  <arg choice="plain" rep="repeat"><replaceable>args</replaceable></arg>
-</cmdsynopsis>
-
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The upgrade operation creates a new user environment, based on
-the current generation of the active profile, in which all store paths
-are replaced for which there are newer versions in the set of paths
-described by <replaceable>args</replaceable>.  Paths for which there
-are no newer versions are left untouched; this is not an error.  It is
-also not an error if an element of <replaceable>args</replaceable>
-matches no installed derivations.</para>
-
-<para>For a description of how <replaceable>args</replaceable> is
-mapped to a set of store paths, see <link linkend="rsec-nix-env-install"><option>--install</option></link>.  If
-<replaceable>args</replaceable> describes multiple store paths with
-the same symbolic name, only the one with the highest version is
-installed.</para>
-
-</refsection>
-
-<refsection><title>Flags</title>
-
-<variablelist>
-
-  <varlistentry><term><option>--lt</option></term>
-
-    <listitem><para>Only upgrade a derivation to newer versions.  This
-    is the default.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--leq</option></term>
-
-    <listitem><para>In addition to upgrading to newer versions, also
-    &#x201C;upgrade&#x201D; to derivations that have the same version.  Version are
-    not a unique identification of a derivation, so there may be many
-    derivations that have the same version.  This flag may be useful
-    to force &#x201C;synchronisation&#x201D; between the installed and available
-    derivations.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--eq</option></term>
-
-    <listitem><para><emphasis>Only</emphasis> &#x201C;upgrade&#x201D; to derivations
-    that have the same version.  This may not seem very useful, but it
-    actually is, e.g., when there is a new release of Nixpkgs and you
-    want to replace installed applications with the same versions
-    built against newer dependencies (to reduce the number of
-    dependencies floating around on your system).</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--always</option></term>
-
-    <listitem><para>In addition to upgrading to newer versions, also
-    &#x201C;upgrade&#x201D; to derivations that have the same or a lower version.
-    I.e., derivations may actually be downgraded depending on what is
-    available in the active Nix expression.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-<para>For the other flags, see <option linkend="rsec-nix-env-install">--install</option>.</para>
-
-</refsection>
-
-<refsection><title>Examples</title>
-
-<screen>
-$ nix-env --upgrade gcc
-upgrading `gcc-3.3.1' to `gcc-3.4'
-
-$ nix-env -u gcc-3.3.2 --always <lineannotation>(switch to a specific version)</lineannotation>
-upgrading `gcc-3.4' to `gcc-3.3.2'
-
-$ nix-env --upgrade pan
-<lineannotation>(no upgrades available, so nothing happens)</lineannotation>
-
-$ nix-env -u <lineannotation>(try to upgrade everything)</lineannotation>
-upgrading `hello-2.1.2' to `hello-2.1.3'
-upgrading `mozilla-1.2' to `mozilla-1.4'</screen>
-
-</refsection>
-
-<refsection xml:id="ssec-version-comparisons"><title>Versions</title>
-
-<para>The upgrade operation determines whether a derivation
-<varname>y</varname> is an upgrade of a derivation
-<varname>x</varname> by looking at their respective
-<literal>name</literal> attributes.  The names (e.g.,
-<literal>gcc-3.3.1</literal> are split into two parts: the package
-name (<literal>gcc</literal>), and the version
-(<literal>3.3.1</literal>).  The version part starts after the first
-dash not following by a letter.  <varname>x</varname> is considered an
-upgrade of <varname>y</varname> if their package names match, and the
-version of <varname>y</varname> is higher that that of
-<varname>x</varname>.</para>
-
-<para>The versions are compared by splitting them into contiguous
-components of numbers and letters.  E.g., <literal>3.3.1pre5</literal>
-is split into <literal>[3, 3, 1, "pre", 5]</literal>.  These lists are
-then compared lexicographically (from left to right).  Corresponding
-components <varname>a</varname> and <varname>b</varname> are compared
-as follows.  If they are both numbers, integer comparison is used.  If
-<varname>a</varname> is an empty string and <varname>b</varname> is a
-number, <varname>a</varname> is considered less than
-<varname>b</varname>.  The special string component
-<literal>pre</literal> (for <emphasis>pre-release</emphasis>) is
-considered to be less than other components.  String components are
-considered less than number components.  Otherwise, they are compared
-lexicographically (i.e., using case-sensitive string comparison).</para>
-
-<para>This is illustrated by the following examples:
-
-<screen>
-1.0 &lt; 2.3
-2.1 &lt; 2.3
-2.3 = 2.3
-2.5 &gt; 2.3
-3.1 &gt; 2.3
-2.3.1 &gt; 2.3
-2.3.1 &gt; 2.3a
-2.3pre1 &lt; 2.3
-2.3pre3 &lt; 2.3pre12
-2.3a &lt; 2.3c
-2.3pre1 &lt; 2.3c
-2.3pre1 &lt; 2.3q</screen>
-
-</para>
-
-</refsection>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--uninstall</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-env</command>
-  <group choice="req">
-    <arg choice="plain"><option>--uninstall</option></arg>
-    <arg choice="plain"><option>-e</option></arg>
-  </group>
-  <arg choice="plain" rep="repeat"><replaceable>drvnames</replaceable></arg>
-</cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The uninstall operation creates a new user environment, based on
-the current generation of the active profile, from which the store
-paths designated by the symbolic names
-<replaceable>names</replaceable> are removed.</para>
-
-</refsection>
-
-<refsection><title>Examples</title>
-
-<screen>
-$ nix-env --uninstall gcc
-$ nix-env -e '.*' <lineannotation>(remove everything)</lineannotation></screen>
-
-</refsection>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection xml:id="rsec-nix-env-set"><title>Operation <option>--set</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-env</command>
-  <arg choice="plain"><option>--set</option></arg>
-  <arg choice="plain"><replaceable>drvname</replaceable></arg>
-</cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The <option>--set</option> operation modifies the current generation of a
-profile so that it contains exactly the specified derivation, and nothing else.
-</para>
-
-</refsection>
-
-<refsection><title>Examples</title>
-
-<para>
-The following updates a profile such that its current generation will contain
-just Firefox:
-
-<screen>
-$ nix-env -p /nix/var/nix/profiles/browser --set firefox</screen>
-
-</para>
-
-</refsection>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection xml:id="rsec-nix-env-set-flag"><title>Operation <option>--set-flag</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-env</command>
-  <arg choice="plain"><option>--set-flag</option></arg>
-  <arg choice="plain"><replaceable>name</replaceable></arg>
-  <arg choice="plain"><replaceable>value</replaceable></arg>
-  <arg choice="plain" rep="repeat"><replaceable>drvnames</replaceable></arg>
-</cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The <option>--set-flag</option> operation allows meta attributes
-of installed packages to be modified.  There are several attributes
-that can be usefully modified, because they affect the behaviour of
-<command>nix-env</command> or the user environment build
-script:
-
-<itemizedlist>
-
-  <listitem><para><varname>priority</varname> can be changed to
-  resolve filename clashes.  The user environment build script uses
-  the <varname>meta.priority</varname> attribute of derivations to
-  resolve filename collisions between packages.  Lower priority values
-  denote a higher priority.  For instance, the GCC wrapper package and
-  the Binutils package in Nixpkgs both have a file
-  <filename>bin/ld</filename>, so previously if you tried to install
-  both you would get a collision.  Now, on the other hand, the GCC
-  wrapper declares a higher priority than Binutils, so the former&#x2019;s
-  <filename>bin/ld</filename> is symlinked in the user
-  environment.</para></listitem>
-
-  <listitem><para><varname>keep</varname> can be set to
-  <literal>true</literal> to prevent the package from being upgraded
-  or replaced.  This is useful if you want to hang on to an older
-  version of a package.</para></listitem>
-
-  <listitem><para><varname>active</varname> can be set to
-  <literal>false</literal> to &#x201C;disable&#x201D; the package.  That is, no
-  symlinks will be generated to the files of the package, but it
-  remains part of the profile (so it won&#x2019;t be garbage-collected).  It
-  can be set back to <literal>true</literal> to re-enable the
-  package.</para></listitem>
-
-</itemizedlist>
-
-</para>
-
-</refsection>
-
-<refsection><title>Examples</title>
-
-<para>To prevent the currently installed Firefox from being upgraded:
-
-<screen>
-$ nix-env --set-flag keep true firefox</screen>
-
-After this, <command>nix-env -u</command> will ignore Firefox.</para>
-
-<para>To disable the currently installed Firefox, then install a new
-Firefox while the old remains part of the profile:
-
-<screen>
-$ nix-env -q
-firefox-2.0.0.9 <lineannotation>(the current one)</lineannotation>
-
-$ nix-env --preserve-installed -i firefox-2.0.0.11
-installing `firefox-2.0.0.11'
-building path(s) `/nix/store/myy0y59q3ig70dgq37jqwg1j0rsapzsl-user-environment'
-collision between `/nix/store/<replaceable>...</replaceable>-firefox-2.0.0.11/bin/firefox'
-  and `/nix/store/<replaceable>...</replaceable>-firefox-2.0.0.9/bin/firefox'.
-<lineannotation>(i.e., can&#x2019;t have two active at the same time)</lineannotation>
-
-$ nix-env --set-flag active false firefox
-setting flag on `firefox-2.0.0.9'
-
-$ nix-env --preserve-installed -i firefox-2.0.0.11
-installing `firefox-2.0.0.11'
-
-$ nix-env -q
-firefox-2.0.0.11 <lineannotation>(the enabled one)</lineannotation>
-firefox-2.0.0.9 <lineannotation>(the disabled one)</lineannotation></screen>
-
-</para>
-
-<para>To make files from <literal>binutils</literal> take precedence
-over files from <literal>gcc</literal>:
-
-<screen>
-$ nix-env --set-flag priority 5 binutils
-$ nix-env --set-flag priority 10 gcc</screen>
-
-</para>
-
-</refsection>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--query</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-env</command>
-  <group choice="req">
-    <arg choice="plain"><option>--query</option></arg>
-    <arg choice="plain"><option>-q</option></arg>
-  </group>
-  <group choice="opt">
-    <arg choice="plain"><option>--installed</option></arg>
-    <arg choice="plain"><option>--available</option></arg>
-    <arg choice="plain"><option>-a</option></arg>
-  </group>
-
-  <sbr/>
-
-  <arg>
-    <group choice="req">
-      <arg choice="plain"><option>--status</option></arg>
-      <arg choice="plain"><option>-s</option></arg>
-    </group>
-  </arg>
-  <arg>
-    <group choice="req">
-      <arg choice="plain"><option>--attr-path</option></arg>
-      <arg choice="plain"><option>-P</option></arg>
-    </group>
-  </arg>
-  <arg><option>--no-name</option></arg>
-  <arg>
-    <group choice="req">
-      <arg choice="plain"><option>--compare-versions</option></arg>
-      <arg choice="plain"><option>-c</option></arg>
-    </group>
-  </arg>
-  <arg><option>--system</option></arg>
-  <arg><option>--drv-path</option></arg>
-  <arg><option>--out-path</option></arg>
-  <arg><option>--description</option></arg>
-  <arg><option>--meta</option></arg>
-
-  <sbr/>
-
-  <arg><option>--xml</option></arg>
-  <arg><option>--json</option></arg>
-  <arg>
-    <group choice="req">
-      <arg choice="plain"><option>--prebuilt-only</option></arg>
-      <arg choice="plain"><option>-b</option></arg>
-    </group>
-  </arg>
-
-  <arg>
-    <group choice="req">
-      <arg choice="plain"><option>--attr</option></arg>
-      <arg choice="plain"><option>-A</option></arg>
-    </group>
-    <replaceable>attribute-path</replaceable>
-  </arg>
-
-  <sbr/>
-
-  <arg choice="plain" rep="repeat"><replaceable>names</replaceable></arg>
-</cmdsynopsis>
-
-</refsection>
-
-
-<refsection><title>Description</title>
-
-<para>The query operation displays information about either the store
-paths that are installed in the current generation of the active
-profile (<option>--installed</option>), or the derivations that are
-available for installation in the active Nix expression
-(<option>--available</option>).  It only prints information about
-derivations whose symbolic name matches one of
-<replaceable>names</replaceable>.</para>
-
-<para>The derivations are sorted by their <literal>name</literal>
-attributes.</para>
-
-</refsection>
-
-
-<refsection><title>Source selection</title>
-
-<para>The following flags specify the set of things on which the query
-operates.</para>
-
-<variablelist>
-
-  <varlistentry><term><option>--installed</option></term>
-
-    <listitem><para>The query operates on the store paths that are
-    installed in the current generation of the active profile.  This
-    is the default.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--available</option></term>
-    <term><option>-a</option></term>
-
-    <listitem><para>The query operates on the derivations that are
-    available in the active Nix expression.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Queries</title>
-
-<para>The following flags specify what information to display about
-the selected derivations.  Multiple flags may be specified, in which
-case the information is shown in the order given here.  Note that the
-name of the derivation is shown unless <option>--no-name</option> is
-specified.</para>
-
-<!-- TODO: fix the terminology here; i.e., derivations, store paths,
-user environment elements, etc. -->
-
-<variablelist>
-
-  <varlistentry><term><option>--xml</option></term>
-
-    <listitem><para>Print the result in an XML representation suitable
-    for automatic processing by other tools.  The root element is
-    called <literal>items</literal>, which contains a
-    <literal>item</literal> element for each available or installed
-    derivation.  The fields discussed below are all stored in
-    attributes of the <literal>item</literal>
-    elements.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--json</option></term>
-
-    <listitem><para>Print the result in a JSON representation suitable
-    for automatic processing by other tools.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--prebuilt-only</option> / <option>-b</option></term>
-
-    <listitem><para>Show only derivations for which a substitute is
-    registered, i.e., there is a pre-built binary available that can
-    be downloaded in lieu of building the derivation.  Thus, this
-    shows all packages that probably can be installed
-    quickly.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--status</option></term>
-    <term><option>-s</option></term>
-
-    <listitem><para>Print the <emphasis>status</emphasis> of the
-    derivation.  The status consists of three characters.  The first
-    is <literal>I</literal> or <literal>-</literal>, indicating
-    whether the derivation is currently installed in the current
-    generation of the active profile.  This is by definition the case
-    for <option>--installed</option>, but not for
-    <option>--available</option>.  The second is <literal>P</literal>
-    or <literal>-</literal>, indicating whether the derivation is
-    present on the system.  This indicates whether installation of an
-    available derivation will require the derivation to be built.  The
-    third is <literal>S</literal> or <literal>-</literal>, indicating
-    whether a substitute is available for the
-    derivation.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--attr-path</option></term>
-    <term><option>-P</option></term>
-
-    <listitem><para>Print the <emphasis>attribute path</emphasis> of
-    the derivation, which can be used to unambiguously select it using
-    the <link linkend="opt-attr"><option>--attr</option> option</link>
-    available in commands that install derivations like
-    <literal>nix-env --install</literal>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--no-name</option></term>
-
-    <listitem><para>Suppress printing of the <literal>name</literal>
-    attribute of each derivation.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--compare-versions</option> /
-  <option>-c</option></term>
-
-    <listitem><para>Compare installed versions to available versions,
-    or vice versa (if <option>--available</option> is given).  This is
-    useful for quickly seeing whether upgrades for installed
-    packages are available in a Nix expression.  A column is added
-    with the following meaning:
-
-    <variablelist>
-
-      <varlistentry><term><literal>&lt;</literal> <replaceable>version</replaceable></term>
-
-        <listitem><para>A newer version of the package is available
-        or installed.</para></listitem>
-
-      </varlistentry>
-
-      <varlistentry><term><literal>=</literal> <replaceable>version</replaceable></term>
-
-        <listitem><para>At most the same version of the package is
-        available or installed.</para></listitem>
-
-      </varlistentry>
-
-      <varlistentry><term><literal>&gt;</literal> <replaceable>version</replaceable></term>
-
-        <listitem><para>Only older versions of the package are
-        available or installed.</para></listitem>
-
-      </varlistentry>
-
-      <varlistentry><term><literal>- ?</literal></term>
-
-        <listitem><para>No version of the package is available or
-        installed.</para></listitem>
-
-      </varlistentry>
-
-    </variablelist>
-
-    </para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--system</option></term>
-
-    <listitem><para>Print the <literal>system</literal> attribute of
-    the derivation.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--drv-path</option></term>
-
-    <listitem><para>Print the path of the store
-    derivation.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--out-path</option></term>
-
-    <listitem><para>Print the output path of the
-    derivation.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--description</option></term>
-
-    <listitem><para>Print a short (one-line) description of the
-    derivation, if available.  The description is taken from the
-    <literal>meta.description</literal> attribute of the
-    derivation.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--meta</option></term>
-
-    <listitem><para>Print all of the meta-attributes of the
-    derivation.  This option is only available with
-    <option>--xml</option>.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<para>To show installed packages:
-
-<screen>
-$ nix-env -q
-bison-1.875c
-docbook-xml-4.2
-firefox-1.0.4
-MPlayer-1.0pre7
-ORBit2-2.8.3
-<replaceable>&#x2026;</replaceable>
-</screen>
-
-</para>
-
-<para>To show available packages:
-
-<screen>
-$ nix-env -qa
-firefox-1.0.7
-GConf-2.4.0.1
-MPlayer-1.0pre7
-ORBit2-2.8.3
-<replaceable>&#x2026;</replaceable>
-</screen>
-
-</para>
-
-<para>To show the status of available packages:
-
-<screen>
-$ nix-env -qas
--P- firefox-1.0.7   <lineannotation>(not installed but present)</lineannotation>
---S GConf-2.4.0.1   <lineannotation>(not present, but there is a substitute for fast installation)</lineannotation>
---S MPlayer-1.0pre3 <lineannotation>(i.e., this is not the installed MPlayer, even though the version is the same!)</lineannotation>
-IP- ORBit2-2.8.3    <lineannotation>(installed and by definition present)</lineannotation>
-<replaceable>&#x2026;</replaceable>
-</screen>
-
-</para>
-
-<para>To show available packages in the Nix expression <filename>foo.nix</filename>:
-
-<screen>
-$ nix-env -f ./foo.nix -qa
-foo-1.2.3
-</screen>
-
-</para>
-
-<para>To compare installed versions to what&#x2019;s available:
-
-<screen>
-$ nix-env -qc
-<replaceable>...</replaceable>
-acrobat-reader-7.0 - ?      <lineannotation>(package is not available at all)</lineannotation>
-autoconf-2.59      = 2.59   <lineannotation>(same version)</lineannotation>
-firefox-1.0.4      &lt; 1.0.7  <lineannotation>(a more recent version is available)</lineannotation>
-<replaceable>...</replaceable>
-</screen>
-
-</para>
-
-<para>To show all packages with &#x201C;<literal>zip</literal>&#x201D; in the name:
-
-<screen>
-$ nix-env -qa '.*zip.*'
-bzip2-1.0.6
-gzip-1.6
-zip-3.0
-<replaceable>&#x2026;</replaceable>
-</screen>
-
-</para>
-
-<para>To show all packages with &#x201C;<literal>firefox</literal>&#x201D; or
-&#x201C;<literal>chromium</literal>&#x201D; in the name:
-
-<screen>
-$ nix-env -qa '.*(firefox|chromium).*'
-chromium-37.0.2062.94
-chromium-beta-38.0.2125.24
-firefox-32.0.3
-firefox-with-plugins-13.0.1
-<replaceable>&#x2026;</replaceable>
-</screen>
-
-</para>
-
-<para>To show all packages in the latest revision of the Nixpkgs
-repository:
-
-<screen>
-$ nix-env -f https://github.com/NixOS/nixpkgs/archive/master.tar.gz -qa
-</screen>
-
-</para>
-
-</refsection>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--switch-profile</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-env</command>
-  <group choice="req">
-    <arg choice="plain"><option>--switch-profile</option></arg>
-    <arg choice="plain"><option>-S</option></arg>
-  </group>
-  <arg choice="req"><replaceable>path</replaceable></arg>
-</cmdsynopsis>
-
-</refsection>
-
-
-<refsection><title>Description</title>
-
-<para>This operation makes <replaceable>path</replaceable> the current
-profile for the user.  That is, the symlink
-<filename>~/.nix-profile</filename> is made to point to
-<replaceable>path</replaceable>.</para>
-
-</refsection>
-
-<refsection><title>Examples</title>
-
-<screen>
-$ nix-env -S ~/my-profile</screen>
-
-</refsection>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--list-generations</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-env</command>
-  <arg choice="plain"><option>--list-generations</option></arg>
-</cmdsynopsis>
-
-</refsection>
-
-
-<refsection><title>Description</title>
-
-<para>This operation print a list of all the currently existing
-generations for the active profile.  These may be switched to using
-the <option>--switch-generation</option> operation.  It also prints
-the creation date of the generation, and indicates the current
-generation.</para>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<screen>
-$ nix-env --list-generations
-  95   2004-02-06 11:48:24
-  96   2004-02-06 11:49:01
-  97   2004-02-06 16:22:45
-  98   2004-02-06 16:24:33   (current)</screen>
-
-</refsection>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--delete-generations</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-env</command>
-  <arg choice="plain"><option>--delete-generations</option></arg>
-  <arg choice="plain" rep="repeat"><replaceable>generations</replaceable></arg>
-</cmdsynopsis>
-
-</refsection>
-
-
-<refsection><title>Description</title>
-
-<para>This operation deletes the specified generations of the current
-profile.  The generations can be a list of generation numbers, the
-special value <literal>old</literal> to delete all non-current
-generations, or a value such as <literal>30d</literal> to delete all
-generations older than the specified number of days (except for the
-generation that was active at that point in time).
-Periodically deleting old generations is important to make garbage
-collection effective.</para>
-
-</refsection>
-
-<refsection><title>Examples</title>
-
-<screen>
-$ nix-env --delete-generations 3 4 8
-
-$ nix-env --delete-generations 30d
-
-$ nix-env -p other_profile --delete-generations old</screen>
-
-</refsection>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--switch-generation</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-env</command>
-  <group choice="req">
-    <arg choice="plain"><option>--switch-generation</option></arg>
-    <arg choice="plain"><option>-G</option></arg>
-  </group>
-  <arg choice="req"><replaceable>generation</replaceable></arg>
-</cmdsynopsis>
-
-</refsection>
-
-
-<refsection><title>Description</title>
-
-<para>This operation makes generation number
-<replaceable>generation</replaceable> the current generation of the
-active profile.  That is, if the
-<filename><replaceable>profile</replaceable></filename> is the path to
-the active profile, then the symlink
-<filename><replaceable>profile</replaceable></filename> is made to
-point to
-<filename><replaceable>profile</replaceable>-<replaceable>generation</replaceable>-link</filename>,
-which is in turn a symlink to the actual user environment in the Nix
-store.</para>
-
-<para>Switching will fail if the specified generation does not exist.</para>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<screen>
-$ nix-env -G 42
-switching from generation 50 to 42</screen>
-
-</refsection>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--rollback</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-env</command>
-  <arg choice="plain"><option>--rollback</option></arg>
-</cmdsynopsis>
-
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>This operation switches to the &#x201C;previous&#x201D; generation of the
-active profile, that is, the highest numbered generation lower than
-the current generation, if it exists.  It is just a convenience
-wrapper around <option>--list-generations</option> and
-<option>--switch-generation</option>.</para>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<screen>
-$ nix-env --rollback
-switching from generation 92 to 91
-
-$ nix-env --rollback
-error: no generation older than the current (91) exists</screen>
-
-</refsection>
-
-</refsection>
-
-
-<refsection condition="manpage"><title>Environment variables</title>
-
-<variablelist>
-  
-  <varlistentry><term><envar>NIX_PROFILE</envar></term>
-
-    <listitem><para>Location of the Nix profile.  Defaults to the
-    target of the symlink <filename>~/.nix-profile</filename>, if it
-    exists, or <filename>/nix/var/nix/profiles/default</filename>
-    otherwise.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="env-NIX_PATH"><term><envar>NIX_PATH</envar></term>
-
-  <listitem>
-
-    <para>A colon-separated list of directories used to look up Nix
-    expressions enclosed in angle brackets (i.e.,
-    <literal>&lt;<replaceable>path</replaceable>&gt;</literal>).  For
-    instance, the value
-
-    <screen>
-/home/eelco/Dev:/etc/nixos</screen>
-
-    will cause Nix to look for paths relative to
-    <filename>/home/eelco/Dev</filename> and
-    <filename>/etc/nixos</filename>, in that order.  It is also
-    possible to match paths against a prefix.  For example, the value
-
-    <screen>
-nixpkgs=/home/eelco/Dev/nixpkgs-branch:/etc/nixos</screen>
-
-    will cause Nix to search for
-    <literal>&lt;nixpkgs/<replaceable>path</replaceable>&gt;</literal> in
-    <filename>/home/eelco/Dev/nixpkgs-branch/<replaceable>path</replaceable></filename>
-    and
-    <filename>/etc/nixos/nixpkgs/<replaceable>path</replaceable></filename>.</para>
-
-    <para>If a path in the Nix search path starts with
-    <literal>http://</literal> or <literal>https://</literal>, it is
-    interpreted as the URL of a tarball that will be downloaded and
-    unpacked to a temporary location. The tarball must consist of a
-    single top-level directory. For example, setting
-    <envar>NIX_PATH</envar> to
-
-    <screen>
-nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz</screen>
-
-    tells Nix to download the latest revision in the Nixpkgs/NixOS
-    14.12 channel.</para>
-
-    <para>The search path can be extended using the <option linkend="opt-I">-I</option> option, which takes precedence over
-    <envar>NIX_PATH</envar>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_IGNORE_SYMLINK_STORE</envar></term>
-
-  <listitem>
-
-  <para>Normally, the Nix store directory (typically
-  <filename>/nix/store</filename>) is not allowed to contain any
-  symlink components.  This is to prevent &#x201C;impure&#x201D; builds.  Builders
-  sometimes &#x201C;canonicalise&#x201D; paths by resolving all symlink components.
-  Thus, builds on different machines (with
-  <filename>/nix/store</filename> resolving to different locations)
-  could yield different results.  This is generally not a problem,
-  except when builds are deployed to machines where
-  <filename>/nix/store</filename> resolves differently.  If you are
-  sure that you&#x2019;re not going to do that, you can set
-  <envar>NIX_IGNORE_SYMLINK_STORE</envar> to <envar>1</envar>.</para>
-
-  <para>Note that if you&#x2019;re symlinking the Nix store so that you can
-  put it on another file system than the root file system, on Linux
-  you&#x2019;re better off using <literal>bind</literal> mount points, e.g.,
-
-  <screen>
-$ mkdir /nix
-$ mount -o bind /mnt/otherdisk/nix /nix</screen>
-
-  Consult the <citerefentry><refentrytitle>mount</refentrytitle>
-  <manvolnum>8</manvolnum></citerefentry> manual page for details.</para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_STORE_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix store (default
-  <filename><replaceable>prefix</replaceable>/store</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_DATA_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix static data
-  directory (default
-  <filename><replaceable>prefix</replaceable>/share</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_LOG_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix log directory
-  (default <filename><replaceable>prefix</replaceable>/log/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_STATE_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix state directory
-  (default <filename><replaceable>prefix</replaceable>/var/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_DB_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix database (default
-  <filename><replaceable>$NIX_STATE_DIR</replaceable>/db</filename>, i.e.,
-  <filename><replaceable>prefix</replaceable>/var/nix/db</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_CONF_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix configuration
-  directory (default
-  <filename><replaceable>prefix</replaceable>/etc/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>TMPDIR</envar></term>
-
-  <listitem><para>Use the specified directory to store temporary
-  files.  In particular, this includes temporary build directories;
-  these can take up substantial amounts of disk space.  The default is
-  <filename>/tmp</filename>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="envar-build-hook"><term><envar>NIX_BUILD_HOOK</envar></term>
-
-  <listitem>
-
-  <para>Specifies the location of the <emphasis>build hook</emphasis>,
-  which is a program (typically some script) that Nix will call
-  whenever it wants to build a derivation.  This is used to implement
-  distributed builds<phrase condition="manual"> (see <xref linkend="chap-distributed-builds"/>)</phrase>.</para>
-
-  <!--
-  The protocol by
-  which the calling Nix process and the build hook communicate is as
-  follows.
-
-  <para>The build hook is called with the following command-line
-  arguments:
-
-  <orderedlist>
-
-    <listitem><para>A boolean value <literal>0</literal> or
-    <literal>1</literal> specifying whether Nix can locally execute
-    more builds, as per the <link
-    linkend="opt-max-jobs"><option>- -max-jobs</option> option</link>.
-    The purpose of this argument is to allow the hook to not have to
-    maintain bookkeeping for the local machine.</para></listitem>
-
-    <listitem><para>The Nix platform identifier for the local machine
-    (e.g., <literal>i686-linux</literal>).</para></listitem>
-
-    <listitem><para>The Nix platform identifier for the derivation,
-    i.e., its <link linkend="attr-system"><varname>system</varname>
-    attribute</link>.</para></listitem>
-
-    <listitem><para>The store path of the derivation.</para></listitem>
-
-  </orderedlist>
-
-  </para>
-
-  <para>On the basis of this information, and whatever persistent
-  state the build hook keeps about other machines and their current
-  load, it has to decide what to do with the build.  It should print
-  out on standard error one of the following responses (terminated by
-  a newline, <literal>"\n"</literal>):
-
-  <variablelist>
-
-    <varlistentry><term><literal># decline</literal></term>
-
-      <listitem><para>The build hook is not willing or able to perform
-      the build; the calling Nix process should do the build itself,
-      if possible.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal># postpone</literal></term>
-
-      <listitem><para>The build hook cannot perform the build now, but
-      can do so in the future (e.g., because all available build slots
-      on remote machines are in use).  The calling Nix process should
-      postpone this build until at least one currently running build
-      has terminated.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal># accept</literal></term>
-
-      <listitem><para>The build hook has accepted the
-      build.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  <para>After sending <literal># accept</literal>, the hook should
-  read one line from standard input, which will be the string
-  <literal>okay</literal>.  It can then proceed with the build.
-  Before sending <literal>okay</literal>, Nix will store in the hook’s
-  current directory a number of text files that contain information
-  about the derivation:
-
-  <variablelist>
-
-    <varlistentry><term><filename>inputs</filename></term>
-
-      <listitem><para>The set of store paths that are inputs to the
-      build process (one per line).  These have to be copied
-      <emphasis>to</emphasis> the remote machine (in addition to the
-      store derivation itself).</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><filename>outputs</filename></term>
-
-      <listitem><para>The set of store paths that are outputs of the
-      derivation (one per line).  These have to be copied
-      <emphasis>from</emphasis> the remote machine if the build
-      succeeds.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><filename>references</filename></term>
-
-      <listitem><para>The reference graph of the inputs, in the format
-      accepted by the command <command>nix-store
-      - -register-validity</command>.  It is necessary to run this
-      command on the remote machine after copying the inputs to inform
-      Nix on the remote machine that the inputs are valid
-      paths.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  <para>The hook should copy the inputs to the remote machine,
-  register the validity of the inputs, perform the remote build, and
-  copy the outputs back to the local machine.  An exit code other than
-  <literal>0</literal> indicates that the hook has failed.  An exit
-  code equal to 100 means that the remote build failed (as opposed to,
-  e.g., a network error).</para>
-  -->
-
-  </listitem>
-
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="envar-remote"><term><envar>NIX_REMOTE</envar></term>
-
-  <listitem><para>This variable should be set to
-  <literal>daemon</literal> if you want to use the Nix daemon to
-  execute Nix operations. This is necessary in <link linkend="ssec-multi-user">multi-user Nix installations</link>.
-  Otherwise, it should be left unset.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_SHOW_STATS</envar></term>
-
-  <listitem><para>If set to <literal>1</literal>, Nix will print some
-  evaluation statistics, such as the number of values
-  allocated.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_COUNT_CALLS</envar></term>
-
-  <listitem><para>If set to <literal>1</literal>, Nix will print how
-  often functions were called during Nix expression evaluation.  This
-  is useful for profiling your Nix expressions.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>GC_INITIAL_HEAP_SIZE</envar></term>
-
-  <listitem><para>If Nix has been configured to use the Boehm garbage
-  collector, this variable sets the initial size of the heap in bytes.
-  It defaults to 384 MiB.  Setting it to a low value reduces memory
-  consumption, but will increase runtime due to the overhead of
-  garbage collection.</para></listitem>
-
-</varlistentry>
-</variablelist>
-
-</refsection>
-  
-
-</refentry>
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-build">
-
-<refmeta>
-  <refentrytitle>nix-build</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-build</refname>
-  <refpurpose>build a Nix expression</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-build</command>
-    <arg xmlns="http://docbook.org/ns/docbook"><option>--help</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--version</option></arg><arg xmlns="http://docbook.org/ns/docbook" rep="repeat"><option>--verbose</option></arg><arg xmlns="http://docbook.org/ns/docbook" rep="repeat"><option>-v</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--no-build-output</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>-Q</option></arg><arg xmlns="http://docbook.org/ns/docbook">
-  <group choice="req">
-    <arg choice="plain"><option>--max-jobs</option></arg>
-    <arg choice="plain"><option>-j</option></arg>
-  </group>
-  <replaceable>number</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>--cores</option>
-  <replaceable>number</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>--max-silent-time</option>
-  <replaceable>number</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>--timeout</option>
-  <replaceable>number</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook"><option>--keep-going</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>-k</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--keep-failed</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>-K</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--fallback</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--readonly-mode</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--log-type</option> <replaceable>type</replaceable></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--show-trace</option></arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>-I</option>
-  <replaceable>path</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>--option</option>
-  <replaceable>name</replaceable>
-  <replaceable>value</replaceable>
-</arg><sbr xmlns="http://docbook.org/ns/docbook"/>
-    <arg><option>--arg</option> <replaceable>name</replaceable> <replaceable>value</replaceable></arg>
-    <arg><option>--argstr</option> <replaceable>name</replaceable> <replaceable>value</replaceable></arg>
-    <arg>
-      <group choice="req">
-        <arg choice="plain"><option>--attr</option></arg>
-        <arg choice="plain"><option>-A</option></arg>
-      </group>
-      <replaceable>attrPath</replaceable>
-    </arg>
-    <arg><option>--drv-link</option> <replaceable>drvlink</replaceable></arg>
-    <arg><option>--add-drv-link</option></arg>
-    <arg><option>--no-out-link</option></arg>
-    <arg>
-      <group choice="req">
-        <arg choice="plain"><option>--out-link</option></arg>
-        <arg choice="plain"><option>-o</option></arg>
-      </group>
-      <replaceable>outlink</replaceable>
-    </arg>
-    <arg choice="plain" rep="repeat"><replaceable>paths</replaceable></arg>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-<refsection><title>Description</title>
-
-<para>The <command>nix-build</command> command builds the derivations
-described by the Nix expressions in <replaceable>paths</replaceable>.
-If the build succeeds, it places a symlink to the result in the
-current directory.  The symlink is called <filename>result</filename>.
-If there are multiple Nix expressions, or the Nix expressions evaluate
-to multiple derivations, multiple sequentially numbered symlinks are
-created (<filename>result</filename>, <filename>result-2</filename>,
-and so on).</para>
-
-<para>If no <replaceable>paths</replaceable> are specified, then
-<command>nix-build</command> will use <filename>default.nix</filename>
-in the current directory, if it exists.</para>
-
-<para>If an element of <replaceable>paths</replaceable> starts with
-<literal>http://</literal> or <literal>https://</literal>, it is
-interpreted as the URL of a tarball that will be downloaded and
-unpacked to a temporary location. The tarball must include a single
-top-level directory containing at least a file named
-<filename>default.nix</filename>.</para>
-
-<para><command>nix-build</command> is essentially a wrapper around
-<link linkend="sec-nix-instantiate"><command>nix-instantiate</command></link>
-(to translate a high-level Nix expression to a low-level store
-derivation) and <link linkend="rsec-nix-store-realise"><command>nix-store
---realise</command></link> (to build the store derivation).</para>
-
-<warning><para>The result of the build is automatically registered as
-a root of the Nix garbage collector.  This root disappears
-automatically when the <filename>result</filename> symlink is deleted
-or renamed.  So don&#x2019;t rename the symlink.</para></warning>
-
-</refsection>
-
-
-<refsection><title>Options</title>
-
-<para>All options not listed here are passed to <command>nix-store
---realise</command>, except for <option>--arg</option> and
-<option>--attr</option> / <option>-A</option> which are passed to
-<command>nix-instantiate</command>.  <phrase condition="manual">See
-also <xref linkend="sec-common-options"/>.</phrase></para>
-
-<variablelist>
-
-  <varlistentry><term><option>--drv-link</option> <replaceable>drvlink</replaceable></term>
-
-    <listitem><para>Add a symlink named
-    <replaceable>drvlink</replaceable> to the store derivation
-    produced by <command>nix-instantiate</command>.  The derivation is
-    a root of the garbage collector until the symlink is deleted or
-    renamed.  If there are multiple derivations, numbers are suffixed
-    to <replaceable>drvlink</replaceable> to distinguish between
-    them.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--add-drv-link</option></term>
-
-    <listitem><para>Shorthand for <option>--drv-link</option>
-    <filename>./derivation</filename>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--no-out-link</option></term>
-
-    <listitem><para>Do not create a symlink to the output path.  Note
-    that as a result the output does not become a root of the garbage
-    collector, and so might be deleted by <command>nix-store
-    --gc</command>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry xml:id="opt-out-link"><term><option>--out-link</option> /
-  <option>-o</option> <replaceable>outlink</replaceable></term>
-
-    <listitem><para>Change the name of the symlink to the output path
-    created from <filename>result</filename> to
-    <replaceable>outlink</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-<para>The following common options are supported:</para>
-
-<variablelist condition="manpage">
-  <varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--help</option></term>
-
-  <listitem><para>Prints out a summary of the command syntax and
-  exits.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--version</option></term>
-
-  <listitem><para>Prints out the Nix version number on standard output
-  and exits.</para></listitem>
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--verbose</option></term>
-  <term><option>-v</option></term>
-
-  <listitem>
-
-  <para>Increases the level of verbosity of diagnostic messages
-  printed on standard error.  For each Nix operation, the information
-  printed on standard output is well-defined; any diagnostic
-  information is printed on standard error, never on standard
-  output.</para>
-
-  <para>This option may be specified repeatedly.  Currently, the
-  following verbosity levels exist:</para>
-
-  <variablelist>
-
-    <varlistentry><term>0</term>
-    <listitem><para>&#x201C;Errors only&#x201D;: only print messages
-    explaining why the Nix invocation failed.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>1</term>
-    <listitem><para>&#x201C;Informational&#x201D;: print
-    <emphasis>useful</emphasis> messages about what Nix is doing.
-    This is the default.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>2</term>
-    <listitem><para>&#x201C;Talkative&#x201D;: print more informational
-    messages.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>3</term>
-    <listitem><para>&#x201C;Chatty&#x201D;: print even more
-    informational messages.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>4</term>
-    <listitem><para>&#x201C;Debug&#x201D;: print debug
-    information.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>5</term>
-    <listitem><para>&#x201C;Vomit&#x201D;: print vast amounts of debug
-    information.</para></listitem>
-    </varlistentry>
-
-  </variablelist>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--no-build-output</option></term>
-  <term><option>-Q</option></term>
-
-  <listitem><para>By default, output written by builders to standard
-  output and standard error is echoed to the Nix command's standard
-  error.  This option suppresses this behaviour.  Note that the
-  builder's standard output and error are always written to a log file
-  in
-  <filename><replaceable>prefix</replaceable>/nix/var/log/nix</filename>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-max-jobs"><term><option>--max-jobs</option></term>
-  <term><option>-j</option></term>
-
-  <listitem><para>Sets the maximum number of build jobs that Nix will
-  perform in parallel to the specified number.  The default is
-  specified by the <link linkend="conf-build-max-jobs"><literal>build-max-jobs</literal></link>
-  configuration setting, which itself defaults to
-  <literal>1</literal>.  A higher value is useful on SMP systems or to
-  exploit I/O latency.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-cores"><term><option>--cores</option></term>
-
-  <listitem><para>Sets the value of the <envar>NIX_BUILD_CORES</envar>
-  environment variable in the invocation of builders.  Builders can
-  use this variable at their discretion to control the maximum amount
-  of parallelism.  For instance, in Nixpkgs, if the derivation
-  attribute <varname>enableParallelBuilding</varname> is set to
-  <literal>true</literal>, the builder passes the
-  <option>-j<replaceable>N</replaceable></option> flag to GNU Make.
-  It defaults to the value of the <link linkend="conf-build-cores"><literal>build-cores</literal></link>
-  configuration setting, if set, or <literal>1</literal> otherwise.
-  The value <literal>0</literal> means that the builder should use all
-  available CPU cores in the system.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-max-silent-time"><term><option>--max-silent-time</option></term>
-
-  <listitem><para>Sets the maximum number of seconds that a builder
-  can go without producing any data on standard output or standard
-  error.  The default is specified by the <link linkend="conf-build-max-silent-time"><literal>build-max-silent-time</literal></link>
-  configuration setting.  <literal>0</literal> means no
-  time-out.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-timeout"><term><option>--timeout</option></term>
-
-  <listitem><para>Sets the maximum number of seconds that a builder
-  can run.  The default is specified by the <link linkend="conf-build-timeout"><literal>build-timeout</literal></link>
-  configuration setting.  <literal>0</literal> means no
-  timeout.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--keep-going</option></term>
-  <term><option>-k</option></term>
-
-  <listitem><para>Keep going in case of failed builds, to the
-  greatest extent possible.  That is, if building an input of some
-  derivation fails, Nix will still build the other inputs, but not the
-  derivation itself.  Without this option, Nix stops if any build
-  fails (except for builds of substitutes), possibly killing builds in
-  progress (in case of parallel or distributed builds).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--keep-failed</option></term>
-  <term><option>-K</option></term>
-
-  <listitem><para>Specifies that in case of a build failure, the
-  temporary directory (usually in <filename>/tmp</filename>) in which
-  the build takes place should not be deleted.  The path of the build
-  directory is printed as an informational message.
-    </para>
-  </listitem>
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--fallback</option></term>
-
-  <listitem>
-
-  <para>Whenever Nix attempts to build a derivation for which
-  substitutes are known for each output path, but realising the output
-  paths through the substitutes fails, fall back on building the
-  derivation.</para>
-
-  <para>The most common scenario in which this is useful is when we
-  have registered substitutes in order to perform binary distribution
-  from, say, a network repository.  If the repository is down, the
-  realisation of the derivation will fail.  When this option is
-  specified, Nix will build the derivation instead.  Thus,
-  installation from binaries falls back on installation from source.
-  This option is not the default since it is generally not desirable
-  for a transient failure in obtaining the substitutes to lead to a
-  full build from source (with the related consumption of
-  resources).</para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--readonly-mode</option></term>
-
-  <listitem><para>When this option is used, no attempt is made to open
-  the Nix database.  Most Nix operations do need database access, so
-  those operations will fail.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-log-type"><term><option>--log-type</option>
-<replaceable>type</replaceable></term>
-
-  <listitem>
-
-  <para>This option determines how the output written to standard
-  error is formatted.  Nix&#x2019;s diagnostic messages are typically
-  <emphasis>nested</emphasis>.  For instance, when tracing Nix
-  expression evaluation (<command>nix-env -vvvvv</command>, messages
-  from subexpressions are nested inside their parent expressions.  Nix
-  builder output is also often nested.  For instance, the Nix Packages
-  generic builder nests the various build tasks (unpack, configure,
-  compile, etc.), and the GNU Make in <literal>stdenv-linux</literal>
-  has been patched to provide nesting for recursive Make
-  invocations.</para>
-
-  <para><replaceable>type</replaceable> can be one of the
-  following:
-
-  <variablelist>
-
-    <varlistentry><term><literal>pretty</literal></term>
-
-      <listitem><para>Pretty-print the output, indicating different
-      nesting levels using spaces.  This is the
-      default.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal>escapes</literal></term>
-
-      <listitem><para>Indicate nesting using escape codes that can be
-      interpreted by the <command>nix-log2xml</command> tool in the
-      Nix source distribution.  The resulting XML file can be fed into
-      the <command>log2html.xsl</command> stylesheet to create an HTML
-      file that can be browsed interactively, using JavaScript to
-      expand and collapse parts of the output.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal>flat</literal></term>
-
-      <listitem><para>Remove all nesting.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--arg</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>This option is accepted by
-  <command>nix-env</command>, <command>nix-instantiate</command> and
-  <command>nix-build</command>.  When evaluating Nix expressions, the
-  expression evaluator will automatically try to call functions that
-  it encounters.  It can automatically call functions for which every
-  argument has a <link linkend="ss-functions">default value</link>
-  (e.g., <literal>{ <replaceable>argName</replaceable> ?
-  <replaceable>defaultValue</replaceable> }:
-  <replaceable>...</replaceable></literal>).  With
-  <option>--arg</option>, you can also call functions that have
-  arguments without a default value (or override a default value).
-  That is, if the evaluator encounters a function with an argument
-  named <replaceable>name</replaceable>, it will call it with value
-  <replaceable>value</replaceable>.</para>
-
-  <para>For instance, the file
-  <literal>pkgs/top-level/all-packages.nix</literal> in Nixpkgs is
-  actually a function:
-
-<programlisting>
-{ # The system (e.g., `i686-linux') for which to build the packages.
-  system ? builtins.currentSystem
-  <replaceable>...</replaceable>
-}: <replaceable>...</replaceable></programlisting>
-
-  So if you call this Nix expression (e.g., when you do
-  <literal>nix-env -i <replaceable>pkgname</replaceable></literal>),
-  the function will be called automatically using the value <link linkend="builtin-currentSystem"><literal>builtins.currentSystem</literal></link>
-  for the <literal>system</literal> argument.  You can override this
-  using <option>--arg</option>, e.g., <literal>nix-env -i
-  <replaceable>pkgname</replaceable> --arg system
-  \"i686-freebsd\"</literal>.  (Note that since the argument is a Nix
-  string literal, you have to escape the quotes.)</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--argstr</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>This option is like <option>--arg</option>, only the
-  value is not a Nix expression but a string.  So instead of
-  <literal>--arg system \"i686-linux\"</literal> (the outer quotes are
-  to keep the shell happy) you can say <literal>--argstr system
-  i686-linux</literal>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-attr"><term><option>--attr</option> / <option>-A</option>
-<replaceable>attrPath</replaceable></term>
-
-  <listitem><para>Select an attribute from the top-level Nix
-  expression being evaluated.  (<command>nix-env</command>,
-  <command>nix-instantiate</command>, <command>nix-build</command> and
-  <command>nix-shell</command> only.)  The <emphasis>attribute
-  path</emphasis> <replaceable>attrPath</replaceable> is a sequence of
-  attribute names separated by dots.  For instance, given a top-level
-  Nix expression <replaceable>e</replaceable>, the attribute path
-  <literal>xorg.xorgserver</literal> would cause the expression
-  <literal><replaceable>e</replaceable>.xorg.xorgserver</literal> to
-  be used.  See <link linkend="refsec-nix-env-install-examples"><command>nix-env
-  --install</command></link> for some concrete examples.</para>
-
-  <para>In addition to attribute names, you can also specify array
-  indices.  For instance, the attribute path
-  <literal>foo.3.bar</literal> selects the <literal>bar</literal>
-  attribute of the fourth element of the array in the
-  <literal>foo</literal> attribute of the top-level
-  expression.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--expr</option> / <option>-E</option></term>
-
-  <listitem><para>Interpret the command line arguments as a list of
-  Nix expressions to be parsed and evaluated, rather than as a list
-  of file names of Nix expressions.
-  (<command>nix-instantiate</command>, <command>nix-build</command>
-  and <command>nix-shell</command> only.)</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--show-trace</option></term>
-
-  <listitem><para>Causes Nix to print out a stack trace in case of Nix
-  expression evaluation errors.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-I"><term><option>-I</option> <replaceable>path</replaceable></term>
-
-  <listitem><para>Add a path to the Nix expression search path.  This
-  option may be given multiple times.  See the <envar linkend="env-NIX_PATH">NIX_PATH</envar> environment variable for
-  information on the semantics of the Nix search path.  Paths added
-  through <option>-I</option> take precedence over
-  <envar>NIX_PATH</envar>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--option</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>Set the Nix configuration option
-  <replaceable>name</replaceable> to <replaceable>value</replaceable>.
-  This overrides settings in the Nix configuration file (see
-  <citerefentry><refentrytitle>nix.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--repair</option></term>
-
-  <listitem><para>Fix corrupted or missing store paths by
-  redownloading or rebuilding them.  Note that this is slow because it
-  requires computing a cryptographic hash of the contents of every
-  path in the closure of the build.  Also note the warning under
-  <command>nix-store --repair-path</command>.</para></listitem>
-
-</varlistentry>
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<screen>
-$ nix-build '&lt;nixpkgs&gt;' -A firefox
-store derivation is /nix/store/qybprl8sz2lc...-firefox-1.5.0.7.drv
-/nix/store/d18hyl92g30l...-firefox-1.5.0.7
-
-$ ls -l result
-lrwxrwxrwx  <replaceable>...</replaceable>  result -&gt; /nix/store/d18hyl92g30l...-firefox-1.5.0.7
-
-$ ls ./result/bin/
-firefox  firefox-config</screen>
-
-<para>If a derivation has multiple outputs,
-<command>nix-build</command> will build the default (first) output.
-You can also build all outputs:
-<screen>
-$ nix-build '&lt;nixpkgs&gt;' -A openssl.all
-</screen>
-This will create a symlink for each output named
-<filename>result-<replaceable>outputname</replaceable></filename>.
-The suffix is omitted if the output name is <literal>out</literal>.
-So if <literal>openssl</literal> has outputs <literal>out</literal>,
-<literal>bin</literal> and <literal>man</literal>,
-<command>nix-build</command> will create symlinks
-<literal>result</literal>, <literal>result-bin</literal> and
-<literal>result-man</literal>.  It&#x2019;s also possible to build a specific
-output:
-<screen>
-$ nix-build '&lt;nixpkgs&gt;' -A openssl.man
-</screen>
-This will create a symlink <literal>result-man</literal>.</para>
-
-<para>Build a Nix expression given on the command line:
-
-<screen>
-$ nix-build -E 'with import &lt;nixpkgs&gt; { }; runCommand "foo" { } "echo bar &gt; $out"'
-$ cat ./result
-bar
-</screen>
-
-</para>
-
-<para>Build the GNU Hello package from the latest revision of the
-master branch of Nixpkgs:
-
-<screen>
-$ nix-build https://github.com/NixOS/nixpkgs/archive/master.tar.gz -A hello
-</screen>
-
-</para>
-
-</refsection>
-
-
-<refsection condition="manpage"><title>Environment variables</title>
-
-<variablelist>
-  <varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="env-NIX_PATH"><term><envar>NIX_PATH</envar></term>
-
-  <listitem>
-
-    <para>A colon-separated list of directories used to look up Nix
-    expressions enclosed in angle brackets (i.e.,
-    <literal>&lt;<replaceable>path</replaceable>&gt;</literal>).  For
-    instance, the value
-
-    <screen>
-/home/eelco/Dev:/etc/nixos</screen>
-
-    will cause Nix to look for paths relative to
-    <filename>/home/eelco/Dev</filename> and
-    <filename>/etc/nixos</filename>, in that order.  It is also
-    possible to match paths against a prefix.  For example, the value
-
-    <screen>
-nixpkgs=/home/eelco/Dev/nixpkgs-branch:/etc/nixos</screen>
-
-    will cause Nix to search for
-    <literal>&lt;nixpkgs/<replaceable>path</replaceable>&gt;</literal> in
-    <filename>/home/eelco/Dev/nixpkgs-branch/<replaceable>path</replaceable></filename>
-    and
-    <filename>/etc/nixos/nixpkgs/<replaceable>path</replaceable></filename>.</para>
-
-    <para>If a path in the Nix search path starts with
-    <literal>http://</literal> or <literal>https://</literal>, it is
-    interpreted as the URL of a tarball that will be downloaded and
-    unpacked to a temporary location. The tarball must consist of a
-    single top-level directory. For example, setting
-    <envar>NIX_PATH</envar> to
-
-    <screen>
-nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz</screen>
-
-    tells Nix to download the latest revision in the Nixpkgs/NixOS
-    14.12 channel.</para>
-
-    <para>The search path can be extended using the <option linkend="opt-I">-I</option> option, which takes precedence over
-    <envar>NIX_PATH</envar>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_IGNORE_SYMLINK_STORE</envar></term>
-
-  <listitem>
-
-  <para>Normally, the Nix store directory (typically
-  <filename>/nix/store</filename>) is not allowed to contain any
-  symlink components.  This is to prevent &#x201C;impure&#x201D; builds.  Builders
-  sometimes &#x201C;canonicalise&#x201D; paths by resolving all symlink components.
-  Thus, builds on different machines (with
-  <filename>/nix/store</filename> resolving to different locations)
-  could yield different results.  This is generally not a problem,
-  except when builds are deployed to machines where
-  <filename>/nix/store</filename> resolves differently.  If you are
-  sure that you&#x2019;re not going to do that, you can set
-  <envar>NIX_IGNORE_SYMLINK_STORE</envar> to <envar>1</envar>.</para>
-
-  <para>Note that if you&#x2019;re symlinking the Nix store so that you can
-  put it on another file system than the root file system, on Linux
-  you&#x2019;re better off using <literal>bind</literal> mount points, e.g.,
-
-  <screen>
-$ mkdir /nix
-$ mount -o bind /mnt/otherdisk/nix /nix</screen>
-
-  Consult the <citerefentry><refentrytitle>mount</refentrytitle>
-  <manvolnum>8</manvolnum></citerefentry> manual page for details.</para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_STORE_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix store (default
-  <filename><replaceable>prefix</replaceable>/store</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_DATA_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix static data
-  directory (default
-  <filename><replaceable>prefix</replaceable>/share</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_LOG_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix log directory
-  (default <filename><replaceable>prefix</replaceable>/log/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_STATE_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix state directory
-  (default <filename><replaceable>prefix</replaceable>/var/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_DB_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix database (default
-  <filename><replaceable>$NIX_STATE_DIR</replaceable>/db</filename>, i.e.,
-  <filename><replaceable>prefix</replaceable>/var/nix/db</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_CONF_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix configuration
-  directory (default
-  <filename><replaceable>prefix</replaceable>/etc/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>TMPDIR</envar></term>
-
-  <listitem><para>Use the specified directory to store temporary
-  files.  In particular, this includes temporary build directories;
-  these can take up substantial amounts of disk space.  The default is
-  <filename>/tmp</filename>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="envar-build-hook"><term><envar>NIX_BUILD_HOOK</envar></term>
-
-  <listitem>
-
-  <para>Specifies the location of the <emphasis>build hook</emphasis>,
-  which is a program (typically some script) that Nix will call
-  whenever it wants to build a derivation.  This is used to implement
-  distributed builds<phrase condition="manual"> (see <xref linkend="chap-distributed-builds"/>)</phrase>.</para>
-
-  <!--
-  The protocol by
-  which the calling Nix process and the build hook communicate is as
-  follows.
-
-  <para>The build hook is called with the following command-line
-  arguments:
-
-  <orderedlist>
-
-    <listitem><para>A boolean value <literal>0</literal> or
-    <literal>1</literal> specifying whether Nix can locally execute
-    more builds, as per the <link
-    linkend="opt-max-jobs"><option>- -max-jobs</option> option</link>.
-    The purpose of this argument is to allow the hook to not have to
-    maintain bookkeeping for the local machine.</para></listitem>
-
-    <listitem><para>The Nix platform identifier for the local machine
-    (e.g., <literal>i686-linux</literal>).</para></listitem>
-
-    <listitem><para>The Nix platform identifier for the derivation,
-    i.e., its <link linkend="attr-system"><varname>system</varname>
-    attribute</link>.</para></listitem>
-
-    <listitem><para>The store path of the derivation.</para></listitem>
-
-  </orderedlist>
-
-  </para>
-
-  <para>On the basis of this information, and whatever persistent
-  state the build hook keeps about other machines and their current
-  load, it has to decide what to do with the build.  It should print
-  out on standard error one of the following responses (terminated by
-  a newline, <literal>"\n"</literal>):
-
-  <variablelist>
-
-    <varlistentry><term><literal># decline</literal></term>
-
-      <listitem><para>The build hook is not willing or able to perform
-      the build; the calling Nix process should do the build itself,
-      if possible.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal># postpone</literal></term>
-
-      <listitem><para>The build hook cannot perform the build now, but
-      can do so in the future (e.g., because all available build slots
-      on remote machines are in use).  The calling Nix process should
-      postpone this build until at least one currently running build
-      has terminated.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal># accept</literal></term>
-
-      <listitem><para>The build hook has accepted the
-      build.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  <para>After sending <literal># accept</literal>, the hook should
-  read one line from standard input, which will be the string
-  <literal>okay</literal>.  It can then proceed with the build.
-  Before sending <literal>okay</literal>, Nix will store in the hook’s
-  current directory a number of text files that contain information
-  about the derivation:
-
-  <variablelist>
-
-    <varlistentry><term><filename>inputs</filename></term>
-
-      <listitem><para>The set of store paths that are inputs to the
-      build process (one per line).  These have to be copied
-      <emphasis>to</emphasis> the remote machine (in addition to the
-      store derivation itself).</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><filename>outputs</filename></term>
-
-      <listitem><para>The set of store paths that are outputs of the
-      derivation (one per line).  These have to be copied
-      <emphasis>from</emphasis> the remote machine if the build
-      succeeds.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><filename>references</filename></term>
-
-      <listitem><para>The reference graph of the inputs, in the format
-      accepted by the command <command>nix-store
-      - -register-validity</command>.  It is necessary to run this
-      command on the remote machine after copying the inputs to inform
-      Nix on the remote machine that the inputs are valid
-      paths.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  <para>The hook should copy the inputs to the remote machine,
-  register the validity of the inputs, perform the remote build, and
-  copy the outputs back to the local machine.  An exit code other than
-  <literal>0</literal> indicates that the hook has failed.  An exit
-  code equal to 100 means that the remote build failed (as opposed to,
-  e.g., a network error).</para>
-  -->
-
-  </listitem>
-
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="envar-remote"><term><envar>NIX_REMOTE</envar></term>
-
-  <listitem><para>This variable should be set to
-  <literal>daemon</literal> if you want to use the Nix daemon to
-  execute Nix operations. This is necessary in <link linkend="ssec-multi-user">multi-user Nix installations</link>.
-  Otherwise, it should be left unset.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_SHOW_STATS</envar></term>
-
-  <listitem><para>If set to <literal>1</literal>, Nix will print some
-  evaluation statistics, such as the number of values
-  allocated.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_COUNT_CALLS</envar></term>
-
-  <listitem><para>If set to <literal>1</literal>, Nix will print how
-  often functions were called during Nix expression evaluation.  This
-  is useful for profiling your Nix expressions.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>GC_INITIAL_HEAP_SIZE</envar></term>
-
-  <listitem><para>If Nix has been configured to use the Boehm garbage
-  collector, this variable sets the initial size of the heap in bytes.
-  It defaults to 384 MiB.  Setting it to a low value reduces memory
-  consumption, but will increase runtime due to the overhead of
-  garbage collection.</para></listitem>
-
-</varlistentry>
-</variablelist>
-
-</refsection>
-
-
-</refentry>
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-shell">
-
-<refmeta>
-  <refentrytitle>nix-shell</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-shell</refname>
-  <refpurpose>start an interactive shell based on a Nix expression</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-shell</command>
-    <arg><option>--arg</option> <replaceable>name</replaceable> <replaceable>value</replaceable></arg>
-    <arg><option>--argstr</option> <replaceable>name</replaceable> <replaceable>value</replaceable></arg>
-    <arg>
-      <group choice="req">
-        <arg choice="plain"><option>--attr</option></arg>
-        <arg choice="plain"><option>-A</option></arg>
-      </group>
-      <replaceable>attrPath</replaceable>
-    </arg>
-    <arg><option>--command</option> <replaceable>cmd</replaceable></arg>
-    <arg><option>--run</option> <replaceable>cmd</replaceable></arg>
-    <arg><option>--exclude</option> <replaceable>regexp</replaceable></arg>
-    <arg><option>--pure</option></arg>
-    <group choice="req">
-      <group choice="plain">
-        <group>
-          <arg choice="plain"><option>--packages</option></arg>
-          <arg choice="plain"><option>-p</option></arg>
-        </group>
-        <replaceable>packages</replaceable>
-      </group>
-      <arg><replaceable>path</replaceable></arg>
-    </group>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-<refsection><title>Description</title>
-
-<para>The command <command>nix-shell</command> will build the
-dependencies of the specified derivation, but not the derivation
-itself.  It will then start an interactive shell in which all
-environment variables defined by the derivation
-<replaceable>path</replaceable> have been set to their corresponding
-values, and the script <literal>$stdenv/setup</literal> has been
-sourced.  This is useful for reproducing the environment of a
-derivation for development.</para>
-
-<para>If <replaceable>path</replaceable> is not given,
-<command>nix-shell</command> defaults to
-<filename>shell.nix</filename> if it exists, and
-<filename>default.nix</filename> otherwise.</para>
-
-<para>If <replaceable>path</replaceable> starts with
-<literal>http://</literal> or <literal>https://</literal>, it is
-interpreted as the URL of a tarball that will be downloaded and
-unpacked to a temporary location. The tarball must include a single
-top-level directory containing at least a file named
-<filename>default.nix</filename>.</para>
-
-<para>If the derivation defines the variable
-<varname>shellHook</varname>, it will be evaluated after
-<literal>$stdenv/setup</literal> has been sourced.  Since this hook is
-not executed by regular Nix builds, it allows you to perform
-initialisation specific to <command>nix-shell</command>.  For example,
-the derivation attribute
-
-<programlisting>
-shellHook =
-  ''
-    echo "Hello shell"
-  '';
-</programlisting>
-
-will cause <command>nix-shell</command> to print <literal>Hello shell</literal>.</para>
-
-</refsection>
-
-
-<refsection><title>Options</title>
-
-<para>All options not listed here are passed to <command>nix-store
---realise</command>, except for <option>--arg</option> and
-<option>--attr</option> / <option>-A</option> which are passed to
-<command>nix-instantiate</command>.  <phrase condition="manual">See
-also <xref linkend="sec-common-options"/>.</phrase></para>
-
-<variablelist>
-
-  <varlistentry><term><option>--command</option> <replaceable>cmd</replaceable></term>
-
-    <listitem><para>In the environment of the derivation, run the
-    shell command <replaceable>cmd</replaceable>. This command is
-    executed in an interactive shell. (Use <option>--run</option> to
-    use a non-interactive shell instead.) However, a call to
-    <literal>exit</literal> is implicitly added to the command, so the
-    shell will exit after running the command. To prevent this, add
-    <literal>return</literal> at the end; e.g. <literal>--command
-    "echo Hello; return"</literal> will print <literal>Hello</literal>
-    and then drop you into the interactive shell. This can be useful
-    for doing any additional initialisation.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--run</option> <replaceable>cmd</replaceable></term>
-
-    <listitem><para>Like <option>--command</option>, but executes the
-    command in a non-interactive shell. This means (among other
-    things) that if you hit Ctrl-C while the command is running, the
-    shell exits.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--exclude</option> <replaceable>regexp</replaceable></term>
-
-    <listitem><para>Do not build any dependencies whose store path
-    matches the regular expression <replaceable>regexp</replaceable>.
-    This option may be specified multiple times.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--pure</option></term>
-
-    <listitem><para>If this flag is specified, the environment is
-    almost entirely cleared before the interactive shell is started,
-    so you get an environment that more closely corresponds to the
-    &#x201C;real&#x201D; Nix build.  A few variables, in particular
-    <envar>HOME</envar>, <envar>USER</envar> and
-    <envar>DISPLAY</envar>, are retained.  Note that
-    <filename>~/.bashrc</filename> and (depending on your Bash
-    installation) <filename>/etc/bashrc</filename> are still sourced,
-    so any variables set there will affect the interactive
-    shell.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--packages</option> / <option>-p</option></term>
-
-    <listitem><para>Set up an environment in which the specified
-    packages are present.  The command line arguments are interpreted
-    as attribute names inside the Nix Packages collection.  Thus,
-    <literal>nix-shell -p libjpeg openjdk</literal> will start a shell
-    in which the packages denoted by the attribute names
-    <varname>libjpeg</varname> and <varname>openjdk</varname> are
-    present.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>-i</option> <replaceable>interpreter</replaceable></term>
-
-    <listitem><para>The chained script interpreter to be invoked by
-    <command>nix-shell</command>. Only applicable in
-    <literal>#!</literal>-scripts (described <link linkend="ssec-nix-shell-shebang">below</link>).</para>
-
-    </listitem></varlistentry>
-
-</variablelist>
-
-<para>The following common options are supported:</para>
-
-<variablelist condition="manpage">
-  <varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--help</option></term>
-
-  <listitem><para>Prints out a summary of the command syntax and
-  exits.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--version</option></term>
-
-  <listitem><para>Prints out the Nix version number on standard output
-  and exits.</para></listitem>
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--verbose</option></term>
-  <term><option>-v</option></term>
-
-  <listitem>
-
-  <para>Increases the level of verbosity of diagnostic messages
-  printed on standard error.  For each Nix operation, the information
-  printed on standard output is well-defined; any diagnostic
-  information is printed on standard error, never on standard
-  output.</para>
-
-  <para>This option may be specified repeatedly.  Currently, the
-  following verbosity levels exist:</para>
-
-  <variablelist>
-
-    <varlistentry><term>0</term>
-    <listitem><para>&#x201C;Errors only&#x201D;: only print messages
-    explaining why the Nix invocation failed.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>1</term>
-    <listitem><para>&#x201C;Informational&#x201D;: print
-    <emphasis>useful</emphasis> messages about what Nix is doing.
-    This is the default.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>2</term>
-    <listitem><para>&#x201C;Talkative&#x201D;: print more informational
-    messages.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>3</term>
-    <listitem><para>&#x201C;Chatty&#x201D;: print even more
-    informational messages.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>4</term>
-    <listitem><para>&#x201C;Debug&#x201D;: print debug
-    information.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>5</term>
-    <listitem><para>&#x201C;Vomit&#x201D;: print vast amounts of debug
-    information.</para></listitem>
-    </varlistentry>
-
-  </variablelist>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--no-build-output</option></term>
-  <term><option>-Q</option></term>
-
-  <listitem><para>By default, output written by builders to standard
-  output and standard error is echoed to the Nix command's standard
-  error.  This option suppresses this behaviour.  Note that the
-  builder's standard output and error are always written to a log file
-  in
-  <filename><replaceable>prefix</replaceable>/nix/var/log/nix</filename>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-max-jobs"><term><option>--max-jobs</option></term>
-  <term><option>-j</option></term>
-
-  <listitem><para>Sets the maximum number of build jobs that Nix will
-  perform in parallel to the specified number.  The default is
-  specified by the <link linkend="conf-build-max-jobs"><literal>build-max-jobs</literal></link>
-  configuration setting, which itself defaults to
-  <literal>1</literal>.  A higher value is useful on SMP systems or to
-  exploit I/O latency.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-cores"><term><option>--cores</option></term>
-
-  <listitem><para>Sets the value of the <envar>NIX_BUILD_CORES</envar>
-  environment variable in the invocation of builders.  Builders can
-  use this variable at their discretion to control the maximum amount
-  of parallelism.  For instance, in Nixpkgs, if the derivation
-  attribute <varname>enableParallelBuilding</varname> is set to
-  <literal>true</literal>, the builder passes the
-  <option>-j<replaceable>N</replaceable></option> flag to GNU Make.
-  It defaults to the value of the <link linkend="conf-build-cores"><literal>build-cores</literal></link>
-  configuration setting, if set, or <literal>1</literal> otherwise.
-  The value <literal>0</literal> means that the builder should use all
-  available CPU cores in the system.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-max-silent-time"><term><option>--max-silent-time</option></term>
-
-  <listitem><para>Sets the maximum number of seconds that a builder
-  can go without producing any data on standard output or standard
-  error.  The default is specified by the <link linkend="conf-build-max-silent-time"><literal>build-max-silent-time</literal></link>
-  configuration setting.  <literal>0</literal> means no
-  time-out.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-timeout"><term><option>--timeout</option></term>
-
-  <listitem><para>Sets the maximum number of seconds that a builder
-  can run.  The default is specified by the <link linkend="conf-build-timeout"><literal>build-timeout</literal></link>
-  configuration setting.  <literal>0</literal> means no
-  timeout.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--keep-going</option></term>
-  <term><option>-k</option></term>
-
-  <listitem><para>Keep going in case of failed builds, to the
-  greatest extent possible.  That is, if building an input of some
-  derivation fails, Nix will still build the other inputs, but not the
-  derivation itself.  Without this option, Nix stops if any build
-  fails (except for builds of substitutes), possibly killing builds in
-  progress (in case of parallel or distributed builds).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--keep-failed</option></term>
-  <term><option>-K</option></term>
-
-  <listitem><para>Specifies that in case of a build failure, the
-  temporary directory (usually in <filename>/tmp</filename>) in which
-  the build takes place should not be deleted.  The path of the build
-  directory is printed as an informational message.
-    </para>
-  </listitem>
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--fallback</option></term>
-
-  <listitem>
-
-  <para>Whenever Nix attempts to build a derivation for which
-  substitutes are known for each output path, but realising the output
-  paths through the substitutes fails, fall back on building the
-  derivation.</para>
-
-  <para>The most common scenario in which this is useful is when we
-  have registered substitutes in order to perform binary distribution
-  from, say, a network repository.  If the repository is down, the
-  realisation of the derivation will fail.  When this option is
-  specified, Nix will build the derivation instead.  Thus,
-  installation from binaries falls back on installation from source.
-  This option is not the default since it is generally not desirable
-  for a transient failure in obtaining the substitutes to lead to a
-  full build from source (with the related consumption of
-  resources).</para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--readonly-mode</option></term>
-
-  <listitem><para>When this option is used, no attempt is made to open
-  the Nix database.  Most Nix operations do need database access, so
-  those operations will fail.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-log-type"><term><option>--log-type</option>
-<replaceable>type</replaceable></term>
-
-  <listitem>
-
-  <para>This option determines how the output written to standard
-  error is formatted.  Nix&#x2019;s diagnostic messages are typically
-  <emphasis>nested</emphasis>.  For instance, when tracing Nix
-  expression evaluation (<command>nix-env -vvvvv</command>, messages
-  from subexpressions are nested inside their parent expressions.  Nix
-  builder output is also often nested.  For instance, the Nix Packages
-  generic builder nests the various build tasks (unpack, configure,
-  compile, etc.), and the GNU Make in <literal>stdenv-linux</literal>
-  has been patched to provide nesting for recursive Make
-  invocations.</para>
-
-  <para><replaceable>type</replaceable> can be one of the
-  following:
-
-  <variablelist>
-
-    <varlistentry><term><literal>pretty</literal></term>
-
-      <listitem><para>Pretty-print the output, indicating different
-      nesting levels using spaces.  This is the
-      default.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal>escapes</literal></term>
-
-      <listitem><para>Indicate nesting using escape codes that can be
-      interpreted by the <command>nix-log2xml</command> tool in the
-      Nix source distribution.  The resulting XML file can be fed into
-      the <command>log2html.xsl</command> stylesheet to create an HTML
-      file that can be browsed interactively, using JavaScript to
-      expand and collapse parts of the output.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal>flat</literal></term>
-
-      <listitem><para>Remove all nesting.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--arg</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>This option is accepted by
-  <command>nix-env</command>, <command>nix-instantiate</command> and
-  <command>nix-build</command>.  When evaluating Nix expressions, the
-  expression evaluator will automatically try to call functions that
-  it encounters.  It can automatically call functions for which every
-  argument has a <link linkend="ss-functions">default value</link>
-  (e.g., <literal>{ <replaceable>argName</replaceable> ?
-  <replaceable>defaultValue</replaceable> }:
-  <replaceable>...</replaceable></literal>).  With
-  <option>--arg</option>, you can also call functions that have
-  arguments without a default value (or override a default value).
-  That is, if the evaluator encounters a function with an argument
-  named <replaceable>name</replaceable>, it will call it with value
-  <replaceable>value</replaceable>.</para>
-
-  <para>For instance, the file
-  <literal>pkgs/top-level/all-packages.nix</literal> in Nixpkgs is
-  actually a function:
-
-<programlisting>
-{ # The system (e.g., `i686-linux') for which to build the packages.
-  system ? builtins.currentSystem
-  <replaceable>...</replaceable>
-}: <replaceable>...</replaceable></programlisting>
-
-  So if you call this Nix expression (e.g., when you do
-  <literal>nix-env -i <replaceable>pkgname</replaceable></literal>),
-  the function will be called automatically using the value <link linkend="builtin-currentSystem"><literal>builtins.currentSystem</literal></link>
-  for the <literal>system</literal> argument.  You can override this
-  using <option>--arg</option>, e.g., <literal>nix-env -i
-  <replaceable>pkgname</replaceable> --arg system
-  \"i686-freebsd\"</literal>.  (Note that since the argument is a Nix
-  string literal, you have to escape the quotes.)</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--argstr</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>This option is like <option>--arg</option>, only the
-  value is not a Nix expression but a string.  So instead of
-  <literal>--arg system \"i686-linux\"</literal> (the outer quotes are
-  to keep the shell happy) you can say <literal>--argstr system
-  i686-linux</literal>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-attr"><term><option>--attr</option> / <option>-A</option>
-<replaceable>attrPath</replaceable></term>
-
-  <listitem><para>Select an attribute from the top-level Nix
-  expression being evaluated.  (<command>nix-env</command>,
-  <command>nix-instantiate</command>, <command>nix-build</command> and
-  <command>nix-shell</command> only.)  The <emphasis>attribute
-  path</emphasis> <replaceable>attrPath</replaceable> is a sequence of
-  attribute names separated by dots.  For instance, given a top-level
-  Nix expression <replaceable>e</replaceable>, the attribute path
-  <literal>xorg.xorgserver</literal> would cause the expression
-  <literal><replaceable>e</replaceable>.xorg.xorgserver</literal> to
-  be used.  See <link linkend="refsec-nix-env-install-examples"><command>nix-env
-  --install</command></link> for some concrete examples.</para>
-
-  <para>In addition to attribute names, you can also specify array
-  indices.  For instance, the attribute path
-  <literal>foo.3.bar</literal> selects the <literal>bar</literal>
-  attribute of the fourth element of the array in the
-  <literal>foo</literal> attribute of the top-level
-  expression.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--expr</option> / <option>-E</option></term>
-
-  <listitem><para>Interpret the command line arguments as a list of
-  Nix expressions to be parsed and evaluated, rather than as a list
-  of file names of Nix expressions.
-  (<command>nix-instantiate</command>, <command>nix-build</command>
-  and <command>nix-shell</command> only.)</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--show-trace</option></term>
-
-  <listitem><para>Causes Nix to print out a stack trace in case of Nix
-  expression evaluation errors.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-I"><term><option>-I</option> <replaceable>path</replaceable></term>
-
-  <listitem><para>Add a path to the Nix expression search path.  This
-  option may be given multiple times.  See the <envar linkend="env-NIX_PATH">NIX_PATH</envar> environment variable for
-  information on the semantics of the Nix search path.  Paths added
-  through <option>-I</option> take precedence over
-  <envar>NIX_PATH</envar>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--option</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>Set the Nix configuration option
-  <replaceable>name</replaceable> to <replaceable>value</replaceable>.
-  This overrides settings in the Nix configuration file (see
-  <citerefentry><refentrytitle>nix.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--repair</option></term>
-
-  <listitem><para>Fix corrupted or missing store paths by
-  redownloading or rebuilding them.  Note that this is slow because it
-  requires computing a cryptographic hash of the contents of every
-  path in the closure of the build.  Also note the warning under
-  <command>nix-store --repair-path</command>.</para></listitem>
-
-</varlistentry>
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Environment variables</title>
-
-<variablelist>
-
-  <varlistentry><term><envar>NIX_BUILD_SHELL</envar></term>
-    
-    <listitem><para>Shell used to start the interactive environment. 
-    Defaults to the <command>bash</command> found in <envar>PATH</envar>.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<para>To build the dependencies of the package Pan, and start an
-interactive shell in which to build it:
-
-<screen>
-$ nix-shell '&lt;nixpkgs&gt;' -A pan
-[nix-shell]$ unpackPhase
-[nix-shell]$ cd pan-*
-[nix-shell]$ configurePhase
-[nix-shell]$ buildPhase
-[nix-shell]$ ./pan/gui/pan
-</screen>
-
-To clear the environment first, and do some additional automatic
-initialisation of the interactive shell:
-
-<screen>
-$ nix-shell '&lt;nixpkgs&gt;' -A pan --pure \
-    --command 'export NIX_DEBUG=1; export NIX_CORES=8; return'
-</screen>
-
-Nix expressions can also be given on the command line.  For instance,
-the following starts a shell containing the packages
-<literal>sqlite</literal> and <literal>libX11</literal>:
-
-<screen>
-$ nix-shell -E 'with import &lt;nixpkgs&gt; { }; runCommand "dummy" { buildInputs = [ sqlite xorg.libX11 ]; } ""'
-</screen>
-
-A shorter way to do the same is:
-
-<screen>
-$ nix-shell -p sqlite xorg.libX11
-[nix-shell]$ echo $NIX_LDFLAGS
-&#x2026; -L/nix/store/j1zg5v&#x2026;-sqlite-3.8.0.2/lib -L/nix/store/0gmcz9&#x2026;-libX11-1.6.1/lib &#x2026;
-</screen>
-
-The <command>-p</command> flag looks up Nixpkgs in the Nix search
-path. You can override it by passing <option>-I</option> or setting
-<envar>NIX_PATH</envar>. For example, the following gives you a shell
-containing the Pan package from a specific revision of Nixpkgs:
-
-<screen>
-$ nix-shell -p pan -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/8a3eea054838b55aca962c3fbde9c83c102b8bf2.tar.gz
-
-[nix-shell:~]$ pan --version
-Pan 0.139
-</screen>
-
-</para>
-
-</refsection>
-
-
-<refsection xml:id="ssec-nix-shell-shebang"><title>Use as a <literal>#!</literal>-interpreter</title>
-
-<para>You can use <command>nix-shell</command> as a script interpreter
-to allow scripts written in arbitrary languages to obtain their own
-dependencies via Nix. This is done by starting the script with the
-following lines:
-
-<programlisting>
-#! /usr/bin/env nix-shell
-#! nix-shell -i <replaceable>real-interpreter</replaceable> -p <replaceable>packages</replaceable>
-</programlisting>
-
-where <replaceable>real-interpreter</replaceable> is the &#x201C;real&#x201D; script
-interpreter that will be invoked by <command>nix-shell</command> after
-it has obtained the dependencies and initialised the environment, and
-<replaceable>packages</replaceable> are the attribute names of the
-dependencies in Nixpkgs.</para>
-
-<para>The lines starting with <literal>#! nix-shell</literal> specify
-<command>nix-shell</command> options (see above). Note that you cannot
-write <literal>#1 /usr/bin/env nix-shell -i ...</literal> because
-many operating systems only allow one argument in
-<literal>#!</literal> lines.</para>
-
-<para>For example, here is a Python script that depends on Python and
-the <literal>prettytable</literal> package:
-
-<programlisting>
-#! /usr/bin/env nix-shell
-#! nix-shell -i python -p python pythonPackages.prettytable
-
-import prettytable
-
-# Print a simple table.
-t = prettytable.PrettyTable(["N", "N^2"])
-for n in range(1, 10): t.add_row([n, n * n])
-print t
-</programlisting>
-
-</para>
-
-<para>Similarly, the following is a Perl script that specifies that it
-requires Perl and the <literal>HTML::TokeParser::Simple</literal> and
-<literal>LWP</literal> packages:
-
-<programlisting>
-#! /usr/bin/env nix-shell
-#! nix-shell -i perl -p perl perlPackages.HTMLTokeParserSimple perlPackages.LWP
-
-use HTML::TokeParser::Simple;
-
-# Fetch nixos.org and print all hrefs.
-my $p = HTML::TokeParser::Simple-&gt;new(url =&gt; 'http://nixos.org/');
-
-while (my $token = $p-&gt;get_tag("a")) {
-    my $href = $token-&gt;get_attr("href");
-    print "$href\n" if $href;
-}
-</programlisting>
-
-</para>
-
-<para>Finally, the following Haskell script uses a specific branch of
-Nixpkgs/NixOS (the 14.12 stable branch):
-
-<programlisting><![CDATA[
-#! /usr/bin/env nix-shell
-#! nix-shell -i runghc -p haskellPackages.ghc haskellPackages.HTTP haskellPackages.tagsoup
-#! nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz
-
-import Network.HTTP
-import Text.HTML.TagSoup
-
--- Fetch nixos.org and print all hrefs.
-main = do
-  resp <- Network.HTTP.simpleHTTP (getRequest "http://nixos.org/")
-  body <- getResponseBody resp
-  let tags = filter (isTagOpenName "a") $ parseTags body
-  let tags' = map (fromAttrib "href") tags
-  mapM_ putStrLn $ filter (/= "") tags'
-]]></programlisting>
-
-If you want to be even more precise, you can specify a specific
-revision of Nixpkgs:
-
-<programlisting>
-#! nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/0672315759b3e15e2121365f067c1c8c56bb4722.tar.gz
-</programlisting>
-
-</para>
-
-<para>The examples above all used <option>-p</option> to get
-dependencies from Nixpkgs. You can also use a Nix expression to build
-your own dependencies. For example, the Python example could have been
-written as:
-
-<programlisting>
-#! /usr/bin/env nix-shell
-#! nix-shell deps.nix -i python
-</programlisting>
-
-where the file <filename>deps.nix</filename> in the same directory
-as the <literal>#!</literal>-script contains:
-
-<programlisting>
-with import &lt;nixpkgs&gt; {};
-
-runCommand "dummy" { buildInputs = [ python pythonPackages.prettytable ]; } ""
-</programlisting>
-
-</para>
-
-</refsection>
-
-
-<refsection condition="manpage"><title>Environment variables</title>
-
-<variablelist>
-  <varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="env-NIX_PATH"><term><envar>NIX_PATH</envar></term>
-
-  <listitem>
-
-    <para>A colon-separated list of directories used to look up Nix
-    expressions enclosed in angle brackets (i.e.,
-    <literal>&lt;<replaceable>path</replaceable>&gt;</literal>).  For
-    instance, the value
-
-    <screen>
-/home/eelco/Dev:/etc/nixos</screen>
-
-    will cause Nix to look for paths relative to
-    <filename>/home/eelco/Dev</filename> and
-    <filename>/etc/nixos</filename>, in that order.  It is also
-    possible to match paths against a prefix.  For example, the value
-
-    <screen>
-nixpkgs=/home/eelco/Dev/nixpkgs-branch:/etc/nixos</screen>
-
-    will cause Nix to search for
-    <literal>&lt;nixpkgs/<replaceable>path</replaceable>&gt;</literal> in
-    <filename>/home/eelco/Dev/nixpkgs-branch/<replaceable>path</replaceable></filename>
-    and
-    <filename>/etc/nixos/nixpkgs/<replaceable>path</replaceable></filename>.</para>
-
-    <para>If a path in the Nix search path starts with
-    <literal>http://</literal> or <literal>https://</literal>, it is
-    interpreted as the URL of a tarball that will be downloaded and
-    unpacked to a temporary location. The tarball must consist of a
-    single top-level directory. For example, setting
-    <envar>NIX_PATH</envar> to
-
-    <screen>
-nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz</screen>
-
-    tells Nix to download the latest revision in the Nixpkgs/NixOS
-    14.12 channel.</para>
-
-    <para>The search path can be extended using the <option linkend="opt-I">-I</option> option, which takes precedence over
-    <envar>NIX_PATH</envar>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_IGNORE_SYMLINK_STORE</envar></term>
-
-  <listitem>
-
-  <para>Normally, the Nix store directory (typically
-  <filename>/nix/store</filename>) is not allowed to contain any
-  symlink components.  This is to prevent &#x201C;impure&#x201D; builds.  Builders
-  sometimes &#x201C;canonicalise&#x201D; paths by resolving all symlink components.
-  Thus, builds on different machines (with
-  <filename>/nix/store</filename> resolving to different locations)
-  could yield different results.  This is generally not a problem,
-  except when builds are deployed to machines where
-  <filename>/nix/store</filename> resolves differently.  If you are
-  sure that you&#x2019;re not going to do that, you can set
-  <envar>NIX_IGNORE_SYMLINK_STORE</envar> to <envar>1</envar>.</para>
-
-  <para>Note that if you&#x2019;re symlinking the Nix store so that you can
-  put it on another file system than the root file system, on Linux
-  you&#x2019;re better off using <literal>bind</literal> mount points, e.g.,
-
-  <screen>
-$ mkdir /nix
-$ mount -o bind /mnt/otherdisk/nix /nix</screen>
-
-  Consult the <citerefentry><refentrytitle>mount</refentrytitle>
-  <manvolnum>8</manvolnum></citerefentry> manual page for details.</para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_STORE_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix store (default
-  <filename><replaceable>prefix</replaceable>/store</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_DATA_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix static data
-  directory (default
-  <filename><replaceable>prefix</replaceable>/share</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_LOG_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix log directory
-  (default <filename><replaceable>prefix</replaceable>/log/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_STATE_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix state directory
-  (default <filename><replaceable>prefix</replaceable>/var/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_DB_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix database (default
-  <filename><replaceable>$NIX_STATE_DIR</replaceable>/db</filename>, i.e.,
-  <filename><replaceable>prefix</replaceable>/var/nix/db</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_CONF_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix configuration
-  directory (default
-  <filename><replaceable>prefix</replaceable>/etc/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>TMPDIR</envar></term>
-
-  <listitem><para>Use the specified directory to store temporary
-  files.  In particular, this includes temporary build directories;
-  these can take up substantial amounts of disk space.  The default is
-  <filename>/tmp</filename>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="envar-build-hook"><term><envar>NIX_BUILD_HOOK</envar></term>
-
-  <listitem>
-
-  <para>Specifies the location of the <emphasis>build hook</emphasis>,
-  which is a program (typically some script) that Nix will call
-  whenever it wants to build a derivation.  This is used to implement
-  distributed builds<phrase condition="manual"> (see <xref linkend="chap-distributed-builds"/>)</phrase>.</para>
-
-  <!--
-  The protocol by
-  which the calling Nix process and the build hook communicate is as
-  follows.
-
-  <para>The build hook is called with the following command-line
-  arguments:
-
-  <orderedlist>
-
-    <listitem><para>A boolean value <literal>0</literal> or
-    <literal>1</literal> specifying whether Nix can locally execute
-    more builds, as per the <link
-    linkend="opt-max-jobs"><option>- -max-jobs</option> option</link>.
-    The purpose of this argument is to allow the hook to not have to
-    maintain bookkeeping for the local machine.</para></listitem>
-
-    <listitem><para>The Nix platform identifier for the local machine
-    (e.g., <literal>i686-linux</literal>).</para></listitem>
-
-    <listitem><para>The Nix platform identifier for the derivation,
-    i.e., its <link linkend="attr-system"><varname>system</varname>
-    attribute</link>.</para></listitem>
-
-    <listitem><para>The store path of the derivation.</para></listitem>
-
-  </orderedlist>
-
-  </para>
-
-  <para>On the basis of this information, and whatever persistent
-  state the build hook keeps about other machines and their current
-  load, it has to decide what to do with the build.  It should print
-  out on standard error one of the following responses (terminated by
-  a newline, <literal>"\n"</literal>):
-
-  <variablelist>
-
-    <varlistentry><term><literal># decline</literal></term>
-
-      <listitem><para>The build hook is not willing or able to perform
-      the build; the calling Nix process should do the build itself,
-      if possible.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal># postpone</literal></term>
-
-      <listitem><para>The build hook cannot perform the build now, but
-      can do so in the future (e.g., because all available build slots
-      on remote machines are in use).  The calling Nix process should
-      postpone this build until at least one currently running build
-      has terminated.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal># accept</literal></term>
-
-      <listitem><para>The build hook has accepted the
-      build.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  <para>After sending <literal># accept</literal>, the hook should
-  read one line from standard input, which will be the string
-  <literal>okay</literal>.  It can then proceed with the build.
-  Before sending <literal>okay</literal>, Nix will store in the hook’s
-  current directory a number of text files that contain information
-  about the derivation:
-
-  <variablelist>
-
-    <varlistentry><term><filename>inputs</filename></term>
-
-      <listitem><para>The set of store paths that are inputs to the
-      build process (one per line).  These have to be copied
-      <emphasis>to</emphasis> the remote machine (in addition to the
-      store derivation itself).</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><filename>outputs</filename></term>
-
-      <listitem><para>The set of store paths that are outputs of the
-      derivation (one per line).  These have to be copied
-      <emphasis>from</emphasis> the remote machine if the build
-      succeeds.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><filename>references</filename></term>
-
-      <listitem><para>The reference graph of the inputs, in the format
-      accepted by the command <command>nix-store
-      - -register-validity</command>.  It is necessary to run this
-      command on the remote machine after copying the inputs to inform
-      Nix on the remote machine that the inputs are valid
-      paths.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  <para>The hook should copy the inputs to the remote machine,
-  register the validity of the inputs, perform the remote build, and
-  copy the outputs back to the local machine.  An exit code other than
-  <literal>0</literal> indicates that the hook has failed.  An exit
-  code equal to 100 means that the remote build failed (as opposed to,
-  e.g., a network error).</para>
-  -->
-
-  </listitem>
-
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="envar-remote"><term><envar>NIX_REMOTE</envar></term>
-
-  <listitem><para>This variable should be set to
-  <literal>daemon</literal> if you want to use the Nix daemon to
-  execute Nix operations. This is necessary in <link linkend="ssec-multi-user">multi-user Nix installations</link>.
-  Otherwise, it should be left unset.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_SHOW_STATS</envar></term>
-
-  <listitem><para>If set to <literal>1</literal>, Nix will print some
-  evaluation statistics, such as the number of values
-  allocated.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_COUNT_CALLS</envar></term>
-
-  <listitem><para>If set to <literal>1</literal>, Nix will print how
-  often functions were called during Nix expression evaluation.  This
-  is useful for profiling your Nix expressions.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>GC_INITIAL_HEAP_SIZE</envar></term>
-
-  <listitem><para>If Nix has been configured to use the Boehm garbage
-  collector, this variable sets the initial size of the heap in bytes.
-  It defaults to 384 MiB.  Setting it to a low value reduces memory
-  consumption, but will increase runtime due to the overhead of
-  garbage collection.</para></listitem>
-
-</varlistentry>
-</variablelist>
-
-</refsection>
-
-
-</refentry>
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-store">
-
-<refmeta>
-  <refentrytitle>nix-store</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-store</refname>
-  <refpurpose>manipulate or query the Nix store</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg xmlns="http://docbook.org/ns/docbook"><option>--help</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--version</option></arg><arg xmlns="http://docbook.org/ns/docbook" rep="repeat"><option>--verbose</option></arg><arg xmlns="http://docbook.org/ns/docbook" rep="repeat"><option>-v</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--no-build-output</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>-Q</option></arg><arg xmlns="http://docbook.org/ns/docbook">
-  <group choice="req">
-    <arg choice="plain"><option>--max-jobs</option></arg>
-    <arg choice="plain"><option>-j</option></arg>
-  </group>
-  <replaceable>number</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>--cores</option>
-  <replaceable>number</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>--max-silent-time</option>
-  <replaceable>number</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>--timeout</option>
-  <replaceable>number</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook"><option>--keep-going</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>-k</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--keep-failed</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>-K</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--fallback</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--readonly-mode</option></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--log-type</option> <replaceable>type</replaceable></arg><arg xmlns="http://docbook.org/ns/docbook"><option>--show-trace</option></arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>-I</option>
-  <replaceable>path</replaceable>
-</arg><arg xmlns="http://docbook.org/ns/docbook">
-  <option>--option</option>
-  <replaceable>name</replaceable>
-  <replaceable>value</replaceable>
-</arg><sbr xmlns="http://docbook.org/ns/docbook"/>
-    <arg><option>--add-root</option> <replaceable>path</replaceable></arg>
-    <arg><option>--indirect</option></arg>
-    <arg choice="plain"><replaceable>operation</replaceable></arg>
-    <arg rep="repeat"><replaceable>options</replaceable></arg>
-    <arg rep="repeat"><replaceable>arguments</replaceable></arg>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-
-<refsection><title>Description</title>
-
-<para>The command <command>nix-store</command> performs primitive
-operations on the Nix store.  You generally do not need to run this
-command manually.</para>
-
-<para><command>nix-store</command> takes exactly one
-<emphasis>operation</emphasis> flag which indicates the subcommand to
-be performed.  These are documented below.</para>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Common options</title>
-
-<para>This section lists the options that are common to all
-operations.  These options are allowed for every subcommand, though
-they may not always have an effect.  <phrase condition="manual">See
-also <xref linkend="sec-common-options"/> for a list of common
-options.</phrase></para>
-
-<variablelist>
-
-  <varlistentry xml:id="opt-add-root"><term><option>--add-root</option> <replaceable>path</replaceable></term>
-
-    <listitem><para>Causes the result of a realisation
-    (<option>--realise</option> and <option>--force-realise</option>)
-    to be registered as a root of the garbage collector<phrase condition="manual"> (see <xref linkend="ssec-gc-roots"/>)</phrase>.  The root is stored in
-    <replaceable>path</replaceable>, which must be inside a directory
-    that is scanned for roots by the garbage collector (i.e.,
-    typically in a subdirectory of
-    <filename>/nix/var/nix/gcroots/</filename>)
-    <emphasis>unless</emphasis> the <option>--indirect</option> flag
-    is used.</para>
-
-    <para>If there are multiple results, then multiple symlinks will
-    be created by sequentially numbering symlinks beyond the first one
-    (e.g., <filename>foo</filename>, <filename>foo-2</filename>,
-    <filename>foo-3</filename>, and so on).</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--indirect</option></term>
-
-    <listitem>
-
-    <para>In conjunction with <option>--add-root</option>, this option
-    allows roots to be stored <emphasis>outside</emphasis> of the GC
-    roots directory.  This is useful for commands such as
-    <command>nix-build</command> that place a symlink to the build
-    result in the current directory; such a build result should not be
-    garbage-collected unless the symlink is removed.</para>
-
-    <para>The <option>--indirect</option> flag causes a uniquely named
-    symlink to <replaceable>path</replaceable> to be stored in
-    <filename>/nix/var/nix/gcroots/auto/</filename>.  For instance,
-
-    <screen>
-$ nix-store --add-root /home/eelco/bla/result --indirect -r <replaceable>...</replaceable>
-
-$ ls -l /nix/var/nix/gcroots/auto
-lrwxrwxrwx    1 ... 2005-03-13 21:10 dn54lcypm8f8... -&gt; /home/eelco/bla/result
-
-$ ls -l /home/eelco/bla/result
-lrwxrwxrwx    1 ... 2005-03-13 21:10 /home/eelco/bla/result -&gt; /nix/store/1r11343n6qd4...-f-spot-0.0.10</screen>
-
-    Thus, when <filename>/home/eelco/bla/result</filename> is removed,
-    the GC root in the <filename>auto</filename> directory becomes a
-    dangling symlink and will be ignored by the collector.</para>
-
-    <warning><para>Note that it is not possible to move or rename
-    indirect GC roots, since the symlink in the
-    <filename>auto</filename> directory will still point to the old
-    location.</para></warning>
-
-    </listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-<variablelist condition="manpage">
-  <varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--help</option></term>
-
-  <listitem><para>Prints out a summary of the command syntax and
-  exits.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--version</option></term>
-
-  <listitem><para>Prints out the Nix version number on standard output
-  and exits.</para></listitem>
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--verbose</option></term>
-  <term><option>-v</option></term>
-
-  <listitem>
-
-  <para>Increases the level of verbosity of diagnostic messages
-  printed on standard error.  For each Nix operation, the information
-  printed on standard output is well-defined; any diagnostic
-  information is printed on standard error, never on standard
-  output.</para>
-
-  <para>This option may be specified repeatedly.  Currently, the
-  following verbosity levels exist:</para>
-
-  <variablelist>
-
-    <varlistentry><term>0</term>
-    <listitem><para>&#x201C;Errors only&#x201D;: only print messages
-    explaining why the Nix invocation failed.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>1</term>
-    <listitem><para>&#x201C;Informational&#x201D;: print
-    <emphasis>useful</emphasis> messages about what Nix is doing.
-    This is the default.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>2</term>
-    <listitem><para>&#x201C;Talkative&#x201D;: print more informational
-    messages.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>3</term>
-    <listitem><para>&#x201C;Chatty&#x201D;: print even more
-    informational messages.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>4</term>
-    <listitem><para>&#x201C;Debug&#x201D;: print debug
-    information.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>5</term>
-    <listitem><para>&#x201C;Vomit&#x201D;: print vast amounts of debug
-    information.</para></listitem>
-    </varlistentry>
-
-  </variablelist>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--no-build-output</option></term>
-  <term><option>-Q</option></term>
-
-  <listitem><para>By default, output written by builders to standard
-  output and standard error is echoed to the Nix command's standard
-  error.  This option suppresses this behaviour.  Note that the
-  builder's standard output and error are always written to a log file
-  in
-  <filename><replaceable>prefix</replaceable>/nix/var/log/nix</filename>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-max-jobs"><term><option>--max-jobs</option></term>
-  <term><option>-j</option></term>
-
-  <listitem><para>Sets the maximum number of build jobs that Nix will
-  perform in parallel to the specified number.  The default is
-  specified by the <link linkend="conf-build-max-jobs"><literal>build-max-jobs</literal></link>
-  configuration setting, which itself defaults to
-  <literal>1</literal>.  A higher value is useful on SMP systems or to
-  exploit I/O latency.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-cores"><term><option>--cores</option></term>
-
-  <listitem><para>Sets the value of the <envar>NIX_BUILD_CORES</envar>
-  environment variable in the invocation of builders.  Builders can
-  use this variable at their discretion to control the maximum amount
-  of parallelism.  For instance, in Nixpkgs, if the derivation
-  attribute <varname>enableParallelBuilding</varname> is set to
-  <literal>true</literal>, the builder passes the
-  <option>-j<replaceable>N</replaceable></option> flag to GNU Make.
-  It defaults to the value of the <link linkend="conf-build-cores"><literal>build-cores</literal></link>
-  configuration setting, if set, or <literal>1</literal> otherwise.
-  The value <literal>0</literal> means that the builder should use all
-  available CPU cores in the system.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-max-silent-time"><term><option>--max-silent-time</option></term>
-
-  <listitem><para>Sets the maximum number of seconds that a builder
-  can go without producing any data on standard output or standard
-  error.  The default is specified by the <link linkend="conf-build-max-silent-time"><literal>build-max-silent-time</literal></link>
-  configuration setting.  <literal>0</literal> means no
-  time-out.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-timeout"><term><option>--timeout</option></term>
-
-  <listitem><para>Sets the maximum number of seconds that a builder
-  can run.  The default is specified by the <link linkend="conf-build-timeout"><literal>build-timeout</literal></link>
-  configuration setting.  <literal>0</literal> means no
-  timeout.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--keep-going</option></term>
-  <term><option>-k</option></term>
-
-  <listitem><para>Keep going in case of failed builds, to the
-  greatest extent possible.  That is, if building an input of some
-  derivation fails, Nix will still build the other inputs, but not the
-  derivation itself.  Without this option, Nix stops if any build
-  fails (except for builds of substitutes), possibly killing builds in
-  progress (in case of parallel or distributed builds).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--keep-failed</option></term>
-  <term><option>-K</option></term>
-
-  <listitem><para>Specifies that in case of a build failure, the
-  temporary directory (usually in <filename>/tmp</filename>) in which
-  the build takes place should not be deleted.  The path of the build
-  directory is printed as an informational message.
-    </para>
-  </listitem>
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--fallback</option></term>
-
-  <listitem>
-
-  <para>Whenever Nix attempts to build a derivation for which
-  substitutes are known for each output path, but realising the output
-  paths through the substitutes fails, fall back on building the
-  derivation.</para>
-
-  <para>The most common scenario in which this is useful is when we
-  have registered substitutes in order to perform binary distribution
-  from, say, a network repository.  If the repository is down, the
-  realisation of the derivation will fail.  When this option is
-  specified, Nix will build the derivation instead.  Thus,
-  installation from binaries falls back on installation from source.
-  This option is not the default since it is generally not desirable
-  for a transient failure in obtaining the substitutes to lead to a
-  full build from source (with the related consumption of
-  resources).</para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--readonly-mode</option></term>
-
-  <listitem><para>When this option is used, no attempt is made to open
-  the Nix database.  Most Nix operations do need database access, so
-  those operations will fail.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-log-type"><term><option>--log-type</option>
-<replaceable>type</replaceable></term>
-
-  <listitem>
-
-  <para>This option determines how the output written to standard
-  error is formatted.  Nix&#x2019;s diagnostic messages are typically
-  <emphasis>nested</emphasis>.  For instance, when tracing Nix
-  expression evaluation (<command>nix-env -vvvvv</command>, messages
-  from subexpressions are nested inside their parent expressions.  Nix
-  builder output is also often nested.  For instance, the Nix Packages
-  generic builder nests the various build tasks (unpack, configure,
-  compile, etc.), and the GNU Make in <literal>stdenv-linux</literal>
-  has been patched to provide nesting for recursive Make
-  invocations.</para>
-
-  <para><replaceable>type</replaceable> can be one of the
-  following:
-
-  <variablelist>
-
-    <varlistentry><term><literal>pretty</literal></term>
-
-      <listitem><para>Pretty-print the output, indicating different
-      nesting levels using spaces.  This is the
-      default.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal>escapes</literal></term>
-
-      <listitem><para>Indicate nesting using escape codes that can be
-      interpreted by the <command>nix-log2xml</command> tool in the
-      Nix source distribution.  The resulting XML file can be fed into
-      the <command>log2html.xsl</command> stylesheet to create an HTML
-      file that can be browsed interactively, using JavaScript to
-      expand and collapse parts of the output.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal>flat</literal></term>
-
-      <listitem><para>Remove all nesting.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--arg</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>This option is accepted by
-  <command>nix-env</command>, <command>nix-instantiate</command> and
-  <command>nix-build</command>.  When evaluating Nix expressions, the
-  expression evaluator will automatically try to call functions that
-  it encounters.  It can automatically call functions for which every
-  argument has a <link linkend="ss-functions">default value</link>
-  (e.g., <literal>{ <replaceable>argName</replaceable> ?
-  <replaceable>defaultValue</replaceable> }:
-  <replaceable>...</replaceable></literal>).  With
-  <option>--arg</option>, you can also call functions that have
-  arguments without a default value (or override a default value).
-  That is, if the evaluator encounters a function with an argument
-  named <replaceable>name</replaceable>, it will call it with value
-  <replaceable>value</replaceable>.</para>
-
-  <para>For instance, the file
-  <literal>pkgs/top-level/all-packages.nix</literal> in Nixpkgs is
-  actually a function:
-
-<programlisting>
-{ # The system (e.g., `i686-linux') for which to build the packages.
-  system ? builtins.currentSystem
-  <replaceable>...</replaceable>
-}: <replaceable>...</replaceable></programlisting>
-
-  So if you call this Nix expression (e.g., when you do
-  <literal>nix-env -i <replaceable>pkgname</replaceable></literal>),
-  the function will be called automatically using the value <link linkend="builtin-currentSystem"><literal>builtins.currentSystem</literal></link>
-  for the <literal>system</literal> argument.  You can override this
-  using <option>--arg</option>, e.g., <literal>nix-env -i
-  <replaceable>pkgname</replaceable> --arg system
-  \"i686-freebsd\"</literal>.  (Note that since the argument is a Nix
-  string literal, you have to escape the quotes.)</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--argstr</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>This option is like <option>--arg</option>, only the
-  value is not a Nix expression but a string.  So instead of
-  <literal>--arg system \"i686-linux\"</literal> (the outer quotes are
-  to keep the shell happy) you can say <literal>--argstr system
-  i686-linux</literal>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-attr"><term><option>--attr</option> / <option>-A</option>
-<replaceable>attrPath</replaceable></term>
-
-  <listitem><para>Select an attribute from the top-level Nix
-  expression being evaluated.  (<command>nix-env</command>,
-  <command>nix-instantiate</command>, <command>nix-build</command> and
-  <command>nix-shell</command> only.)  The <emphasis>attribute
-  path</emphasis> <replaceable>attrPath</replaceable> is a sequence of
-  attribute names separated by dots.  For instance, given a top-level
-  Nix expression <replaceable>e</replaceable>, the attribute path
-  <literal>xorg.xorgserver</literal> would cause the expression
-  <literal><replaceable>e</replaceable>.xorg.xorgserver</literal> to
-  be used.  See <link linkend="refsec-nix-env-install-examples"><command>nix-env
-  --install</command></link> for some concrete examples.</para>
-
-  <para>In addition to attribute names, you can also specify array
-  indices.  For instance, the attribute path
-  <literal>foo.3.bar</literal> selects the <literal>bar</literal>
-  attribute of the fourth element of the array in the
-  <literal>foo</literal> attribute of the top-level
-  expression.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--expr</option> / <option>-E</option></term>
-
-  <listitem><para>Interpret the command line arguments as a list of
-  Nix expressions to be parsed and evaluated, rather than as a list
-  of file names of Nix expressions.
-  (<command>nix-instantiate</command>, <command>nix-build</command>
-  and <command>nix-shell</command> only.)</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--show-trace</option></term>
-
-  <listitem><para>Causes Nix to print out a stack trace in case of Nix
-  expression evaluation errors.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-I"><term><option>-I</option> <replaceable>path</replaceable></term>
-
-  <listitem><para>Add a path to the Nix expression search path.  This
-  option may be given multiple times.  See the <envar linkend="env-NIX_PATH">NIX_PATH</envar> environment variable for
-  information on the semantics of the Nix search path.  Paths added
-  through <option>-I</option> take precedence over
-  <envar>NIX_PATH</envar>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--option</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>Set the Nix configuration option
-  <replaceable>name</replaceable> to <replaceable>value</replaceable>.
-  This overrides settings in the Nix configuration file (see
-  <citerefentry><refentrytitle>nix.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--repair</option></term>
-
-  <listitem><para>Fix corrupted or missing store paths by
-  redownloading or rebuilding them.  Note that this is slow because it
-  requires computing a cryptographic hash of the contents of every
-  path in the closure of the build.  Also note the warning under
-  <command>nix-store --repair-path</command>.</para></listitem>
-
-</varlistentry>
-</variablelist>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection xml:id="rsec-nix-store-realise"><title>Operation <option>--realise</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-store</command>
-  <group choice="req">
-    <arg choice="plain"><option>--realise</option></arg>
-    <arg choice="plain"><option>-r</option></arg>
-  </group>
-  <arg choice="plain" rep="repeat"><replaceable>paths</replaceable></arg>
-  <arg><option>--dry-run</option></arg>
-</cmdsynopsis>
-
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--realise</option> essentially &#x201C;builds&#x201D;
-the specified store paths.  Realisation is a somewhat overloaded term:
-
-<itemizedlist>
-
-  <listitem><para>If the store path is a
-  <emphasis>derivation</emphasis>, realisation ensures that the output
-  paths of the derivation are <link linkend="gloss-validity">valid</link> (i.e., the output path and its
-  closure exist in the file system).  This can be done in several
-  ways.  First, it is possible that the outputs are already valid, in
-  which case we are done immediately.  Otherwise, there may be <link linkend="gloss-substitute">substitutes</link> that produce the
-  outputs (e.g., by downloading them).  Finally, the outputs can be
-  produced by performing the build action described by the
-  derivation.</para></listitem>
-
-  <listitem><para>If the store path is not a derivation, realisation
-  ensures that the specified path is valid (i.e., it and its closure
-  exist in the file system).  If the path is already valid, we are
-  done immediately.  Otherwise, the path and any missing paths in its
-  closure may be produced through substitutes.  If there are no
-  (successful) subsitutes, realisation fails.</para></listitem>
-
-</itemizedlist>
-
-</para>
-
-<para>The output path of each derivation is printed on standard
-output.  (For non-derivations argument, the argument itself is
-printed.)</para>
-
-<para>The following flags are available:</para>
-
-<variablelist>
-
-  <varlistentry><term><option>--dry-run</option></term>
-
-    <listitem><para>Print on standard error a description of what
-    packages would be built or downloaded, without actually performing
-    the operation.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--ignore-unknown</option></term>
-
-    <listitem><para>If a non-derivation path does not have a
-    substitute, then silently ignore it.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--check</option></term>
-
-    <listitem><para>This option allows you to check whether a
-    derivation is deterministic. It rebuilds the specified derivation
-    and checks whether the result is bitwise-identical with the
-    existing outputs, printing an error if that&#x2019;s not the case. The
-    outputs of the specified derivation must already exist. When used
-    with <option>-K</option>, if an output path is not identical to
-    the corresponding output from the previous build, the new output
-    path is left in
-    <filename>/nix/store/<replaceable>name</replaceable>-check.</filename></para>
-
-    <para>See also the <option>build-repeat</option> configuration
-    option, which repeats a derivation a number of times and prevents
-    its outputs from being registered as &#x201C;valid&#x201D; in the Nix store
-    unless they are identical.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<para>This operation is typically used to build store derivations
-produced by <link linkend="sec-nix-instantiate"><command>nix-instantiate</command></link>:
-
-<screen>
-$ nix-store -r $(nix-instantiate ./test.nix)
-/nix/store/31axcgrlbfsxzmfff1gyj1bf62hvkby2-aterm-2.3.1</screen>
-
-This is essentially what <link linkend="sec-nix-build"><command>nix-build</command></link> does.</para>
-
-<para>To test whether a previously-built derivation is deterministic:
-
-<screen>
-$ nix-build -r '&lt;nixpkgs&gt;' -A hello --check -K
-</screen>
-
-</para>
-
-</refsection>
-
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection xml:id="rsec-nix-store-gc"><title>Operation <option>--gc</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-store</command>
-  <arg choice="plain"><option>--gc</option></arg>
-  <group>
-    <arg choice="plain"><option>--print-roots</option></arg>
-    <arg choice="plain"><option>--print-live</option></arg>
-    <arg choice="plain"><option>--print-dead</option></arg>
-    <arg choice="plain"><option>--delete</option></arg>
-  </group>
-  <arg><option>--max-freed</option> <replaceable>bytes</replaceable></arg>
-</cmdsynopsis>
-
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>Without additional flags, the operation <option>--gc</option>
-performs a garbage collection on the Nix store.  That is, all paths in
-the Nix store not reachable via file system references from a set of
-&#x201C;roots&#x201D;, are deleted.</para>
-
-<para>The following suboperations may be specified:</para>
-
-<variablelist>
-
-  <varlistentry><term><option>--print-roots</option></term>
-
-    <listitem><para>This operation prints on standard output the set
-    of roots used by the garbage collector.  What constitutes a root
-    is described in <xref linkend="ssec-gc-roots"/>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--print-live</option></term>
-
-    <listitem><para>This operation prints on standard output the set
-    of &#x201C;live&#x201D; store paths, which are all the store paths reachable
-    from the roots.  Live paths should never be deleted, since that
-    would break consistency &#x2014; it would become possible that
-    applications are installed that reference things that are no
-    longer present in the store.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--print-dead</option></term>
-
-    <listitem><para>This operation prints out on standard output the
-    set of &#x201C;dead&#x201D; store paths, which is just the opposite of the set
-    of live paths: any path in the store that is not live (with
-    respect to the roots) is dead.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--delete</option></term>
-
-    <listitem><para>This operation performs an actual garbage
-    collection.  All dead paths are removed from the
-    store.  This is the default.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-<para>By default, all unreachable paths are deleted.  The following
-options control what gets deleted and in what order:
-
-<variablelist>
-
-  <varlistentry><term><option>--max-freed</option> <replaceable>bytes</replaceable></term>
-
-    <listitem><para>Keep deleting paths until at least
-    <replaceable>bytes</replaceable> bytes have been deleted, then
-    stop.  The argument <replaceable>bytes</replaceable> can be
-    followed by the multiplicative suffix <literal>K</literal>,
-    <literal>M</literal>, <literal>G</literal> or
-    <literal>T</literal>, denoting KiB, MiB, GiB or TiB
-    units.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</para>
-
-<para>The behaviour of the collector is also influenced by the <link linkend="conf-gc-keep-outputs"><literal>gc-keep-outputs</literal></link>
-and <link linkend="conf-gc-keep-derivations"><literal>gc-keep-derivations</literal></link>
-variables in the Nix configuration file.</para>
-
-<para>With <option>--delete</option>, the collector prints the total
-number of freed bytes when it finishes (or when it is interrupted).
-With <option>--print-dead</option>, it prints the number of bytes that
-would be freed.</para>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<para>To delete all unreachable paths, just do:
-
-<screen>
-$ nix-store --gc
-deleting `/nix/store/kq82idx6g0nyzsp2s14gfsc38npai7lf-cairo-1.0.4.tar.gz.drv'
-<replaceable>...</replaceable>
-8825586 bytes freed (8.42 MiB)</screen>
-
-</para>
-
-<para>To delete at least 100 MiBs of unreachable paths:
-
-<screen>
-$ nix-store --gc --max-freed $((100 * 1024 * 1024))</screen>
-
-</para>
-
-</refsection>
-
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--delete</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-store</command>
-  <arg choice="plain"><option>--delete</option></arg>
-  <arg><option>--ignore-liveness</option></arg>
-  <arg choice="plain" rep="repeat"><replaceable>paths</replaceable></arg>
-</cmdsynopsis>
-
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--delete</option> deletes the store paths
-<replaceable>paths</replaceable> from the Nix store, but only if it is
-safe to do so; that is, when the path is not reachable from a root of
-the garbage collector.  This means that you can only delete paths that
-would also be deleted by <literal>nix-store --gc</literal>.  Thus,
-<literal>--delete</literal> is a more targeted version of
-<literal>--gc</literal>.</para>
-
-<para>With the option <option>--ignore-liveness</option>, reachability
-from the roots is ignored.  However, the path still won&#x2019;t be deleted
-if there are other paths in the store that refer to it (i.e., depend
-on it).</para>
-
-</refsection>
-
-<refsection><title>Example</title>
-
-<screen>
-$ nix-store --delete /nix/store/zq0h41l75vlb4z45kzgjjmsjxvcv1qk7-mesa-6.4
-0 bytes freed (0.00 MiB)
-error: cannot delete path `/nix/store/zq0h41l75vlb4z45kzgjjmsjxvcv1qk7-mesa-6.4' since it is still alive</screen>
-
-</refsection>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection xml:id="refsec-nix-store-query"><title>Operation <option>--query</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-store</command>
-  <group choice="req">
-    <arg choice="plain"><option>--query</option></arg>
-    <arg choice="plain"><option>-q</option></arg>
-  </group>
-  <group choice="req">
-    <arg choice="plain"><option>--outputs</option></arg>
-    <arg choice="plain"><option>--requisites</option></arg>
-    <arg choice="plain"><option>-R</option></arg>
-    <arg choice="plain"><option>--references</option></arg>
-    <arg choice="plain"><option>--referrers</option></arg>
-    <arg choice="plain"><option>--referrers-closure</option></arg>
-    <arg choice="plain"><option>--deriver</option></arg>
-    <arg choice="plain"><option>--deriver</option></arg>
-    <arg choice="plain"><option>--graph</option></arg>
-    <arg choice="plain"><option>--tree</option></arg>
-    <arg choice="plain"><option>--binding</option> <replaceable>name</replaceable></arg>
-    <arg choice="plain"><option>--hash</option></arg>
-    <arg choice="plain"><option>--size</option></arg>
-    <arg choice="plain"><option>--roots</option></arg>
-  </group>
-  <arg><option>--use-output</option></arg>
-  <arg><option>-u</option></arg>
-  <arg><option>--force-realise</option></arg>
-  <arg><option>-f</option></arg>
-  <arg choice="plain" rep="repeat"><replaceable>paths</replaceable></arg>
-</cmdsynopsis>
-
-</refsection>
-
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--query</option> displays various bits of
-information about the store paths .  The queries are described below.  At
-most one query can be specified.  The default query is
-<option>--outputs</option>.</para>
-
-<para>The paths <replaceable>paths</replaceable> may also be symlinks
-from outside of the Nix store, to the Nix store.  In that case, the
-query is applied to the target of the symlink.</para>
-
-
-</refsection>
-
-
-<refsection><title>Common query options</title>
-
-<variablelist>
-
-  <varlistentry><term><option>--use-output</option></term>
-    <term><option>-u</option></term>
-
-    <listitem><para>For each argument to the query that is a store
-    derivation, apply the query to the output path of the derivation
-    instead.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--force-realise</option></term>
-    <term><option>-f</option></term>
-
-    <listitem><para>Realise each argument to the query first (see
-    <link linkend="rsec-nix-store-realise"><command>nix-store
-    --realise</command></link>).</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection xml:id="nixref-queries"><title>Queries</title>
-
-<variablelist>
-
-  <varlistentry><term><option>--outputs</option></term>
-
-    <listitem><para>Prints out the <link linkend="gloss-output-path">output paths</link> of the store
-    derivations <replaceable>paths</replaceable>.  These are the paths
-    that will be produced when the derivation is
-    built.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--requisites</option></term>
-    <term><option>-R</option></term>
-
-    <listitem><para>Prints out the <link linkend="gloss-closure">closure</link> of the store path
-    <replaceable>paths</replaceable>.</para>
-
-    <para>This query has one option:</para>
-
-    <variablelist>
-
-      <varlistentry><term><option>--include-outputs</option></term>
-
-        <listitem><para>Also include the output path of store
-        derivations, and their closures.</para></listitem>
-
-      </varlistentry>
-
-    </variablelist>
-
-    <para>This query can be used to implement various kinds of
-    deployment.  A <emphasis>source deployment</emphasis> is obtained
-    by distributing the closure of a store derivation.  A
-    <emphasis>binary deployment</emphasis> is obtained by distributing
-    the closure of an output path.  A <emphasis>cache
-    deployment</emphasis> (combined source/binary deployment,
-    including binaries of build-time-only dependencies) is obtained by
-    distributing the closure of a store derivation and specifying the
-    option <option>--include-outputs</option>.</para>
-
-    </listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--references</option></term>
-
-    <listitem><para>Prints the set of <link linkend="gloss-reference">references</link> of the store paths
-    <replaceable>paths</replaceable>, that is, their immediate
-    dependencies.  (For <emphasis>all</emphasis> dependencies, use
-    <option>--requisites</option>.)</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--referrers</option></term>
-
-    <listitem><para>Prints the set of <emphasis>referrers</emphasis> of
-    the store paths <replaceable>paths</replaceable>, that is, the
-    store paths currently existing in the Nix store that refer to one
-    of <replaceable>paths</replaceable>.  Note that contrary to the
-    references, the set of referrers is not constant; it can change as
-    store paths are added or removed.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--referrers-closure</option></term>
-
-    <listitem><para>Prints the closure of the set of store paths
-    <replaceable>paths</replaceable> under the referrers relation; that
-    is, all store paths that directly or indirectly refer to one of
-    <replaceable>paths</replaceable>.  These are all the path currently
-    in the Nix store that are dependent on
-    <replaceable>paths</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--deriver</option></term>
-
-    <listitem><para>Prints the <link linkend="gloss-deriver">deriver</link> of the store paths
-    <replaceable>paths</replaceable>.  If the path has no deriver
-    (e.g., if it is a source file), or if the deriver is not known
-    (e.g., in the case of a binary-only deployment), the string
-    <literal>unknown-deriver</literal> is printed.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--graph</option></term>
-
-    <listitem><para>Prints the references graph of the store paths
-    <replaceable>paths</replaceable> in the format of the
-    <command>dot</command> tool of AT&amp;T's <link xlink:href="http://www.graphviz.org/">Graphviz package</link>.
-    This can be used to visualise dependency graphs.  To obtain a
-    build-time dependency graph, apply this to a store derivation.  To
-    obtain a runtime dependency graph, apply it to an output
-    path.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--tree</option></term>
-
-    <listitem><para>Prints the references graph of the store paths
-    <replaceable>paths</replaceable> as a nested ASCII tree.
-    References are ordered by descending closure size; this tends to
-    flatten the tree, making it more readable.  The query only
-    recurses into a store path when it is first encountered; this
-    prevents a blowup of the tree representation of the
-    graph.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--binding</option> <replaceable>name</replaceable></term>
-
-    <listitem><para>Prints the value of the attribute
-    <replaceable>name</replaceable> (i.e., environment variable) of
-    the store derivations <replaceable>paths</replaceable>.  It is an
-    error for a derivation to not have the specified
-    attribute.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--hash</option></term>
-
-    <listitem><para>Prints the SHA-256 hash of the contents of the
-    store paths <replaceable>paths</replaceable> (that is, the hash of
-    the output of <command>nix-store --dump</command> on the given
-    paths).  Since the hash is stored in the Nix database, this is a
-    fast operation.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--size</option></term>
-
-    <listitem><para>Prints the size in bytes of the contents of the
-    store paths <replaceable>paths</replaceable> &#x2014; to be precise, the
-    size of the output of <command>nix-store --dump</command> on the
-    given paths.  Note that the actual disk space required by the
-    store paths may be higher, especially on filesystems with large
-    cluster sizes.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--roots</option></term>
-
-    <listitem><para>Prints the garbage collector roots that point,
-    directly or indirectly, at the store paths
-    <replaceable>paths</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<para>Print the closure (runtime dependencies) of the
-<command>svn</command> program in the current user environment:
-
-<screen>
-$ nix-store -qR $(which svn)
-/nix/store/5mbglq5ldqld8sj57273aljwkfvj22mc-subversion-1.1.4
-/nix/store/9lz9yc6zgmc0vlqmn2ipcpkjlmbi51vv-glibc-2.3.4
-<replaceable>...</replaceable></screen>
-
-</para>
-
-<para>Print the build-time dependencies of <command>svn</command>:
-
-<screen>
-$ nix-store -qR $(nix-store -qd $(which svn))
-/nix/store/02iizgn86m42q905rddvg4ja975bk2i4-grep-2.5.1.tar.bz2.drv
-/nix/store/07a2bzxmzwz5hp58nf03pahrv2ygwgs3-gcc-wrapper.sh
-/nix/store/0ma7c9wsbaxahwwl04gbw3fcd806ski4-glibc-2.3.4.drv
-<replaceable>... lots of other paths ...</replaceable></screen>
-
-The difference with the previous example is that we ask the closure of
-the derivation (<option>-qd</option>), not the closure of the output
-path that contains <command>svn</command>.</para>
-
-<para>Show the build-time dependencies as a tree:
-
-<screen>
-$ nix-store -q --tree $(nix-store -qd $(which svn))
-/nix/store/7i5082kfb6yjbqdbiwdhhza0am2xvh6c-subversion-1.1.4.drv
-+---/nix/store/d8afh10z72n8l1cr5w42366abiblgn54-builder.sh
-+---/nix/store/fmzxmpjx2lh849ph0l36snfj9zdibw67-bash-3.0.drv
-|   +---/nix/store/570hmhmx3v57605cqg9yfvvyh0nnb8k8-bash
-|   +---/nix/store/p3srsbd8dx44v2pg6nbnszab5mcwx03v-builder.sh
-<replaceable>...</replaceable></screen>
-
-</para>
-
-<para>Show all paths that depend on the same OpenSSL library as
-<command>svn</command>:
-
-<screen>
-$ nix-store -q --referrers $(nix-store -q --binding openssl $(nix-store -qd $(which svn)))
-/nix/store/23ny9l9wixx21632y2wi4p585qhva1q8-sylpheed-1.0.0
-/nix/store/5mbglq5ldqld8sj57273aljwkfvj22mc-subversion-1.1.4
-/nix/store/dpmvp969yhdqs7lm2r1a3gng7pyq6vy4-subversion-1.1.3
-/nix/store/l51240xqsgg8a7yrbqdx1rfzyv6l26fx-lynx-2.8.5</screen>
-
-</para>
-
-<para>Show all paths that directly or indirectly depend on the Glibc
-(C library) used by <command>svn</command>:
-
-<screen>
-$ nix-store -q --referrers-closure $(ldd $(which svn) | grep /libc.so | awk '{print $3}')
-/nix/store/034a6h4vpz9kds5r6kzb9lhh81mscw43-libgnomeprintui-2.8.2
-/nix/store/15l3yi0d45prm7a82pcrknxdh6nzmxza-gawk-3.1.4
-<replaceable>...</replaceable></screen>
-
-Note that <command>ldd</command> is a command that prints out the
-dynamic libraries used by an ELF executable.</para>
-
-<para>Make a picture of the runtime dependency graph of the current
-user environment:
-
-<screen>
-$ nix-store -q --graph ~/.nix-profile | dot -Tps &gt; graph.ps
-$ gv graph.ps</screen>
-
-</para>
-
-<para>Show every garbage collector root that points to a store path
-that depends on <command>svn</command>:
-
-<screen>
-$ nix-store -q --roots $(which svn)
-/nix/var/nix/profiles/default-81-link
-/nix/var/nix/profiles/default-82-link
-/nix/var/nix/profiles/per-user/eelco/profile-97-link
-</screen>
-
-</para>
-
-</refsection>
-
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<!--
-<refsection xml:id="rsec-nix-store-reg-val"><title>Operation <option>-XXX-register-validity</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-store</command>
-  <arg choice='plain'><option>-XXX-register-validity</option></arg>
-</cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>TODO</para>
-
-</refsection>
-
-</refsection>
--->
-
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--add</option></title>
-
-<refsection><title>Synopsis</title>
-
-<cmdsynopsis>
-  <command>nix-store</command>
-  <arg choice="plain"><option>--add</option></arg>
-  <arg choice="plain" rep="repeat"><replaceable>paths</replaceable></arg>
-</cmdsynopsis>
-
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--add</option> adds the specified paths to
-the Nix store.  It prints the resulting paths in the Nix store on
-standard output.</para>
-
-</refsection>
-
-<refsection><title>Example</title>
-
-<screen>
-$ nix-store --add ./foo.c
-/nix/store/m7lrha58ph6rcnv109yzx1nk1cj7k7zf-foo.c</screen>
-
-</refsection>
-
-</refsection>
-
-
-
-<!--######################################################################-->
-
-<refsection xml:id="refsec-nix-store-verify"><title>Operation <option>--verify</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--verify</option></arg>
-    <arg><option>--check-contents</option></arg>
-    <arg><option>--repair</option></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--verify</option> verifies the internal
-consistency of the Nix database, and the consistency between the Nix
-database and the Nix store.  Any inconsistencies encountered are
-automatically repaired.  Inconsistencies are generally the result of
-the Nix store or database being modified by non-Nix tools, or of bugs
-in Nix itself.</para>
-
-<para>This operation has the following options:
-
-<variablelist>
-
-  <varlistentry><term><option>--check-contents</option></term>
-
-    <listitem><para>Checks that the contents of every valid store path
-    has not been altered by computing a SHA-256 hash of the contents
-    and comparing it with the hash stored in the Nix database at build
-    time.  Paths that have been modified are printed out.  For large
-    stores, <option>--check-contents</option> is obviously quite
-    slow.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--repair</option></term>
-
-    <listitem><para>If any valid path is missing from the store, or
-    (if <option>--check-contents</option> is given) the contents of a
-    valid path has been modified, then try to repair the path by
-    redownloading it.  See <command>nix-store --repair-path</command>
-    for details.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</para>
-
-</refsection>
-
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--verify-path</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--verify-path</option></arg>
-    <arg choice="plain" rep="repeat"><replaceable>paths</replaceable></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--verify-path</option> compares the
-contents of the given store paths to their cryptographic hashes stored
-in Nix&#x2019;s database.  For every changed path, it prints a warning
-message.  The exit status is 0 if no path has changed, and 1
-otherwise.</para>
-
-</refsection>
-
-<refsection><title>Example</title>
-
-<para>To verify the integrity of the <command>svn</command> command and all its dependencies:
-
-<screen>
-$ nix-store --verify-path $(nix-store -qR $(which svn))
-</screen>
-
-</para>
-
-</refsection>
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--repair-path</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--repair-path</option></arg>
-    <arg choice="plain" rep="repeat"><replaceable>paths</replaceable></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--repair-path</option> attempts to
-&#x201C;repair&#x201D; the specified paths by redownloading them using the available
-substituters.  If no substitutes are available, then repair is not
-possible.</para>
-
-<warning><para>During repair, there is a very small time window during
-which the old path (if it exists) is moved out of the way and replaced
-with the new path.  If repair is interrupted in between, then the
-system may be left in a broken state (e.g., if the path contains a
-critical system component like the GNU C Library).</para></warning>
-
-</refsection>
-
-<refsection><title>Example</title>
-
-<screen>
-$ nix-store --verify-path /nix/store/dj7a81wsm1ijwwpkks3725661h3263p5-glibc-2.13
-path `/nix/store/dj7a81wsm1ijwwpkks3725661h3263p5-glibc-2.13' was modified!
-  expected hash `2db57715ae90b7e31ff1f2ecb8c12ec1cc43da920efcbe3b22763f36a1861588',
-  got `481c5aa5483ebc97c20457bb8bca24deea56550d3985cda0027f67fe54b808e4'
-
-$ nix-store --repair-path /nix/store/dj7a81wsm1ijwwpkks3725661h3263p5-glibc-2.13
-fetching path `/nix/store/d7a81wsm1ijwwpkks3725661h3263p5-glibc-2.13'...
-&#x2026;
-</screen>
-
-</refsection>
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection xml:id="refsec-nix-store-dump"><title>Operation <option>--dump</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--dump</option></arg>
-    <arg choice="plain"><replaceable>path</replaceable></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--dump</option> produces a NAR (Nix
-ARchive) file containing the contents of the file system tree rooted
-at <replaceable>path</replaceable>.  The archive is written to
-standard output.</para>
-
-<para>A NAR archive is like a TAR or Zip archive, but it contains only
-the information that Nix considers important.  For instance,
-timestamps are elided because all files in the Nix store have their
-timestamp set to 0 anyway.  Likewise, all permissions are left out
-except for the execute bit, because all files in the Nix store have
-644 or 755 permission.</para>
-
-<para>Also, a NAR archive is <emphasis>canonical</emphasis>, meaning
-that &#x201C;equal&#x201D; paths always produce the same NAR archive.  For instance,
-directory entries are always sorted so that the actual on-disk order
-doesn&#x2019;t influence the result.  This means that the cryptographic hash
-of a NAR dump of a path is usable as a fingerprint of the contents of
-the path.  Indeed, the hashes of store paths stored in Nix&#x2019;s database
-(see <link linkend="refsec-nix-store-query"><literal>nix-store -q
---hash</literal></link>) are SHA-256 hashes of the NAR dump of each
-store path.</para>
-
-<para>NAR archives support filenames of unlimited length and 64-bit
-file sizes.  They can contain regular files, directories, and symbolic
-links, but not other types of files (such as device nodes).</para>
-
-<para>A Nix archive can be unpacked using <literal>nix-store
---restore</literal>.</para>
-
-</refsection>
-
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--restore</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--restore</option></arg>
-    <arg choice="plain"><replaceable>path</replaceable></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--restore</option> unpacks a NAR archive
-to <replaceable>path</replaceable>, which must not already exist.  The
-archive is read from standard input.</para>
-
-</refsection>
-
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection xml:id="refsec-nix-store-export"><title>Operation <option>--export</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--export</option></arg>
-    <arg choice="plain" rep="repeat"><replaceable>paths</replaceable></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--export</option> writes a serialisation
-of the specified store paths to standard output in a format that can
-be imported into another Nix store with <command linkend="refsec-nix-store-import">nix-store --import</command>.  This
-is like <command linkend="refsec-nix-store-dump">nix-store
---dump</command>, except that the NAR archive produced by that command
-doesn&#x2019;t contain the necessary meta-information to allow it to be
-imported into another Nix store (namely, the set of references of the
-path).</para>
-
-<para>This command does not produce a <emphasis>closure</emphasis> of
-the specified paths, so if a store path references other store paths
-that are missing in the target Nix store, the import will fail.  To
-copy a whole closure, do something like
-
-<screen>
-$ nix-store --export $(nix-store -qR <replaceable>paths</replaceable>) &gt; out</screen>
-
-</para>
-
-<para>For an example of how <option>--export</option> and
-<option>--import</option> can be used, see the source of the <command linkend="sec-nix-copy-closure">nix-copy-closure</command>
-command.</para>
-
-</refsection>
-
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection xml:id="refsec-nix-store-import"><title>Operation <option>--import</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--import</option></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--import</option> reads a serialisation of
-a set of store paths produced by <command linkend="refsec-nix-store-export">nix-store --export</command> from
-standard input and adds those store paths to the Nix store.  Paths
-that already exist in the Nix store are ignored.  If a path refers to
-another path that doesn&#x2019;t exist in the Nix store, the import
-fails.</para>
-
-</refsection>
-
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--optimise</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--optimise</option></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--optimise</option> reduces Nix store disk
-space usage by finding identical files in the store and hard-linking
-them to each other.  It typically reduces the size of the store by
-something like 25-35%.  Only regular files and symlinks are
-hard-linked in this manner.  Files are considered identical when they
-have the same NAR archive serialisation: that is, regular files must
-have the same contents and permission (executable or non-executable),
-and symlinks must have the same contents.</para>
-
-<para>After completion, or when the command is interrupted, a report
-on the achieved savings is printed on standard error.</para>
-
-<para>Use <option>-vv</option> or <option>-vvv</option> to get some
-progress indication.</para>
-
-</refsection>
-
-<refsection><title>Example</title>
-
-<screen>
-$ nix-store --optimise
-hashing files in `/nix/store/qhqx7l2f1kmwihc9bnxs7rc159hsxnf3-gcc-4.1.1'
-<replaceable>...</replaceable>
-541838819 bytes (516.74 MiB) freed by hard-linking 54143 files;
-there are 114486 files with equal contents out of 215894 files in total
-</screen>
-
-</refsection>
-
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--read-log</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <group choice="req">
-      <arg choice="plain"><option>--read-log</option></arg>
-      <arg choice="plain"><option>-l</option></arg>
-    </group>
-    <arg choice="plain" rep="repeat"><replaceable>paths</replaceable></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--read-log</option> prints the build log
-of the specified store paths on standard output.  The build log is
-whatever the builder of a derivation wrote to standard output and
-standard error.  If a store path is not a derivation, the deriver of
-the store path is used.</para>
-
-<para>Build logs are kept in
-<filename>/nix/var/log/nix/drvs</filename>.  However, there is no
-guarantee that a build log is available for any particular store path.
-For instance, if the path was downloaded as a pre-built binary through
-a substitute, then the log is unavailable. If the log is not available
-locally, then <command>nix-store</command> will try to download the
-log from the servers specified in the Nix option
-<option>log-servers</option>. For example, if it&#x2019;s set to
-<literal>http://hydra.nixos.org/log</literal>, then Nix will check
-<literal>http://hydra.nixos.org/log/<replaceable>base-name</replaceable></literal>.</para>
-
-</refsection>
-
-<refsection><title>Example</title>
-
-<screen>
-$ nix-store -l $(which ktorrent)
-building /nix/store/dhc73pvzpnzxhdgpimsd9sw39di66ph1-ktorrent-2.2.1
-unpacking sources
-unpacking source archive /nix/store/p8n1jpqs27mgkjw07pb5269717nzf5f8-ktorrent-2.2.1.tar.gz
-ktorrent-2.2.1/
-ktorrent-2.2.1/NEWS
-<replaceable>...</replaceable>
-</screen>
-
-</refsection>
-
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--dump-db</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--dump-db</option></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--dump-db</option> writes a dump of the
-Nix database to standard output.  It can be loaded into an empty Nix
-store using <option>--load-db</option>.  This is useful for making
-backups and when migrating to different database schemas.</para>
-
-</refsection>
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--load-db</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--load-db</option></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--load-db</option> reads a dump of the Nix
-database created by <option>--dump-db</option> from standard input and
-loads it into the Nix database.</para>
-
-</refsection>
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--print-env</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--print-env</option></arg>
-    <arg choice="plain"><replaceable>drvpath</replaceable></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>The operation <option>--print-env</option> prints out the
-environment of a derivation in a format that can be evaluated by a
-shell.  The command line arguments of the builder are placed in the
-variable <envar>_args</envar>.</para>
-
-</refsection>
-
-<refsection><title>Example</title>
-
-<screen>
-$ nix-store --print-env $(nix-instantiate '&lt;nixpkgs&gt;' -A firefox)
-<replaceable>&#x2026;</replaceable>
-export src; src='/nix/store/plpj7qrwcz94z2psh6fchsi7s8yihc7k-firefox-12.0.source.tar.bz2'
-export stdenv; stdenv='/nix/store/7c8asx3yfrg5dg1gzhzyq2236zfgibnn-stdenv'
-export system; system='x86_64-linux'
-export _args; _args='-e /nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25c-default-builder.sh'
-</screen>
-
-</refsection>
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--query-failed-paths</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--query-failed-paths</option></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>If build failure caching is enabled through the
-<literal>build-cache-failure</literal> configuration option, the
-operation <option>--query-failed-paths</option> will print out all
-store paths that have failed to build.</para>
-
-</refsection>
-
-<refsection><title>Example</title>
-
-<screen>
-$ nix-store --query-failed-paths
-/nix/store/000zi5dcla86l92jn1g997jb06sidm7x-perl-PerlMagick-6.59
-/nix/store/0011iy7sfwbc1qj5a1f6ifjnbcdail8a-haskell-gitit-ghc7.0.4-0.8.1
-/nix/store/001c0yn1hkh86gprvrb46cxnz3pki7q3-gamin-0.1.10
-<replaceable>&#x2026;</replaceable>
-</screen>
-
-</refsection>
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection><title>Operation <option>--clear-failed-paths</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain"><option>--clear-failed-paths</option></arg>
-    <arg choice="plain" rep="repeat"><replaceable>paths</replaceable></arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>If build failure caching is enabled through the
-<literal>build-cache-failure</literal> configuration option, the
-operation <option>--clear-failed-paths</option> clears the &#x201C;failed&#x201D;
-state of the given store paths, allowing them to be built again.  This
-is useful if the failure was actually transient (e.g. because the disk
-was full).</para>
-
-<para>If a path denotes a derivation, its output paths are cleared.
-You can provide the argument <literal>*</literal> to clear all store
-paths.</para>
-
-</refsection>
-
-<refsection><title>Example</title>
-
-<screen>
-$ nix-store --clear-failed-paths /nix/store/000zi5dcla86l92jn1g997jb06sidm7x-perl-PerlMagick-6.59
-$ nix-store --clear-failed-paths *
-</screen>
-
-</refsection>
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection xml:id="rsec-nix-store-generate-binary-cache-key"><title>Operation <option>--generate-binary-cache-key</option></title>
-
-<refsection>
-  <title>Synopsis</title>
-  <cmdsynopsis>
-    <command>nix-store</command>
-    <arg choice="plain">
-      <option>--generate-binary-cache-key</option>
-      <option>key-name</option>
-      <option>secret-key-file</option>
-      <option>public-key-file</option>
-    </arg>
-  </cmdsynopsis>
-</refsection>
-
-<refsection><title>Description</title>
-
-<para>This command generates an <link xlink:href="http://ed25519.cr.yp.to/">Ed25519 key pair</link> that can
-be used to create a signed binary cache. It takes three mandatory
-parameters:
-
-<orderedlist>
-
-  <listitem><para>A key name, such as
-  <literal>cache.example.org-1</literal>, that is used to look up keys
-  on the client when it verifies signatures. It can be anything, but
-  it&#x2019;s suggested to use the host name of your cache
-  (e.g. <literal>cache.example.org</literal>) with a suffix denoting
-  the number of the key (to be incremented every time you need to
-  revoke a key).</para></listitem>
-
-  <listitem><para>The file name where the secret key is to be
-  stored.</para></listitem>
-
-  <listitem><para>The file name where the public key is to be
-  stored.</para></listitem>
-
-</orderedlist>
-
-For an example, see the manual page for <command linkend="sec-nix-push">nix-push</command>.</para>
-
-</refsection>
-
-</refsection>
-
-
-<!--######################################################################-->
-
-<refsection condition="manpage"><title>Environment variables</title>
-
-<variablelist>
-  <varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="env-NIX_PATH"><term><envar>NIX_PATH</envar></term>
-
-  <listitem>
-
-    <para>A colon-separated list of directories used to look up Nix
-    expressions enclosed in angle brackets (i.e.,
-    <literal>&lt;<replaceable>path</replaceable>&gt;</literal>).  For
-    instance, the value
-
-    <screen>
-/home/eelco/Dev:/etc/nixos</screen>
-
-    will cause Nix to look for paths relative to
-    <filename>/home/eelco/Dev</filename> and
-    <filename>/etc/nixos</filename>, in that order.  It is also
-    possible to match paths against a prefix.  For example, the value
-
-    <screen>
-nixpkgs=/home/eelco/Dev/nixpkgs-branch:/etc/nixos</screen>
-
-    will cause Nix to search for
-    <literal>&lt;nixpkgs/<replaceable>path</replaceable>&gt;</literal> in
-    <filename>/home/eelco/Dev/nixpkgs-branch/<replaceable>path</replaceable></filename>
-    and
-    <filename>/etc/nixos/nixpkgs/<replaceable>path</replaceable></filename>.</para>
-
-    <para>If a path in the Nix search path starts with
-    <literal>http://</literal> or <literal>https://</literal>, it is
-    interpreted as the URL of a tarball that will be downloaded and
-    unpacked to a temporary location. The tarball must consist of a
-    single top-level directory. For example, setting
-    <envar>NIX_PATH</envar> to
-
-    <screen>
-nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz</screen>
-
-    tells Nix to download the latest revision in the Nixpkgs/NixOS
-    14.12 channel.</para>
-
-    <para>The search path can be extended using the <option linkend="opt-I">-I</option> option, which takes precedence over
-    <envar>NIX_PATH</envar>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_IGNORE_SYMLINK_STORE</envar></term>
-
-  <listitem>
-
-  <para>Normally, the Nix store directory (typically
-  <filename>/nix/store</filename>) is not allowed to contain any
-  symlink components.  This is to prevent &#x201C;impure&#x201D; builds.  Builders
-  sometimes &#x201C;canonicalise&#x201D; paths by resolving all symlink components.
-  Thus, builds on different machines (with
-  <filename>/nix/store</filename> resolving to different locations)
-  could yield different results.  This is generally not a problem,
-  except when builds are deployed to machines where
-  <filename>/nix/store</filename> resolves differently.  If you are
-  sure that you&#x2019;re not going to do that, you can set
-  <envar>NIX_IGNORE_SYMLINK_STORE</envar> to <envar>1</envar>.</para>
-
-  <para>Note that if you&#x2019;re symlinking the Nix store so that you can
-  put it on another file system than the root file system, on Linux
-  you&#x2019;re better off using <literal>bind</literal> mount points, e.g.,
-
-  <screen>
-$ mkdir /nix
-$ mount -o bind /mnt/otherdisk/nix /nix</screen>
-
-  Consult the <citerefentry><refentrytitle>mount</refentrytitle>
-  <manvolnum>8</manvolnum></citerefentry> manual page for details.</para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_STORE_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix store (default
-  <filename><replaceable>prefix</replaceable>/store</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_DATA_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix static data
-  directory (default
-  <filename><replaceable>prefix</replaceable>/share</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_LOG_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix log directory
-  (default <filename><replaceable>prefix</replaceable>/log/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_STATE_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix state directory
-  (default <filename><replaceable>prefix</replaceable>/var/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_DB_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix database (default
-  <filename><replaceable>$NIX_STATE_DIR</replaceable>/db</filename>, i.e.,
-  <filename><replaceable>prefix</replaceable>/var/nix/db</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_CONF_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix configuration
-  directory (default
-  <filename><replaceable>prefix</replaceable>/etc/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>TMPDIR</envar></term>
-
-  <listitem><para>Use the specified directory to store temporary
-  files.  In particular, this includes temporary build directories;
-  these can take up substantial amounts of disk space.  The default is
-  <filename>/tmp</filename>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="envar-build-hook"><term><envar>NIX_BUILD_HOOK</envar></term>
-
-  <listitem>
-
-  <para>Specifies the location of the <emphasis>build hook</emphasis>,
-  which is a program (typically some script) that Nix will call
-  whenever it wants to build a derivation.  This is used to implement
-  distributed builds<phrase condition="manual"> (see <xref linkend="chap-distributed-builds"/>)</phrase>.</para>
-
-  <!--
-  The protocol by
-  which the calling Nix process and the build hook communicate is as
-  follows.
-
-  <para>The build hook is called with the following command-line
-  arguments:
-
-  <orderedlist>
-
-    <listitem><para>A boolean value <literal>0</literal> or
-    <literal>1</literal> specifying whether Nix can locally execute
-    more builds, as per the <link
-    linkend="opt-max-jobs"><option>- -max-jobs</option> option</link>.
-    The purpose of this argument is to allow the hook to not have to
-    maintain bookkeeping for the local machine.</para></listitem>
-
-    <listitem><para>The Nix platform identifier for the local machine
-    (e.g., <literal>i686-linux</literal>).</para></listitem>
-
-    <listitem><para>The Nix platform identifier for the derivation,
-    i.e., its <link linkend="attr-system"><varname>system</varname>
-    attribute</link>.</para></listitem>
-
-    <listitem><para>The store path of the derivation.</para></listitem>
-
-  </orderedlist>
-
-  </para>
-
-  <para>On the basis of this information, and whatever persistent
-  state the build hook keeps about other machines and their current
-  load, it has to decide what to do with the build.  It should print
-  out on standard error one of the following responses (terminated by
-  a newline, <literal>"\n"</literal>):
-
-  <variablelist>
-
-    <varlistentry><term><literal># decline</literal></term>
-
-      <listitem><para>The build hook is not willing or able to perform
-      the build; the calling Nix process should do the build itself,
-      if possible.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal># postpone</literal></term>
-
-      <listitem><para>The build hook cannot perform the build now, but
-      can do so in the future (e.g., because all available build slots
-      on remote machines are in use).  The calling Nix process should
-      postpone this build until at least one currently running build
-      has terminated.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal># accept</literal></term>
-
-      <listitem><para>The build hook has accepted the
-      build.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  <para>After sending <literal># accept</literal>, the hook should
-  read one line from standard input, which will be the string
-  <literal>okay</literal>.  It can then proceed with the build.
-  Before sending <literal>okay</literal>, Nix will store in the hook’s
-  current directory a number of text files that contain information
-  about the derivation:
-
-  <variablelist>
-
-    <varlistentry><term><filename>inputs</filename></term>
-
-      <listitem><para>The set of store paths that are inputs to the
-      build process (one per line).  These have to be copied
-      <emphasis>to</emphasis> the remote machine (in addition to the
-      store derivation itself).</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><filename>outputs</filename></term>
-
-      <listitem><para>The set of store paths that are outputs of the
-      derivation (one per line).  These have to be copied
-      <emphasis>from</emphasis> the remote machine if the build
-      succeeds.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><filename>references</filename></term>
-
-      <listitem><para>The reference graph of the inputs, in the format
-      accepted by the command <command>nix-store
-      - -register-validity</command>.  It is necessary to run this
-      command on the remote machine after copying the inputs to inform
-      Nix on the remote machine that the inputs are valid
-      paths.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  <para>The hook should copy the inputs to the remote machine,
-  register the validity of the inputs, perform the remote build, and
-  copy the outputs back to the local machine.  An exit code other than
-  <literal>0</literal> indicates that the hook has failed.  An exit
-  code equal to 100 means that the remote build failed (as opposed to,
-  e.g., a network error).</para>
-  -->
-
-  </listitem>
-
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="envar-remote"><term><envar>NIX_REMOTE</envar></term>
-
-  <listitem><para>This variable should be set to
-  <literal>daemon</literal> if you want to use the Nix daemon to
-  execute Nix operations. This is necessary in <link linkend="ssec-multi-user">multi-user Nix installations</link>.
-  Otherwise, it should be left unset.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_SHOW_STATS</envar></term>
-
-  <listitem><para>If set to <literal>1</literal>, Nix will print some
-  evaluation statistics, such as the number of values
-  allocated.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_COUNT_CALLS</envar></term>
-
-  <listitem><para>If set to <literal>1</literal>, Nix will print how
-  often functions were called during Nix expression evaluation.  This
-  is useful for profiling your Nix expressions.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>GC_INITIAL_HEAP_SIZE</envar></term>
-
-  <listitem><para>If Nix has been configured to use the Boehm garbage
-  collector, this variable sets the initial size of the heap in bytes.
-  It defaults to 384 MiB.  Setting it to a low value reduces memory
-  consumption, but will increase runtime due to the overhead of
-  garbage collection.</para></listitem>
-
-</varlistentry>
-</variablelist>
-
-</refsection>
-
-
-</refentry>
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-utilities">
-
-<title>Utilities</title>
-
-<para>This section lists utilities that you can use when you
-work with Nix.</para>
-
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-channel">
-
-<refmeta>
-  <refentrytitle>nix-channel</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-channel</refname>
-  <refpurpose>manage Nix channels</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-channel</command>
-    <group choice="req">
-      <arg choice="plain"><option>--add</option> <replaceable>url</replaceable> <arg choice="opt"><replaceable>name</replaceable></arg></arg>
-      <arg choice="plain"><option>--remove</option> <replaceable>name</replaceable></arg>
-      <arg choice="plain"><option>--list</option></arg>
-      <arg choice="plain"><option>--update</option> <arg rep="repeat"><replaceable>names</replaceable></arg></arg>
-      <arg choice="plain"><option>--rollback</option> <arg choice="opt"><replaceable>generation</replaceable></arg></arg>
-    </group>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-<refsection><title>Description</title>
-
-<para>A Nix channel is mechanism that allows you to automatically stay
-up-to-date with a set of pre-built Nix expressions.  A Nix channel is
-just a URL that points to a place containing both a set of Nix
-expressions and a pointer to a binary cache.  <phrase condition="manual">See also <xref linkend="sec-channels"/>.</phrase></para>
-
-<para>This command has the following operations:
-
-<variablelist>
-
-  <varlistentry><term><option>--add</option> <replaceable>url</replaceable> [<replaceable>name</replaceable>]</term>
-
-    <listitem><para>Adds a channel named
-    <replaceable>name</replaceable> with URL
-    <replaceable>url</replaceable> to the list of subscribed channels.
-    If <replaceable>name</replaceable> is omitted, it defaults to the
-    last component of <replaceable>url</replaceable>, with the
-    suffixes <literal>-stable</literal> or
-    <literal>-unstable</literal> removed.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--remove</option> <replaceable>name</replaceable></term>
-
-    <listitem><para>Removes the channel named
-    <replaceable>name</replaceable> from the list of subscribed
-    channels.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--list</option></term>
-
-    <listitem><para>Prints the names and URLs of all subscribed
-    channels on standard output.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--update</option> [<replaceable>names</replaceable>&#x2026;]</term>
-
-    <listitem><para>Downloads the Nix expressions of all subscribed
-    channels (or only those included in
-    <replaceable>names</replaceable> if specified), makes them the
-    default for <command>nix-env</command> operations (by symlinking
-    them from the directory <filename>~/.nix-defexpr</filename>), and
-    performs a <command>nix-pull</command> on the manifests of all
-    channels to make pre-built binaries available.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--rollback</option> [<replaceable>generation</replaceable>]</term>
-
-    <listitem><para>Reverts the previous call to <command>nix-channel
-    --update</command>. Optionally, you can specify a specific channel
-    generation number to restore.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</para>
-
-<para>Note that <option>--add</option> does not automatically perform
-an update.</para>
-
-<para>The list of subscribed channels is stored in
-<filename>~/.nix-channels</filename>.</para>
-
-</refsection>
-
-<refsection><title>Examples</title>
-
-<para>To subscribe to the Nixpkgs channel and install the GNU Hello package:</para>
-
-<screen>
-$ nix-channel --add https://nixos.org/channels/nixpkgs-unstable
-$ nix-channel --update
-$ nix-env -iA nixpkgs.hello</screen>
-
-<para>You can revert channel updates using <option>--rollback</option>:</para>
-
-<screen>
-$ nix-instantiate --eval -E '(import &lt;nixpkgs&gt; {}).lib.nixpkgsVersion'
-"14.04.527.0e935f1"
-
-$ nix-channel --rollback
-switching from generation 483 to 482
-
-$ nix-instantiate --eval -E '(import &lt;nixpkgs&gt; {}).lib.nixpkgsVersion'
-"14.04.526.dbadfad"
-</screen>
-
-</refsection>
-
-<refsection><title>Files</title>
-
-<variablelist>
-
-  <varlistentry><term><filename>/nix/var/nix/profiles/per-user/<replaceable>username</replaceable>/channels</filename></term>
-
-    <listitem><para><command>nix-channel</command> uses a
-    <command>nix-env</command> profile to keep track of previous
-    versions of the subscribed channels. Every time you run
-    <command>nix-channel --update</command>, a new channel generation
-    (that is, a symlink to the channel Nix expressions in the Nix store)
-    is created. This enables <command>nix-channel --rollback</command>
-    to revert to previous versions.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><filename>~/.nix-defexpr/channels</filename></term>
-
-    <listitem><para>This is a symlink to
-    <filename>/nix/var/nix/profiles/per-user/<replaceable>username</replaceable>/channels</filename>. It
-    ensures that <command>nix-env</command> can find your channels. In
-    a multi-user installation, you may also have
-    <filename>~/.nix-defexpr/channels_root</filename>, which links to
-    the channels of the root user.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-<refsection><title>Channel format</title>
-
-<para>A channel URL should point to a directory containing the
-following files:</para>
-
-<variablelist>
-
-  <varlistentry><term><filename>nixexprs.tar.xz</filename></term>
-
-    <listitem><para>A tarball containing Nix expressions and files
-    referenced by them (such as build scripts and patches). At
-    top-level, the tarball should contain a single directory. That
-    directory must contain a file <filename>default.nix</filename>
-    that serves as the channel&#x2019;s &#x201C;entry point&#x201D;.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><filename>binary-cache-url</filename></term>
-
-    <listitem><para>A file containing the URL to a binary cache (such
-    as <uri>https://cache.nixos.org</uri>. Nix will automatically
-    check this cache for pre-built binaries, if the user has
-    sufficient rights to add binary caches. For instance, in a
-    multi-user Nix setup, the binary caches provided by the channels
-    of the root user are used automatically, but caches corresponding
-    to the channels of non-root users are ignored. Binary caches can
-    be created and maintained using
-    <command>nix-push</command>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><filename>MANIFEST.bz2</filename></term>
-
-    <listitem><para>(Deprecated in favour of binary caches.) A
-    manifest as created by <command>nix-push</command>. Only used if
-    <filename>binary-cache-url</filename> is not present or if the
-    <filename>nix.conf</filename> option
-    <option>force-manifest</option> is set.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-</refentry>
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-collect-garbage">
-  
-<refmeta>
-  <refentrytitle>nix-collect-garbage</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-collect-garbage</refname>
-  <refpurpose>delete unreachable store paths</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-collect-garbage</command>
-    <arg><option>--delete-old</option></arg>
-    <arg><option>-d</option></arg>
-    <arg><option>--delete-older-than</option> <replaceable>period</replaceable></arg>
-    <group choice="opt">
-      <arg choice="plain"><option>--print-roots</option></arg>
-      <arg choice="plain"><option>--print-live</option></arg>
-      <arg choice="plain"><option>--print-dead</option></arg>
-      <arg choice="plain"><option>--delete</option></arg>
-    </group>
-    <arg><option>--max-freed</option> <replaceable>bytes</replaceable></arg>
-    <arg><option>--dry-run</option></arg>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-<refsection><title>Description</title>
-
-<para>The command <command>nix-collect-garbage</command> is mostly an
-alias of <link linkend="rsec-nix-store-gc"><command>nix-store
---gc</command></link>, that is, it deletes all unreachable paths in
-the Nix store to clean up your system.  However, it provides two
-additional options: <option>-d</option> (<option>--delete-old</option>),
-which deletes all old generations of all profiles in
-<filename>/nix/var/nix/profiles</filename> by invoking
-<literal>nix-env --delete-generations old</literal> on all profiles
-(of course, this makes rollbacks to previous configurations
-impossible); and
-<option>--delete-older-than</option> <replaceable>period</replaceable>,
-where period is a value such as <literal>30d</literal>, which deletes
-all generations older than the specified number of days in all profiles
-in <filename>/nix/var/nix/profiles</filename> (except for the generations
-that were active at that point in time).
-</para>
-
-</refsection>
-
-<refsection><title>Example</title>
-
-<para>To delete from the Nix store everything that is not used by the
-current generations of each profile, do
-
-<screen>
-$ nix-collect-garbage -d</screen>
-
-</para>
-
-</refsection>
-
-</refentry>
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-nix-copy-closure">
-
-<refmeta>
-  <refentrytitle>nix-copy-closure</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-copy-closure</refname>
-  <refpurpose>copy a closure to or from a remote machine via SSH</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-copy-closure</command>
-    <group>
-      <arg choice="plain"><option>--to</option></arg>
-      <arg choice="plain"><option>--from</option></arg>
-    </group>
-    <arg><option>--sign</option></arg>
-    <arg><option>--gzip</option></arg>
-    <!--
-    <arg><option>- -show-progress</option></arg>
-    -->
-    <arg><option>--include-outputs</option></arg>
-    <arg><option>--use-substitutes</option></arg>
-    <arg><option>-s</option></arg>
-    <arg><option>-v</option></arg>
-    <arg choice="plain">
-      <replaceable>user@</replaceable><replaceable>machine</replaceable>
-    </arg>
-    <arg choice="plain"><replaceable>paths</replaceable></arg>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-
-<refsection><title>Description</title>
-
-<para><command>nix-copy-closure</command> gives you an easy and
-efficient way to exchange software between machines.  Given one or
-more Nix store <replaceable>paths</replaceable> on the local
-machine, <command>nix-copy-closure</command> computes the closure of
-those paths (i.e. all their dependencies in the Nix store), and copies
-all paths in the closure to the remote machine via the
-<command>ssh</command> (Secure Shell) command.  With the
-<option>--from</option>, the direction is reversed:
-the closure of <replaceable>paths</replaceable> on a remote machine is
-copied to the Nix store on the local machine.</para>
-
-<para>This command is efficient because it only sends the store paths
-that are missing on the target machine.</para>
-
-<para>Since <command>nix-copy-closure</command> calls
-<command>ssh</command>, you may be asked to type in the appropriate
-password or passphrase.  In fact, you may be asked
-<emphasis>twice</emphasis> because <command>nix-copy-closure</command>
-currently connects twice to the remote machine, first to get the set
-of paths missing on the target machine, and second to send the dump of
-those paths.  If this bothers you, use
-<command>ssh-agent</command>.</para>
-
-
-<refsection><title>Options</title>
-
-<variablelist>
-
-  <varlistentry><term><option>--to</option></term>
-
-    <listitem><para>Copy the closure of
-    <replaceable>paths</replaceable> from the local Nix store to the
-    Nix store on <replaceable>machine</replaceable>.  This is the
-    default.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--from</option></term>
-
-    <listitem><para>Copy the closure of
-    <replaceable>paths</replaceable> from the Nix store on
-    <replaceable>machine</replaceable> to the local Nix
-    store.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--sign</option></term>
-
-    <listitem><para>Let the sending machine cryptographically sign the
-    dump of each path with the key in
-    <filename><replaceable>sysconfdir</replaceable>/nix/signing-key.sec</filename>.
-    If the user on the target machine does not have direct access to
-    the Nix store (i.e., if the target machine has a multi-user Nix
-    installation), then the target machine will check the dump against
-    <filename><replaceable>sysconfdir</replaceable>/nix/signing-key.pub</filename>
-    before unpacking it in its Nix store.  This allows secure sharing
-    of store paths between untrusted users on two machines, provided
-    that there is a trust relation between the Nix installations on
-    both machines (namely, they have matching public/secret
-    keys).</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--gzip</option></term>
-
-    <listitem><para>Enable compression of the SSH
-    connection.</para></listitem>
-
-  </varlistentry>
-
-  <!--
-  <varlistentry><term><option>- -show-progress</option></term>
-
-    <listitem><para>Show the progress of each path's transfer as it's made.
-    This requires the <command>pv</command> utility to be in <envar>PATH</envar>.</para></listitem>
-
-  </varlistentry>
-  -->
-
-  <varlistentry><term><option>--include-outputs</option></term>
-
-    <listitem><para>Also copy the outputs of store derivations
-    included in the closure.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--use-substitutes</option> / <option>-s</option></term>
-
-    <listitem><para>Attempt to download missing paths on the target
-    machine using Nix&#x2019;s substitute mechanism.  Any paths that cannot
-    be substituted on the target are still copied normally from the
-    source.  This is useful, for instance, if the connection between
-    the source and target machine is slow, but the connection between
-    the target machine and <literal>nixos.org</literal> (the default
-    binary cache server) is fast.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>-v</option></term>
-
-    <listitem><para>Show verbose output.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Environment variables</title>
-
-<variablelist>
-
-  <varlistentry><term><envar>NIX_SSHOPTS</envar></term>
-
-    <listitem><para>Additional options to be passed to
-    <command>ssh</command> on the command line.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<para>Copy Firefox with all its dependencies to a remote machine:
-
-<screen>
-$ nix-copy-closure --to alice@itchy.labs $(type -tP firefox)</screen>
-
-</para>
-
-<para>Copy Subversion from a remote machine and then install it into a
-user environment:
-
-<screen>
-$ nix-copy-closure --from alice@itchy.labs \
-    /nix/store/0dj0503hjxy5mbwlafv1rsbdiyx1gkdy-subversion-1.4.4
-$ nix-env -i /nix/store/0dj0503hjxy5mbwlafv1rsbdiyx1gkdy-subversion-1.4.4
-</screen>
-
-</para>
-
-</refsection>
-
-
-</refsection>
-
-</refentry>
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-daemon">
-
-<refmeta>
-  <refentrytitle>nix-daemon</refentrytitle>
-  <manvolnum>8</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-daemon</refname>
-  <refpurpose>Nix multi-user support daemon</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-daemon</command>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-
-<refsection><title>Description</title>
-
-<para>The Nix daemon is necessary in multi-user Nix installations.  It
-performs build actions and other operations on the Nix store on behalf
-of unprivileged users.</para>
-
-
-</refsection>
-
-</refentry>
-<!--
-<xi:include href="nix-generate-patches.xml" />
--->
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-hash">
-  
-<refmeta>
-  <refentrytitle>nix-hash</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-hash</refname>
-  <refpurpose>compute the cryptographic hash of a path</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-hash</command>
-    <arg><option>--flat</option></arg>
-    <arg><option>--base32</option></arg>
-    <arg><option>--truncate</option></arg>
-    <arg><option>--type</option> <replaceable>hashAlgo</replaceable></arg>
-    <arg choice="plain" rep="repeat"><replaceable>path</replaceable></arg>
-  </cmdsynopsis>
-  <cmdsynopsis>
-    <command>nix-hash</command>
-    <arg choice="plain"><option>--to-base16</option></arg>
-    <arg choice="plain" rep="repeat"><replaceable>hash</replaceable></arg>
-  </cmdsynopsis>
-  <cmdsynopsis>
-    <command>nix-hash</command>
-    <arg choice="plain"><option>--to-base32</option></arg>
-    <arg choice="plain" rep="repeat"><replaceable>hash</replaceable></arg>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-
-<refsection><title>Description</title>
-
-<para>The command <command>nix-hash</command> computes the
-cryptographic hash of the contents of each
-<replaceable>path</replaceable> and prints it on standard output.  By
-default, it computes an MD5 hash, but other hash algorithms are
-available as well.  The hash is printed in hexadecimal.</para>
-
-<para>The hash is computed over a <emphasis>serialisation</emphasis>
-of each path: a dump of the file system tree rooted at the path.  This
-allows directories and symlinks to be hashed as well as regular files.
-The dump is in the <emphasis>NAR format</emphasis> produced by <link linkend="refsec-nix-store-dump"><command>nix-store</command>
-<option>--dump</option></link>.  Thus, <literal>nix-hash
-<replaceable>path</replaceable></literal> yields the same
-cryptographic hash as <literal>nix-store --dump
-<replaceable>path</replaceable> | md5sum</literal>.</para>
-
-</refsection>
-
-
-<refsection><title>Options</title>
-
-<variablelist>
-  
-  <varlistentry><term><option>--flat</option></term>
-
-    <listitem><para>Print the cryptographic hash of the contents of
-    each regular file <replaceable>path</replaceable>.  That is, do
-    not compute the hash over the dump of
-    <replaceable>path</replaceable>.  The result is identical to that
-    produced by the GNU commands <command>md5sum</command> and
-    <command>sha1sum</command>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--base32</option></term>
-
-    <listitem><para>Print the hash in a base-32 representation rather
-    than hexadecimal.  This base-32 representation is more compact and
-    can be used in Nix expressions (such as in calls to
-    <function>fetchurl</function>).</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--truncate</option></term>
-
-    <listitem><para>Truncate hashes longer than 160 bits (such as
-    SHA-256) to 160 bits.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--type</option> <replaceable>hashAlgo</replaceable></term>
-
-    <listitem><para>Use the specified cryptographic hash algorithm,
-    which can be one of <literal>md5</literal>,
-    <literal>sha1</literal>, and
-    <literal>sha256</literal>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--to-base16</option></term>
-
-    <listitem><para>Don&#x2019;t hash anything, but convert the base-32 hash
-    representation <replaceable>hash</replaceable> to
-    hexadecimal.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--to-base32</option></term>
-
-    <listitem><para>Don&#x2019;t hash anything, but convert the hexadecimal
-    hash representation <replaceable>hash</replaceable> to
-    base-32.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<para>Computing hashes:
-
-<screen>
-$ mkdir test
-$ echo "hello" &gt; test/world
-
-$ nix-hash test/ <lineannotation>(MD5 hash; default)</lineannotation>
-8179d3caeff1869b5ba1744e5a245c04
-
-$ nix-store --dump test/ | md5sum <lineannotation>(for comparison)</lineannotation>
-8179d3caeff1869b5ba1744e5a245c04  -
-
-$ nix-hash --type sha1 test/
-e4fd8ba5f7bbeaea5ace89fe10255536cd60dab6
-
-$ nix-hash --type sha1 --base32 test/
-nvd61k9nalji1zl9rrdfmsmvyyjqpzg4
-
-$ nix-hash --type sha256 --flat test/
-error: reading file `test/': Is a directory
-
-$ nix-hash --type sha256 --flat test/world
-5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03</screen>
-
-</para>
-
-<para>Converting between hexadecimal and base-32:
-
-<screen>
-$ nix-hash --type sha1 --to-base32 e4fd8ba5f7bbeaea5ace89fe10255536cd60dab6
-nvd61k9nalji1zl9rrdfmsmvyyjqpzg4
-
-$ nix-hash --type sha1 --to-base16 nvd61k9nalji1zl9rrdfmsmvyyjqpzg4
-e4fd8ba5f7bbeaea5ace89fe10255536cd60dab6</screen>
-
-</para>
-
-</refsection>
-
-
-</refentry>
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-install-package">
-
-<refmeta>
-  <refentrytitle>nix-install-package</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-install-package</refname>
-  <refpurpose>install a Nix Package file</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-install-package</command>
-    <arg><option>--non-interactive</option></arg>
-    <arg>
-      <group choice="req">
-        <arg choice="plain"><option>--profile</option></arg>
-        <arg choice="plain"><option>-p</option></arg>
-      </group>
-      <replaceable>path</replaceable>
-    </arg>
-    <arg><option>--set</option></arg>
-    <sbr/>
-    <group choice="req">
-      <arg choice="req">
-        <option>--url</option>
-        <arg choice="plain"><replaceable>url</replaceable></arg>
-      </arg>
-      <arg choice="req">
-        <arg choice="plain"><replaceable>file</replaceable></arg>
-      </arg>
-    </group>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-
-<refsection><title>Description</title>
-
-<para>The command <command>nix-install-package</command> interactively
-installs a Nix Package file (<filename>*.nixpkg</filename>), which is
-a small file that contains a store path to be installed along with the
-URL of a binary cache.  The Nix Package file is either
-<replaceable>file</replaceable>, or automatically downloaded from
-<replaceable>url</replaceable> if the <option>--url</option> switch is
-used.</para>
-
-<para><command>nix-install-package</command> is used in <link linkend="sec-one-click">one-click installs</link> to download and
-install pre-built binary packages with all necessary dependencies.
-<command>nix-install-package</command> is intended to be associated
-with the MIME type <literal>application/nix-package</literal> in a web
-browser so that it is invoked automatically when you click on
-<filename>*.nixpkg</filename> files.  When invoked, it restarts itself
-in a terminal window (since otherwise it would be invisible when run
-from a browser), asks the user to confirm whether to install the
-package, and if so downloads and installs the package into the user&#x2019;s
-current profile.</para>
-
-<para>To obtain a window, <command>nix-install-package</command> tries
-to restart itself with <command>xterm</command>,
-<command>konsole</command> and
-<command>gnome-terminal</command>.</para>
-
-</refsection>
-
-
-<refsection><title>Options</title>
-
-<variablelist>
-
-  <varlistentry><term><option>--non-interactive</option></term>
-
-    <listitem><para>Do not open a new terminal window and do not ask
-    for confirmation.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--profile</option></term>
-    <term><option>-p</option></term>
-
-    <listitem><para>Install the package into the specified profile
-    rather than the user&#x2019;s current profile.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--set</option></term>
-
-    <listitem><para>Install the package as the profile so that the
-    profile contains exactly the contents of the package.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<para>To install <filename>subversion-1.4.0.nixpkg</filename> into the
-user&#x2019;s current profile, without any prompting:
-
-<screen>
-$ nix-install-package --non-interactive subversion-1.4.0.nixpkg</screen>
-
-</para>
-
-<para>To install the same package from some URL into a different
-profile:
-
-<screen>
-$ nix-install-package --non-interactive -p /nix/var/nix/profiles/eelco \
-    --url http://nix.cs.uu.nl/dist/nix/nixpkgs-0.10pre6622/pkgs/subversion-1.4.0-i686-linux.nixpkg</screen>
-
-</para>
-
-</refsection>
-
-
-<refsection><title>Format of <literal>nixpkg</literal> files</title>
-
-<para>A Nix Package file consists of a single line with the following
-format:
-
-<screen>
-NIXPKG1 <replaceable>manifestURL</replaceable> <replaceable>name</replaceable> <replaceable>system</replaceable> <replaceable>drvPath</replaceable> <replaceable>outPath</replaceable></screen>
-
-The elements are as follows:
-
-<variablelist>
-
-  <varlistentry><term><literal>NIXPKG1</literal></term>
-
-    <listitem><para>The version of the Nix Package
-    file.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><replaceable>manifestURL</replaceable></term>
-
-    <listitem><para>The manifest to be pulled by
-    <command>nix-pull</command>.  The manifest must contain
-    <replaceable>outPath</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><replaceable>name</replaceable></term>
-
-    <listitem><para>The symbolic name and version of the
-    package.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><replaceable>system</replaceable></term>
-
-    <listitem><para>The platform identifier of the platform for which
-    this binary package is intended.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><replaceable>drvPath</replaceable></term>
-
-    <listitem><para>The path in the Nix store of the derivation from
-    which <replaceable>outPath</replaceable> was built.  Not currently
-    used.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><replaceable>outPath</replaceable></term>
-
-    <listitem><para>The path in the Nix store of the
-    package.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><replaceable>binaryCacheURL</replaceable></term>
-
-    <listitem><para>The URL of a binary cache containing the closure
-    of <replaceable>outPath</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</para>
-
-<para>An example follows:
-
-<screen>
-NIXPKG1 http://.../nixpkgs-0.10pre6622/MANIFEST subversion-1.4.0 i686-darwin \
-  /nix/store/4kh60jkp...-subversion-1.4.0.drv \
-  /nix/store/nkw7wpgb...-subversion-1.4.0</screen>
-
-(The line breaks (<literal>\</literal>) are for presentation purposes
-and not part of the actual file.)
-
-</para>
-
-</refsection>
-
-
-</refentry>
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-instantiate">
-
-<refmeta>
-  <refentrytitle>nix-instantiate</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-instantiate</refname>
-  <refpurpose>instantiate store derivations from Nix expressions</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-instantiate</command>
-    <group>
-      <arg choice="plain"><option>--parse</option></arg>
-      <arg choice="plain">
-        <option>--eval</option>
-        <arg><option>--strict</option></arg>
-        <arg><option>--xml</option></arg>
-      </arg>
-    </group>
-    <arg><option>--read-write-mode</option></arg>
-    <arg><option>--arg</option> <replaceable>name</replaceable> <replaceable>value</replaceable></arg>
-    <arg>
-      <group choice="req">
-        <arg choice="plain"><option>--attr</option></arg>
-        <arg choice="plain"><option>-A</option></arg>
-      </group>
-      <replaceable>attrPath</replaceable>
-    </arg>
-    <arg><option>--add-root</option> <replaceable>path</replaceable></arg>
-    <arg><option>--indirect</option></arg>
-    <group choice="req">
-      <arg choice="plain"><option>--expr</option></arg>
-      <arg choice="plain"><option>-E</option></arg>
-    </group>
-    <arg choice="plain" rep="repeat"><replaceable>files</replaceable></arg>
-  </cmdsynopsis>
-  <cmdsynopsis>
-    <command>nix-instantiate</command>
-    <arg choice="plain"><option>--find-file</option></arg>
-    <arg choice="plain" rep="repeat"><replaceable>files</replaceable></arg>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-
-<refsection><title>Description</title>
-
-<para>The command <command>nix-instantiate</command> generates <link linkend="gloss-derivation">store derivations</link> from (high-level)
-Nix expressions.  It evaluates the Nix expressions in each of
-<replaceable>files</replaceable> (which defaults to
-<replaceable>./default.nix</replaceable>).  Each top-level expression
-should evaluate to a derivation, a list of derivations, or a set of
-derivations.  The paths of the resulting store derivations are printed
-on standard output.</para>
-
-<para>If <replaceable>files</replaceable> is the character
-<literal>-</literal>, then a Nix expression will be read from standard
-input.</para>
-
-<para condition="manual">See also <xref linkend="sec-common-options"/> for a list of common options.</para>
-
-</refsection>
-
-
-<refsection><title>Options</title>
-
-<variablelist>
-
-  <varlistentry>
-    <term><option>--add-root</option> <replaceable>path</replaceable></term>
-    <term><option>--indirect</option></term>
-
-    <listitem><para>See the <link linkend="opt-add-root">corresponding
-    options</link> in <command>nix-store</command>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--parse</option></term>
-
-    <listitem><para>Just parse the input files, and print their
-    abstract syntax trees on standard output in ATerm
-    format.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--eval</option></term>
-
-    <listitem><para>Just parse and evaluate the input files, and print
-    the resulting values on standard output.  No instantiation of
-    store derivations takes place.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--find-file</option></term>
-
-    <listitem><para>Look up the given files in Nix&#x2019;s search path (as
-    specified by the <envar linkend="env-NIX_PATH">NIX_PATH</envar>
-    environment variable).  If found, print the corresponding absolute
-    paths on standard output.  For instance, if
-    <envar>NIX_PATH</envar> is
-    <literal>nixpkgs=/home/alice/nixpkgs</literal>, then
-    <literal>nix-instantiate --find-file nixpkgs/default.nix</literal>
-    will print
-    <literal>/home/alice/nixpkgs/default.nix</literal>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--xml</option></term>
-
-    <listitem><para>When used with <option>--parse</option> and
-    <option>--eval</option>, print the resulting expression as an
-    XML representation of the abstract syntax tree rather than as an
-    ATerm.  The schema is the same as that used by the <link linkend="builtin-toXML"><function>toXML</function>
-    built-in</link>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--json</option></term>
-
-    <listitem><para>When used with <option>--parse</option> and
-    <option>--eval</option>, print the resulting expression as an
-    JSON representation of the abstract syntax tree rather than as an
-    ATerm.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--strict</option></term>
-
-    <listitem><para>When used with <option>--eval</option>,
-    recursively evaluate list elements and attributes.  Normally, such
-    sub-expressions are left unevaluated (since the Nix expression
-    language is lazy).</para>
-
-    <warning><para>This option can cause non-termination, because lazy
-    data structures can be infinitely large.</para></warning>
-
-    </listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--read-write-mode</option></term>
-
-    <listitem><para>When used with <option>--eval</option>, perform
-    evaluation in read/write mode so nix language features that
-    require it will still work (at the cost of needing to do
-    instantiation of every evaluated derivation).</para>
-
-    </listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-<variablelist condition="manpage">
-  <varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--help</option></term>
-
-  <listitem><para>Prints out a summary of the command syntax and
-  exits.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--version</option></term>
-
-  <listitem><para>Prints out the Nix version number on standard output
-  and exits.</para></listitem>
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--verbose</option></term>
-  <term><option>-v</option></term>
-
-  <listitem>
-
-  <para>Increases the level of verbosity of diagnostic messages
-  printed on standard error.  For each Nix operation, the information
-  printed on standard output is well-defined; any diagnostic
-  information is printed on standard error, never on standard
-  output.</para>
-
-  <para>This option may be specified repeatedly.  Currently, the
-  following verbosity levels exist:</para>
-
-  <variablelist>
-
-    <varlistentry><term>0</term>
-    <listitem><para>&#x201C;Errors only&#x201D;: only print messages
-    explaining why the Nix invocation failed.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>1</term>
-    <listitem><para>&#x201C;Informational&#x201D;: print
-    <emphasis>useful</emphasis> messages about what Nix is doing.
-    This is the default.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>2</term>
-    <listitem><para>&#x201C;Talkative&#x201D;: print more informational
-    messages.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>3</term>
-    <listitem><para>&#x201C;Chatty&#x201D;: print even more
-    informational messages.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>4</term>
-    <listitem><para>&#x201C;Debug&#x201D;: print debug
-    information.</para></listitem>
-    </varlistentry>
-
-    <varlistentry><term>5</term>
-    <listitem><para>&#x201C;Vomit&#x201D;: print vast amounts of debug
-    information.</para></listitem>
-    </varlistentry>
-
-  </variablelist>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--no-build-output</option></term>
-  <term><option>-Q</option></term>
-
-  <listitem><para>By default, output written by builders to standard
-  output and standard error is echoed to the Nix command's standard
-  error.  This option suppresses this behaviour.  Note that the
-  builder's standard output and error are always written to a log file
-  in
-  <filename><replaceable>prefix</replaceable>/nix/var/log/nix</filename>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-max-jobs"><term><option>--max-jobs</option></term>
-  <term><option>-j</option></term>
-
-  <listitem><para>Sets the maximum number of build jobs that Nix will
-  perform in parallel to the specified number.  The default is
-  specified by the <link linkend="conf-build-max-jobs"><literal>build-max-jobs</literal></link>
-  configuration setting, which itself defaults to
-  <literal>1</literal>.  A higher value is useful on SMP systems or to
-  exploit I/O latency.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-cores"><term><option>--cores</option></term>
-
-  <listitem><para>Sets the value of the <envar>NIX_BUILD_CORES</envar>
-  environment variable in the invocation of builders.  Builders can
-  use this variable at their discretion to control the maximum amount
-  of parallelism.  For instance, in Nixpkgs, if the derivation
-  attribute <varname>enableParallelBuilding</varname> is set to
-  <literal>true</literal>, the builder passes the
-  <option>-j<replaceable>N</replaceable></option> flag to GNU Make.
-  It defaults to the value of the <link linkend="conf-build-cores"><literal>build-cores</literal></link>
-  configuration setting, if set, or <literal>1</literal> otherwise.
-  The value <literal>0</literal> means that the builder should use all
-  available CPU cores in the system.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-max-silent-time"><term><option>--max-silent-time</option></term>
-
-  <listitem><para>Sets the maximum number of seconds that a builder
-  can go without producing any data on standard output or standard
-  error.  The default is specified by the <link linkend="conf-build-max-silent-time"><literal>build-max-silent-time</literal></link>
-  configuration setting.  <literal>0</literal> means no
-  time-out.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-timeout"><term><option>--timeout</option></term>
-
-  <listitem><para>Sets the maximum number of seconds that a builder
-  can run.  The default is specified by the <link linkend="conf-build-timeout"><literal>build-timeout</literal></link>
-  configuration setting.  <literal>0</literal> means no
-  timeout.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--keep-going</option></term>
-  <term><option>-k</option></term>
-
-  <listitem><para>Keep going in case of failed builds, to the
-  greatest extent possible.  That is, if building an input of some
-  derivation fails, Nix will still build the other inputs, but not the
-  derivation itself.  Without this option, Nix stops if any build
-  fails (except for builds of substitutes), possibly killing builds in
-  progress (in case of parallel or distributed builds).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--keep-failed</option></term>
-  <term><option>-K</option></term>
-
-  <listitem><para>Specifies that in case of a build failure, the
-  temporary directory (usually in <filename>/tmp</filename>) in which
-  the build takes place should not be deleted.  The path of the build
-  directory is printed as an informational message.
-    </para>
-  </listitem>
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--fallback</option></term>
-
-  <listitem>
-
-  <para>Whenever Nix attempts to build a derivation for which
-  substitutes are known for each output path, but realising the output
-  paths through the substitutes fails, fall back on building the
-  derivation.</para>
-
-  <para>The most common scenario in which this is useful is when we
-  have registered substitutes in order to perform binary distribution
-  from, say, a network repository.  If the repository is down, the
-  realisation of the derivation will fail.  When this option is
-  specified, Nix will build the derivation instead.  Thus,
-  installation from binaries falls back on installation from source.
-  This option is not the default since it is generally not desirable
-  for a transient failure in obtaining the substitutes to lead to a
-  full build from source (with the related consumption of
-  resources).</para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--readonly-mode</option></term>
-
-  <listitem><para>When this option is used, no attempt is made to open
-  the Nix database.  Most Nix operations do need database access, so
-  those operations will fail.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-log-type"><term><option>--log-type</option>
-<replaceable>type</replaceable></term>
-
-  <listitem>
-
-  <para>This option determines how the output written to standard
-  error is formatted.  Nix&#x2019;s diagnostic messages are typically
-  <emphasis>nested</emphasis>.  For instance, when tracing Nix
-  expression evaluation (<command>nix-env -vvvvv</command>, messages
-  from subexpressions are nested inside their parent expressions.  Nix
-  builder output is also often nested.  For instance, the Nix Packages
-  generic builder nests the various build tasks (unpack, configure,
-  compile, etc.), and the GNU Make in <literal>stdenv-linux</literal>
-  has been patched to provide nesting for recursive Make
-  invocations.</para>
-
-  <para><replaceable>type</replaceable> can be one of the
-  following:
-
-  <variablelist>
-
-    <varlistentry><term><literal>pretty</literal></term>
-
-      <listitem><para>Pretty-print the output, indicating different
-      nesting levels using spaces.  This is the
-      default.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal>escapes</literal></term>
-
-      <listitem><para>Indicate nesting using escape codes that can be
-      interpreted by the <command>nix-log2xml</command> tool in the
-      Nix source distribution.  The resulting XML file can be fed into
-      the <command>log2html.xsl</command> stylesheet to create an HTML
-      file that can be browsed interactively, using JavaScript to
-      expand and collapse parts of the output.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal>flat</literal></term>
-
-      <listitem><para>Remove all nesting.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--arg</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>This option is accepted by
-  <command>nix-env</command>, <command>nix-instantiate</command> and
-  <command>nix-build</command>.  When evaluating Nix expressions, the
-  expression evaluator will automatically try to call functions that
-  it encounters.  It can automatically call functions for which every
-  argument has a <link linkend="ss-functions">default value</link>
-  (e.g., <literal>{ <replaceable>argName</replaceable> ?
-  <replaceable>defaultValue</replaceable> }:
-  <replaceable>...</replaceable></literal>).  With
-  <option>--arg</option>, you can also call functions that have
-  arguments without a default value (or override a default value).
-  That is, if the evaluator encounters a function with an argument
-  named <replaceable>name</replaceable>, it will call it with value
-  <replaceable>value</replaceable>.</para>
-
-  <para>For instance, the file
-  <literal>pkgs/top-level/all-packages.nix</literal> in Nixpkgs is
-  actually a function:
-
-<programlisting>
-{ # The system (e.g., `i686-linux') for which to build the packages.
-  system ? builtins.currentSystem
-  <replaceable>...</replaceable>
-}: <replaceable>...</replaceable></programlisting>
-
-  So if you call this Nix expression (e.g., when you do
-  <literal>nix-env -i <replaceable>pkgname</replaceable></literal>),
-  the function will be called automatically using the value <link linkend="builtin-currentSystem"><literal>builtins.currentSystem</literal></link>
-  for the <literal>system</literal> argument.  You can override this
-  using <option>--arg</option>, e.g., <literal>nix-env -i
-  <replaceable>pkgname</replaceable> --arg system
-  \"i686-freebsd\"</literal>.  (Note that since the argument is a Nix
-  string literal, you have to escape the quotes.)</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--argstr</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>This option is like <option>--arg</option>, only the
-  value is not a Nix expression but a string.  So instead of
-  <literal>--arg system \"i686-linux\"</literal> (the outer quotes are
-  to keep the shell happy) you can say <literal>--argstr system
-  i686-linux</literal>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-attr"><term><option>--attr</option> / <option>-A</option>
-<replaceable>attrPath</replaceable></term>
-
-  <listitem><para>Select an attribute from the top-level Nix
-  expression being evaluated.  (<command>nix-env</command>,
-  <command>nix-instantiate</command>, <command>nix-build</command> and
-  <command>nix-shell</command> only.)  The <emphasis>attribute
-  path</emphasis> <replaceable>attrPath</replaceable> is a sequence of
-  attribute names separated by dots.  For instance, given a top-level
-  Nix expression <replaceable>e</replaceable>, the attribute path
-  <literal>xorg.xorgserver</literal> would cause the expression
-  <literal><replaceable>e</replaceable>.xorg.xorgserver</literal> to
-  be used.  See <link linkend="refsec-nix-env-install-examples"><command>nix-env
-  --install</command></link> for some concrete examples.</para>
-
-  <para>In addition to attribute names, you can also specify array
-  indices.  For instance, the attribute path
-  <literal>foo.3.bar</literal> selects the <literal>bar</literal>
-  attribute of the fourth element of the array in the
-  <literal>foo</literal> attribute of the top-level
-  expression.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--expr</option> / <option>-E</option></term>
-
-  <listitem><para>Interpret the command line arguments as a list of
-  Nix expressions to be parsed and evaluated, rather than as a list
-  of file names of Nix expressions.
-  (<command>nix-instantiate</command>, <command>nix-build</command>
-  and <command>nix-shell</command> only.)</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--show-trace</option></term>
-
-  <listitem><para>Causes Nix to print out a stack trace in case of Nix
-  expression evaluation errors.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="opt-I"><term><option>-I</option> <replaceable>path</replaceable></term>
-
-  <listitem><para>Add a path to the Nix expression search path.  This
-  option may be given multiple times.  See the <envar linkend="env-NIX_PATH">NIX_PATH</envar> environment variable for
-  information on the semantics of the Nix search path.  Paths added
-  through <option>-I</option> take precedence over
-  <envar>NIX_PATH</envar>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--option</option> <replaceable>name</replaceable> <replaceable>value</replaceable></term>
-
-  <listitem><para>Set the Nix configuration option
-  <replaceable>name</replaceable> to <replaceable>value</replaceable>.
-  This overrides settings in the Nix configuration file (see
-  <citerefentry><refentrytitle>nix.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><option>--repair</option></term>
-
-  <listitem><para>Fix corrupted or missing store paths by
-  redownloading or rebuilding them.  Note that this is slow because it
-  requires computing a cryptographic hash of the contents of every
-  path in the closure of the build.  Also note the warning under
-  <command>nix-store --repair-path</command>.</para></listitem>
-
-</varlistentry>
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<para>Instantiating store derivations from a Nix expression, and
-building them using <command>nix-store</command>:
-
-<screen>
-$ nix-instantiate test.nix <lineannotation>(instantiate)</lineannotation>
-/nix/store/cigxbmvy6dzix98dxxh9b6shg7ar5bvs-perl-BerkeleyDB-0.26.drv
-
-$ nix-store -r $(nix-instantiate test.nix) <lineannotation>(build)</lineannotation>
-<replaceable>...</replaceable>
-/nix/store/qhqk4n8ci095g3sdp93x7rgwyh9rdvgk-perl-BerkeleyDB-0.26 <lineannotation>(output path)</lineannotation>
-
-$ ls -l /nix/store/qhqk4n8ci095g3sdp93x7rgwyh9rdvgk-perl-BerkeleyDB-0.26
-dr-xr-xr-x    2 eelco    users        4096 1970-01-01 01:00 lib
-...</screen>
-
-</para>
-
-<para>You can also give a Nix expression on the command line:
-
-<screen>
-$ nix-instantiate -E 'with import &lt;nixpkgs&gt; { }; hello'
-/nix/store/j8s4zyv75a724q38cb0r87rlczaiag4y-hello-2.8.drv
-</screen>
-
-This is equivalent to:
-
-<screen>
-$ nix-instantiate '&lt;nixpkgs&gt;' -A hello
-</screen>
-
-</para>
-
-<para>Parsing and evaluating Nix expressions:
-
-<screen>
-$ nix-instantiate --parse -E '1 + 2'
-1 + 2
-
-$ nix-instantiate --eval -E '1 + 2'
-3
-
-$ nix-instantiate --eval --xml -E '1 + 2'
-<![CDATA[<?xml version='1.0' encoding='utf-8'?>
-<expr>
-  <int value="3" />
-</expr>]]></screen>
-
-</para>
-
-<para>The difference between non-strict and strict evaluation:
-
-<screen>
-$ nix-instantiate --eval --xml -E 'rec { x = "foo"; y = x; }'
-<replaceable>...</replaceable><![CDATA[
-  <attr name="x">
-    <string value="foo" />
-  </attr>
-  <attr name="y">
-    <unevaluated />
-  </attr>]]>
-<replaceable>...</replaceable></screen>
-
-Note that <varname>y</varname> is left unevaluated (the XML
-representation doesn&#x2019;t attempt to show non-normal forms).
-
-<screen>
-$ nix-instantiate --eval --xml --strict -E 'rec { x = "foo"; y = x; }'
-<replaceable>...</replaceable><![CDATA[
-  <attr name="x">
-    <string value="foo" />
-  </attr>
-  <attr name="y">
-    <string value="foo" />
-  </attr>]]>
-<replaceable>...</replaceable></screen>
-
-</para>
-
-</refsection>
-
-
-<refsection condition="manpage"><title>Environment variables</title>
-
-<variablelist>
-  <varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="env-NIX_PATH"><term><envar>NIX_PATH</envar></term>
-
-  <listitem>
-
-    <para>A colon-separated list of directories used to look up Nix
-    expressions enclosed in angle brackets (i.e.,
-    <literal>&lt;<replaceable>path</replaceable>&gt;</literal>).  For
-    instance, the value
-
-    <screen>
-/home/eelco/Dev:/etc/nixos</screen>
-
-    will cause Nix to look for paths relative to
-    <filename>/home/eelco/Dev</filename> and
-    <filename>/etc/nixos</filename>, in that order.  It is also
-    possible to match paths against a prefix.  For example, the value
-
-    <screen>
-nixpkgs=/home/eelco/Dev/nixpkgs-branch:/etc/nixos</screen>
-
-    will cause Nix to search for
-    <literal>&lt;nixpkgs/<replaceable>path</replaceable>&gt;</literal> in
-    <filename>/home/eelco/Dev/nixpkgs-branch/<replaceable>path</replaceable></filename>
-    and
-    <filename>/etc/nixos/nixpkgs/<replaceable>path</replaceable></filename>.</para>
-
-    <para>If a path in the Nix search path starts with
-    <literal>http://</literal> or <literal>https://</literal>, it is
-    interpreted as the URL of a tarball that will be downloaded and
-    unpacked to a temporary location. The tarball must consist of a
-    single top-level directory. For example, setting
-    <envar>NIX_PATH</envar> to
-
-    <screen>
-nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz</screen>
-
-    tells Nix to download the latest revision in the Nixpkgs/NixOS
-    14.12 channel.</para>
-
-    <para>The search path can be extended using the <option linkend="opt-I">-I</option> option, which takes precedence over
-    <envar>NIX_PATH</envar>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_IGNORE_SYMLINK_STORE</envar></term>
-
-  <listitem>
-
-  <para>Normally, the Nix store directory (typically
-  <filename>/nix/store</filename>) is not allowed to contain any
-  symlink components.  This is to prevent &#x201C;impure&#x201D; builds.  Builders
-  sometimes &#x201C;canonicalise&#x201D; paths by resolving all symlink components.
-  Thus, builds on different machines (with
-  <filename>/nix/store</filename> resolving to different locations)
-  could yield different results.  This is generally not a problem,
-  except when builds are deployed to machines where
-  <filename>/nix/store</filename> resolves differently.  If you are
-  sure that you&#x2019;re not going to do that, you can set
-  <envar>NIX_IGNORE_SYMLINK_STORE</envar> to <envar>1</envar>.</para>
-
-  <para>Note that if you&#x2019;re symlinking the Nix store so that you can
-  put it on another file system than the root file system, on Linux
-  you&#x2019;re better off using <literal>bind</literal> mount points, e.g.,
-
-  <screen>
-$ mkdir /nix
-$ mount -o bind /mnt/otherdisk/nix /nix</screen>
-
-  Consult the <citerefentry><refentrytitle>mount</refentrytitle>
-  <manvolnum>8</manvolnum></citerefentry> manual page for details.</para>
-
-  </listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_STORE_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix store (default
-  <filename><replaceable>prefix</replaceable>/store</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_DATA_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix static data
-  directory (default
-  <filename><replaceable>prefix</replaceable>/share</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_LOG_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix log directory
-  (default <filename><replaceable>prefix</replaceable>/log/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_STATE_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix state directory
-  (default <filename><replaceable>prefix</replaceable>/var/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_DB_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix database (default
-  <filename><replaceable>$NIX_STATE_DIR</replaceable>/db</filename>, i.e.,
-  <filename><replaceable>prefix</replaceable>/var/nix/db</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_CONF_DIR</envar></term>
-
-  <listitem><para>Overrides the location of the Nix configuration
-  directory (default
-  <filename><replaceable>prefix</replaceable>/etc/nix</filename>).</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>TMPDIR</envar></term>
-
-  <listitem><para>Use the specified directory to store temporary
-  files.  In particular, this includes temporary build directories;
-  these can take up substantial amounts of disk space.  The default is
-  <filename>/tmp</filename>.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="envar-build-hook"><term><envar>NIX_BUILD_HOOK</envar></term>
-
-  <listitem>
-
-  <para>Specifies the location of the <emphasis>build hook</emphasis>,
-  which is a program (typically some script) that Nix will call
-  whenever it wants to build a derivation.  This is used to implement
-  distributed builds<phrase condition="manual"> (see <xref linkend="chap-distributed-builds"/>)</phrase>.</para>
-
-  <!--
-  The protocol by
-  which the calling Nix process and the build hook communicate is as
-  follows.
-
-  <para>The build hook is called with the following command-line
-  arguments:
-
-  <orderedlist>
-
-    <listitem><para>A boolean value <literal>0</literal> or
-    <literal>1</literal> specifying whether Nix can locally execute
-    more builds, as per the <link
-    linkend="opt-max-jobs"><option>- -max-jobs</option> option</link>.
-    The purpose of this argument is to allow the hook to not have to
-    maintain bookkeeping for the local machine.</para></listitem>
-
-    <listitem><para>The Nix platform identifier for the local machine
-    (e.g., <literal>i686-linux</literal>).</para></listitem>
-
-    <listitem><para>The Nix platform identifier for the derivation,
-    i.e., its <link linkend="attr-system"><varname>system</varname>
-    attribute</link>.</para></listitem>
-
-    <listitem><para>The store path of the derivation.</para></listitem>
-
-  </orderedlist>
-
-  </para>
-
-  <para>On the basis of this information, and whatever persistent
-  state the build hook keeps about other machines and their current
-  load, it has to decide what to do with the build.  It should print
-  out on standard error one of the following responses (terminated by
-  a newline, <literal>"\n"</literal>):
-
-  <variablelist>
-
-    <varlistentry><term><literal># decline</literal></term>
-
-      <listitem><para>The build hook is not willing or able to perform
-      the build; the calling Nix process should do the build itself,
-      if possible.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal># postpone</literal></term>
-
-      <listitem><para>The build hook cannot perform the build now, but
-      can do so in the future (e.g., because all available build slots
-      on remote machines are in use).  The calling Nix process should
-      postpone this build until at least one currently running build
-      has terminated.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><literal># accept</literal></term>
-
-      <listitem><para>The build hook has accepted the
-      build.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  <para>After sending <literal># accept</literal>, the hook should
-  read one line from standard input, which will be the string
-  <literal>okay</literal>.  It can then proceed with the build.
-  Before sending <literal>okay</literal>, Nix will store in the hook’s
-  current directory a number of text files that contain information
-  about the derivation:
-
-  <variablelist>
-
-    <varlistentry><term><filename>inputs</filename></term>
-
-      <listitem><para>The set of store paths that are inputs to the
-      build process (one per line).  These have to be copied
-      <emphasis>to</emphasis> the remote machine (in addition to the
-      store derivation itself).</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><filename>outputs</filename></term>
-
-      <listitem><para>The set of store paths that are outputs of the
-      derivation (one per line).  These have to be copied
-      <emphasis>from</emphasis> the remote machine if the build
-      succeeds.</para></listitem>
-
-    </varlistentry>
-
-    <varlistentry><term><filename>references</filename></term>
-
-      <listitem><para>The reference graph of the inputs, in the format
-      accepted by the command <command>nix-store
-      - -register-validity</command>.  It is necessary to run this
-      command on the remote machine after copying the inputs to inform
-      Nix on the remote machine that the inputs are valid
-      paths.</para></listitem>
-
-    </varlistentry>
-
-  </variablelist>
-
-  </para>
-
-  <para>The hook should copy the inputs to the remote machine,
-  register the validity of the inputs, perform the remote build, and
-  copy the outputs back to the local machine.  An exit code other than
-  <literal>0</literal> indicates that the hook has failed.  An exit
-  code equal to 100 means that the remote build failed (as opposed to,
-  e.g., a network error).</para>
-  -->
-
-  </listitem>
-
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook" xml:id="envar-remote"><term><envar>NIX_REMOTE</envar></term>
-
-  <listitem><para>This variable should be set to
-  <literal>daemon</literal> if you want to use the Nix daemon to
-  execute Nix operations. This is necessary in <link linkend="ssec-multi-user">multi-user Nix installations</link>.
-  Otherwise, it should be left unset.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_SHOW_STATS</envar></term>
-
-  <listitem><para>If set to <literal>1</literal>, Nix will print some
-  evaluation statistics, such as the number of values
-  allocated.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>NIX_COUNT_CALLS</envar></term>
-
-  <listitem><para>If set to <literal>1</literal>, Nix will print how
-  often functions were called during Nix expression evaluation.  This
-  is useful for profiling your Nix expressions.</para></listitem>
-
-</varlistentry><varlistentry xmlns="http://docbook.org/ns/docbook"><term><envar>GC_INITIAL_HEAP_SIZE</envar></term>
-
-  <listitem><para>If Nix has been configured to use the Boehm garbage
-  collector, this variable sets the initial size of the heap in bytes.
-  It defaults to 384 MiB.  Setting it to a low value reduces memory
-  consumption, but will increase runtime due to the overhead of
-  garbage collection.</para></listitem>
-
-</varlistentry>
-</variablelist>
-
-</refsection>
-
-
-</refentry>
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-prefetch-url">
-
-<refmeta>
-  <refentrytitle>nix-prefetch-url</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-prefetch-url</refname>
-  <refpurpose>copy a file from a URL into the store and print its hash</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-prefetch-url</command>
-    <arg><option>--type</option> <replaceable>hashAlgo</replaceable></arg>
-    <arg><option>--print-path</option></arg>
-    <arg choice="plain"><replaceable>url</replaceable></arg>
-    <arg><replaceable>hash</replaceable></arg>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-
-<refsection><title>Description</title>
-
-<para>The command <command>nix-prefetch-url</command> downloads the
-file referenced by the URL <replaceable>url</replaceable>, prints its
-cryptographic hash, and copies it into the Nix store.  The file name
-in the store is
-<filename><replaceable>hash</replaceable>-<replaceable>baseName</replaceable></filename>,
-where <replaceable>baseName</replaceable> is everything following the
-final slash in <replaceable>url</replaceable>.</para>
-
-<para>This command is just a convenience for Nix expression writers.
-Often a Nix expression fetches some source distribution from the
-network using the <literal>fetchurl</literal> expression contained in
-Nixpkgs.  However, <literal>fetchurl</literal> requires a
-cryptographic hash.  If you don't know the hash, you would have to
-download the file first, and then <literal>fetchurl</literal> would
-download it again when you build your Nix expression.  Since
-<literal>fetchurl</literal> uses the same name for the downloaded file
-as <command>nix-prefetch-url</command>, the redundant download can be
-avoided.</para>
-
-<para>If <replaceable>hash</replaceable> is specified, then a download
-is not performed if the Nix store already contains a file with the
-same hash and base name.  Otherwise, the file is downloaded, and an
-error if signaled if the actual hash of the file does not match the
-specified hash.</para>
-
-<para>This command prints the hash on standard output.  Additionally,
-if the option <option>--print-path</option> is used, the path of the
-downloaded file in the Nix store is also printed.</para>
-
-</refsection>
-
-
-<refsection><title>Options</title>
-
-<variablelist>
-
-  <varlistentry><term><option>--type</option> <replaceable>hashAlgo</replaceable></term>
-
-    <listitem><para>Use the specified cryptographic hash algorithm,
-    which can be one of <literal>md5</literal>,
-    <literal>sha1</literal>, and
-    <literal>sha256</literal>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--print-path</option></term>
-
-    <listitem><para>Print the store path of the downloaded file on
-    standard output.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--unpack</option></term>
-
-    <listitem><para>Unpack the archive (which must be a tarball or zip
-    file) and add the result to the Nix store. The resulting hash can
-    be used with functions such as Nixpkgs&#x2019;s
-    <varname>fetchzip</varname> or
-    <varname>fetchFromGitHub</varname>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--name</option></term>
-
-    <listitem><para>Override the name of the file in the Nix store. By
-    default, this is
-    <literal><replaceable>hash</replaceable>-<replaceable>basename</replaceable></literal>,
-    where <replaceable>basename</replaceable> is the last component of
-    <replaceable>url</replaceable>. Overriding the name is necessary
-    when <replaceable>basename</replaceable> contains characters that
-    are not allowed in Nix store paths.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<screen>
-$ nix-prefetch-url ftp://ftp.gnu.org/pub/gnu/hello/hello-2.10.tar.gz
-0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i
-
-$ nix-prefetch-url --print-path mirror://gnu/hello/hello-2.10.tar.gz
-0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i
-/nix/store/3x7dwzq014bblazs7kq20p9hyzz0qh8g-hello-2.10.tar.gz
-
-$ nix-prefetch-url --unpack --print-path https://github.com/NixOS/patchelf/archive/0.8.tar.gz
-079agjlv0hrv7fxnx9ngipx14gyncbkllxrp9cccnh3a50fxcmy7
-/nix/store/19zrmhm3m40xxaw81c8cqm6aljgrnwj2-0.8.tar.gz
-</screen>
-
-</refsection>
-
-
-</refentry>
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-pull">
-
-<refmeta>
-  <refentrytitle>nix-pull</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-pull</refname>
-  <refpurpose>register availability of pre-built binaries (deprecated)</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-pull</command>
-    <arg choice="plain"><replaceable>url</replaceable></arg>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-
-<refsection><title>Description</title>
-
-<note><para>This command and the use of manifests is deprecated. It is
-better to use binary caches.</para></note>
-
-<para>The command <command>nix-pull</command> obtains a list of
-pre-built store paths from the URL <replaceable>url</replaceable>, and
-for each of these store paths, registers a substitute derivation that
-downloads and unpacks it into the Nix store.  This is used to speed up
-installations: if you attempt to install something that has already
-been built and stored into the network cache, Nix can transparently
-re-use the pre-built store paths.</para>
-
-<para>The file at <replaceable>url</replaceable> must be compatible
-with the files created by <replaceable>nix-push</replaceable>.</para>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<screen>
-$ nix-pull https://nixos.org/releases/nixpkgs/nixpkgs-15.05pre54468.69858d7/MANIFEST</screen>
-
-</refsection>
-
-
-</refentry>
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-nix-push">
-
-<refmeta>
-  <refentrytitle>nix-push</refentrytitle>
-  <manvolnum>1</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix-push</refname>
-  <refpurpose>generate a binary cache</refpurpose>
-</refnamediv>
-
-<refsynopsisdiv>
-  <cmdsynopsis>
-    <command>nix-push</command>
-    <arg choice="plain"><option>--dest</option> <replaceable>dest-dir</replaceable></arg>
-    <arg><option>--bzip2</option></arg>
-    <arg><option>--none</option></arg>
-    <arg><option>--force</option></arg>
-    <arg><option>--link</option></arg>
-    <arg><option>--manifest</option></arg>
-    <arg><option>--manifest-path</option> <replaceable>filename</replaceable></arg>
-    <arg><option>--url-prefix</option> <replaceable>url</replaceable></arg>
-    <arg><option>--key-file</option> <replaceable>path</replaceable></arg>
-    <arg choice="plain" rep="repeat"><replaceable>paths</replaceable></arg>
-  </cmdsynopsis>
-</refsynopsisdiv>
-
-
-<refsection><title>Description</title>
-
-<para>The command <command>nix-push</command> produces a
-<emphasis>binary cache</emphasis>, a directory containing compressed
-Nix archives (NARs) plus some metadata of the closure of the specified
-store paths.  This directory can then be made available through a web
-server to other Nix installations, allowing them to skip building from
-source and instead download binaries from the cache
-automatically.</para>
-
-<para><command>nix-push</command> performs the following actions.
-
-<orderedlist>
-
-  <listitem><para>Each path in <replaceable>paths</replaceable> is
-  built (using <link linkend="rsec-nix-store-realise"><command>nix-store
-  --realise</command></link>).</para></listitem>
-
-  <listitem><para>All paths in the closure of
-  <replaceable>paths</replaceable> are determined (using
-  <command>nix-store --query --requisites
-  --include-outputs</command>).  Note that since the
-  <option>--include-outputs</option> flag is used, if
-  <replaceable>paths</replaceable> includes a store derivation, you
-  get a combined source/binary distribution (e.g., source tarballs
-  will be included).</para></listitem>
-
-  <listitem><para>All store paths determined in the previous step are
-  packaged into a NAR (using <command>nix-store --dump</command>) and
-  compressed using <command>xz</command> or <command>bzip2</command>.
-  The resulting files have the extension <filename>.nar.xz</filename>
-  or <filename>.nar.bz2</filename>.  Also for each store path, Nix
-  generates a file with extension <filename>.narinfo</filename>
-  containing metadata such as the references, cryptographic hash and
-  size of each path.</para></listitem>
-
-  <listitem><para>Optionally, a single <emphasis>manifest</emphasis>
-  file is created that contains the same metadata as the
-  <filename>.narinfo</filename> files.  This is for compatibility with
-  Nix versions prior to 1.2 (see <command>nix-pull</command> for
-  details).</para></listitem>
-
-  <listitem><para>A file named <option>nix-cache-info</option> is
-  placed in the destination directory.  The existence of this file
-  marks the directory as a binary cache.</para></listitem>
-
-</orderedlist>
-
-</para>
-
-</refsection>
-
-
-<refsection><title>Options</title>
-
-<variablelist>
-
-  <varlistentry><term><option>--dest</option> <replaceable>dest-dir</replaceable></term>
-
-    <listitem><para>Set the destination directory to
-    <replaceable>dir</replaceable>, which is created if it does not
-    exist.  This flag is required.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--bzip2</option></term>
-
-    <listitem><para>Compress NARs using <command>bzip2</command>
-    instead of <command>xz</command>.  The latter compresses about 30%
-    better on typical archives, decompresses about twice as fast, but
-    compresses a lot slower and is not supported by Nix prior to
-    version 1.2.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--none</option></term>
-
-    <listitem><para>Do not compress NARs.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--force</option></term>
-
-    <listitem><para>Overwrite <filename>.narinfo</filename> files if
-    they already exist.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--link</option></term>
-
-    <listitem><para>By default, NARs are generated in the Nix store
-    and then copied to <replaceable>dest-dir</replaceable>.  If this
-    option is given, hard links are used instead.  This only works if
-    <replaceable>dest-dir</replaceable> is on the same filesystem as
-    the Nix store.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--manifest</option></term>
-
-    <listitem><para>Force the generation of a manifest suitable for
-    use by <command>nix-pull</command>.  The manifest is stored as
-    <filename><replaceable>dest-dir</replaceable>/MANIFEST</filename>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--manifest-path</option> <replaceable>filename</replaceable></term>
-
-    <listitem><para>Like <option>--manifest</option>, but store the
-    manifest in <replaceable>filename</replaceable>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--url-prefix</option> <replaceable>url</replaceable></term>
-
-    <listitem><para>Manifests are expected to contain the absolute
-    URLs of NARs.  For generating these URLs, the prefix
-    <replaceable>url</replaceable> is used.  It defaults to
-    <uri>file://<replaceable>dest-dir</replaceable></uri>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><option>--key-file</option> <replaceable>path</replaceable></term>
-
-    <listitem><para>Sign the binary cache using the secret key stored
-    in <replaceable>path</replaceable>. This secret key must have been
-    created using <command linkend="rsec-nix-store-generate-binary-cache-key">nix-store
-    --generate-binary-cache-key</command>. Users of this binary cache
-    should add the corresponding public key to the option
-    <option>binary-cache-public-keys</option> in
-    <filename>nix.conf</filename>.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</refsection>
-
-
-<refsection><title>Examples</title>
-
-<para>To add the closure of Thunderbird to a binary cache:
-
-<screen>
-$ nix-push --dest /tmp/cache $(nix-build -A thunderbird)
-</screen>
-
-Assuming that <filename>/tmp/cache</filename> is exported by a web
-server as <uri>http://example.org/cache</uri>, you can then use this
-cache on another machine to speed up the installation of Thunderbird:
-
-<screen>
-$ nix-build -A thunderbird --option binary-caches http://example.org/cache
-</screen>
-
-Alternatively, you could add <literal>binary-caches =
-http://example.org/cache</literal> to
-<filename>nix.conf</filename>.</para>
-
-<para>To also include build-time dependencies (such as source
-tarballs):
-
-<screen>
-$ nix-push --dest /tmp/cache $(nix-instantiate -A thunderbird)
-</screen>
-
-</para>
-
-<para>To generate a manifest suitable for <command>nix-pull</command>:
-
-<screen>
-$ nix-push --dest /tmp/cache $(nix-build -A thunderbird) --manifest
-</screen>
-
-On another machine you can then do:
-
-<screen>
-$ nix-pull http://example.org/cache
-</screen>
-
-to cause the binaries to be used by subsequent Nix operations.</para>
-
-<para>To generate a signed binary cache, you must first generate a key
-pair, in this example called <literal>cache.example.org-1</literal>,
-storing the secret key in <filename>./sk</filename> and the public key
-in <filename>./pk</filename>:
-
-<screen>
-$ nix-store --generate-binary-cache-key cache.example.org-1 sk pk
-
-$ cat sk
-cache.example.org-1:jcMRQYFo8pQKzTtimpQLIPeHkMYZjfhB24hGfwF+u9PuX8H8FO7q564+X3G/JDlqqIqGar3OXRRwS9N3Wh3vbw==
-
-$ cat pk
-cache.example.org-1:7l/B/BTu6ueuPl9xvyQ5aqiKhmq9zl0UcEvTd1od728=
-</screen>
-
-You can then generate a binary cache signed with the secret key:
-
-<screen>
-$ nix-push --dest /tmp/cache --key-file ./sk $(type -p firefox)
-</screen>
-
-Users who wish to verify the integrity of binaries downloaded from
-your cache would add the following to their
-<filename>nix.conf</filename>:
-
-<programlisting>
-binary-caches = http://cache.example.org
-signed-binary-caches = *
-binary-cache-public-keys = cache.example.org-1:7l/B/BTu6ueuPl9xvyQ5aqiKhmq9zl0UcEvTd1od728=
-</programlisting>
-
-Nix will then ignore any binary that has a missing, incorrect or
-unrecognised signature.</para>
-
-</refsection>
-
-
-<refsection><title>Binary cache format and operation</title>
-
-<para>A binary cache with URL <replaceable>url</replaceable> only
-denotes a valid binary cache if the file
-<uri><replaceable>url</replaceable>/nix-cache-info</uri> exists.  If
-this file does not exist (or cannot be downloaded), the cache is
-ignored.  If it does exist, it must be a text file containing cache
-properties.  Here&#x2019;s an example:
-
-<screen>
-StoreDir: /nix/store
-WantMassQuery: 1
-Priority: 10
-</screen>
-
-The properties that are currently supported are:
-
-<variablelist>
-
-  <varlistentry><term><literal>StoreDir</literal></term>
-
-    <listitem><para>The path of the Nix store to which this binary
-    cache applies.  Binaries are not relocatable &#x2014; a binary built for
-    <filename>/nix/store</filename> won&#x2019;t generally work in
-    <filename>/home/alice/store</filename> &#x2014; so to prevent binaries
-    from being used in a wrong store, a binary cache is only used if
-    its <literal>StoreDir</literal> matches the local Nix
-    configuration.  The default is
-    <filename>/nix/store</filename>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><literal>WantMassQuery</literal></term>
-
-    <listitem><para>Query operations such as <command>nix-env
-    -qas</command> can cause thousands of cache queries, and thus
-    thousands of HTTP requests, to determine which packages are
-    available in binary form.  While these requests are small, not
-    every server may appreciate a potential onslaught of queries.  If
-    <literal>WantMassQuery</literal> is set to <literal>0</literal>
-    (default), &#x201C;mass queries&#x201D; such as <command>nix-env -qas</command>
-    will skip this cache.  Thus a package may appear not to have a
-    binary substitute.  However, the binary will still be used when
-    you actually install the package.  If
-    <literal>WantMassQuery</literal> is set to <literal>1</literal>,
-    mass queries will use this cache.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><literal>Priority</literal></term>
-
-    <listitem><para>Each binary cache has a priority (defaulting to
-    50).  Binary caches are checked for binaries in order of ascending
-    priority; thus a higher number denotes a lower priority.  The
-    binary cache <uri>https://cache.nixos.org</uri> has priority
-    40.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</para>
-
-<para>Every time Nix needs to build some store path
-<replaceable>p</replaceable>, it will check each configured binary
-cache to see if it has a NAR file for <replaceable>p</replaceable>,
-until it finds one.  If no cache has a NAR, Nix will fall back to
-building the path from source (if applicable).  To see if a cache with
-URL <replaceable>url</replaceable> has a binary for
-<replaceable>p</replaceable>, Nix fetches
-<replaceable>url/h</replaceable>, where <replaceable>h</replaceable>
-is the hash part of <replaceable>p</replaceable>.  Thus, if we have a
-cache <uri>https://cache.nixos.org</uri> and we want to obtain the
-store path
-<screen>
-/nix/store/a8922c0h87iilxzzvwn2hmv8x210aqb9-glibc-2.7
-</screen>
-then Nix will attempt to fetch
-<screen>
-https://cache.nixos.org/a8922c0h87iilxzzvwn2hmv8x210aqb9.narinfo
-</screen>
-(Commands such as <command>nix-env -qas</command> will issue an HTTP
-HEAD request, since it only needs to know if the
-<filename>.narinfo</filename> file exists.)  The
-<filename>.narinfo</filename> file is a simple text file that looks
-like this:
-
-<screen>
-StorePath: /nix/store/a8922c0h87iilxzzvwn2hmv8x210aqb9-glibc-2.7
-URL: nar/0zzjpdz46mdn74v09m053yczlz4am038g8r74iy8w43gx8801h70.nar.bz2
-Compression: bzip2
-FileHash: sha256:0zzjpdz46mdn74v09m053yczlz4am038g8r74iy8w43gx8801h70
-FileSize: 24473768
-NarHash: sha256:0s491y1h9hxj5ghiizlxk7ax6jwbha00zwn7lpyd5xg5bhf60vzg
-NarSize: 109521136
-References: 2ma2k0ys8knh4an48n28vigcmc2z8773-linux-headers-2.6.23.16 ...
-Deriver: 7akyyc87ka32xwmqza9dvyg5pwx3j212-glibc-2.7.drv
-Sig: cache.example.org-1:WepnSp2UT0odDpR3NRjPVhJBHmdBgSBSTbHpdh4SCz92nGXwFY82bkPEmISoC0hGqBXDXEmB6y3Ohgna3mMgDg==
-</screen>
-
-The fields are as follows:
-
-<variablelist>
-
-  <varlistentry><term><literal>StorePath</literal></term>
-
-    <listitem><para>The full store path, including the name part
-    (e.g., <literal>glibc-2.7</literal>).  It must match the
-    requested store path.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><literal>URL</literal></term>
-
-    <listitem><para>The URL of the NAR, relative to the binary cache
-    URL.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><literal>Compression</literal></term>
-
-    <listitem><para>The compression method; either
-    <literal>xz</literal> or
-    <literal>bzip2</literal>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><literal>FileHash</literal></term>
-
-    <listitem><para>The SHA-256 hash of the compressed
-    NAR.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><literal>FileSize</literal></term>
-
-    <listitem><para>The size of the compressed NAR.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><literal>NarHash</literal></term>
-
-    <listitem><para>The SHA-256 hash of the uncompressed NAR.  This is
-    equal to the hash of the store path as returned by
-    <command>nix-store -q --hash
-    <replaceable>p</replaceable></command>.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><literal>NarSize</literal></term>
-
-    <listitem><para>The size of the uncompressed NAR.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><literal>References</literal></term>
-
-    <listitem><para>The references of the store path, without the Nix
-    store prefix.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><literal>Deriver</literal></term>
-
-    <listitem><para>The deriver of the store path, without the Nix
-    store prefix.  This field is optional.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><literal>System</literal></term>
-
-    <listitem><para>The Nix platform type of this binary, if known.
-    This field is optional.</para></listitem>
-
-  </varlistentry>
-
-  <varlistentry><term><literal>Sig</literal></term>
-
-    <listitem><para>A signature of the the form
-    <literal><replaceable>key-name</replaceable>:<replaceable>sig</replaceable></literal>,
-    where <replaceable>key-name</replaceable> is the symbolic name of
-    the key pair used to sign and verify the cache
-    (e.g. <literal>cache.example.org-1</literal>), and
-    <replaceable>sig</replaceable> is the actual signature, computed
-    over the <varname>StorePath</varname>, <varname>NarHash</varname>,
-    <varname>NarSize</varname> and <varname>References</varname>
-    fields using the <link xlink:href="http://ed25519.cr.yp.to/">Ed25519 public-key signature
-    system</link>.</para></listitem>
-
-  </varlistentry>
-
-</variablelist>
-
-</para>
-
-<para>Thus, in our example, after recursively ensuring that the
-references exist (e.g.,
-<filename>/nix/store/2ma2k0ys8knh4an48n28vigcmc2z8773-linux-headers-2.6.23.16</filename>),
-Nix will fetch <screen>
-https://cache.nixos.org/nar/0zzjpdz46mdn74v09m053yczlz4am038g8r74iy8w43gx8801h70.nar.bz2
-</screen> and decompress and unpack it to
-<filename>/nix/store/a8922c0h87iilxzzvwn2hmv8x210aqb9-glibc-2.7</filename>.</para>
-
-</refsection>
-
-
-</refentry>
-
-</chapter>
-<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-files">
-
-<title>Files</title>
-
-<para>This section lists configuration files that you can use when you
-work with Nix.</para>
-
-<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-conf-file">
-
-<refmeta>
-  <refentrytitle>nix.conf</refentrytitle>
-  <manvolnum>5</manvolnum>
-  <refmiscinfo class="source">Nix</refmiscinfo>
-  <refmiscinfo class="version">1.11.15</refmiscinfo>
-</refmeta>
-
-<refnamediv>
-  <refname>nix.conf</refname>
-  <refpurpose>Nix configuration file</refpurpose>
-</refnamediv>
-
-<refsection><title>Description</title>
-
-<para>A number of persistent settings of Nix are stored in the file
-<filename><replaceable>sysconfdir</replaceable>/nix/nix.conf</filename>.
-This file is a list of <literal><replaceable>name</replaceable> =
-<replaceable>value</replaceable></literal> pairs, one per line.
-Comments start with a <literal>#</literal> character.  Here is an example
-configuration file:</para>
-
-<programlisting>
-gc-keep-outputs = true       # Nice for developers
-gc-keep-derivations = true   # Idem
-env-keep-derivations = false
-</programlisting>
-
-<para>You can override settings using the <option>--option</option>
-flag, e.g. <literal>--option gc-keep-outputs false</literal>.</para>
-
-<para>The following settings are currently available:
-
-<variablelist>
-
-
-  <varlistentry xml:id="conf-gc-keep-outputs"><term><literal>gc-keep-outputs</literal></term>
-
-    <listitem><para>If <literal>true</literal>, the garbage collector
-    will keep the outputs of non-garbage derivations.  If
-    <literal>false</literal> (default), outputs will be deleted unless
-    they are GC roots themselves (or reachable from other roots).</para>
-
-    <para>In general, outputs must be registered as roots separately.
-    However, even if the output of a derivation is registered as a
-    root, the collector will still delete store paths that are used
-    only at build time (e.g., the C compiler, or source tarballs
-    downloaded from the network).  To prevent it from doing so, set
-    this option to <literal>true</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-gc-keep-derivations"><term><literal>gc-keep-derivations</literal></term>
-
-    <listitem><para>If <literal>true</literal> (default), the garbage
-    collector will keep the derivations from which non-garbage store
-    paths were built.  If <literal>false</literal>, they will be
-    deleted unless explicitly registered as a root (or reachable from
-    other roots).</para>
-
-    <para>Keeping derivation around is useful for querying and
-    traceability (e.g., it allows you to ask with what dependencies or
-    options a store path was built), so by default this option is on.
-    Turn it off to save a bit of disk space (or a lot if
-    <literal>gc-keep-outputs</literal> is also turned on).</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>env-keep-derivations</literal></term>
-
-    <listitem><para>If <literal>false</literal> (default), derivations
-    are not stored in Nix user environments.  That is, the derivation
-    any build-time-only dependencies may be garbage-collected.</para>
-
-    <para>If <literal>true</literal>, when you add a Nix derivation to
-    a user environment, the path of the derivation is stored in the
-    user environment.  Thus, the derivation will not be
-    garbage-collected until the user environment generation is deleted
-    (<command>nix-env --delete-generations</command>).  To prevent
-    build-time-only dependencies from being collected, you should also
-    turn on <literal>gc-keep-outputs</literal>.</para>
-
-    <para>The difference between this option and
-    <literal>gc-keep-derivations</literal> is that this one is
-    &#x201C;sticky&#x201D;: it applies to any user environment created while this
-    option was enabled, while <literal>gc-keep-derivations</literal>
-    only applies at the moment the garbage collector is
-    run.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-build-max-jobs"><term><literal>build-max-jobs</literal></term>
-
-    <listitem><para>This option defines the maximum number of jobs
-    that Nix will try to build in parallel.  The default is
-    <literal>1</literal>.  You should generally set it to the number
-    of CPUs in your system (e.g., <literal>2</literal> on an Athlon 64
-    X2).  It can be overridden using the <option linkend="opt-max-jobs">--max-jobs</option> (<option>-j</option>)
-    command line switch.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-build-cores"><term><literal>build-cores</literal></term>
-
-    <listitem><para>Sets the value of the
-    <envar>NIX_BUILD_CORES</envar> environment variable in the
-    invocation of builders.  Builders can use this variable at their
-    discretion to control the maximum amount of parallelism.  For
-    instance, in Nixpkgs, if the derivation attribute
-    <varname>enableParallelBuilding</varname> is set to
-    <literal>true</literal>, the builder passes the
-    <option>-j<replaceable>N</replaceable></option> flag to GNU Make.
-    It can be overridden using the <option linkend="opt-cores">--cores</option> command line switch and
-    defaults to <literal>1</literal>.  The value <literal>0</literal>
-    means that the builder should use all available CPU cores in the
-    system.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-build-max-silent-time"><term><literal>build-max-silent-time</literal></term>
-
-    <listitem>
-
-      <para>This option defines the maximum number of seconds that a
-      builder can go without producing any data on standard output or
-      standard error.  This is useful (for instance in an automated
-      build system) to catch builds that are stuck in an infinite
-      loop, or to catch remote builds that are hanging due to network
-      problems.  It can be overridden using the <option linkend="opt-max-silent-time">--max-silent-time</option> command
-      line switch.</para>
-
-      <para>The value <literal>0</literal> means that there is no
-      timeout.  This is also the default.</para>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-build-timeout"><term><literal>build-timeout</literal></term>
-
-    <listitem>
-
-      <para>This option defines the maximum number of seconds that a
-      builder can run.  This is useful (for instance in an automated
-      build system) to catch builds that are stuck in an infinite loop
-      but keep writing to their standard output or standard error.  It
-      can be overridden using the <option linkend="opt-timeout">--timeout</option> command line
-      switch.</para>
-
-      <para>The value <literal>0</literal> means that there is no
-      timeout.  This is also the default.</para>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-build-max-log-size"><term><literal>build-max-log-size</literal></term>
-
-    <listitem>
-
-      <para>This option defines the maximum number of bytes that a
-      builder can write to its stdout/stderr.  If the builder exceeds
-      this limit, it&#x2019;s killed.  A value of <literal>0</literal> (the
-      default) means that there is no limit.</para>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-build-users-group"><term><literal>build-users-group</literal></term>
-
-    <listitem><para>This options specifies the Unix group containing
-    the Nix build user accounts.  In multi-user Nix installations,
-    builds should not be performed by the Nix account since that would
-    allow users to arbitrarily modify the Nix store and database by
-    supplying specially crafted builders; and they cannot be performed
-    by the calling user since that would allow him/her to influence
-    the build result.</para>
-
-    <para>Therefore, if this option is non-empty and specifies a valid
-    group, builds will be performed under the user accounts that are a
-    member of the group specified here (as listed in
-    <filename>/etc/group</filename>).  Those user accounts should not
-    be used for any other purpose!</para>
-
-    <para>Nix will never run two builds under the same user account at
-    the same time.  This is to prevent an obvious security hole: a
-    malicious user writing a Nix expression that modifies the build
-    result of a legitimate Nix expression being built by another user.
-    Therefore it is good to have as many Nix build user accounts as
-    you can spare.  (Remember: uids are cheap.)</para>
-
-    <para>The build users should have permission to create files in
-    the Nix store, but not delete them.  Therefore,
-    <filename>/nix/store</filename> should be owned by the Nix
-    account, its group should be the group specified here, and its
-    mode should be <literal>1775</literal>.</para>
-
-    <para>If the build users group is empty, builds will be performed
-    under the uid of the Nix process (that is, the uid of the caller
-    if <envar>NIX_REMOTE</envar> is empty, the uid under which the Nix
-    daemon runs if <envar>NIX_REMOTE</envar> is
-    <literal>daemon</literal>).  Obviously, this should not be used in
-    multi-user settings with untrusted users.</para>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>build-use-sandbox</literal></term>
-
-    <listitem><para>If set to <literal>true</literal>, builds will be
-    performed in a <emphasis>sandboxed environment</emphasis>, i.e.,
-    they&#x2019;re isolated from the normal file system hierarchy and will
-    only see their dependencies in the Nix store, the temporary build
-    directory, private versions of <filename>/proc</filename>,
-    <filename>/dev</filename>, <filename>/dev/shm</filename> and
-    <filename>/dev/pts</filename> (on Linux), and the paths configured with the
-    <link linkend="conf-build-sandbox-paths"><literal>build-sandbox-paths</literal>
-    option</link>. This is useful to prevent undeclared dependencies
-    on files in directories such as <filename>/usr/bin</filename>. In
-    addition, on Linux, builds run in private PID, mount, network, IPC
-    and UTS namespaces to isolate them from other processes in the
-    system (except that fixed-output derivations do not run in private
-    network namespace to ensure they can access the network).</para>
-
-    <para>Currently, sandboxing only work on Linux and Mac OS X. The use
-    of a sandbox requires that Nix is run as root (so you should use
-    the <link linkend="conf-build-users-group">&#x201C;build users&#x201D;
-    feature</link> to perform the actual builds under different users
-    than root).</para>
-
-    <para>If this option is set to <literal>relaxed</literal>, then
-    fixed-output derivations and derivations that have the
-    <varname>__noChroot</varname> attribute set to
-    <literal>true</literal> do not run in sandboxes.</para>
-
-    <para>The default is <literal>false</literal>.</para>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-build-sandbox-paths">
-    <term><literal>build-sandbox-paths</literal></term>
-
-    <listitem><para>A list of paths bind-mounted into Nix sandbox
-    environments. You can use the syntax
-    <literal><replaceable>target</replaceable>=<replaceable>source</replaceable></literal>
-    to mount a path in a different location in the sandbox; for
-    instance, <literal>/bin=/nix-bin</literal> will mount the path
-    <literal>/nix-bin</literal> as <literal>/bin</literal> inside the
-    sandbox. If <replaceable>source</replaceable> is followed by
-    <literal>?</literal>, then it is not an error if
-    <replaceable>source</replaceable> does not exist; for example,
-    <literal>/dev/nvidiactl?</literal> specifies that
-    <filename>/dev/nvidiactl</filename> will only be mounted in the
-    sandbox if it exists in the host filesystem.</para>
-
-    <para>Depending on how Nix was built, the default value for this option
-    may be empty or provide <filename>/bin/sh</filename> as a
-    bind-mount of <command>bash</command>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-build-extra-sandbox-paths">
-    <term><literal>build-extra-sandbox-paths</literal></term>
-
-    <listitem><para>A list of additional paths appended to
-    <option>build-sandbox-paths</option>. Useful if you want to extend
-    its default value.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>build-use-substitutes</literal></term>
-
-    <listitem><para>If set to <literal>true</literal> (default), Nix
-    will use binary substitutes if available.  This option can be
-    disabled to force building from source.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>build-fallback</literal></term>
-
-    <listitem><para>If set to <literal>true</literal>, Nix will fall
-    back to building from source if a binary substitute fails.  This
-    is equivalent to the <option>--fallback</option> flag.  The
-    default is <literal>false</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>build-cache-failure</literal></term>
-
-    <listitem><para>If set to <literal>true</literal>, Nix will
-    &#x201C;cache&#x201D; build failures, meaning that it will remember (in its
-    database) that a derivation previously failed.  If you then try to
-    build the derivation again, Nix will immediately fail rather than
-    perform the build again.  Failures in fixed-output derivations
-    (such as <function>fetchurl</function> calls) are never cached.
-    The &#x201C;failed&#x201D; status of a derivation can be cleared using
-    <command>nix-store --clear-failed-paths</command>.  By default,
-    failure caching is disabled.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>build-keep-log</literal></term>
-
-    <listitem><para>If set to <literal>true</literal> (the default),
-    Nix will write the build log of a derivation (i.e. the standard
-    output and error of its builder) to the directory
-    <filename>/nix/var/log/nix/drvs</filename>.  The build log can be
-    retrieved using the command <command>nix-store -l
-    <replaceable>path</replaceable></command>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>build-compress-log</literal></term>
-
-    <listitem><para>If set to <literal>true</literal> (the default),
-    build logs written to <filename>/nix/var/log/nix/drvs</filename>
-    will be compressed on the fly using bzip2.  Otherwise, they will
-    not be compressed.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>use-binary-caches</literal></term>
-
-    <listitem><para>If set to <literal>true</literal> (the default),
-    Nix will check the binary caches specified by
-    <option>binary-caches</option> and related options to obtain
-    binary substitutes.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>binary-caches</literal></term>
-
-    <listitem><para>A list of URLs of binary caches, separated by
-    whitespace.  The default is
-    <literal>https://cache.nixos.org</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>binary-caches-files</literal></term>
-
-    <listitem><para>A list of names of files that will be read to
-    obtain additional binary cache URLs.  The default is
-    <literal>/nix/var/nix/profiles/per-user/<replaceable>username</replaceable>/channels/binary-caches/*</literal>.
-    Note that when you&#x2019;re using the Nix daemon,
-    <replaceable>username</replaceable> is always equal to
-    <literal>root</literal>, so Nix will only use the binary caches
-    provided by the channels installed by root.  Do not set this
-    option to read files created by untrusted users!</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>trusted-binary-caches</literal></term>
-
-    <listitem><para>A list of URLs of binary caches, separated by
-    whitespace.  These are not used by default, but can be enabled by
-    users of the Nix daemon by specifying <literal>--option
-    binary-caches <replaceable>urls</replaceable></literal> on the
-    command line.  Unprivileged users are only allowed to pass a
-    subset of the URLs listed in <literal>binary-caches</literal> and
-    <literal>trusted-binary-caches</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>extra-binary-caches</literal></term>
-
-    <listitem><para>Additional binary caches appended to those
-    specified in <option>binary-caches</option> and
-    <option>binary-caches-files</option>.  When used by unprivileged
-    users, untrusted binary caches (i.e. those not listed in
-    <option>trusted-binary-caches</option>) are silently
-    ignored.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>signed-binary-caches</literal></term>
-
-    <listitem><para>If set to <literal>*</literal>, Nix will only
-    download binaries if they are signed using one of the keys listed
-    in <option>binary-cache-public-keys</option>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>binary-cache-public-keys</literal></term>
-
-    <listitem><para>A whitespace-separated list of public keys
-    corresponding to the secret keys trusted to sign binary
-    caches. For example:
-    <literal>cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
-    hydra.nixos.org-1:CNHJZBh9K4tP3EKF6FkkgeVYsS3ohTl+oS0Qa8bezVs=</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>binary-caches-parallel-connections</literal></term>
-
-    <listitem><para>The maximum number of parallel HTTP connections
-    used by the binary cache substituter to get NAR info files.  This
-    number should be high to minimise latency.  It defaults to
-    25.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>verify-https-binary-caches</literal></term>
-
-    <listitem><para>Whether HTTPS binary caches are required to have a
-    certificate that can be verified. Defaults to
-    <literal>true</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>force-manifest</literal></term>
-
-    <listitem><para>If this option is set to <literal>false</literal>
-    (default) and a Nix channel provides both a manifest and a binary
-    cache, only the binary cache will be used.  If set to
-    <literal>true</literal>, the manifest will be fetched as well.
-    This is useful if you want to use binary patches (which are
-    currently not supported by binary caches).</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>netrc-file</literal></term>
-
-    <listitem><para>If set to an absolute path to a <filename>netrc</filename>
-    file, Nix will use the HTTP authentication credentials in this file when
-    trying to download from a remote host through HTTP or HTTPS. Defaults to
-    <filename>$NIX_CONF_DIR/netrc</filename>.</para>
-
-    <para>The <filename>netrc</filename> file consists of a list of
-    accounts in the following format:
-
-<screen>
-machine <replaceable>my-machine</replaceable>
-login <replaceable>my-username</replaceable>
-password <replaceable>my-password</replaceable>
-</screen>
-
-    For the exact syntax, see <link xlink:href="https://ec.haxx.se/usingcurl-netrc.html">the
-    <literal>curl</literal> documentation.</link></para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>system</literal></term>
-
-    <listitem><para>This option specifies the canonical Nix system
-    name of the current installation, such as
-    <literal>i686-linux</literal> or
-    <literal>powerpc-darwin</literal>.  Nix can only build derivations
-    whose <literal>system</literal> attribute equals the value
-    specified here.  In general, it never makes sense to modify this
-    value from its default, since you can use it to &#x2018;lie&#x2019; about the
-    platform you are building on (e.g., perform a Mac OS build on a
-    Linux machine; the result would obviously be wrong).  It only
-    makes sense if the Nix binaries can run on multiple platforms,
-    e.g., &#x2018;universal binaries&#x2019; that run on <literal>powerpc-darwin</literal> and
-    <literal>i686-darwin</literal>.</para>
-
-    <para>It defaults to the canonical Nix system name detected by
-    <filename>configure</filename> at build time.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>fsync-metadata</literal></term>
-
-    <listitem><para>If set to <literal>true</literal>, changes to the
-    Nix store metadata (in <filename>/nix/var/nix/db</filename>) are
-    synchronously flushed to disk.  This improves robustness in case
-    of system crashes, but reduces performance.  The default is
-    <literal>true</literal>.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry><term><literal>auto-optimise-store</literal></term>
-
-    <listitem><para>If set to <literal>true</literal>, Nix
-    automatically detects files in the store that have identical
-    contents, and replaces them with hard links to a single copy.
-    This saves disk space.  If set to <literal>false</literal> (the
-    default), you can still run <command>nix-store
-    --optimise</command> to get rid of duplicate
-    files.</para></listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-connect-timeout"><term><literal>connect-timeout</literal></term>
-
-    <listitem>
-
-      <para>The timeout (in seconds) for establishing connections in
-      the binary cache substituter.  It corresponds to
-      <command>curl</command>&#x2019;s <option>--connect-timeout</option>
-      option.</para>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-log-servers"><term><literal>log-servers</literal></term>
-
-    <listitem>
-
-      <para>A list of URL prefixes (such as
-      <literal>http://hydra.nixos.org/log</literal>) from which
-      <command>nix-store -l</command> will try to fetch build logs if
-      they&#x2019;re not available locally.</para>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-trusted-users"><term><literal>trusted-users</literal></term>
-
-    <listitem>
-
-      <para>A list of names of users (separated by whitespace) that
-      have additional rights when connecting to the Nix daemon, such
-      as the ability to specify additional binary caches, or to import
-      unsigned NARs. You can also specify groups by prefixing them
-      with <literal>@</literal>; for instance,
-      <literal>@wheel</literal> means all users in the
-      <literal>wheel</literal> group. The default is
-      <literal>root</literal>.</para>
-
-      <warning><para>The users listed here have the ability to
-      compromise the security of a multi-user Nix store. For instance,
-      they could install Trojan horses subsequently executed by other
-      users. So you should consider carefully whether to add users to
-      this list.</para></warning>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-allowed-users"><term><literal>allowed-users</literal></term>
-
-    <listitem>
-
-      <para>A list of names of users (separated by whitespace) that
-      are allowed to connect to the Nix daemon. As with the
-      <option>trusted-users</option> option, you can specify groups by
-      prefixing them with <literal>@</literal>. Also, you can allow
-      all users by specifying <literal>*</literal>. The default is
-      <literal>*</literal>.</para>
-
-      <para>Note that trusted users are always allowed to connect.</para>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-restrict-eval"><term><literal>restrict-eval</literal></term>
-
-    <listitem>
-
-      <para>If set to <literal>true</literal>, the Nix evaluator will
-      not allow access to any files outside of the Nix search path (as
-      set via the <envar>NIX_PATH</envar> environment variable or the
-      <option>-I</option> option). The default is
-      <literal>false</literal>.</para>
-
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-pre-build-hook"><term><literal>pre-build-hook</literal></term>
-
-    <listitem>
-
-
-      <para>If set, the path to a program that can set extra
-      derivation-specific settings for this system. This is used for settings
-      that can't be captured by the derivation model itself and are too variable
-      between different versions of the same system to be hard-coded into nix.
-      </para>
-
-      <para>The hook is passed the derivation path and, if sandboxes are enabled,
-      the sandbox directory. It can then modify the sandbox and send a series of
-      commands to modify various settings to stdout. The currently recognized
-      commands are:</para>
-
-      <variablelist>
-        <varlistentry xml:id="extra-sandbox-paths">
-          <term><literal>extra-sandbox-paths</literal></term>
-
-          <listitem>
-
-            <para>Pass a list of files and directories to be included in the
-            sandbox for this build. One entry per line, terminated by an empty
-            line. Entries have the same format as
-            <literal>build-sandbox-paths</literal>.</para>
-
-          </listitem>
-
-        </varlistentry>
-      </variablelist>
-    </listitem>
-
-  </varlistentry>
-
-
-  <varlistentry xml:id="conf-build-repeat"><term><literal>build-repeat</literal></term>
-
-    <listitem><para>How many times to repeat builds to check whether
-    they are deterministic. The default value is 0. If the value is
-    non-zero, every build is repeated the specified number of
-    times. If the contents of any of the runs differs from the
-    previous ones, the build is rejected and the resulting store paths
-    are not registered as &#x201C;valid&#x201D; in Nix&#x2019;s database.</para></listitem>
-
-  </varlistentry>
-
-
-</variablelist>
-
-</para>
-
-</refsection>
-
-</refentry>
-
-</chapter>
-
-</part>
-  <appendix xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-troubleshooting" xml:base="troubleshooting/troubleshooting.xml">
-
-<title>Troubleshooting</title>
-
-<para>This section provides solutions for some common problems.  See
-the <link xlink:href="https://github.com/NixOS/nix/issues">Nix bug
-tracker</link> for a list of currently known issues.</para>
-
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-collisions-nixenv">
-
-<title>Collisions in <command>nix-env</command></title>
-
-<para>Symptom: when installing or upgrading, you get an error message such as
-
-<screen>
-$ nix-env -i docbook-xml
-...
-adding /nix/store/s5hyxgm62gk2...-docbook-xml-4.2
-collision between `/nix/store/s5hyxgm62gk2...-docbook-xml-4.2/xml/dtd/docbook/calstblx.dtd'
-  and `/nix/store/06h377hr4b33...-docbook-xml-4.3/xml/dtd/docbook/calstblx.dtd'
-  at /nix/store/...-builder.pl line 62.</screen>
-
-</para>
-
-<para>The cause is that two installed packages in the user environment
-have overlapping filenames (e.g.,
-<filename>xml/dtd/docbook/calstblx.dtd</filename>.  This usually
-happens when you accidentally try to install two versions of the same
-package.  For instance, in the example above, the Nix Packages
-collection contains two versions of <literal>docbook-xml</literal>, so
-<command>nix-env -i</command> will try to install both.  The default
-user environment builder has no way to way to resolve such conflicts,
-so it just gives up.</para>
-
-<para>Solution: remove one of the offending packages from the user
-environment (if already installed) using <command>nix-env
--e</command>, or specify exactly which version should be installed
-(e.g., <literal>nix-env -i docbook-xml-4.2</literal>).</para>
-
-<!-- FIXME: describe priorities -->
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-links-nix-store">
-
-<title><quote>Too many links</quote> Error in the Nix store</title>
-
-
-<para>Symptom: when building something, you get an error message such as
-
-<screen>
-...
-<literal>mkdir: cannot create directory `/nix/store/<replaceable>name</replaceable>': Too many links</literal></screen>
-
-</para>
-
-<para>This is usually because you have more than 32,000 subdirectories
-in <filename>/nix/store</filename>, as can be seen using <command>ls
--l</command>:
-
-<screen>
-$ ls -ld /nix/store
-drwxrwxrwt 32000 nix nix 4620288 Sep 8 15:08 store</screen>
-
-The <literal>ext2</literal> file system is limited to an inode link
-count of 32,000 (each subdirectory increasing the count by one).
-Furthermore, the <literal>st_nlink</literal> field of the
-<function>stat</function> system call is a 16-bit value.</para>
-
-<para>This only happens on very large Nix installations (such as build
-machines).</para>
-
-<para>Quick solution: run the garbage collector.  You may want to use
-the <option>--max-links</option> option.</para>
-
-<para>Real solution: put the Nix store on a file system that supports
-more than 32,000 subdirectories per directory, such as ext4.  (This
-doesn&#x2019;t solve the <literal>st_nlink</literal> limit, but ext4 lies to
-the kernel by reporting a link count of 1 if it exceeds the
-limit.)</para>
-
-</section>
-
-</appendix>
-  <appendix xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="glossary/glossary.xml">
-
-<title>Glossary</title>
-
-
-<glosslist>
-
-
-<glossentry xml:id="gloss-derivation"><glossterm>derivation</glossterm>
-
-  <glossdef><para>A description of a build action.  The result of a
-  derivation is a store object.  Derivations are typically specified
-  in Nix expressions using the <link linkend="ssec-derivation"><function>derivation</function>
-  primitive</link>.  These are translated into low-level
-  <emphasis>store derivations</emphasis> (implicitly by
-  <command>nix-env</command> and <command>nix-build</command>, or
-  explicitly by <command>nix-instantiate</command>).</para></glossdef>
-
-</glossentry>
-
-
-<glossentry><glossterm>store</glossterm>
-
-  <glossdef><para>The location in the file system where store objects
-  live.  Typically <filename>/nix/store</filename>.</para></glossdef>
-
-</glossentry>
-
-
-<glossentry><glossterm>store path</glossterm>
-
-  <glossdef><para>The location in the file system of a store object,
-  i.e., an immediate child of the Nix store
-  directory.</para></glossdef>
-
-</glossentry>
-
-
-<glossentry><glossterm>store object</glossterm>
-
-  <glossdef><para>A file that is an immediate child of the Nix store
-  directory.  These can be regular files, but also entire directory
-  trees.  Store objects can be sources (objects copied from outside of
-  the store), derivation outputs (objects produced by running a build
-  action), or derivations (files describing a build
-  action).</para></glossdef>
-
-</glossentry>
-
-
-<glossentry xml:id="gloss-substitute"><glossterm>substitute</glossterm>
-
-  <glossdef><para>A substitute is a command invocation stored in the
-  Nix database that describes how to build a store object, bypassing
-  normal the build mechanism (i.e., derivations).  Typically, the
-  substitute builds the store object by downloading a pre-built
-  version of the store object from some server.</para></glossdef>
-
-</glossentry>
-
-
-<glossentry><glossterm>purity</glossterm>
-
-  <glossdef><para>The assumption that equal Nix derivations when run
-  always produce the same output.  This cannot be guaranteed in
-  general (e.g., a builder can rely on external inputs such as the
-  network or the system time) but the Nix model assumes
-  it.</para></glossdef>
-
-</glossentry>
-
-
-<glossentry><glossterm>Nix expression</glossterm>
-
-  <glossdef><para>A high-level description of software packages and
-  compositions thereof.  Deploying software using Nix entails writing
-  Nix expressions for your packages.  Nix expressions are translated
-  to derivations that are stored in the Nix store.  These derivations
-  can then be built.</para></glossdef>
-
-</glossentry>
-
-
-<glossentry xml:id="gloss-reference"><glossterm>reference</glossterm>
-
-  <glossdef><para>A store path <varname>P</varname> is said to have a
-  reference to a store path <varname>Q</varname> if the store object
-  at <varname>P</varname> contains the path <varname>Q</varname>
-  somewhere.  This implies than an execution involving
-  <varname>P</varname> potentially needs <varname>Q</varname> to be
-  present.  The <emphasis>references</emphasis> of a store path are
-  the set of store paths to which it has a reference.</para></glossdef>
-
-</glossentry>
-
-
-<glossentry xml:id="gloss-closure"><glossterm>closure</glossterm>
-
-  <glossdef><para>The closure of a store path is the set of store
-  paths that are directly or indirectly &#x201C;reachable&#x201D; from that store
-  path; that is, it&#x2019;s the closure of the path under the <link linkend="gloss-reference">references</link> relation.  For instance,
-  if the store object at path <varname>P</varname> contains a
-  reference to path <varname>Q</varname>, then <varname>Q</varname> is
-  in the closure of <varname>P</varname>.  For correct deployment it
-  is necessary to deploy whole closures, since otherwise at runtime
-  files could be missing.  The command <command>nix-store
-  -qR</command> prints out closures of store paths.</para></glossdef>
-
-</glossentry>
-
-
-<glossentry xml:id="gloss-output-path"><glossterm>output path</glossterm>
-
-  <glossdef><para>A store path produced by a derivation.</para></glossdef>
-
-</glossentry>
-
-
-<glossentry xml:id="gloss-deriver"><glossterm>deriver</glossterm>
-
-  <glossdef><para>The deriver of an <link linkend="gloss-output-path">output path</link> is the store
-  derivation that built it.</para></glossdef>
-
-</glossentry>
-
-
-<glossentry xml:id="gloss-validity"><glossterm>validity</glossterm>
-
-  <glossdef><para>A store path is considered
-  <emphasis>valid</emphasis> if it exists in the file system, is
-  listed in the Nix database as being valid, and if all paths in its
-  closure are also valid.</para></glossdef>
-
-</glossentry>
-
-
-<glossentry xml:id="gloss-user-env"><glossterm>user environment</glossterm>
-
-  <glossdef><para>An automatically generated store object that
-  consists of a set of symlinks to &#x201C;active&#x201D; applications, i.e., other
-  store paths.  These are generated automatically by <link linkend="sec-nix-env"><command>nix-env</command></link>.  See <xref linkend="sec-profiles"/>.</para>
-
-  </glossdef>
-  
-</glossentry>
-
-
-<glossentry xml:id="gloss-profile"><glossterm>profile</glossterm>
-
-  <glossdef><para>A symlink to the current <link linkend="gloss-user-env">user environment</link> of a user, e.g.,
-  <filename>/nix/var/nix/profiles/default</filename>.</para></glossdef>
-
-</glossentry>
-
-
-<glossentry xml:id="gloss-nar"><glossterm>NAR</glossterm>
-
-  <glossdef><para>A <emphasis>N</emphasis>ix
-  <emphasis>AR</emphasis>chive.  This is a serialisation of a path in
-  the Nix store.  It can contain regular files, directories and
-  symbolic links.  NARs are generated and unpacked using
-  <command>nix-store --dump</command> and <command>nix-store
-  --restore</command>.</para></glossdef>
-
-</glossentry>
-
-
-
-</glosslist>
-
-
-</appendix>
-  <appendix xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="chap-hacking">
-
-<title>Hacking</title>
-
-<para>This section provides some notes on how to hack on Nix.  To get
-the latest version of Nix from GitHub:
-<screen>
-$ git clone git://github.com/NixOS/nix.git
-$ cd nix
-</screen>
-</para>
-
-<para>To build it and its dependencies:
-<screen>
-$ nix-build release.nix -A build.x86_64-linux
-</screen>
-</para>
-
-<para>To build all dependencies and start a shell in which all
-environment variables are set up so that those dependencies can be
-found:
-<screen>
-$ ./dev-shell
-</screen>
-To build Nix itself in this shell:
-<screen>
-[nix-shell]$ ./bootstrap.sh
-[nix-shell]$ configurePhase
-[nix-shell]$ make
-</screen>
-To test it:
-<screen>
-[nix-shell]$ make install
-[nix-shell]$ make installcheck
-</screen>
-
-</para>
-
-</appendix>
-  <appendix xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="sec-relnotes" xml:base="release-notes/release-notes.xml">
-
-<title>Nix Release Notes</title>
-
-<!--
-<partintro>
-<para>This section lists the release notes for each stable version of Nix.</para>
-</partintro>
--->
-
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.11.10">
-
-<title>Release 1.11.10 (2017-06-12)</title>
-
-<para>This release fixes a security bug in Nix&#x2019;s &#x201C;build user&#x201D; build
-isolation mechanism. Previously, Nix builders had the ability to
-create setuid binaries owned by a <literal>nixbld</literal>
-user. Such a binary could then be used by an attacker to assume a
-<literal>nixbld</literal> identity and interfere with subsequent
-builds running under the same UID.</para>
-
-<para>To prevent this issue, Nix now disallows builders to create
-setuid and setgid binaries. On Linux, this is done using a seccomp BPF
-filter. Note that this imposes a small performance penalty (e.g. 1%
-when building GNU Hello). Using seccomp, we now also prevent the
-creation of extended attributes and POSIX ACLs since these cannot be
-represented in the NAR format and (in the case of POSIX ACLs) allow
-bypassing regular Nix store permissions. On macOS, the restriction is
-implemented using the existing sandbox mechanism, which now uses a
-minimal &#x201C;allow all except the creation of setuid/setgid binaries&#x201D;
-profile when regular sandboxing is disabled. On other platforms, the
-&#x201C;build user&#x201D; mechanism is now disabled.</para>
-
-<para>Thanks go to Linus Heckemann for discovering and reporting this
-bug.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.11">
-
-<title>Release 1.11 (2016-01-19)</title>
-
-<para>This is primarily a bug fix release. It also has a number of new
-features:</para>
-
-<itemizedlist>
-
-  <listitem>
-    <para><command>nix-prefetch-url</command> can now download URLs
-    specified in a Nix expression. For example,
-
-<screen>
-$ nix-prefetch-url -A hello.src
-</screen>
-
-    will prefetch the file specified by the
-    <function>fetchurl</function> call in the attribute
-    <literal>hello.src</literal> from the Nix expression in the
-    current directory, and print the cryptographic hash of the
-    resulting file on stdout. This differs from <literal>nix-build -A
-    hello.src</literal> in that it doesn't verify the hash, and is
-    thus useful when you&#x2019;re updating a Nix expression.</para>
-
-    <para>You can also prefetch the result of functions that unpack a
-    tarball, such as <function>fetchFromGitHub</function>. For example:
-
-<screen>
-$ nix-prefetch-url --unpack https://github.com/NixOS/patchelf/archive/0.8.tar.gz
-</screen>
-
-    or from a Nix expression:
-
-<screen>
-$ nix-prefetch-url -A nix-repl.src
-</screen>
-
-    </para>
-
-  </listitem>
-
-  <listitem>
-    <para>The builtin function
-    <function>&lt;nix/fetchurl.nix&gt;</function> now supports
-    downloading and unpacking NARs. This removes the need to have
-    multiple downloads in the Nixpkgs stdenv bootstrap process (like a
-    separate busybox binary for Linux, or curl/mkdir/sh/bzip2 for
-    Darwin). Now all those files can be combined into a single NAR,
-    optionally compressed using <command>xz</command>.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix now supports SHA-512 hashes for verifying fixed-output
-    derivations, and in <function>builtins.hashString</function>.</para>
-  </listitem>
-
-  <listitem>
-    <para>
-      The new flag <option>--option build-repeat
-      <replaceable>N</replaceable></option> will cause every build to
-      be executed <replaceable>N</replaceable>+1 times. If the build
-      output differs between any round, the build is rejected, and the
-      output paths are not registered as valid. This is primarily
-      useful to verify build determinism. (We already had a
-      <option>--check</option> option to repeat a previously succeeded
-      build. However, with <option>--check</option>, non-deterministic
-      builds are registered in the DB. Preventing that is useful for
-      Hydra to ensure that non-deterministic builds don't end up
-      getting published to the binary cache.)
-    </para>
-  </listitem>
-
-  <listitem>
-    <para>
-      The options <option>--check</option> and <option>--option
-      build-repeat <replaceable>N</replaceable></option>, if they
-      detect a difference between two runs of the same derivation and
-      <option>-K</option> is given, will make the output of the other
-      run available under
-      <filename><replaceable>store-path</replaceable>-check</filename>. This
-      makes it easier to investigate the non-determinism using tools
-      like <command>diffoscope</command>, e.g.,
-
-<screen>
-$ nix-build pkgs/stdenv/linux -A stage1.pkgs.zlib --check -K
-error: derivation &#x2018;/nix/store/l54i8wlw2265&#x2026;-zlib-1.2.8.drv&#x2019; may not
-be deterministic: output &#x2018;/nix/store/11a27shh6n2i&#x2026;-zlib-1.2.8&#x2019;
-differs from &#x2018;/nix/store/11a27shh6n2i&#x2026;-zlib-1.2.8-check&#x2019;
-
-$ diffoscope /nix/store/11a27shh6n2i&#x2026;-zlib-1.2.8 /nix/store/11a27shh6n2i&#x2026;-zlib-1.2.8-check
-&#x2026;
-&#x251C;&#x2500;&#x2500; lib/libz.a
-&#x2502;   &#x251C;&#x2500;&#x2500; metadata
-&#x2502;   &#x2502; @@ -1,15 +1,15 @@
-&#x2502;   &#x2502; -rw-r--r-- 30001/30000   3096 Jan 12 15:20 2016 adler32.o
-&#x2026;
-&#x2502;   &#x2502; +rw-r--r-- 30001/30000   3096 Jan 12 15:28 2016 adler32.o
-&#x2026;
-</screen>
-
-    </para></listitem>
-
-  <listitem>
-    <para>Improved FreeBSD support.</para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-env -qa --xml --meta</command> now prints
-    license information.</para>
-  </listitem>
-
-  <listitem>
-    <para>The maximum number of parallel TCP connections that the
-    binary cache substituter will use has been decreased from 150 to
-    25. This should prevent upsetting some broken NAT routers, and
-    also improves performance.</para>
-  </listitem>
-
-  <listitem>
-    <para>All "chroot"-containing strings got renamed to "sandbox".
-      In particular, some Nix options got renamed, but the old names
-      are still accepted as lower-priority aliases.
-    </para>
-  </listitem>
-
-</itemizedlist>
-
-<para>This release has contributions from Anders Claesson, Anthony
-Cowley, Bj&#xF8;rn Forsman, Brian McKenna, Danny Wilson, davidak, Eelco Dolstra,
-Fabian Schmitthenner, FrankHB, Ilya Novoselov, janus, Jim Garrison, John
-Ericson, Jude Taylor, Ludovic Court&#xE8;s, Manuel Jacob, Mathnerd314,
-Pascal Wittmann, Peter Simons, Philip Potter, Preston Bennes, Rommel
-M. Martinez, Sander van der Burg, Shea Levy, Tim Cuthbertson, Tuomas
-Tynkkynen, Utku Demir and Vladim&#xED;r &#x10C;un&#xE1;t.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.10">
-
-<title>Release 1.10 (2015-09-03)</title>
-
-<para>This is primarily a bug fix release. It also has a number of new
-features:</para>
-
-<itemizedlist>
-
-  <listitem>
-    <para>A number of builtin functions have been added to reduce
-    Nixpkgs/NixOS evaluation time and memory consumption:
-    <function>all</function>,
-    <function>any</function>,
-    <function>concatStringsSep</function>,
-    <function>foldl&#x2019;</function>,
-    <function>genList</function>,
-    <function>replaceStrings</function>,
-    <function>sort</function>.
-    </para>
-  </listitem>
-
-  <listitem>
-    <para>The garbage collector is more robust when the disk is full.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix supports a new API for building derivations that doesn&#x2019;t
-    require a <literal>.drv</literal> file to be present on disk; it
-    only requires an in-memory representation of the derivation. This
-    is used by the Hydra continuous build system to make remote builds
-    more efficient.</para>
-  </listitem>
-
-  <listitem>
-    <para>The function <literal>&lt;nix/fetchurl.nix&gt;</literal> now
-    uses a <emphasis>builtin</emphasis> builder (i.e. it doesn&#x2019;t
-    require starting an external process; the download is performed by
-    Nix itself). This ensures that derivation paths don&#x2019;t change when
-    Nix is upgraded, and obviates the need for ugly hacks to support
-    chroot execution.</para>
-  </listitem>
-
-  <listitem>
-    <para><option>--version -v</option> now prints some configuration
-    information, in particular what compile-time optional features are
-    enabled, and the paths of various directories.</para>
-  </listitem>
-
-  <listitem>
-    <para>Build users have their supplementary groups set correctly.</para>
-  </listitem>
-
-</itemizedlist>
-
-<para>This release has contributions from Eelco Dolstra, Guillaume
-Maudoux, Iwan Aucamp, Jaka Hudoklin, Kirill Elagin, Ludovic Court&#xE8;s,
-Manolis Ragkousis, Nicolas B. Pierron and Shea Levy.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.9">
-
-<title>Release 1.9 (2015-06-12)</title>
-
-<para>In addition to the usual bug fixes, this release has the
-following new features:</para>
-
-<itemizedlist>
-
-  <listitem>
-    <para>Signed binary cache support. You can enable signature
-    checking by adding the following to <filename>nix.conf</filename>:
-
-<programlisting>
-signed-binary-caches = *
-binary-cache-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
-</programlisting>
-
-    This will prevent Nix from downloading any binary from the cache
-    that is not signed by one of the keys listed in
-    <option>binary-cache-public-keys</option>.</para>
-
-    <para>Signature checking is only supported if you built Nix with
-    the <literal>libsodium</literal> package.</para>
-
-    <para>Note that while Nix has had experimental support for signed
-    binary caches since version 1.7, this release changes the
-    signature format in a backwards-incompatible way.</para>
-
-  </listitem>
-
-  <listitem>
-
-    <para>Automatic downloading of Nix expression tarballs. In various
-    places, you can now specify the URL of a tarball containing Nix
-    expressions (such as Nixpkgs), which will be downloaded and
-    unpacked automatically. For example:</para>
-
-    <itemizedlist>
-
-      <listitem><para>In <command>nix-env</command>:
-
-<screen>
-$ nix-env -f https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz -iA firefox
-</screen>
-
-      This installs Firefox from the latest tested and built revision
-      of the NixOS 14.12 channel.</para></listitem>
-
-      <listitem><para>In <command>nix-build</command> and
-      <command>nix-shell</command>:
-
-<screen>
-$ nix-build https://github.com/NixOS/nixpkgs/archive/master.tar.gz -A hello
-</screen>
-
-      This builds GNU Hello from the latest revision of the Nixpkgs
-      master branch.</para></listitem>
-
-      <listitem><para>In the Nix search path (as specified via
-      <envar>NIX_PATH</envar> or <option>-I</option>). For example, to
-      start a shell containing the Pan package from a specific version
-      of Nixpkgs:
-
-<screen>
-$ nix-shell -p pan -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/8a3eea054838b55aca962c3fbde9c83c102b8bf2.tar.gz
-</screen>
-
-      </para></listitem>
-
-      <listitem><para>In <command>nixos-rebuild</command> (on NixOS):
-
-<screen>
-$ nixos-rebuild test -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-unstable.tar.gz
-</screen>
-
-      </para></listitem>
-
-      <listitem><para>In Nix expressions, via the new builtin function <function>fetchTarball</function>:
-
-<programlisting>
-with import (fetchTarball https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz) {}; &#x2026;
-</programlisting>
-
-      (This is not allowed in restricted mode.)</para></listitem>
-
-    </itemizedlist>
-
-  </listitem>
-
-  <listitem>
-
-    <para><command>nix-shell</command> improvements:</para>
-
-    <itemizedlist>
-
-      <listitem><para><command>nix-shell</command> now has a flag
-      <option>--run</option> to execute a command in the
-      <command>nix-shell</command> environment,
-      e.g. <literal>nix-shell --run make</literal>. This is like
-      the existing <option>--command</option> flag, except that it
-      uses a non-interactive shell (ensuring that hitting Ctrl-C won&#x2019;t
-      drop you into the child shell).</para></listitem>
-
-      <listitem><para><command>nix-shell</command> can now be used as
-      a <literal>#!</literal>-interpreter. This allows you to write
-      scripts that dynamically fetch their own dependencies. For
-      example, here is a Haskell script that, when invoked, first
-      downloads GHC and the Haskell packages on which it depends:
-
-<programlisting>
-#! /usr/bin/env nix-shell
-#! nix-shell -i runghc -p haskellPackages.ghc haskellPackages.HTTP
-
-import Network.HTTP
-
-main = do
-  resp &lt;- Network.HTTP.simpleHTTP (getRequest "http://nixos.org/")
-  body &lt;- getResponseBody resp
-  print (take 100 body)
-</programlisting>
-
-      Of course, the dependencies are cached in the Nix store, so the
-      second invocation of this script will be much
-      faster.</para></listitem>
-
-    </itemizedlist>
-
-  </listitem>
-
-  <listitem>
-
-    <para>Chroot improvements:</para>
-
-    <itemizedlist>
-
-      <listitem><para>Chroot builds are now supported on Mac OS X
-      (using its sandbox mechanism).</para></listitem>
-
-      <listitem><para>If chroots are enabled, they are now used for
-      all derivations, including fixed-output derivations (such as
-      <function>fetchurl</function>). The latter do have network
-      access, but can no longer access the host filesystem. If you
-      need the old behaviour, you can set the option
-      <option>build-use-chroot</option> to
-      <literal>relaxed</literal>.</para></listitem>
-
-      <listitem><para>On Linux, if chroots are enabled, builds are
-      performed in a private PID namespace once again. (This
-      functionality was lost in Nix 1.8.)</para></listitem>
-
-      <listitem><para>Store paths listed in
-      <option>build-chroot-dirs</option> are now automatically
-      expanded to their closure. For instance, if you want
-      <filename>/nix/store/&#x2026;-bash/bin/sh</filename> mounted in your
-      chroot as <filename>/bin/sh</filename>, you only need to say
-      <literal>build-chroot-dirs =
-      /bin/sh=/nix/store/&#x2026;-bash/bin/sh</literal>; it is no longer
-      necessary to specify the dependencies of Bash.</para></listitem>
-
-    </itemizedlist>
-
-  </listitem>
-
-  <listitem><para>The new derivation attribute
-  <varname>passAsFile</varname> allows you to specify that the
-  contents of derivation attributes should be passed via files rather
-  than environment variables. This is useful if you need to pass very
-  long strings that exceed the size limit of the environment. The
-  Nixpkgs function <function>writeTextFile</function> uses
-  this.</para></listitem>
-
-  <listitem><para>You can now use <literal>~</literal> in Nix file
-  names to refer to your home directory, e.g. <literal>import
-  ~/.nixpkgs/config.nix</literal>.</para></listitem>
-
-  <listitem><para>Nix has a new option <option>restrict-eval</option>
-  that allows limiting what paths the Nix evaluator has access to. By
-  passing <literal>--option restrict-eval true</literal> to Nix, the
-  evaluator will throw an exception if an attempt is made to access
-  any file outside of the Nix search path. This is primarily intended
-  for Hydra to ensure that a Hydra jobset only refers to its declared
-  inputs (and is therefore reproducible).</para></listitem>
-
-  <listitem><para><command>nix-env</command> now only creates a new
-  &#x201C;generation&#x201D; symlink in <filename>/nix/var/nix/profiles</filename>
-  if something actually changed.</para></listitem>
-
-  <listitem><para>The environment variable <envar>NIX_PAGER</envar>
-  can now be set to override <envar>PAGER</envar>. You can set it to
-  <literal>cat</literal> to disable paging for Nix commands
-  only.</para></listitem>
-
-  <listitem><para>Failing <literal>&lt;...&gt;</literal>
-  lookups now show position information.</para></listitem>
-
-  <listitem><para>Improved Boehm GC use: we disabled scanning for
-  interior pointers, which should reduce the &#x201C;<literal>Repeated
-  allocation of very large block</literal>&#x201D; warnings and associated
-  retention of memory.</para></listitem>
-
-</itemizedlist>
-
-<para>This release has contributions from aszlig, Benjamin Staffin,
-Charles Strahan, Christian Theune, Daniel Hahler, Danylo Hlynskyi
-Daniel Peebles, Dan Peebles, Domen Ko&#x17E;ar, Eelco Dolstra, Harald van
-Dijk, Hoang Xuan Phu, Jaka Hudoklin, Jeff Ramnani, j-keck, Linquize,
-Luca Bruno, Michael Merickel, Oliver Dunkl, Rob Vermaas, Rok Garbas,
-Shea Levy, Tobias Geerinckx-Rice and William A. Kennington III.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.8">
-
-<title>Release 1.8 (2014-12-14)</title>
-
-<itemizedlist>
-
-  <listitem><para>Breaking change: to address a race condition, the
-  remote build hook mechanism now uses <command>nix-store
-  --serve</command> on the remote machine. This requires build slaves
-  to be updated to Nix 1.8.</para></listitem>
-
-  <listitem><para>Nix now uses HTTPS instead of HTTP to access the
-  default binary cache,
-  <literal>cache.nixos.org</literal>.</para></listitem>
-
-  <listitem><para><command>nix-env</command> selectors are now regular
-  expressions. For instance, you can do
-
-<screen>
-$ nix-env -qa '.*zip.*'
-</screen>
-
-  to query all packages with a name containing
-  <literal>zip</literal>.</para></listitem>
-
-  <listitem><para><command>nix-store --read-log</command> can now
-  fetch remote build logs. If a build log is not available locally,
-  then &#x2018;nix-store -l&#x2019; will now try to download it from the servers
-  listed in the &#x2018;log-servers&#x2019; option in nix.conf. For instance, if you
-  have the configuration option
-
-<programlisting>
-log-servers = http://hydra.nixos.org/log
-</programlisting>
-
-then it will try to get logs from
-<literal>http://hydra.nixos.org/log/<replaceable>base name of the
-store path</replaceable></literal>. This allows you to do things like:
-
-<screen>
-$ nix-store -l $(which xterm)
-</screen>
-
-  and get a log even if <command>xterm</command> wasn't built
-  locally.</para></listitem>
-
-  <listitem><para>New builtin functions:
-  <function>attrValues</function>, <function>deepSeq</function>,
-  <function>fromJSON</function>, <function>readDir</function>,
-  <function>seq</function>.</para></listitem>
-
-  <listitem><para><command>nix-instantiate --eval</command> now has a
-  <option>--json</option> flag to print the resulting value in JSON
-  format.</para></listitem>
-
-  <listitem><para><command>nix-copy-closure</command> now uses
-  <command>nix-store --serve</command> on the remote side to send or
-  receive closures. This fixes a race condition between
-  <command>nix-copy-closure</command> and the garbage
-  collector.</para></listitem>
-
-  <listitem><para>Derivations can specify the new special attribute
-  <varname>allowedRequisites</varname>, which has a similar meaning to
-  <varname>allowedReferences</varname>. But instead of only enforcing
-  to explicitly specify the immediate references, it requires the
-  derivation to specify all the dependencies recursively (hence the
-  name, requisites) that are used by the resulting
-  output.</para></listitem>
-
-  <listitem><para>On Mac OS X, Nix now handles case collisions when
-  importing closures from case-sensitive file systems. This is mostly
-  useful for running NixOps on Mac OS X.</para></listitem>
-
-  <listitem><para>The Nix daemon has new configuration options
-  <option>allowed-users</option> (specifying the users and groups that
-  are allowed to connect to the daemon) and
-  <option>trusted-users</option> (specifying the users and groups that
-  can perform privileged operations like specifying untrusted binary
-  caches).</para></listitem>
-
-  <listitem><para>The configuration option
-  <option>build-max-jobs</option> now defaults to the number of
-  available CPU cores.</para></listitem>
-
-  <listitem><para>Build users are now used by default when Nix is
-  invoked as root. This prevents builds from accidentally running as
-  root.</para></listitem>
-
-  <listitem><para>Nix now includes systemd units and Upstart
-  jobs.</para></listitem>
-
-  <listitem><para>Speed improvements to <command>nix-store
-  --optimise</command>.</para></listitem>
-
-  <listitem><para>Language change: the <literal>==</literal> operator
-  now ignores string contexts (the &#x201C;dependencies&#x201D; of a
-  string).</para></listitem>
-
-  <listitem><para>Nix now filters out Nix-specific ANSI escape
-  sequences on standard error. They are supposed to be invisible, but
-  some terminals show them anyway.</para></listitem>
-
-  <listitem><para>Various commands now automatically pipe their output
-  into the pager as specified by the <envar>PAGER</envar> environment
-  variable.</para></listitem>
-
-  <listitem><para>Several improvements to reduce memory consumption in
-  the evaluator.</para></listitem>
-
-</itemizedlist>
-
-<para>This release has contributions from Adam Szkoda, Aristid
-Breitkreuz, Bob van der Linden, Charles Strahan, darealshinji, Eelco
-Dolstra, Gergely Risko, Joel Taylor, Ludovic Court&#xE8;s, Marko Durkovic,
-Mikey Ariel, Paul Colomiets, Ricardo M.  Correia, Ricky Elrod, Robert
-Helgesson, Rob Vermaas, Russell O'Connor, Shea Levy, Shell Turner,
-S&#xF6;nke Hahn, Steve Purcell, Vladim&#xED;r &#x10C;un&#xE1;t and Wout Mertens.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.7">
-
-<title>Release 1.7 (2014-04-11)</title>
-
-<para>In addition to the usual bug fixes, this release has the
-following new features:</para>
-
-<itemizedlist>
-
-  <listitem>
-    <para>Antiquotation is now allowed inside of quoted attribute
-    names (e.g. <literal>set."${foo}"</literal>). In the case where
-    the attribute name is just a single antiquotation, the quotes can
-    be dropped (e.g. the above example can be written
-    <literal>set.${foo}</literal>). If an attribute name inside of a
-    set declaration evaluates to <literal>null</literal> (e.g.
-    <literal>{ ${null} = false; }</literal>), then that attribute is
-    not added to the set.</para>
-  </listitem>
-
-  <listitem>
-    <para>Experimental support for cryptographically signed binary
-    caches.  See <link xlink:href="https://github.com/NixOS/nix/commit/0fdf4da0e979f992db75cc17376e455ddc5a96d8">the
-    commit for details</link>.</para>
-  </listitem>
-
-  <listitem>
-    <para>An experimental new substituter,
-    <command>download-via-ssh</command>, that fetches binaries from
-    remote machines via SSH.  Specifying the flags <literal>--option
-    use-ssh-substituter true --option ssh-substituter-hosts
-    <replaceable>user@hostname</replaceable></literal> will cause Nix
-    to download binaries from the specified machine, if it has
-    them.</para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-store -r</command> and
-    <command>nix-build</command> have a new flag,
-    <option>--check</option>, that builds a previously built
-    derivation again, and prints an error message if the output is not
-    exactly the same. This helps to verify whether a derivation is
-    truly deterministic.  For example:
-
-<screen>
-$ nix-build '&lt;nixpkgs&gt;' -A patchelf
-<replaceable>&#x2026;</replaceable>
-$ nix-build '&lt;nixpkgs&gt;' -A patchelf --check
-<replaceable>&#x2026;</replaceable>
-error: derivation `/nix/store/1ipvxs&#x2026;-patchelf-0.6' may not be deterministic:
-  hash mismatch in output `/nix/store/4pc1dm&#x2026;-patchelf-0.6.drv'
-</screen>
-
-    </para>
-
-  </listitem>
-
-  <listitem>
-    <para>The <command>nix-instantiate</command> flags
-    <option>--eval-only</option> and <option>--parse-only</option>
-    have been renamed to <option>--eval</option> and
-    <option>--parse</option>, respectively.</para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-instantiate</command>,
-    <command>nix-build</command> and <command>nix-shell</command> now
-    have a flag <option>--expr</option> (or <option>-E</option>) that
-    allows you to specify the expression to be evaluated as a command
-    line argument.  For instance, <literal>nix-instantiate --eval -E
-    '1 + 2'</literal> will print <literal>3</literal>.</para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-shell</command> improvements:</para>
-
-    <itemizedlist>
-
-      <listitem>
-        <para>It has a new flag, <option>--packages</option> (or
-        <option>-p</option>), that sets up a build environment
-        containing the specified packages from Nixpkgs. For example,
-        the command
-
-<screen>
-$ nix-shell -p sqlite xorg.libX11 hello
-</screen>
-
-        will start a shell in which the given packages are
-        present.</para>
-      </listitem>
-
-      <listitem>
-        <para>It now uses <filename>shell.nix</filename> as the
-        default expression, falling back to
-        <filename>default.nix</filename> if the former doesn&#x2019;t
-        exist.  This makes it convenient to have a
-        <filename>shell.nix</filename> in your project to set up a
-        nice development environment.</para>
-      </listitem>
-
-      <listitem>
-        <para>It evaluates the derivation attribute
-        <varname>shellHook</varname>, if set. Since
-        <literal>stdenv</literal> does not normally execute this hook,
-        it allows you to do <command>nix-shell</command>-specific
-        setup.</para>
-      </listitem>
-
-      <listitem>
-        <para>It preserves the user&#x2019;s timezone setting.</para>
-      </listitem>
-
-    </itemizedlist>
-
-  </listitem>
-
-  <listitem>
-    <para>In chroots, Nix now sets up a <filename>/dev</filename>
-    containing only a minimal set of devices (such as
-    <filename>/dev/null</filename>). Note that it only does this if
-    you <emphasis>don&#x2019;t</emphasis> have <filename>/dev</filename>
-    listed in your <option>build-chroot-dirs</option> setting;
-    otherwise, it will bind-mount the <literal>/dev</literal> from
-    outside the chroot.</para>
-
-    <para>Similarly, if you don&#x2019;t have <filename>/dev/pts</filename> listed
-    in <option>build-chroot-dirs</option>, Nix will mount a private
-    <literal>devpts</literal> filesystem on the chroot&#x2019;s
-    <filename>/dev/pts</filename>.</para>
-
-  </listitem>
-
-  <listitem>
-    <para>New built-in function: <function>builtins.toJSON</function>,
-    which returns a JSON representation of a value.</para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-env -q</command> has a new flag
-    <option>--json</option> to print a JSON representation of the
-    installed or available packages.</para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-env</command> now supports meta attributes with
-    more complex values, such as attribute sets.</para>
-  </listitem>
-
-  <listitem>
-    <para>The <option>-A</option> flag now allows attribute names with
-    dots in them, e.g.
-
-<screen>
-$ nix-instantiate --eval '&lt;nixos&gt;' -A 'config.systemd.units."nscd.service".text'
-</screen>
-
-    </para>
-  </listitem>
-
-  <listitem>
-    <para>The <option>--max-freed</option> option to
-    <command>nix-store --gc</command> now accepts a unit
-    specifier. For example, <literal>nix-store --gc --max-freed
-    1G</literal> will free up to 1 gigabyte of disk space.</para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-collect-garbage</command> has a new flag
-    <option>--delete-older-than</option>
-    <replaceable>N</replaceable><literal>d</literal>, which deletes
-    all user environment generations older than
-    <replaceable>N</replaceable> days.  Likewise, <command>nix-env
-    --delete-generations</command> accepts a
-    <replaceable>N</replaceable><literal>d</literal> age limit.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix now heuristically detects whether a build failure was
-    due to a disk-full condition. In that case, the build is not
-    flagged as &#x201C;permanently failed&#x201D;. This is mostly useful for Hydra,
-    which needs to distinguish between permanent and transient build
-    failures.</para>
-  </listitem>
-
-  <listitem>
-    <para>There is a new symbol <literal>__curPos</literal> that
-    expands to an attribute set containing its file name and line and
-    column numbers, e.g. <literal>{ file = "foo.nix"; line = 10;
-    column = 5; }</literal>.  There also is a new builtin function,
-    <varname>unsafeGetAttrPos</varname>, that returns the position of
-    an attribute.  This is used by Nixpkgs to provide location
-    information in error messages, e.g.
-
-<screen>
-$ nix-build '&lt;nixpkgs&gt;' -A libreoffice --argstr system x86_64-darwin
-error: the package &#x2018;libreoffice-4.0.5.2&#x2019; in &#x2018;.../applications/office/libreoffice/default.nix:263&#x2019;
-  is not supported on &#x2018;x86_64-darwin&#x2019;
-</screen>
-
-    </para>
-  </listitem>
-
-  <listitem>
-    <para>The garbage collector is now more concurrent with other Nix
-    processes because it releases certain locks earlier.</para>
-  </listitem>
-
-  <listitem>
-    <para>The binary tarball installer has been improved.  You can now
-    install Nix by running:
-
-<screen>
-$ bash &lt;(curl https://nixos.org/nix/install)
-</screen>
-
-    </para>
-  </listitem>
-
-  <listitem>
-    <para>More evaluation errors include position information. For
-    instance, selecting a missing attribute will print something like
-
-<screen>
-error: attribute `nixUnstabl' missing, at /etc/nixos/configurations/misc/eelco/mandark.nix:216:15
-</screen>
-
-    </para>
-  </listitem>
-
-  <listitem>
-    <para>The command <command>nix-setuid-helper</command> is
-    gone.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix no longer uses Automake, but instead has a
-    non-recursive, GNU Make-based build system.</para>
-  </listitem>
-
-  <listitem>
-    <para>All installed libraries now have the prefix
-    <literal>libnix</literal>.  In particular, this gets rid of
-    <literal>libutil</literal>, which could clash with libraries with
-    the same name from other packages.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix now requires a compiler that supports C++11.</para>
-  </listitem>
-
-</itemizedlist>
-
-<para>This release has contributions from Danny Wilson, Domen Ko&#x17E;ar,
-Eelco Dolstra, Ian-Woo Kim, Ludovic Court&#xE8;s, Maxim Ivanov, Petr
-Rockai, Ricardo M. Correia and Shea Levy.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.6.1">
-
-<title>Release 1.6.1 (2013-10-28)</title>
-
-<para>This is primarily a bug fix release.  Changes of interest
-are:</para>
-
-<itemizedlist>
-
-  <listitem>
-    <para>Nix 1.6 accidentally changed the semantics of antiquoted
-    paths in strings, such as <literal>"${/foo}/bar"</literal>.  This
-    release reverts to the Nix 1.5.3 behaviour.</para>
-  </listitem>
-
-  <listitem>
-    <para>Previously, Nix optimised expressions such as
-    <literal>"${<replaceable>expr</replaceable>}"</literal> to
-    <replaceable>expr</replaceable>.  Thus it neither checked whether
-    <replaceable>expr</replaceable> could be coerced to a string, nor
-    applied such coercions.  This meant that
-    <literal>"${123}"</literal> evaluatued to <literal>123</literal>,
-    and <literal>"${./foo}"</literal> evaluated to
-    <literal>./foo</literal> (even though
-    <literal>"${./foo} "</literal> evaluates to
-    <literal>"/nix/store/<replaceable>hash</replaceable>-foo "</literal>).
-    Nix now checks the type of antiquoted expressions and
-    applies coercions.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix now shows the exact position of undefined variables.  In
-    particular, undefined variable errors in a <literal>with</literal>
-    previously didn't show <emphasis>any</emphasis> position
-    information, so this makes it a lot easier to fix such
-    errors.</para>
-  </listitem>
-
-  <listitem>
-    <para>Undefined variables are now treated consistently.
-    Previously, the <function>tryEval</function> function would catch
-    undefined variables inside a <literal>with</literal> but not
-    outside.  Now <function>tryEval</function> never catches undefined
-    variables.</para>
-  </listitem>
-
-  <listitem>
-    <para>Bash completion in <command>nix-shell</command> now works
-    correctly.</para>
-  </listitem>
-
-  <listitem>
-    <para>Stack traces are less verbose: they no longer show calls to
-    builtin functions and only show a single line for each derivation
-    on the call stack.</para>
-  </listitem>
-
-  <listitem>
-    <para>New built-in function: <function>builtins.typeOf</function>,
-    which returns the type of its argument as a string.</para>
-  </listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.6.0">
-
-<title>Release 1.6 (2013-09-10)</title>
-
-<para>In addition to the usual bug fixes, this release has several new
-features:</para>
-
-<itemizedlist>
-
-  <listitem>
-    <para>The command <command>nix-build --run-env</command> has been
-    renamed to <command>nix-shell</command>.</para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-shell</command> now sources
-    <filename>$stdenv/setup</filename> <emphasis>inside</emphasis> the
-    interactive shell, rather than in a parent shell.  This ensures
-    that shell functions defined by <literal>stdenv</literal> can be
-    used in the interactive shell.</para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-shell</command> has a new flag
-    <option>--pure</option> to clear the environment, so you get an
-    environment that more closely corresponds to the &#x201C;real&#x201D; Nix build.
-    </para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-shell</command> now sets the shell prompt
-    (<envar>PS1</envar>) to ensure that Nix shells are distinguishable
-    from your regular shells.</para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-env</command> no longer requires a
-    <literal>*</literal> argument to match all packages, so
-    <literal>nix-env -qa</literal> is equivalent to <literal>nix-env
-    -qa '*'</literal>.</para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-env -i</command> has a new flag
-    <option>--remove-all</option> (<option>-r</option>) to remove all
-    previous packages from the profile.  This makes it easier to do
-    declarative package management similar to NixOS&#x2019;s
-    <option>environment.systemPackages</option>.  For instance, if you
-    have a specification <filename>my-packages.nix</filename> like this:
-
-<programlisting>
-with import &lt;nixpkgs&gt; {};
-[ thunderbird
-  geeqie
-  ...
-]
-</programlisting>
-
-    then after any change to this file, you can run:
-
-<screen>
-$ nix-env -f my-packages.nix -ir
-</screen>
-
-    to update your profile to match the specification.</para>
-  </listitem>
-
-  <listitem>
-    <para>The &#x2018;<literal>with</literal>&#x2019; language construct is now more
-    lazy.  It only evaluates its argument if a variable might actually
-    refer to an attribute in the argument.  For instance, this now
-    works:
-
-<programlisting>
-let
-  pkgs = with pkgs; { foo = "old"; bar = foo; } // overrides;
-  overrides = { foo = "new"; };
-in pkgs.bar
-</programlisting>
-
-    This evaluates to <literal>"new"</literal>, while previously it
-    gave an &#x201C;infinite recursion&#x201D; error.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix now has proper integer arithmetic operators. For
-    instance, you can write <literal>x + y</literal> instead of
-    <literal>builtins.add x y</literal>, or <literal>x &lt;
-    y</literal> instead of <literal>builtins.lessThan x y</literal>.
-    The comparison operators also work on strings.</para>
-  </listitem>
-
-  <listitem>
-    <para>On 64-bit systems, Nix integers are now 64 bits rather than
-    32 bits.</para>
-  </listitem>
-
-  <listitem>
-    <para>When using the Nix daemon, the <command>nix-daemon</command>
-    worker process now runs on the same CPU as the client, on systems
-    that support setting CPU affinity.  This gives a significant speedup
-    on some systems.</para>
-  </listitem>
-
-  <listitem>
-    <para>If a stack overflow occurs in the Nix evaluator, you now get
-    a proper error message (rather than &#x201C;Segmentation fault&#x201D;) on some
-    systems.</para>
-  </listitem>
-
-  <listitem>
-    <para>In addition to directories, you can now bind-mount regular
-    files in chroots through the (now misnamed) option
-    <option>build-chroot-dirs</option>.</para>
-  </listitem>
-
-</itemizedlist>
-
-<para>This release has contributions from Domen Ko&#x17E;ar, Eelco Dolstra,
-Florian Friesdorf, Gergely Risko, Ivan Kozik, Ludovic Court&#xE8;s and Shea
-Levy.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.5.2">
-
-<title>Release 1.5.2 (2013-05-13)</title>
-
-<para>This is primarily a bug fix release.  It has contributions from
-Eelco Dolstra, Llu&#xED;s Batlle i Rossell and Shea Levy.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.5">
-
-<title>Release 1.5 (2013-02-27)</title>
-
-<para>This is a brown paper bag release to fix a regression introduced
-by the hard link security fix in 1.4.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.4">
-
-<title>Release 1.4 (2013-02-26)</title>
-
-<para>This release fixes a security bug in multi-user operation.  It
-was possible for derivations to cause the mode of files outside of the
-Nix store to be changed to 444 (read-only but world-readable) by
-creating hard links to those files (<link xlink:href="https://github.com/NixOS/nix/commit/5526a282b5b44e9296e61e07d7d2626a79141ac4">details</link>).</para>
-
-<para>There are also the following improvements:</para>
-
-<itemizedlist>
-
-  <listitem><para>New built-in function:
-  <function>builtins.hashString</function>.</para></listitem>
-
-  <listitem><para>Build logs are now stored in
-  <filename>/nix/var/log/nix/drvs/<replaceable>XX</replaceable>/</filename>,
-  where <replaceable>XX</replaceable> is the first two characters of
-  the derivation.  This is useful on machines that keep a lot of build
-  logs (such as Hydra servers).</para></listitem>
-
-  <listitem><para>The function <function>corepkgs/fetchurl</function>
-  can now make the downloaded file executable.  This will allow
-  getting rid of all bootstrap binaries in the Nixpkgs source
-  tree.</para></listitem>
-
-  <listitem><para>Language change: The expression <literal>"${./path}
-  ..."</literal> now evaluates to a string instead of a
-  path.</para></listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.3">
-
-<title>Release 1.3 (2013-01-04)</title>
-
-<para>This is primarily a bug fix release.  When this version is first
-run on Linux, it removes any immutable bits from the Nix store and
-increases the schema version of the Nix store.  (The previous release
-removed support for setting the immutable bit; this release clears any
-remaining immutable bits to make certain operations more
-efficient.)</para>
-
-<para>This release has contributions from Eelco Dolstra and Stuart
-Pernsteiner.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.2">
-
-<title>Release 1.2 (2012-12-06)</title>
-
-<para>This release has the following improvements and changes:</para>
-
-<itemizedlist>
-
-  <listitem>
-    <para>Nix has a new binary substituter mechanism: the
-    <emphasis>binary cache</emphasis>.  A binary cache contains
-    pre-built binaries of Nix packages.  Whenever Nix wants to build a
-    missing Nix store path, it will check a set of binary caches to
-    see if any of them has a pre-built binary of that path.  The
-    configuration setting <option>binary-caches</option> contains a
-    list of URLs of binary caches.  For instance, doing
-<screen>
-$ nix-env -i thunderbird --option binary-caches http://cache.nixos.org
-</screen>
-    will install Thunderbird and its dependencies, using the available
-    pre-built binaries in <uri>http://cache.nixos.org</uri>.
-    The main advantage over the old &#x201C;manifest&#x201D;-based method of getting
-    pre-built binaries is that you don&#x2019;t have to worry about your
-    manifest being in sync with the Nix expressions you&#x2019;re installing
-    from; i.e., you don&#x2019;t need to run <command>nix-pull</command> to
-    update your manifest.  It&#x2019;s also more scalable because you don&#x2019;t
-    need to redownload a giant manifest file every time.
-    </para>
-
-    <para>A Nix channel can provide a binary cache URL that will be
-    used automatically if you subscribe to that channel.  If you use
-    the Nixpkgs or NixOS channels
-    (<uri>http://nixos.org/channels</uri>) you automatically get the
-    cache <uri>http://cache.nixos.org</uri>.</para>
-
-    <para>Binary caches are created using <command>nix-push</command>.
-    For details on the operation and format of binary caches, see the
-    <command>nix-push</command> manpage.  More details are provided in
-    <link xlink:href="http://lists.science.uu.nl/pipermail/nix-dev/2012-September/009826.html">this
-    nix-dev posting</link>.</para>
-  </listitem>
-
-  <listitem>
-    <para>Multiple output support should now be usable.  A derivation
-    can declare that it wants to produce multiple store paths by
-    saying something like
-<programlisting>
-outputs = [ "lib" "headers" "doc" ];
-</programlisting>
-    This will cause Nix to pass the intended store path of each output
-    to the builder through the environment variables
-    <literal>lib</literal>, <literal>headers</literal> and
-    <literal>doc</literal>.  Other packages can refer to a specific
-    output by referring to
-    <literal><replaceable>pkg</replaceable>.<replaceable>output</replaceable></literal>,
-    e.g.
-<programlisting>
-buildInputs = [ pkg.lib pkg.headers ];
-</programlisting>
-    If you install a package with multiple outputs using
-    <command>nix-env</command>, each output path will be symlinked
-    into the user environment.</para>
-  </listitem>
-
-  <listitem>
-    <para>Dashes are now valid as part of identifiers and attribute
-    names.</para>
-  </listitem>
-
-  <listitem>
-    <para>The new operation <command>nix-store --repair-path</command>
-    allows corrupted or missing store paths to be repaired by
-    redownloading them.  <command>nix-store --verify --check-contents
-    --repair</command> will scan and repair all paths in the Nix
-    store.  Similarly, <command>nix-env</command>,
-    <command>nix-build</command>, <command>nix-instantiate</command>
-    and <command>nix-store --realise</command> have a
-    <option>--repair</option> flag to detect and fix bad paths by
-    rebuilding or redownloading them.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix no longer sets the immutable bit on files in the Nix
-    store.  Instead, the recommended way to guard the Nix store
-    against accidental modification on Linux is to make it a read-only
-    bind mount, like this:
-
-<screen>
-$ mount --bind /nix/store /nix/store
-$ mount -o remount,ro,bind /nix/store
-</screen>
-
-    Nix will automatically make <filename>/nix/store</filename>
-    writable as needed (using a private mount namespace) to allow
-    modifications.</para>
-  </listitem>
-
-  <listitem>
-    <para>Store optimisation (replacing identical files in the store
-    with hard links) can now be done automatically every time a path
-    is added to the store.  This is enabled by setting the
-    configuration option <literal>auto-optimise-store</literal> to
-    <literal>true</literal> (disabled by default).</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix now supports <command>xz</command> compression for NARs
-    in addition to <command>bzip2</command>.  It compresses about 30%
-    better on typical archives and decompresses about twice as
-    fast.</para>
-  </listitem>
-
-  <listitem>
-    <para>Basic Nix expression evaluation profiling: setting the
-    environment variable <envar>NIX_COUNT_CALLS</envar> to
-    <literal>1</literal> will cause Nix to print how many times each
-    primop or function was executed.</para>
-  </listitem>
-
-  <listitem>
-    <para>New primops: <varname>concatLists</varname>,
-    <varname>elem</varname>, <varname>elemAt</varname> and
-    <varname>filter</varname>.</para>
-  </listitem>
-
-  <listitem>
-    <para>The command <command>nix-copy-closure</command> has a new
-    flag <option>--use-substitutes</option> (<option>-s</option>) to
-    download missing paths on the target machine using the substitute
-    mechanism.</para>
-  </listitem>
-
-  <listitem>
-    <para>The command <command>nix-worker</command> has been renamed
-    to <command>nix-daemon</command>.  Support for running the Nix
-    worker in &#x201C;slave&#x201D; mode has been removed.</para>
-  </listitem>
-
-  <listitem>
-    <para>The <option>--help</option> flag of every Nix command now
-    invokes <command>man</command>.</para>
-  </listitem>
-
-  <listitem>
-    <para>Chroot builds are now supported on systemd machines.</para>
-  </listitem>
-
-</itemizedlist>
-
-<para>This release has contributions from Eelco Dolstra, Florian
-Friesdorf, Mats Erik Andersson and Shea Levy.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.1">
-
-<title>Release 1.1 (2012-07-18)</title>
-
-<para>This release has the following improvements:</para>
-
-<itemizedlist>
-
-  <listitem>
-    <para>On Linux, when doing a chroot build, Nix now uses various
-    namespace features provided by the Linux kernel to improve
-    build isolation.  Namely:
-    <itemizedlist>
-      <listitem><para>The private network namespace ensures that
-      builders cannot talk to the outside world (or vice versa): each
-      build only sees a private loopback interface.  This also means
-      that two concurrent builds can listen on the same port (e.g. as
-      part of a test) without conflicting with each
-      other.</para></listitem>
-      <listitem><para>The PID namespace causes each build to start as
-      PID 1.  Processes outside of the chroot are not visible to those
-      on the inside.  On the other hand, processes inside the chroot
-      <emphasis>are</emphasis> visible from the outside (though with
-      different PIDs).</para></listitem>
-      <listitem><para>The IPC namespace prevents the builder from
-      communicating with outside processes using SysV IPC mechanisms
-      (shared memory, message queues, semaphores).  It also ensures
-      that all IPC objects are destroyed when the builder
-      exits.</para></listitem>
-      <listitem><para>The UTS namespace ensures that builders see a
-      hostname of <literal>localhost</literal> rather than the actual
-      hostname.</para></listitem>
-      <listitem><para>The private mount namespace was already used by
-      Nix to ensure that the bind-mounts used to set up the chroot are
-      cleaned up automatically.</para></listitem>
-    </itemizedlist>
-    </para>
-  </listitem>
-
-  <listitem>
-    <para>Build logs are now compressed using
-    <command>bzip2</command>.  The command <command>nix-store
-    -l</command> decompresses them on the fly.  This can be disabled
-    by setting the option <literal>build-compress-log</literal> to
-    <literal>false</literal>.</para>
-  </listitem>
-
-  <listitem>
-    <para>The creation of build logs in
-    <filename>/nix/var/log/nix/drvs</filename> can be disabled by
-    setting the new option <literal>build-keep-log</literal> to
-    <literal>false</literal>.  This is useful, for instance, for Hydra
-    build machines.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix now reserves some space in
-    <filename>/nix/var/nix/db/reserved</filename> to ensure that the
-    garbage collector can run successfully if the disk is full.  This
-    is necessary because SQLite transactions fail if the disk is
-    full.</para>
-  </listitem>
-
-  <listitem>
-    <para>Added a basic <function>fetchurl</function> function.  This
-    is not intended to replace the <function>fetchurl</function> in
-    Nixpkgs, but is useful for bootstrapping; e.g., it will allow us
-    to get rid of the bootstrap binaries in the Nixpkgs source tree
-    and download them instead.  You can use it by doing
-    <literal>import &lt;nix/fetchurl.nix&gt; { url =
-    <replaceable>url</replaceable>; sha256 =
-    "<replaceable>hash</replaceable>"; }</literal>. (Shea Levy)</para>
-  </listitem>
-
-  <listitem>
-    <para>Improved RPM spec file. (Michel Alexandre Salim)</para>
-  </listitem>
-
-  <listitem>
-    <para>Support for on-demand socket-based activation in the Nix
-    daemon with <command>systemd</command>.</para>
-  </listitem>
-
-  <listitem>
-    <para>Added a manpage for
-    <citerefentry><refentrytitle>nix.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>.</para>
-  </listitem>
-
-  <listitem>
-    <para>When using the Nix daemon, the <option>-s</option> flag in
-    <command>nix-env -qa</command> is now much faster.</para>
-  </listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-1.0">
-
-<title>Release 1.0 (2012-05-11)</title>
-
-<para>There have been numerous improvements and bug fixes since the
-previous release.  Here are the most significant:</para>
-
-<itemizedlist>
-
-  <listitem>
-    <para>Nix can now optionally use the Boehm garbage collector.
-    This significantly reduces the Nix evaluator&#x2019;s memory footprint,
-    especially when evaluating large NixOS system configurations.  It
-    can be enabled using the <option>--enable-gc</option> configure
-    option.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix now uses SQLite for its database.  This is faster and
-    more flexible than the old <emphasis>ad hoc</emphasis> format.
-    SQLite is also used to cache the manifests in
-    <filename>/nix/var/nix/manifests</filename>, resulting in a
-    significant speedup.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix now has an search path for expressions.  The search path
-    is set using the environment variable <envar>NIX_PATH</envar> and
-    the <option>-I</option> command line option.  In Nix expressions,
-    paths between angle brackets are used to specify files that must
-    be looked up in the search path.  For instance, the expression
-    <literal>&lt;nixpkgs/default.nix&gt;</literal> looks for a file
-    <filename>nixpkgs/default.nix</filename> relative to every element
-    in the search path.</para>
-  </listitem>
-
-  <listitem>
-    <para>The new command <command>nix-build --run-env</command>
-    builds all dependencies of a derivation, then starts a shell in an
-    environment containing all variables from the derivation.  This is
-    useful for reproducing the environment of a derivation for
-    development.</para>
-  </listitem>
-
-  <listitem>
-    <para>The new command <command>nix-store --verify-path</command>
-    verifies that the contents of a store path have not
-    changed.</para>
-  </listitem>
-
-  <listitem>
-    <para>The new command <command>nix-store --print-env</command>
-    prints out the environment of a derivation in a format that can be
-    evaluated by a shell.</para>
-  </listitem>
-
-  <listitem>
-    <para>Attribute names can now be arbitrary strings.  For instance,
-    you can write <literal>{ "foo-1.2" = &#x2026;; "bla bla" = &#x2026;; }."bla
-    bla"</literal>.</para>
-  </listitem>
-
-  <listitem>
-    <para>Attribute selection can now provide a default value using
-    the <literal>or</literal> operator.  For instance, the expression
-    <literal>x.y.z or e</literal> evaluates to the attribute
-    <literal>x.y.z</literal> if it exists, and <literal>e</literal>
-    otherwise.</para>
-  </listitem>
-
-  <listitem>
-    <para>The right-hand side of the <literal>?</literal> operator can
-    now be an attribute path, e.g., <literal>attrs ?
-    a.b.c</literal>.</para>
-  </listitem>
-
-  <listitem>
-    <para>On Linux, Nix will now make files in the Nix store immutable
-    on filesystems that support it.  This prevents accidental
-    modification of files in the store by the root user.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix has preliminary support for derivations with multiple
-    outputs.  This is useful because it allows parts of a package to
-    be deployed and garbage-collected separately.  For instance,
-    development parts of a package such as header files or static
-    libraries would typically not be part of the closure of an
-    application, resulting in reduced disk usage and installation
-    time.</para>
-  </listitem>
-
-  <listitem>
-    <para>The Nix store garbage collector is faster and holds the
-    global lock for a shorter amount of time.</para>
-  </listitem>
-
-  <listitem>
-    <para>The option <option>--timeout</option> (corresponding to the
-    configuration setting <literal>build-timeout</literal>) allows you
-    to set an absolute timeout on builds &#x2014; if a build runs for more than
-    the given number of seconds, it is terminated.  This is useful for
-    recovering automatically from builds that are stuck in an infinite
-    loop but keep producing output, and for which
-    <literal>--max-silent-time</literal> is ineffective.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix development has moved to GitHub (<link xlink:href="https://github.com/NixOS/nix"/>).</para>
-  </listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-0.16">
-
-<title>Release 0.16 (2010-08-17)</title>
-
-<para>This release has the following improvements:</para>
-
-<itemizedlist>
-
-  <listitem>
-    <para>The Nix expression evaluator is now much faster in most
-    cases: typically, <link xlink:href="http://www.mail-archive.com/nix-dev@cs.uu.nl/msg04113.html">3
-    to 8 times compared to the old implementation</link>.  It also
-    uses less memory.  It no longer depends on the ATerm
-    library.</para>
-  </listitem>
-
-  <listitem>
-    <para>
-      Support for configurable parallelism inside builders.  Build
-      scripts have always had the ability to perform multiple build
-      actions in parallel (for instance, by running <command>make -j
-      2</command>), but this was not desirable because the number of
-      actions to be performed in parallel was not configurable.  Nix
-      now has an option <option>--cores
-      <replaceable>N</replaceable></option> as well as a configuration
-      setting <varname>build-cores =
-      <replaceable>N</replaceable></varname> that causes the
-      environment variable <envar>NIX_BUILD_CORES</envar> to be set to
-      <replaceable>N</replaceable> when the builder is invoked.  The
-      builder can use this at its discretion to perform a parallel
-      build, e.g., by calling <command>make -j
-      <replaceable>N</replaceable></command>.  In Nixpkgs, this can be
-      enabled on a per-package basis by setting the derivation
-      attribute <varname>enableParallelBuilding</varname> to
-      <literal>true</literal>.
-    </para>
-  </listitem>
-
-  <listitem>
-    <para><command>nix-store -q</command> now supports XML output
-    through the <option>--xml</option> flag.</para>
-  </listitem>
-
-  <listitem>
-    <para>Several bug fixes.</para>
-  </listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-0.15">
-
-<title>Release 0.15 (2010-03-17)</title>
-
-<para>This is a bug-fix release.  Among other things, it fixes
-building on Mac OS X (Snow Leopard), and improves the contents of
-<filename>/etc/passwd</filename> and <filename>/etc/group</filename>
-in <literal>chroot</literal> builds.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-0.14">
-
-<title>Release 0.14 (2010-02-04)</title>
-
-<para>This release has the following improvements:</para>
-
-<itemizedlist>
-
-  <listitem>
-    <para>The garbage collector now starts deleting garbage much
-    faster than before.  It no longer determines liveness of all paths
-    in the store, but does so on demand.</para>
-  </listitem>
-
-  <listitem>
-    <para>Added a new operation, <command>nix-store --query
-    --roots</command>, that shows the garbage collector roots that
-    directly or indirectly point to the given store paths.</para>
-  </listitem>
-
-  <listitem>
-    <para>Removed support for converting Berkeley DB-based Nix
-    databases to the new schema.</para>
-  </listitem>
-
-  <listitem>
-    <para>Removed the <option>--use-atime</option> and
-    <option>--max-atime</option> garbage collector options.  They were
-    not very useful in practice.</para>
-  </listitem>
-
-  <listitem>
-    <para>On Windows, Nix now requires Cygwin 1.7.x.</para>
-  </listitem>
-
-  <listitem>
-    <para>A few bug fixes.</para>
-  </listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-0.13">
-
-<title>Release 0.13 (2009-11-05)</title>
-
-<para>This is primarily a bug fix release.  It has some new
-features:</para>
-
-<itemizedlist>
-
-  <listitem>
-    <para>Syntactic sugar for writing nested attribute sets.  Instead of
-
-<programlisting>
-{
-  foo = {
-    bar = 123;
-    xyzzy = true;
-  };
-  a = { b = { c = "d"; }; };
-}
-</programlisting>
-
-    you can write
-
-<programlisting>
-{
-  foo.bar = 123;
-  foo.xyzzy = true;
-  a.b.c = "d";
-}
-</programlisting>
-
-    This is useful, for instance, in NixOS configuration files.</para>
-
-  </listitem>
-
-  <listitem>
-    <para>Support for Nix channels generated by Hydra, the Nix-based
-    continuous build system.  (Hydra generates NAR archives on the
-    fly, so the size and hash of these archives isn&#x2019;t known in
-    advance.)</para>
-  </listitem>
-
-  <listitem>
-    <para>Support <literal>i686-linux</literal> builds directly on
-    <literal>x86_64-linux</literal> Nix installations.  This is
-    implemented using the <function>personality()</function> syscall,
-    which causes <command>uname</command> to return
-    <literal>i686</literal> in child processes.</para>
-  </listitem>
-
-  <listitem>
-    <para>Various improvements to the <literal>chroot</literal>
-    support.  Building in a <literal>chroot</literal> works quite well
-    now.</para>
-  </listitem>
-
-  <listitem>
-    <para>Nix no longer blocks if it tries to build a path and another
-    process is already building the same path.  Instead it tries to
-    build another buildable path first.  This improves
-    parallelism.</para>
-  </listitem>
-
-  <listitem>
-    <para>Support for large (&gt; 4 GiB) files in NAR archives.</para>
-  </listitem>
-
-  <listitem>
-    <para>Various (performance) improvements to the remote build
-    mechanism.</para>
-  </listitem>
-
-  <listitem>
-    <para>New primops: <varname>builtins.addErrorContext</varname> (to
-    add a string to stack traces &#x2014; useful for debugging),
-    <varname>builtins.isBool</varname>,
-    <varname>builtins.isString</varname>,
-    <varname>builtins.isInt</varname>,
-    <varname>builtins.intersectAttrs</varname>.</para>
-  </listitem>
-
-  <listitem>
-    <para>OpenSolaris support (Sander van der Burg).</para>
-  </listitem>
-
-  <listitem>
-    <para>Stack traces are no longer displayed unless the
-    <option>--show-trace</option> option is used.</para>
-  </listitem>
-
-  <listitem>
-    <para>The scoping rules for <literal>inherit
-    (<replaceable>e</replaceable>) ...</literal> in recursive
-    attribute sets have changed.  The expression
-    <replaceable>e</replaceable> can now refer to the attributes
-    defined in the containing set.</para>
-  </listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-0.12">
-
-<title>Release 0.12 (2008-11-20)</title>
-
-<itemizedlist>
-
-  <listitem>
-    <para>Nix no longer uses Berkeley DB to store Nix store metadata.
-    The principal advantages of the new storage scheme are: it works
-    properly over decent implementations of NFS (allowing Nix stores
-    to be shared between multiple machines); no recovery is needed
-    when a Nix process crashes; no write access is needed for
-    read-only operations; no more running out of Berkeley DB locks on
-    certain operations.</para>
-
-    <para>You still need to compile Nix with Berkeley DB support if
-    you want Nix to automatically convert your old Nix store to the
-    new schema.  If you don&#x2019;t need this, you can build Nix with the
-    <filename>configure</filename> option
-    <option>--disable-old-db-compat</option>.</para>
-
-    <para>After the automatic conversion to the new schema, you can
-    delete the old Berkeley DB files:
-
-    <screen>
-$ cd /nix/var/nix/db
-$ rm __db* log.* derivers references referrers reserved validpaths DB_CONFIG</screen>
-
-    The new metadata is stored in the directories
-    <filename>/nix/var/nix/db/info</filename> and
-    <filename>/nix/var/nix/db/referrer</filename>.  Though the
-    metadata is stored in human-readable plain-text files, they are
-    not intended to be human-editable, as Nix is rather strict about
-    the format.</para>
-
-    <para>The new storage schema may or may not require less disk
-    space than the Berkeley DB environment, mostly depending on the
-    cluster size of your file system.  With 1 KiB clusters (which
-    seems to be the <literal>ext3</literal> default nowadays) it
-    usually takes up much less space.</para>
-  </listitem>
-
-  <listitem><para>There is a new substituter that copies paths
-  directly from other (remote) Nix stores mounted somewhere in the
-  filesystem.  For instance, you can speed up an installation by
-  mounting some remote Nix store that already has the packages in
-  question via NFS or <literal>sshfs</literal>.  The environment
-  variable <envar>NIX_OTHER_STORES</envar> specifies the locations of
-  the remote Nix directories,
-  e.g. <literal>/mnt/remote-fs/nix</literal>.</para></listitem>
-
-  <listitem><para>New <command>nix-store</command> operations
-  <option>--dump-db</option> and <option>--load-db</option> to dump
-  and reload the Nix database.</para></listitem>
-
-  <listitem><para>The garbage collector has a number of new options to
-  allow only some of the garbage to be deleted.  The option
-  <option>--max-freed <replaceable>N</replaceable></option> tells the
-  collector to stop after at least <replaceable>N</replaceable> bytes
-  have been deleted.  The option <option>--max-links
-  <replaceable>N</replaceable></option> tells it to stop after the
-  link count on <filename>/nix/store</filename> has dropped below
-  <replaceable>N</replaceable>.  This is useful for very large Nix
-  stores on filesystems with a 32000 subdirectories limit (like
-  <literal>ext3</literal>).  The option <option>--use-atime</option>
-  causes store paths to be deleted in order of ascending last access
-  time.  This allows non-recently used stuff to be deleted.  The
-  option <option>--max-atime <replaceable>time</replaceable></option>
-  specifies an upper limit to the last accessed time of paths that may
-  be deleted.  For instance,
-
-    <screen>
-    $ nix-store --gc -v --max-atime $(date +%s -d "2 months ago")</screen>
-
-  deletes everything that hasn&#x2019;t been accessed in two months.</para></listitem>
-
-  <listitem><para><command>nix-env</command> now uses optimistic
-  profile locking when performing an operation like installing or
-  upgrading, instead of setting an exclusive lock on the profile.
-  This allows multiple <command>nix-env -i / -u / -e</command>
-  operations on the same profile in parallel.  If a
-  <command>nix-env</command> operation sees at the end that the profile
-  was changed in the meantime by another process, it will just
-  restart.  This is generally cheap because the build results are
-  still in the Nix store.</para></listitem>
-
-  <listitem><para>The option <option>--dry-run</option> is now
-  supported by <command>nix-store -r</command> and
-  <command>nix-build</command>.</para></listitem>
-
-  <listitem><para>The information previously shown by
-  <option>--dry-run</option> (i.e., which derivations will be built
-  and which paths will be substituted) is now always shown by
-  <command>nix-env</command>, <command>nix-store -r</command> and
-  <command>nix-build</command>.  The total download size of
-  substitutable paths is now also shown.  For instance, a build will
-  show something like
-
-    <screen>
-the following derivations will be built:
-  /nix/store/129sbxnk5n466zg6r1qmq1xjv9zymyy7-activate-configuration.sh.drv
-  /nix/store/7mzy971rdm8l566ch8hgxaf89x7lr7ik-upstart-jobs.drv
-  ...
-the following paths will be downloaded/copied (30.02 MiB):
-  /nix/store/4m8pvgy2dcjgppf5b4cj5l6wyshjhalj-samba-3.2.4
-  /nix/store/7h1kwcj29ip8vk26rhmx6bfjraxp0g4l-libunwind-0.98.6
-  ...</screen>
-
-  </para></listitem>
-
-  <listitem><para>Language features:
-
-    <itemizedlist>
-
-      <listitem><para>@-patterns as in Haskell.  For instance, in a
-      function definition
-
-      <programlisting>f = args @ {x, y, z}: <replaceable>...</replaceable>;</programlisting>
-
-      <varname>args</varname> refers to the argument as a whole, which
-      is further pattern-matched against the attribute set pattern
-      <literal>{x, y, z}</literal>.</para></listitem>
-
-      <listitem><para>&#x201C;<literal>...</literal>&#x201D; (ellipsis) patterns.
-      An attribute set pattern can now say <literal>...</literal>  at
-      the end of the attribute name list to specify that the function
-      takes <emphasis>at least</emphasis> the listed attributes, while
-      ignoring additional attributes.  For instance,
-
-      <programlisting>{stdenv, fetchurl, fuse, ...}: <replaceable>...</replaceable></programlisting>
-
-      defines a function that accepts any attribute set that includes
-      at least the three listed attributes.</para></listitem>
-
-      <listitem><para>New primops:
-      <varname>builtins.parseDrvName</varname> (split a package name
-      string like <literal>"nix-0.12pre12876"</literal> into its name
-      and version components, e.g. <literal>"nix"</literal> and
-      <literal>"0.12pre12876"</literal>),
-      <varname>builtins.compareVersions</varname> (compare two version
-      strings using the same algorithm that <command>nix-env</command>
-      uses), <varname>builtins.length</varname> (efficiently compute
-      the length of a list), <varname>builtins.mul</varname> (integer
-      multiplication), <varname>builtins.div</varname> (integer
-      division).
-      <!-- <varname>builtins.genericClosure</varname> -->
-      </para></listitem>
-
-    </itemizedlist>
-
-  </para></listitem>
-
-  <listitem><para><command>nix-prefetch-url</command> now supports
-  <literal>mirror://</literal> URLs, provided that the environment
-  variable <envar>NIXPKGS_ALL</envar> points at a Nixpkgs
-  tree.</para></listitem>
-
-  <listitem><para>Removed the commands
-  <command>nix-pack-closure</command> and
-  <command>nix-unpack-closure</command>.   You can do almost the same
-  thing but much more efficiently by doing <literal>nix-store --export
-  $(nix-store -qR <replaceable>paths</replaceable>) &gt; closure</literal> and
-  <literal>nix-store --import &lt;
-  closure</literal>.</para></listitem>
-
-  <listitem><para>Lots of bug fixes, including a big performance bug in
-  the handling of <literal>with</literal>-expressions.</para></listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ssec-relnotes-0.11">
-
-<title>Release 0.11 (2007-12-31)</title>
-
-<para>Nix 0.11 has many improvements over the previous stable release.
-The most important improvement is secure multi-user support.  It also
-features many usability enhancements and language extensions, many of
-them prompted by NixOS, the purely functional Linux distribution based
-on Nix.  Here is an (incomplete) list:</para>
-
-
-<itemizedlist>
-
-
-  <listitem><para>Secure multi-user support.  A single Nix store can
-  now be shared between multiple (possible untrusted) users.  This is
-  an important feature for NixOS, where it allows non-root users to
-  install software.  The old setuid method for sharing a store between
-  multiple users has been removed.  Details for setting up a
-  multi-user store can be found in the manual.</para></listitem>
-
-
-  <listitem><para>The new command <command>nix-copy-closure</command>
-  gives you an easy and efficient way to exchange software between
-  machines.  It copies the missing parts of the closure of a set of
-  store path to or from a remote machine via
-  <command>ssh</command>.</para></listitem>
-
-
-  <listitem><para>A new kind of string literal: strings between double
-  single-quotes (<literal>''</literal>) have indentation
-  &#x201C;intelligently&#x201D; removed.  This allows large strings (such as shell
-  scripts or configuration file fragments in NixOS) to cleanly follow
-  the indentation of the surrounding expression.  It also requires
-  much less escaping, since <literal>''</literal> is less common in
-  most languages than <literal>"</literal>.</para></listitem>
-
-
-  <listitem><para><command>nix-env</command> <option>--set</option>
-  modifies the current generation of a profile so that it contains
-  exactly the specified derivation, and nothing else.  For example,
-  <literal>nix-env -p /nix/var/nix/profiles/browser --set
-  firefox</literal> lets the profile named
-  <filename>browser</filename> contain just Firefox.</para></listitem>
-
-
-  <listitem><para><command>nix-env</command> now maintains
-  meta-information about installed packages in profiles.  The
-  meta-information is the contents of the <varname>meta</varname>
-  attribute of derivations, such as <varname>description</varname> or
-  <varname>homepage</varname>.  The command <literal>nix-env -q --xml
-  --meta</literal> shows all meta-information.</para></listitem>
-
-
-  <listitem><para><command>nix-env</command> now uses the
-  <varname>meta.priority</varname> attribute of derivations to resolve
-  filename collisions between packages.  Lower priority values denote
-  a higher priority.  For instance, the GCC wrapper package and the
-  Binutils package in Nixpkgs both have a file
-  <filename>bin/ld</filename>, so previously if you tried to install
-  both you would get a collision.  Now, on the other hand, the GCC
-  wrapper declares a higher priority than Binutils, so the former&#x2019;s
-  <filename>bin/ld</filename> is symlinked in the user
-  environment.</para></listitem>
-
-
-  <listitem><para><command>nix-env -i / -u</command>: instead of
-  breaking package ties by version, break them by priority and version
-  number.  That is, if there are multiple packages with the same name,
-  then pick the package with the highest priority, and only use the
-  version if there are multiple packages with the same
-  priority.</para>
-
-  <para>This makes it possible to mark specific versions/variant in
-  Nixpkgs more or less desirable than others.  A typical example would
-  be a beta version of some package (e.g.,
-  <literal>gcc-4.2.0rc1</literal>) which should not be installed even
-  though it is the highest version, except when it is explicitly
-  selected (e.g., <literal>nix-env -i
-  gcc-4.2.0rc1</literal>).</para></listitem>
-
-
-  <listitem><para><command>nix-env --set-flag</command> allows meta
-  attributes of installed packages to be modified.  There are several
-  attributes that can be usefully modified, because they affect the
-  behaviour of <command>nix-env</command> or the user environment
-  build script:
-
-    <itemizedlist>
-
-      <listitem><para><varname>meta.priority</varname> can be changed
-      to resolve filename clashes (see above).</para></listitem>
-
-      <listitem><para><varname>meta.keep</varname> can be set to
-      <literal>true</literal> to prevent the package from being
-      upgraded or replaced.  Useful if you want to hang on to an older
-      version of a package.</para></listitem>
-
-      <listitem><para><varname>meta.active</varname> can be set to
-      <literal>false</literal> to &#x201C;disable&#x201D; the package.  That is, no
-      symlinks will be generated to the files of the package, but it
-      remains part of the profile (so it won&#x2019;t be garbage-collected).
-      Set it back to <literal>true</literal> to re-enable the
-      package.</para></listitem>
-
-    </itemizedlist>
-
-  </para></listitem>
-
-
-  <listitem><para><command>nix-env -q</command> now has a flag
-  <option>--prebuilt-only</option> (<option>-b</option>) that causes
-  <command>nix-env</command> to show only those derivations whose
-  output is already in the Nix store or that can be substituted (i.e.,
-  downloaded from somewhere).  In other words, it shows the packages
-  that can be installed &#x201C;quickly&#x201D;, i.e., don&#x2019;t need to be built from
-  source.  The <option>-b</option> flag is also available in
-  <command>nix-env -i</command> and <command>nix-env -u</command> to
-  filter out derivations for which no pre-built binary is
-  available.</para></listitem>
-
-
-  <listitem><para>The new option <option>--argstr</option> (in
-  <command>nix-env</command>, <command>nix-instantiate</command> and
-  <command>nix-build</command>) is like <option>--arg</option>, except
-  that the value is a string.  For example, <literal>--argstr system
-  i686-linux</literal> is equivalent to <literal>--arg system
-  \"i686-linux\"</literal> (note that <option>--argstr</option>
-  prevents annoying quoting around shell arguments).</para></listitem>
-
-
-  <listitem><para><command>nix-store</command> has a new operation
-  <option>--read-log</option> (<option>-l</option>)
-  <parameter>paths</parameter> that shows the build log of the given
-  paths.</para></listitem>
-
-
-  <!--
-  <listitem><para>TODO: semantic cleanups of string concatenation
-  etc. (mostly in r6740).</para></listitem>
-  -->
-
-
-  <listitem><para>Nix now uses Berkeley DB 4.5.  The database is
-  upgraded automatically, but you should be careful not to use old
-  versions of Nix that still use Berkeley DB 4.4.</para></listitem>
-
-
-  <!-- foo
-  <listitem><para>TODO: option <option>- -reregister</option> in
-  <command>nix-store - -register-validity</command>.</para></listitem>
-  -->
-
-
-  <listitem><para>The option <option>--max-silent-time</option>
-  (corresponding to the configuration setting
-  <literal>build-max-silent-time</literal>) allows you to set a
-  timeout on builds &#x2014; if a build produces no output on
-  <literal>stdout</literal> or <literal>stderr</literal> for the given
-  number of seconds, it is terminated.  This is useful for recovering
-  automatically from builds that are stuck in an infinite
-  loop.</para></listitem>
-
-
-  <listitem><para><command>nix-channel</command>: each subscribed
-  channel is its own attribute in the top-level expression generated
-  for the channel.  This allows disambiguation (e.g. <literal>nix-env
-  -i -A nixpkgs_unstable.firefox</literal>).</para></listitem>
-
-
-  <listitem><para>The substitutes table has been removed from the
-  database.  This makes operations such as <command>nix-pull</command>
-  and <command>nix-channel --update</command> much, much
-  faster.</para></listitem>
-
-
-  <listitem><para><command>nix-pull</command> now supports
-  bzip2-compressed manifests.  This speeds up
-  channels.</para></listitem>
-
-
-  <listitem><para><command>nix-prefetch-url</command> now has a
-  limited form of caching.  This is used by
-  <command>nix-channel</command> to prevent unnecessary downloads when
-  the channel hasn&#x2019;t changed.</para></listitem>
-
-
-  <listitem><para><command>nix-prefetch-url</command> now by default
-  computes the SHA-256 hash of the file instead of the MD5 hash.  In
-  calls to <function>fetchurl</function> you should pass the
-  <literal>sha256</literal> attribute instead of
-  <literal>md5</literal>.  You can pass either a hexadecimal or a
-  base-32 encoding of the hash.</para></listitem>
-
-
-  <listitem><para>Nix can now perform builds in an automatically
-  generated &#x201C;chroot&#x201D;.  This prevents a builder from accessing stuff
-  outside of the Nix store, and thus helps ensure purity.  This is an
-  experimental feature.</para></listitem>
-
-
-  <listitem><para>The new command <command>nix-store
-  --optimise</command> reduces Nix store disk space usage by finding
-  identical files in the store and hard-linking them to each other.
-  It typically reduces the size of the store by something like
-  25-35%.</para></listitem>
-
-
-  <listitem><para><filename>~/.nix-defexpr</filename> can now be a
-  directory, in which case the Nix expressions in that directory are
-  combined into an attribute set, with the file names used as the
-  names of the attributes.  The command <command>nix-env
-  --import</command> (which set the
-  <filename>~/.nix-defexpr</filename> symlink) is
-  removed.</para></listitem>
-
-
-  <listitem><para>Derivations can specify the new special attribute
-  <varname>allowedReferences</varname> to enforce that the references
-  in the output of a derivation are a subset of a declared set of
-  paths.  For example, if <varname>allowedReferences</varname> is an
-  empty list, then the output must not have any references.  This is
-  used in NixOS to check that generated files such as initial ramdisks
-  for booting Linux don&#x2019;t have any dependencies.</para></listitem>
-
-
-  <listitem><para>The new attribute
-  <varname>exportReferencesGraph</varname> allows builders access to
-  the references graph of their inputs.  This is used in NixOS for
-  tasks such as generating ISO-9660 images that contain a Nix store
-  populated with the closure of certain paths.</para></listitem>
-
-
-  <listitem><para>Fixed-output derivations (like
-  <function>fetchurl</function>) can define the attribute
-  <varname>impureEnvVars</varname> to allow external environment
-  variables to be passed to builders.  This is used in Nixpkgs to
-  support proxy configuration, among other things.</para></listitem>
-
-
-  <listitem><para>Several new built-in functions:
-  <function>builtins.attrNames</function>,
-  <function>builtins.filterSource</function>,
-  <function>builtins.isAttrs</function>,
-  <function>builtins.isFunction</function>,
-  <function>builtins.listToAttrs</function>,
-  <function>builtins.stringLength</function>,
-  <function>builtins.sub</function>,
-  <function>builtins.substring</function>,
-  <function>throw</function>,
-  <function>builtins.trace</function>,
-  <function>builtins.readFile</function>.</para></listitem>
-
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-relnotes-0.10.1">
-
-<title>Release 0.10.1 (2006-10-11)</title>
-
-<para>This release fixes two somewhat obscure bugs that occur when
-evaluating Nix expressions that are stored inside the Nix store
-(<literal>NIX-67</literal>).  These do not affect most users.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-relnotes-0.10">
-
-<title>Release 0.10 (2006-10-06)</title>
-
-<note><para>This version of Nix uses Berkeley DB 4.4 instead of 4.3.
-The database is upgraded automatically, but you should be careful not
-to use old versions of Nix that still use Berkeley DB 4.3.  In
-particular, if you use a Nix installed through Nix, you should run
-
-<screen>
-$ nix-store --clear-substitutes</screen>
-
-first.</para></note>
-
-<warning><para>Also, the database schema has changed slighted to fix a
-performance issue (see below).  When you run any Nix 0.10 command for
-the first time, the database will be upgraded automatically.  This is
-irreversible.</para></warning>
-
-<itemizedlist>
-
-
-  <!-- Usability / features -->
-
-
-  <listitem><para><command>nix-env</command> usability improvements:
-
-    <itemizedlist>
-
-      <listitem><para>An option <option>--compare-versions</option>
-      (or <option>-c</option>) has been added to <command>nix-env
-      --query</command> to allow you to compare installed versions of
-      packages to available versions, or vice versa.  An easy way to
-      see if you are up to date with what&#x2019;s in your subscribed
-      channels is <literal>nix-env -qc \*</literal>.</para></listitem>
-
-      <listitem><para><literal>nix-env --query</literal> now takes as
-      arguments a list of package names about which to show
-      information, just like <option>--install</option>, etc.: for
-      example, <literal>nix-env -q gcc</literal>.  Note that to show
-      all derivations, you need to specify
-      <literal>\*</literal>.</para></listitem>
-
-      <listitem><para><literal>nix-env -i
-      <replaceable>pkgname</replaceable></literal> will now install
-      the highest available version of
-      <replaceable>pkgname</replaceable>, rather than installing all
-      available versions (which would probably give collisions)
-      (<literal>NIX-31</literal>).</para></listitem>
-
-      <listitem><para><literal>nix-env (-i|-u) --dry-run</literal> now
-      shows exactly which missing paths will be built or
-      substituted.</para></listitem>
-
-      <listitem><para><literal>nix-env -qa --description</literal>
-      shows human-readable descriptions of packages, provided that
-      they have a <literal>meta.description</literal> attribute (which
-      most packages in Nixpkgs don&#x2019;t have yet).</para></listitem>
-
-    </itemizedlist>
-
-  </para></listitem>
-
-
-  <listitem><para>New language features:
-
-    <itemizedlist>
-
-      <listitem><para>Reference scanning (which happens after each
-      build) is much faster and takes a constant amount of
-      memory.</para></listitem>
-
-      <listitem><para>String interpolation.  Expressions like
-
-<programlisting>
-"--with-freetype2-library=" + freetype + "/lib"</programlisting>
-
-      can now be written as
-
-<programlisting>
-"--with-freetype2-library=${freetype}/lib"</programlisting>
-
-      You can write arbitrary expressions within
-      <literal>${<replaceable>...</replaceable>}</literal>, not just
-      identifiers.</para></listitem>
-
-      <listitem><para>Multi-line string literals.</para></listitem>
-
-      <listitem><para>String concatenations can now involve
-      derivations, as in the example <code>"--with-freetype2-library="
-      + freetype + "/lib"</code>.  This was not previously possible
-      because we need to register that a derivation that uses such a
-      string is dependent on <literal>freetype</literal>.  The
-      evaluator now properly propagates this information.
-      Consequently, the subpath operator (<literal>~</literal>) has
-      been deprecated.</para></listitem>
-
-      <listitem><para>Default values of function arguments can now
-      refer to other function arguments; that is, all arguments are in
-      scope in the default values
-      (<literal>NIX-45</literal>).</para></listitem>
-
-      <!--
-      <listitem><para>TODO: domain checks (r5895).</para></listitem>
-      -->
-
-      <listitem><para>Lots of new built-in primitives, such as
-      functions for list manipulation and integer arithmetic.  See the
-      manual for a complete list.  All primops are now available in
-      the set <varname>builtins</varname>, allowing one to test for
-      the availability of primop in a backwards-compatible
-      way.</para></listitem>
-
-      <listitem><para>Real let-expressions: <literal>let x = ...;
-      ... z = ...; in ...</literal>.</para></listitem>
-
-    </itemizedlist>
-
-  </para></listitem>
-
-
-  <listitem><para>New commands <command>nix-pack-closure</command> and
-  <command>nix-unpack-closure</command> than can be used to easily
-  transfer a store path with all its dependencies to another machine.
-  Very convenient whenever you have some package on your machine and
-  you want to copy it somewhere else.</para></listitem>
-
-
-  <listitem><para>XML support:
-
-    <itemizedlist>
-
-      <listitem><para><literal>nix-env -q --xml</literal> prints the
-      installed or available packages in an XML representation for
-      easy processing by other tools.</para></listitem>
-
-      <listitem><para><literal>nix-instantiate --eval-only
-      --xml</literal> prints an XML representation of the resulting
-      term.  (The new flag <option>--strict</option> forces &#x2018;deep&#x2019;
-      evaluation of the result, i.e., list elements and attributes are
-      evaluated recursively.)</para></listitem>
-
-      <listitem><para>In Nix expressions, the primop
-      <function>builtins.toXML</function> converts a term to an XML
-      representation.  This is primarily useful for passing structured
-      information to builders.</para></listitem>
-
-    </itemizedlist>
-
-  </para></listitem>
-
-
-  <listitem><para>You can now unambiguously specify which derivation to
-  build or install in <command>nix-env</command>,
-  <command>nix-instantiate</command> and <command>nix-build</command>
-  using the <option>--attr</option> / <option>-A</option> flags, which
-  takes an attribute name as argument.  (Unlike symbolic package names
-  such as <literal>subversion-1.4.0</literal>, attribute names in an
-  attribute set are unique.)  For instance, a quick way to perform a
-  test build of a package in Nixpkgs is <literal>nix-build
-  pkgs/top-level/all-packages.nix -A
-  <replaceable>foo</replaceable></literal>.  <literal>nix-env -q
-  --attr</literal> shows the attribute names corresponding to each
-  derivation.</para></listitem>
-
-
-  <listitem><para>If the top-level Nix expression used by
-  <command>nix-env</command>, <command>nix-instantiate</command> or
-  <command>nix-build</command> evaluates to a function whose arguments
-  all have default values, the function will be called automatically.
-  Also, the new command-line switch <option>--arg
-  <replaceable>name</replaceable>
-  <replaceable>value</replaceable></option> can be used to specify
-  function arguments on the command line.</para></listitem>
-
-
-  <listitem><para><literal>nix-install-package --url
-  <replaceable>URL</replaceable></literal> allows a package to be
-  installed directly from the given URL.</para></listitem>
-
-
-  <listitem><para>Nix now works behind an HTTP proxy server; just set
-  the standard environment variables <envar>http_proxy</envar>,
-  <envar>https_proxy</envar>, <envar>ftp_proxy</envar> or
-  <envar>all_proxy</envar> appropriately.  Functions such as
-  <function>fetchurl</function> in Nixpkgs also respect these
-  variables.</para></listitem>
-
-
-  <listitem><para><literal>nix-build -o
-  <replaceable>symlink</replaceable></literal> allows the symlink to
-  the build result to be named something other than
-  <literal>result</literal>.</para></listitem>
-
-
-  <!-- Stability / performance / etc. -->
-
-
-  <listitem><para>Platform support:
-
-    <itemizedlist>
-
-      <listitem><para>Support for 64-bit platforms, provided a <link xlink:href="http://bugzilla.sen.cwi.nl:8080/show_bug.cgi?id=606">suitably
-      patched ATerm library</link> is used.  Also, files larger than 2
-      GiB are now supported.</para></listitem>
-
-      <listitem><para>Added support for Cygwin (Windows,
-      <literal>i686-cygwin</literal>), Mac OS X on Intel
-      (<literal>i686-darwin</literal>) and Linux on PowerPC
-      (<literal>powerpc-linux</literal>).</para></listitem>
-
-      <listitem><para>Users of SMP and multicore machines will
-      appreciate that the number of builds to be performed in parallel
-      can now be specified in the configuration file in the
-      <literal>build-max-jobs</literal> setting.</para></listitem>
-
-    </itemizedlist>
-
-  </para></listitem>
-
-
-  <listitem><para>Garbage collector improvements:
-
-    <itemizedlist>
-
-      <listitem><para>Open files (such as running programs) are now
-      used as roots of the garbage collector.  This prevents programs
-      that have been uninstalled from being garbage collected while
-      they are still running.  The script that detects these
-      additional runtime roots
-      (<filename>find-runtime-roots.pl</filename>) is inherently
-      system-specific, but it should work on Linux and on all
-      platforms that have the <command>lsof</command>
-      utility.</para></listitem>
-
-      <listitem><para><literal>nix-store --gc</literal>
-      (a.k.a. <command>nix-collect-garbage</command>) prints out the
-      number of bytes freed on standard output.  <literal>nix-store
-      --gc --print-dead</literal> shows how many bytes would be freed
-      by an actual garbage collection.</para></listitem>
-
-      <listitem><para><literal>nix-collect-garbage -d</literal>
-      removes all old generations of <emphasis>all</emphasis> profiles
-      before calling the actual garbage collector (<literal>nix-store
-      --gc</literal>).  This is an easy way to get rid of all old
-      packages in the Nix store.</para></listitem>
-
-      <listitem><para><command>nix-store</command> now has an
-      operation <option>--delete</option> to delete specific paths
-      from the Nix store.  It won&#x2019;t delete reachable (non-garbage)
-      paths unless <option>--ignore-liveness</option> is
-      specified.</para></listitem>
-
-    </itemizedlist>
-
-  </para></listitem>
-
-
-  <listitem><para>Berkeley DB 4.4&#x2019;s process registry feature is used
-  to recover from crashed Nix processes.</para></listitem>
-
-  <!--  <listitem><para>TODO: shared stores.</para></listitem> -->
-
-  <listitem><para>A performance issue has been fixed with the
-  <literal>referer</literal> table, which stores the inverse of the
-  <literal>references</literal> table (i.e., it tells you what store
-  paths refer to a given path).  Maintaining this table could take a
-  quadratic amount of time, as well as a quadratic amount of Berkeley
-  DB log file space (in particular when running the garbage collector)
-  (<literal>NIX-23</literal>).</para></listitem>
-
-  <listitem><para>Nix now catches the <literal>TERM</literal> and
-  <literal>HUP</literal> signals in addition to the
-  <literal>INT</literal> signal.  So you can now do a <literal>killall
-  nix-store</literal> without triggering a database
-  recovery.</para></listitem>
-
-  <listitem><para><command>bsdiff</command> updated to version
-  4.3.</para></listitem>
-
-  <listitem><para>Substantial performance improvements in expression
-  evaluation and <literal>nix-env -qa</literal>, all thanks to <link xlink:href="http://valgrind.org/">Valgrind</link>.  Memory use has
-  been reduced by a factor 8 or so.  Big speedup by memoisation of
-  path hashing.</para></listitem>
-
-  <listitem><para>Lots of bug fixes, notably:
-
-    <itemizedlist>
-
-      <listitem><para>Make sure that the garbage collector can run
-      successfully when the disk is full
-      (<literal>NIX-18</literal>).</para></listitem>
-
-      <listitem><para><command>nix-env</command> now locks the profile
-      to prevent races between concurrent <command>nix-env</command>
-      operations on the same profile
-      (<literal>NIX-7</literal>).</para></listitem>
-
-      <listitem><para>Removed misleading messages from
-      <literal>nix-env -i</literal> (e.g., <literal>installing
-      `foo'</literal> followed by <literal>uninstalling
-      `foo'</literal>) (<literal>NIX-17</literal>).</para></listitem>
-
-    </itemizedlist>
-
-  </para></listitem>
-
-  <listitem><para>Nix source distributions are a lot smaller now since
-  we no longer include a full copy of the Berkeley DB source
-  distribution (but only the bits we need).</para></listitem>
-
-  <listitem><para>Header files are now installed so that external
-  programs can use the Nix libraries.</para></listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-relnotes-0.9.2">
-
-<title>Release 0.9.2 (2005-09-21)</title>
-
-<para>This bug fix release fixes two problems on Mac OS X:
-
-<itemizedlist>
-
-  <listitem><para>If Nix was linked against statically linked versions
-  of the ATerm or Berkeley DB library, there would be dynamic link
-  errors at runtime.</para></listitem>
-
-  <listitem><para><command>nix-pull</command> and
-  <command>nix-push</command> intermittently failed due to race
-  conditions involving pipes and child processes with error messages
-  such as <literal>open2: open(GLOB(0x180b2e4), &gt;&amp;=9) failed: Bad
-  file descriptor at /nix/bin/nix-pull line 77</literal> (issue
-  <literal>NIX-14</literal>).</para></listitem>
-
-</itemizedlist>
-
-</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-relnotes-0.9.1">
-
-<title>Release 0.9.1 (2005-09-20)</title>
-
-<para>This bug fix release addresses a problem with the ATerm library
-when the <option>--with-aterm</option> flag in
-<command>configure</command> was <emphasis>not</emphasis> used.</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-relnotes-0.9">
-
-<title>Release 0.9 (2005-09-16)</title>
-
-<para>NOTE: this version of Nix uses Berkeley DB 4.3 instead of 4.2.
-The database is upgraded automatically, but you should be careful not
-to use old versions of Nix that still use Berkeley DB 4.2.  In
-particular, if you use a Nix installed through Nix, you should run
-
-<screen>
-$ nix-store --clear-substitutes</screen>
-
-first.</para>
-
-
-<itemizedlist>
-
-  <listitem><para>Unpacking of patch sequences is much faster now
-  since we no longer do redundant unpacking and repacking of
-  intermediate paths.</para></listitem>
-
-  <listitem><para>Nix now uses Berkeley DB 4.3.</para></listitem>
-
-  <listitem><para>The <function>derivation</function> primitive is
-  lazier.  Attributes of dependent derivations can mutually refer to
-  each other (as long as there are no data dependencies on the
-  <varname>outPath</varname> and <varname>drvPath</varname> attributes
-  computed by <function>derivation</function>).</para>
-
-  <para>For example, the expression <literal>derivation
-  attrs</literal> now evaluates to (essentially)
-
-  <programlisting>
-attrs // {
-  type = "derivation";
-  outPath = derivation! attrs;
-  drvPath = derivation! attrs;
-}</programlisting>
-
-  where <function>derivation!</function> is a primop that does the
-  actual derivation instantiation (i.e., it does what
-  <function>derivation</function> used to do).  The advantage is that
-  it allows commands such as <command>nix-env -qa</command> and
-  <command>nix-env -i</command> to be much faster since they no longer
-  need to instantiate all derivations, just the
-  <varname>name</varname> attribute.</para>
-
-  <para>Also, it allows derivations to cyclically reference each
-  other, for example,
-
-  <programlisting>
-webServer = derivation {
-  ...
-  hostName = "svn.cs.uu.nl";
-  services = [svnService];
-};
- 
-svnService = derivation {
-  ...
-  hostName = webServer.hostName;
-};</programlisting>
-
-  Previously, this would yield a black hole (infinite recursion).</para>
-
-  </listitem>
-
-  <listitem><para><command>nix-build</command> now defaults to using
-  <filename>./default.nix</filename> if no Nix expression is
-  specified.</para></listitem>
-
-  <listitem><para><command>nix-instantiate</command>, when applied to
-  a Nix expression that evaluates to a function, will call the
-  function automatically if all its arguments have
-  defaults.</para></listitem>
-
-  <listitem><para>Nix now uses libtool to build dynamic libraries.
-  This reduces the size of executables.</para></listitem>
-
-  <listitem><para>A new list concatenation operator
-  <literal>++</literal>.  For example, <literal>[1 2 3] ++ [4 5
-  6]</literal> evaluates to <literal>[1 2 3 4 5
-  6]</literal>.</para></listitem>
-
-  <listitem><para>Some currently undocumented primops to support
-  low-level build management using Nix (i.e., using Nix as a Make
-  replacement).  See the commit messages for <literal>r3578</literal>
-  and <literal>r3580</literal>.</para></listitem>
-
-  <listitem><para>Various bug fixes and performance
-  improvements.</para></listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-relnotes-0.8.1">
-
-<title>Release 0.8.1 (2005-04-13)</title>
-
-<para>This is a bug fix release.</para>
-
-<itemizedlist>
-
-  <listitem><para>Patch downloading was broken.</para></listitem>
-
-  <listitem><para>The garbage collector would not delete paths that
-  had references from invalid (but substitutable)
-  paths.</para></listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-relnotes-0.8">
-
-<title>Release 0.8 (2005-04-11)</title>
-
-<para>NOTE: the hashing scheme in Nix 0.8 changed (as detailed below).
-As a result, <command>nix-pull</command> manifests and channels built
-for Nix 0.7 and below will now work anymore.  However, the Nix
-expression language has not changed, so you can still build from
-source.  Also, existing user environments continue to work.  Nix 0.8
-will automatically upgrade the database schema of previous
-installations when it is first run.</para>
-
-<para>If you get the error message
-
-<screen>
-you have an old-style manifest `/nix/var/nix/manifests/[...]'; please
-delete it</screen>
-
-you should delete previously downloaded manifests:
-
-<screen>
-$ rm /nix/var/nix/manifests/*</screen>
-
-If <command>nix-channel</command> gives the error message
-
-<screen>
-manifest `http://catamaran.labs.cs.uu.nl/dist/nix/channels/[channel]/MANIFEST'
-is too old (i.e., for Nix &lt;= 0.7)</screen>
-
-then you should unsubscribe from the offending channel
-(<command>nix-channel --remove
-<replaceable>URL</replaceable></command>; leave out
-<literal>/MANIFEST</literal>), and subscribe to the same URL, with
-<literal>channels</literal> replaced by <literal>channels-v3</literal>
-(e.g., <link xlink:href="http://catamaran.labs.cs.uu.nl/dist/nix/channels-v3/nixpkgs-unstable"/>).</para>
-
-<para>Nix 0.8 has the following improvements:
-
-<itemizedlist>
-
-  <listitem><para>The cryptographic hashes used in store paths are now
-  160 bits long, but encoded in base-32 so that they are still only 32
-  characters long (e.g.,
-  <filename>/nix/store/csw87wag8bqlqk7ipllbwypb14xainap-atk-1.9.0</filename>).
-  (This is actually a 160 bit truncation of a SHA-256
-  hash.)</para></listitem>
-
-  <listitem><para>Big cleanups and simplifications of the basic store
-  semantics.  The notion of &#x201C;closure store expressions&#x201D; is gone (and
-  so is the notion of &#x201C;successors&#x201D;); the file system references of a
-  store path are now just stored in the database.</para>
-
-  <para>For instance, given any store path, you can query its closure:
-
-  <screen>
-$ nix-store -qR $(which firefox)
-... lots of paths ...</screen>
-
-  Also, Nix now remembers for each store path the derivation that
-  built it (the &#x201C;deriver&#x201D;):
-
-  <screen>
-$ nix-store -qR $(which firefox)
-/nix/store/4b0jx7vq80l9aqcnkszxhymsf1ffa5jd-firefox-1.0.1.drv</screen>
-
-  So to see the build-time dependencies, you can do
-
-  <screen>
-$ nix-store -qR $(nix-store -qd $(which firefox))</screen>
-
-  or, in a nicer format:
-
-  <screen>
-$ nix-store -q --tree $(nix-store -qd $(which firefox))</screen>
-
-  </para>
-
-  <para>File system references are also stored in reverse.  For
-  instance, you can query all paths that directly or indirectly use a
-  certain Glibc:
-
-  <screen>
-$ nix-store -q --referrers-closure \
-    /nix/store/8lz9yc6zgmc0vlqmn2ipcpkjlmbi51vv-glibc-2.3.4</screen>
-
-  </para>
-
-  </listitem>
-
-  <listitem><para>The concept of fixed-output derivations has been
-  formalised.  Previously, functions such as
-  <function>fetchurl</function> in Nixpkgs used a hack (namely,
-  explicitly specifying a store path hash) to prevent changes to, say,
-  the URL of the file from propagating upwards through the dependency
-  graph, causing rebuilds of everything.  This can now be done cleanly
-  by specifying the <varname>outputHash</varname> and
-  <varname>outputHashAlgo</varname> attributes.  Nix itself checks
-  that the content of the output has the specified hash.  (This is
-  important for maintaining certain invariants necessary for future
-  work on secure shared stores.)</para></listitem>
-
-  <listitem><para>One-click installation :-) It is now possible to
-  install any top-level component in Nixpkgs directly, through the web
-  &#x2014; see, e.g., <link xlink:href="http://catamaran.labs.cs.uu.nl/dist/nixpkgs-0.8/"/>.
-  All you have to do is associate
-  <filename>/nix/bin/nix-install-package</filename> with the MIME type
-  <literal>application/nix-package</literal> (or the extension
-  <filename>.nixpkg</filename>), and clicking on a package link will
-  cause it to be installed, with all appropriate dependencies.  If you
-  just want to install some specific application, this is easier than
-  subscribing to a channel.</para></listitem>
-
-  <listitem><para><command>nix-store -r
-  <replaceable>PATHS</replaceable></command> now builds all the
-  derivations PATHS in parallel.  Previously it did them sequentially
-  (though exploiting possible parallelism between subderivations).
-  This is nice for build farms.</para></listitem>
-
-  <listitem><para><command>nix-channel</command> has new operations
-  <option>--list</option> and
-  <option>--remove</option>.</para></listitem>
-
-  <listitem><para>New ways of installing components into user
-  environments:
-
-  <itemizedlist>
-
-    <listitem><para>Copy from another user environment:
-
-    <screen>
-$ nix-env -i --from-profile .../other-profile firefox</screen>
-
-    </para></listitem>
-
-    <listitem><para>Install a store derivation directly (bypassing the
-    Nix expression language entirely):
-
-    <screen>
-$ nix-env -i /nix/store/z58v41v21xd3...-aterm-2.3.1.drv</screen>
-
-    (This is used to implement <command>nix-install-package</command>,
-    which is therefore immune to evolution in the Nix expression
-    language.)</para></listitem>
-
-    <listitem><para>Install an already built store path directly:
-
-    <screen>
-$ nix-env -i /nix/store/hsyj5pbn0d9i...-aterm-2.3.1</screen>
-
-    </para></listitem>
-
-    <listitem><para>Install the result of a Nix expression specified
-    as a command-line argument:
-
-    <screen>
-$ nix-env -f .../i686-linux.nix -i -E 'x: x.firefoxWrapper'</screen>
-
-    The difference with the normal installation mode is that
-    <option>-E</option> does not use the <varname>name</varname>
-    attributes of derivations.  Therefore, this can be used to
-    disambiguate multiple derivations with the same
-    name.</para></listitem>
-
-  </itemizedlist></para></listitem>
-
-  <listitem><para>A hash of the contents of a store path is now stored
-  in the database after a successful build.  This allows you to check
-  whether store paths have been tampered with: <command>nix-store
-  --verify --check-contents</command>.</para></listitem>
-
-  <listitem>
-
-    <para>Implemented a concurrent garbage collector.  It is now
-    always safe to run the garbage collector, even if other Nix
-    operations are happening simultaneously.</para>
-
-    <para>However, there can still be GC races if you use
-    <command>nix-instantiate</command> and <command>nix-store
-    --realise</command> directly to build things.  To prevent races,
-    use the <option>--add-root</option> flag of those commands.</para>
-
-  </listitem>
-
-  <listitem><para>The garbage collector now finally deletes paths in
-  the right order (i.e., topologically sorted under the &#x201C;references&#x201D;
-  relation), thus making it safe to interrupt the collector without
-  risking a store that violates the closure
-  invariant.</para></listitem>
-
-  <listitem><para>Likewise, the substitute mechanism now downloads
-  files in the right order, thus preserving the closure invariant at
-  all times.</para></listitem>
-
-  <listitem><para>The result of <command>nix-build</command> is now
-  registered as a root of the garbage collector.  If the
-  <filename>./result</filename> link is deleted, the GC root
-  disappears automatically.</para></listitem>
-
-  <listitem>
-
-    <para>The behaviour of the garbage collector can be changed
-    globally by setting options in
-    <filename>/nix/etc/nix/nix.conf</filename>.
-
-    <itemizedlist>
-
-      <listitem><para><literal>gc-keep-derivations</literal> specifies
-      whether deriver links should be followed when searching for live
-      paths.</para></listitem>
-
-      <listitem><para><literal>gc-keep-outputs</literal> specifies
-      whether outputs of derivations should be followed when searching
-      for live paths.</para></listitem>
-
-      <listitem><para><literal>env-keep-derivations</literal>
-      specifies whether user environments should store the paths of
-      derivations when they are added (thus keeping the derivations
-      alive).</para></listitem>
-
-    </itemizedlist>
-
-  </para></listitem>
-
-  <listitem><para>New <command>nix-env</command> query flags
-  <option>--drv-path</option> and
-  <option>--out-path</option>.</para></listitem>
-
-  <listitem><para><command>fetchurl</command> allows SHA-1 and SHA-256
-  in addition to MD5.  Just specify the attribute
-  <varname>sha1</varname> or <varname>sha256</varname> instead of
-  <varname>md5</varname>.</para></listitem>
-
-  <listitem><para>Manual updates.</para></listitem>
-
-</itemizedlist>
-
-</para>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-relnotes-0.7">
-
-<title>Release 0.7 (2005-01-12)</title>
-
-<itemizedlist>
-
-  <listitem><para>Binary patching.  When upgrading components using
-  pre-built binaries (through nix-pull / nix-channel), Nix can
-  automatically download and apply binary patches to already installed
-  components instead of full downloads.  Patching is &#x201C;smart&#x201D;: if there
-  is a <emphasis>sequence</emphasis> of patches to an installed
-  component, Nix will use it.  Patches are currently generated
-  automatically between Nixpkgs (pre-)releases.</para></listitem>
-
-  <listitem><para>Simplifications to the substitute
-  mechanism.</para></listitem>
-
-  <listitem><para>Nix-pull now stores downloaded manifests in
-  <filename>/nix/var/nix/manifests</filename>.</para></listitem>
-
-  <listitem><para>Metadata on files in the Nix store is canonicalised
-  after builds: the last-modified timestamp is set to 0 (00:00:00
-  1/1/1970), the mode is set to 0444 or 0555 (readable and possibly
-  executable by all; setuid/setgid bits are dropped), and the group is
-  set to the default.  This ensures that the result of a build and an
-  installation through a substitute is the same; and that timestamp
-  dependencies are revealed.</para></listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-relnotes-0.6">
-
-<title>Release 0.6 (2004-11-14)</title>
-
-<itemizedlist>
-
-  <listitem>
-    <para>Rewrite of the normalisation engine.
-
-    <itemizedlist>
-
-      <listitem><para>Multiple builds can now be performed in parallel
-      (option <option>-j</option>).</para></listitem>
-
-      <listitem><para>Distributed builds.  Nix can now call a shell
-      script to forward builds to Nix installations on remote
-      machines, which may or may not be of the same platform
-      type.</para></listitem>
-
-      <listitem><para>Option <option>--fallback</option> allows
-      recovery from broken substitutes.</para></listitem>
-
-      <listitem><para>Option <option>--keep-going</option> causes
-      building of other (unaffected) derivations to continue if one
-      failed.</para></listitem>
-
-    </itemizedlist>
-
-    </para>
-
-  </listitem>
-
-  <listitem><para>Improvements to the garbage collector (i.e., it
-  should actually work now).</para></listitem>
-
-  <listitem><para>Setuid Nix installations allow a Nix store to be
-  shared among multiple users.</para></listitem>
-
-  <listitem><para>Substitute registration is much faster
-  now.</para></listitem>
-
-  <listitem><para>A utility <command>nix-build</command> to build a
-  Nix expression and create a symlink to the result int the current
-  directory; useful for testing Nix derivations.</para></listitem>
-
-  <listitem><para>Manual updates.</para></listitem>
-
-  <listitem>
-
-    <para><command>nix-env</command> changes:
-
-    <itemizedlist>
-
-      <listitem><para>Derivations for other platforms are filtered out
-      (which can be overridden using
-      <option>--system-filter</option>).</para></listitem>
-
-      <listitem><para><option>--install</option> by default now
-      uninstall previous derivations with the same
-      name.</para></listitem>
-
-      <listitem><para><option>--upgrade</option> allows upgrading to a
-      specific version.</para></listitem>
-
-      <listitem><para>New operation
-      <option>--delete-generations</option> to remove profile
-      generations (necessary for effective garbage
-      collection).</para></listitem>
-
-      <listitem><para>Nicer output (sorted,
-      columnised).</para></listitem>
-
-    </itemizedlist>
-
-    </para>
-
-  </listitem>
-
-  <listitem><para>More sensible verbosity levels all around (builder
-  output is now shown always, unless <option>-Q</option> is
-  given).</para></listitem>
-
-  <listitem>
-
-    <para>Nix expression language changes:
-
-    <itemizedlist>
-
-      <listitem><para>New language construct: <literal>with
-      <replaceable>E1</replaceable>;
-      <replaceable>E2</replaceable></literal> brings all attributes
-      defined in the attribute set <replaceable>E1</replaceable> in
-      scope in <replaceable>E2</replaceable>.</para></listitem>
-
-      <listitem><para>Added a <function>map</function>
-      function.</para></listitem>
-
-      <listitem><para>Various new operators (e.g., string
-      concatenation).</para></listitem>
-
-    </itemizedlist>
-
-    </para>
-
-  </listitem>
-
-  <listitem><para>Expression evaluation is much
-  faster.</para></listitem>
-
-  <listitem><para>An Emacs mode for editing Nix expressions (with
-  syntax highlighting and indentation) has been
-  added.</para></listitem>
-
-  <listitem><para>Many bug fixes.</para></listitem>
-
-</itemizedlist>
-
-</section>
-<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ch-relnotes-0.5">
-
-<title>Release 0.5 and earlier</title>
-
-<para>Please refer to the Subversion commit log messages.</para>
-
-</section>
-
-</appendix>
-
-<!--
-<appendix>
-    <title>Nix Release Notes</title>
-    <xi:include href="release-notes/release-notes.xml"
-                xpointer="xmlns(x=http://docbook.org/ns/docbook)xpointer(x:article/x:section)" />
-  </appendix>
--->
-
-</book>
--- nix-1.11.15.orig/doc/manual/nix-build.1
+++ /dev/null
@@ -1,669 +0,0 @@
-'\" t
-.\"     Title: nix-build
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-BUILD" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-build \- build a Nix expression
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-build\fR\ 'u
-\fBnix\-build\fR [\fB\-\-help\fR] [\fB\-\-version\fR] [\fB\-\-verbose\fR...] [\fB\-v\fR...] [\fB\-\-no\-build\-output\fR] [\fB\-Q\fR] [{\fB\-\-max\-jobs\fR\ |\ \fB\-j\fR}\ \fInumber\fR] [\fB\-\-cores\fR\ \fInumber\fR] [\fB\-\-max\-silent\-time\fR\ \fInumber\fR] [\fB\-\-timeout\fR\ \fInumber\fR] [\fB\-\-keep\-going\fR] [\fB\-k\fR] [\fB\-\-keep\-failed\fR] [\fB\-K\fR] [\fB\-\-fallback\fR] [\fB\-\-readonly\-mode\fR] [\fB\-\-log\-type\fR\ \fItype\fR] [\fB\-\-show\-trace\fR] [\fB\-I\fR\ \fIpath\fR] [\fB\-\-option\fR\ \fIname\fR\ \fIvalue\fR]
-.br
-[\fB\-\-arg\fR\ \fIname\fR\ \fIvalue\fR] [\fB\-\-argstr\fR\ \fIname\fR\ \fIvalue\fR] [{\fB\-\-attr\fR\ |\ \fB\-A\fR}\ \fIattrPath\fR] [\fB\-\-drv\-link\fR\ \fIdrvlink\fR] [\fB\-\-add\-drv\-link\fR] [\fB\-\-no\-out\-link\fR] [{\fB\-\-out\-link\fR\ |\ \fB\-o\fR}\ \fIoutlink\fR] \fIpaths\fR...
-.SH "DESCRIPTION"
-.PP
-The
-\fBnix\-build\fR
-command builds the derivations described by the Nix expressions in
-\fIpaths\fR\&. If the build succeeds, it places a symlink to the result in the current directory\&. The symlink is called
-result\&. If there are multiple Nix expressions, or the Nix expressions evaluate to multiple derivations, multiple sequentially numbered symlinks are created (result,
-result\-2, and so on)\&.
-.PP
-If no
-\fIpaths\fR
-are specified, then
-\fBnix\-build\fR
-will use
-default\&.nix
-in the current directory, if it exists\&.
-.PP
-If an element of
-\fIpaths\fR
-starts with
-http://
-or
-https://, it is interpreted as the URL of a tarball that will be downloaded and unpacked to a temporary location\&. The tarball must include a single top\-level directory containing at least a file named
-default\&.nix\&.
-.PP
-\fBnix\-build\fR
-is essentially a wrapper around
-\fBnix\-instantiate\fR
-(to translate a high\-level Nix expression to a low\-level store derivation) and
-\fBnix\-store \-\-realise\fR
-(to build the store derivation)\&.
-.if n \{\
-.sp
-.\}
-.RS 4
-.it 1 an-trap
-.nr an-no-space-flag 1
-.nr an-break-flag 1
-.br
-.ps +1
-\fBWarning\fR
-.ps -1
-.br
-.PP
-The result of the build is automatically registered as a root of the Nix garbage collector\&. This root disappears automatically when the
-result
-symlink is deleted or renamed\&. So don\(cqt rename the symlink\&.
-.sp .5v
-.RE
-.SH "OPTIONS"
-.PP
-All options not listed here are passed to
-\fBnix\-store \-\-realise\fR, except for
-\fB\-\-arg\fR
-and
-\fB\-\-attr\fR
-/
-\fB\-A\fR
-which are passed to
-\fBnix\-instantiate\fR\&.
-.PP
-\fB\-\-drv\-link\fR \fIdrvlink\fR
-.RS 4
-Add a symlink named
-\fIdrvlink\fR
-to the store derivation produced by
-\fBnix\-instantiate\fR\&. The derivation is a root of the garbage collector until the symlink is deleted or renamed\&. If there are multiple derivations, numbers are suffixed to
-\fIdrvlink\fR
-to distinguish between them\&.
-.RE
-.PP
-\fB\-\-add\-drv\-link\fR
-.RS 4
-Shorthand for
-\fB\-\-drv\-link\fR
-\&./derivation\&.
-.RE
-.PP
-\fB\-\-no\-out\-link\fR
-.RS 4
-Do not create a symlink to the output path\&. Note that as a result the output does not become a root of the garbage collector, and so might be deleted by
-\fBnix\-store \-\-gc\fR\&.
-.RE
-.PP
-\fB\-\-out\-link\fR / \fB\-o\fR \fIoutlink\fR
-.RS 4
-Change the name of the symlink to the output path created from
-result
-to
-\fIoutlink\fR\&.
-.RE
-.PP
-The following common options are supported:
-.PP
-\fB\-\-help\fR
-.RS 4
-Prints out a summary of the command syntax and exits\&.
-.RE
-.PP
-\fB\-\-version\fR
-.RS 4
-Prints out the Nix version number on standard output and exits\&.
-.RE
-.PP
-\fB\-\-verbose\fR, \fB\-v\fR
-.RS 4
-Increases the level of verbosity of diagnostic messages printed on standard error\&. For each Nix operation, the information printed on standard output is well\-defined; any diagnostic information is printed on standard error, never on standard output\&.
-.sp
-This option may be specified repeatedly\&. Currently, the following verbosity levels exist:
-.PP
-0
-.RS 4
-\(lqErrors only\(rq: only print messages explaining why the Nix invocation failed\&.
-.RE
-.PP
-1
-.RS 4
-\(lqInformational\(rq: print
-\fIuseful\fR
-messages about what Nix is doing\&. This is the default\&.
-.RE
-.PP
-2
-.RS 4
-\(lqTalkative\(rq: print more informational messages\&.
-.RE
-.PP
-3
-.RS 4
-\(lqChatty\(rq: print even more informational messages\&.
-.RE
-.PP
-4
-.RS 4
-\(lqDebug\(rq: print debug information\&.
-.RE
-.PP
-5
-.RS 4
-\(lqVomit\(rq: print vast amounts of debug information\&.
-.RE
-.RE
-.PP
-\fB\-\-no\-build\-output\fR, \fB\-Q\fR
-.RS 4
-By default, output written by builders to standard output and standard error is echoed to the Nix command\*(Aqs standard error\&. This option suppresses this behaviour\&. Note that the builder\*(Aqs standard output and error are always written to a log file in
-\fIprefix\fR/nix/var/log/nix\&.
-.RE
-.PP
-\fB\-\-max\-jobs\fR, \fB\-j\fR
-.RS 4
-Sets the maximum number of build jobs that Nix will perform in parallel to the specified number\&. The default is specified by the
-build\-max\-jobs
-configuration setting, which itself defaults to
-1\&. A higher value is useful on SMP systems or to exploit I/O latency\&.
-.RE
-.PP
-\fB\-\-cores\fR
-.RS 4
-Sets the value of the
-\fBNIX_BUILD_CORES\fR
-environment variable in the invocation of builders\&. Builders can use this variable at their discretion to control the maximum amount of parallelism\&. For instance, in Nixpkgs, if the derivation attribute
-\fIenableParallelBuilding\fR
-is set to
-true, the builder passes the
-\fB\-j\fR\fB\fIN\fR\fR
-flag to GNU Make\&. It defaults to the value of the
-build\-cores
-configuration setting, if set, or
-1
-otherwise\&. The value
-0
-means that the builder should use all available CPU cores in the system\&.
-.RE
-.PP
-\fB\-\-max\-silent\-time\fR
-.RS 4
-Sets the maximum number of seconds that a builder can go without producing any data on standard output or standard error\&. The default is specified by the
-build\-max\-silent\-time
-configuration setting\&.
-0
-means no time\-out\&.
-.RE
-.PP
-\fB\-\-timeout\fR
-.RS 4
-Sets the maximum number of seconds that a builder can run\&. The default is specified by the
-build\-timeout
-configuration setting\&.
-0
-means no timeout\&.
-.RE
-.PP
-\fB\-\-keep\-going\fR, \fB\-k\fR
-.RS 4
-Keep going in case of failed builds, to the greatest extent possible\&. That is, if building an input of some derivation fails, Nix will still build the other inputs, but not the derivation itself\&. Without this option, Nix stops if any build fails (except for builds of substitutes), possibly killing builds in progress (in case of parallel or distributed builds)\&.
-.RE
-.PP
-\fB\-\-keep\-failed\fR, \fB\-K\fR
-.RS 4
-Specifies that in case of a build failure, the temporary directory (usually in
-/tmp) in which the build takes place should not be deleted\&. The path of the build directory is printed as an informational message\&.
-.RE
-.PP
-\fB\-\-fallback\fR
-.RS 4
-Whenever Nix attempts to build a derivation for which substitutes are known for each output path, but realising the output paths through the substitutes fails, fall back on building the derivation\&.
-.sp
-The most common scenario in which this is useful is when we have registered substitutes in order to perform binary distribution from, say, a network repository\&. If the repository is down, the realisation of the derivation will fail\&. When this option is specified, Nix will build the derivation instead\&. Thus, installation from binaries falls back on installation from source\&. This option is not the default since it is generally not desirable for a transient failure in obtaining the substitutes to lead to a full build from source (with the related consumption of resources)\&.
-.RE
-.PP
-\fB\-\-readonly\-mode\fR
-.RS 4
-When this option is used, no attempt is made to open the Nix database\&. Most Nix operations do need database access, so those operations will fail\&.
-.RE
-.PP
-\fB\-\-log\-type\fR \fItype\fR
-.RS 4
-This option determines how the output written to standard error is formatted\&. Nix\(cqs diagnostic messages are typically
-\fInested\fR\&. For instance, when tracing Nix expression evaluation (\fBnix\-env \-vvvvv\fR, messages from subexpressions are nested inside their parent expressions\&. Nix builder output is also often nested\&. For instance, the Nix Packages generic builder nests the various build tasks (unpack, configure, compile, etc\&.), and the GNU Make in
-stdenv\-linux
-has been patched to provide nesting for recursive Make invocations\&.
-.sp
-\fItype\fR
-can be one of the following:
-.PP
-pretty
-.RS 4
-Pretty\-print the output, indicating different nesting levels using spaces\&. This is the default\&.
-.RE
-.PP
-escapes
-.RS 4
-Indicate nesting using escape codes that can be interpreted by the
-\fBnix\-log2xml\fR
-tool in the Nix source distribution\&. The resulting XML file can be fed into the
-\fBlog2html\&.xsl\fR
-stylesheet to create an HTML file that can be browsed interactively, using JavaScript to expand and collapse parts of the output\&.
-.RE
-.PP
-flat
-.RS 4
-Remove all nesting\&.
-.RE
-.sp
-.RE
-.PP
-\fB\-\-arg\fR \fIname\fR \fIvalue\fR
-.RS 4
-This option is accepted by
-\fBnix\-env\fR,
-\fBnix\-instantiate\fR
-and
-\fBnix\-build\fR\&. When evaluating Nix expressions, the expression evaluator will automatically try to call functions that it encounters\&. It can automatically call functions for which every argument has a
-default value
-(e\&.g\&.,
-{ \fIargName\fR ? \fIdefaultValue\fR }: \fI\&.\&.\&.\fR)\&. With
-\fB\-\-arg\fR, you can also call functions that have arguments without a default value (or override a default value)\&. That is, if the evaluator encounters a function with an argument named
-\fIname\fR, it will call it with value
-\fIvalue\fR\&.
-.sp
-For instance, the file
-pkgs/top\-level/all\-packages\&.nix
-in Nixpkgs is actually a function:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-{ # The system (e\&.g\&., `i686\-linux\*(Aq) for which to build the packages\&.
-  system ? builtins\&.currentSystem
-  \fI\&.\&.\&.\fR
-}: \fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-So if you call this Nix expression (e\&.g\&., when you do
-nix\-env \-i \fIpkgname\fR), the function will be called automatically using the value
-builtins\&.currentSystem
-for the
-system
-argument\&. You can override this using
-\fB\-\-arg\fR, e\&.g\&.,
-nix\-env \-i \fIpkgname\fR \-\-arg system \e"i686\-freebsd\e"\&. (Note that since the argument is a Nix string literal, you have to escape the quotes\&.)
-.RE
-.PP
-\fB\-\-argstr\fR \fIname\fR \fIvalue\fR
-.RS 4
-This option is like
-\fB\-\-arg\fR, only the value is not a Nix expression but a string\&. So instead of
-\-\-arg system \e"i686\-linux\e"
-(the outer quotes are to keep the shell happy) you can say
-\-\-argstr system i686\-linux\&.
-.RE
-.PP
-\fB\-\-attr\fR / \fB\-A\fR \fIattrPath\fR
-.RS 4
-Select an attribute from the top\-level Nix expression being evaluated\&. (\fBnix\-env\fR,
-\fBnix\-instantiate\fR,
-\fBnix\-build\fR
-and
-\fBnix\-shell\fR
-only\&.) The
-\fIattribute path\fR
-\fIattrPath\fR
-is a sequence of attribute names separated by dots\&. For instance, given a top\-level Nix expression
-\fIe\fR, the attribute path
-xorg\&.xorgserver
-would cause the expression
-\fIe\fR\&.xorg\&.xorgserver
-to be used\&. See
-\fBnix\-env \-\-install\fR
-for some concrete examples\&.
-.sp
-In addition to attribute names, you can also specify array indices\&. For instance, the attribute path
-foo\&.3\&.bar
-selects the
-bar
-attribute of the fourth element of the array in the
-foo
-attribute of the top\-level expression\&.
-.RE
-.PP
-\fB\-\-expr\fR / \fB\-E\fR
-.RS 4
-Interpret the command line arguments as a list of Nix expressions to be parsed and evaluated, rather than as a list of file names of Nix expressions\&. (\fBnix\-instantiate\fR,
-\fBnix\-build\fR
-and
-\fBnix\-shell\fR
-only\&.)
-.RE
-.PP
-\fB\-\-show\-trace\fR
-.RS 4
-Causes Nix to print out a stack trace in case of Nix expression evaluation errors\&.
-.RE
-.PP
-\fB\-I\fR \fIpath\fR
-.RS 4
-Add a path to the Nix expression search path\&. This option may be given multiple times\&. See the
-\fBNIX_PATH\fR
-environment variable for information on the semantics of the Nix search path\&. Paths added through
-\fB\-I\fR
-take precedence over
-\fBNIX_PATH\fR\&.
-.RE
-.PP
-\fB\-\-option\fR \fIname\fR \fIvalue\fR
-.RS 4
-Set the Nix configuration option
-\fIname\fR
-to
-\fIvalue\fR\&. This overrides settings in the Nix configuration file (see
-\fBnix.conf\fR(5))\&.
-.RE
-.PP
-\fB\-\-repair\fR
-.RS 4
-Fix corrupted or missing store paths by redownloading or rebuilding them\&. Note that this is slow because it requires computing a cryptographic hash of the contents of every path in the closure of the build\&. Also note the warning under
-\fBnix\-store \-\-repair\-path\fR\&.
-.RE
-.SH "EXAMPLES"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-build \*(Aq<nixpkgs>\*(Aq \-A firefox
-store derivation is /nix/store/qybprl8sz2lc\&.\&.\&.\-firefox\-1\&.5\&.0\&.7\&.drv
-/nix/store/d18hyl92g30l\&.\&.\&.\-firefox\-1\&.5\&.0\&.7
-
-$ ls \-l result
-lrwxrwxrwx  \fI\&.\&.\&.\fR  result \-> /nix/store/d18hyl92g30l\&.\&.\&.\-firefox\-1\&.5\&.0\&.7
-
-$ ls \&./result/bin/
-firefox  firefox\-config
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-If a derivation has multiple outputs,
-\fBnix\-build\fR
-will build the default (first) output\&. You can also build all outputs:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-build \*(Aq<nixpkgs>\*(Aq \-A openssl\&.all
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-This will create a symlink for each output named
-result\-\fIoutputname\fR\&. The suffix is omitted if the output name is
-out\&. So if
-openssl
-has outputs
-out,
-bin
-and
-man,
-\fBnix\-build\fR
-will create symlinks
-result,
-result\-bin
-and
-result\-man\&. It\(cqs also possible to build a specific output:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-build \*(Aq<nixpkgs>\*(Aq \-A openssl\&.man
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-This will create a symlink
-result\-man\&.
-.PP
-Build a Nix expression given on the command line:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-build \-E \*(Aqwith import <nixpkgs> { }; runCommand "foo" { } "echo bar > $out"\*(Aq
-$ cat \&./result
-bar
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-Build the GNU Hello package from the latest revision of the master branch of Nixpkgs:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-build https://github\&.com/NixOS/nixpkgs/archive/master\&.tar\&.gz \-A hello
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "ENVIRONMENT VARIABLES"
-.PP
-\fBNIX_PATH\fR
-.RS 4
-A colon\-separated list of directories used to look up Nix expressions enclosed in angle brackets (i\&.e\&.,
-<\fIpath\fR>)\&. For instance, the value
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-/home/eelco/Dev:/etc/nixos
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-will cause Nix to look for paths relative to
-/home/eelco/Dev
-and
-/etc/nixos, in that order\&. It is also possible to match paths against a prefix\&. For example, the value
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-nixpkgs=/home/eelco/Dev/nixpkgs\-branch:/etc/nixos
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-will cause Nix to search for
-<nixpkgs/\fIpath\fR>
-in
-/home/eelco/Dev/nixpkgs\-branch/\fIpath\fR
-and
-/etc/nixos/nixpkgs/\fIpath\fR\&.
-.sp
-If a path in the Nix search path starts with
-http://
-or
-https://, it is interpreted as the URL of a tarball that will be downloaded and unpacked to a temporary location\&. The tarball must consist of a single top\-level directory\&. For example, setting
-\fBNIX_PATH\fR
-to
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-nixpkgs=https://github\&.com/NixOS/nixpkgs\-channels/archive/nixos\-14\&.12\&.tar\&.gz
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-tells Nix to download the latest revision in the Nixpkgs/NixOS 14\&.12 channel\&.
-.sp
-The search path can be extended using the
-\fB\-I\fR
-option, which takes precedence over
-\fBNIX_PATH\fR\&.
-.RE
-.PP
-\fBNIX_IGNORE_SYMLINK_STORE\fR
-.RS 4
-Normally, the Nix store directory (typically
-/nix/store) is not allowed to contain any symlink components\&. This is to prevent \(lqimpure\(rq builds\&. Builders sometimes \(lqcanonicalise\(rq paths by resolving all symlink components\&. Thus, builds on different machines (with
-/nix/store
-resolving to different locations) could yield different results\&. This is generally not a problem, except when builds are deployed to machines where
-/nix/store
-resolves differently\&. If you are sure that you\(cqre not going to do that, you can set
-\fBNIX_IGNORE_SYMLINK_STORE\fR
-to
-\fB1\fR\&.
-.sp
-Note that if you\(cqre symlinking the Nix store so that you can put it on another file system than the root file system, on Linux you\(cqre better off using
-bind
-mount points, e\&.g\&.,
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ mkdir /nix
-$ mount \-o bind /mnt/otherdisk/nix /nix
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Consult the
-\fBmount\fR(8)
-manual page for details\&.
-.RE
-.PP
-\fBNIX_STORE_DIR\fR
-.RS 4
-Overrides the location of the Nix store (default
-\fIprefix\fR/store)\&.
-.RE
-.PP
-\fBNIX_DATA_DIR\fR
-.RS 4
-Overrides the location of the Nix static data directory (default
-\fIprefix\fR/share)\&.
-.RE
-.PP
-\fBNIX_LOG_DIR\fR
-.RS 4
-Overrides the location of the Nix log directory (default
-\fIprefix\fR/log/nix)\&.
-.RE
-.PP
-\fBNIX_STATE_DIR\fR
-.RS 4
-Overrides the location of the Nix state directory (default
-\fIprefix\fR/var/nix)\&.
-.RE
-.PP
-\fBNIX_DB_DIR\fR
-.RS 4
-Overrides the location of the Nix database (default
-\fI$NIX_STATE_DIR\fR/db, i\&.e\&.,
-\fIprefix\fR/var/nix/db)\&.
-.RE
-.PP
-\fBNIX_CONF_DIR\fR
-.RS 4
-Overrides the location of the Nix configuration directory (default
-\fIprefix\fR/etc/nix)\&.
-.RE
-.PP
-\fBTMPDIR\fR
-.RS 4
-Use the specified directory to store temporary files\&. In particular, this includes temporary build directories; these can take up substantial amounts of disk space\&. The default is
-/tmp\&.
-.RE
-.PP
-\fBNIX_BUILD_HOOK\fR
-.RS 4
-Specifies the location of the
-\fIbuild hook\fR, which is a program (typically some script) that Nix will call whenever it wants to build a derivation\&. This is used to implement distributed builds\&.
-.RE
-.PP
-\fBNIX_REMOTE\fR
-.RS 4
-This variable should be set to
-daemon
-if you want to use the Nix daemon to execute Nix operations\&. This is necessary in
-multi\-user Nix installations\&. Otherwise, it should be left unset\&.
-.RE
-.PP
-\fBNIX_SHOW_STATS\fR
-.RS 4
-If set to
-1, Nix will print some evaluation statistics, such as the number of values allocated\&.
-.RE
-.PP
-\fBNIX_COUNT_CALLS\fR
-.RS 4
-If set to
-1, Nix will print how often functions were called during Nix expression evaluation\&. This is useful for profiling your Nix expressions\&.
-.RE
-.PP
-\fBGC_INITIAL_HEAP_SIZE\fR
-.RS 4
-If Nix has been configured to use the Boehm garbage collector, this variable sets the initial size of the heap in bytes\&. It defaults to 384 MiB\&. Setting it to a low value reduces memory consumption, but will increase runtime due to the overhead of garbage collection\&.
-.RE
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
--- nix-1.11.15.orig/doc/manual/nix-channel.1
+++ /dev/null
@@ -1,189 +0,0 @@
-'\" t
-.\"     Title: nix-channel
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-CHANNEL" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-channel \- manage Nix channels
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-channel\fR\ 'u
-\fBnix\-channel\fR {\fB\-\-add\fR\ \fIurl\fR\ [\fIname\fR]  | \fB\-\-remove\fR\ \fIname\fR | \fB\-\-list\fR | \fB\-\-update\fR\ [\fInames\fR...]  | \fB\-\-rollback\fR\ [\fIgeneration\fR] }
-.SH "DESCRIPTION"
-.PP
-A Nix channel is mechanism that allows you to automatically stay up\-to\-date with a set of pre\-built Nix expressions\&. A Nix channel is just a URL that points to a place containing both a set of Nix expressions and a pointer to a binary cache\&.
-.PP
-This command has the following operations:
-.PP
-\fB\-\-add\fR \fIurl\fR [\fIname\fR]
-.RS 4
-Adds a channel named
-\fIname\fR
-with URL
-\fIurl\fR
-to the list of subscribed channels\&. If
-\fIname\fR
-is omitted, it defaults to the last component of
-\fIurl\fR, with the suffixes
-\-stable
-or
-\-unstable
-removed\&.
-.RE
-.PP
-\fB\-\-remove\fR \fIname\fR
-.RS 4
-Removes the channel named
-\fIname\fR
-from the list of subscribed channels\&.
-.RE
-.PP
-\fB\-\-list\fR
-.RS 4
-Prints the names and URLs of all subscribed channels on standard output\&.
-.RE
-.PP
-\fB\-\-update\fR [\fInames\fR\&...]
-.RS 4
-Downloads the Nix expressions of all subscribed channels (or only those included in
-\fInames\fR
-if specified), makes them the default for
-\fBnix\-env\fR
-operations (by symlinking them from the directory
-~/\&.nix\-defexpr), and performs a
-\fBnix\-pull\fR
-on the manifests of all channels to make pre\-built binaries available\&.
-.RE
-.PP
-\fB\-\-rollback\fR [\fIgeneration\fR]
-.RS 4
-Reverts the previous call to
-\fBnix\-channel \-\-update\fR\&. Optionally, you can specify a specific channel generation number to restore\&.
-.RE
-.PP
-Note that
-\fB\-\-add\fR
-does not automatically perform an update\&.
-.PP
-The list of subscribed channels is stored in
-~/\&.nix\-channels\&.
-.SH "EXAMPLES"
-.PP
-To subscribe to the Nixpkgs channel and install the GNU Hello package:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-channel \-\-add https://nixos\&.org/channels/nixpkgs\-unstable
-$ nix\-channel \-\-update
-$ nix\-env \-iA nixpkgs\&.hello
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-You can revert channel updates using
-\fB\-\-rollback\fR:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-instantiate \-\-eval \-E \*(Aq(import <nixpkgs> {})\&.lib\&.nixpkgsVersion\*(Aq
-"14\&.04\&.527\&.0e935f1"
-
-$ nix\-channel \-\-rollback
-switching from generation 483 to 482
-
-$ nix\-instantiate \-\-eval \-E \*(Aq(import <nixpkgs> {})\&.lib\&.nixpkgsVersion\*(Aq
-"14\&.04\&.526\&.dbadfad"
-.fi
-.if n \{\
-.RE
-.\}
-.SH "FILES"
-.PP
-/nix/var/nix/profiles/per\-user/\fIusername\fR/channels
-.RS 4
-\fBnix\-channel\fR
-uses a
-\fBnix\-env\fR
-profile to keep track of previous versions of the subscribed channels\&. Every time you run
-\fBnix\-channel \-\-update\fR, a new channel generation (that is, a symlink to the channel Nix expressions in the Nix store) is created\&. This enables
-\fBnix\-channel \-\-rollback\fR
-to revert to previous versions\&.
-.RE
-.PP
-~/\&.nix\-defexpr/channels
-.RS 4
-This is a symlink to
-/nix/var/nix/profiles/per\-user/\fIusername\fR/channels\&. It ensures that
-\fBnix\-env\fR
-can find your channels\&. In a multi\-user installation, you may also have
-~/\&.nix\-defexpr/channels_root, which links to the channels of the root user\&.
-.RE
-.SH "CHANNEL FORMAT"
-.PP
-A channel URL should point to a directory containing the following files:
-.PP
-nixexprs\&.tar\&.xz
-.RS 4
-A tarball containing Nix expressions and files referenced by them (such as build scripts and patches)\&. At top\-level, the tarball should contain a single directory\&. That directory must contain a file
-default\&.nix
-that serves as the channel\(cqs \(lqentry point\(rq\&.
-.RE
-.PP
-binary\-cache\-url
-.RS 4
-A file containing the URL to a binary cache (such as
-https://cache\&.nixos\&.org\&. Nix will automatically check this cache for pre\-built binaries, if the user has sufficient rights to add binary caches\&. For instance, in a multi\-user Nix setup, the binary caches provided by the channels of the root user are used automatically, but caches corresponding to the channels of non\-root users are ignored\&. Binary caches can be created and maintained using
-\fBnix\-push\fR\&.
-.RE
-.PP
-MANIFEST\&.bz2
-.RS 4
-(Deprecated in favour of binary caches\&.) A manifest as created by
-\fBnix\-push\fR\&. Only used if
-binary\-cache\-url
-is not present or if the
-nix\&.conf
-option
-\fBforce\-manifest\fR
-is set\&.
-.RE
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
--- nix-1.11.15.orig/doc/manual/nix-collect-garbage.1
+++ /dev/null
@@ -1,77 +0,0 @@
-'\" t
-.\"     Title: nix-collect-garbage
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-COLLECT\-GARBAG" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-collect-garbage \- delete unreachable store paths
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-collect\-garbage\fR\ 'u
-\fBnix\-collect\-garbage\fR [\fB\-\-delete\-old\fR] [\fB\-d\fR] [\fB\-\-delete\-older\-than\fR\ \fIperiod\fR] [\fB\-\-print\-roots\fR | \fB\-\-print\-live\fR | \fB\-\-print\-dead\fR | \fB\-\-delete\fR] [\fB\-\-max\-freed\fR\ \fIbytes\fR] [\fB\-\-dry\-run\fR]
-.SH "DESCRIPTION"
-.PP
-The command
-\fBnix\-collect\-garbage\fR
-is mostly an alias of
-\fBnix\-store \-\-gc\fR, that is, it deletes all unreachable paths in the Nix store to clean up your system\&. However, it provides two additional options:
-\fB\-d\fR
-(\fB\-\-delete\-old\fR), which deletes all old generations of all profiles in
-/nix/var/nix/profiles
-by invoking
-nix\-env \-\-delete\-generations old
-on all profiles (of course, this makes rollbacks to previous configurations impossible); and
-\fB\-\-delete\-older\-than\fR
-\fIperiod\fR, where period is a value such as
-30d, which deletes all generations older than the specified number of days in all profiles in
-/nix/var/nix/profiles
-(except for the generations that were active at that point in time)\&.
-.SH "EXAMPLE"
-.PP
-To delete from the Nix store everything that is not used by the current generations of each profile, do
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-collect\-garbage \-d
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
--- nix-1.11.15.orig/doc/manual/nix-copy-closure.1
+++ /dev/null
@@ -1,155 +0,0 @@
-'\" t
-.\"     Title: nix-copy-closure
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-COPY\-CLOSURE" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-copy-closure \- copy a closure to or from a remote machine via SSH
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-copy\-closure\fR\ 'u
-\fBnix\-copy\-closure\fR [\fB\-\-to\fR | \fB\-\-from\fR] [\fB\-\-sign\fR] [\fB\-\-gzip\fR] [\fB\-\-include\-outputs\fR] [\fB\-\-use\-substitutes\fR] [\fB\-s\fR] [\fB\-v\fR] \fIuser@\fR\fImachine\fR \fIpaths\fR
-.SH "DESCRIPTION"
-.PP
-\fBnix\-copy\-closure\fR
-gives you an easy and efficient way to exchange software between machines\&. Given one or more Nix store
-\fIpaths\fR
-on the local machine,
-\fBnix\-copy\-closure\fR
-computes the closure of those paths (i\&.e\&. all their dependencies in the Nix store), and copies all paths in the closure to the remote machine via the
-\fBssh\fR
-(Secure Shell) command\&. With the
-\fB\-\-from\fR, the direction is reversed: the closure of
-\fIpaths\fR
-on a remote machine is copied to the Nix store on the local machine\&.
-.PP
-This command is efficient because it only sends the store paths that are missing on the target machine\&.
-.PP
-Since
-\fBnix\-copy\-closure\fR
-calls
-\fBssh\fR, you may be asked to type in the appropriate password or passphrase\&. In fact, you may be asked
-\fItwice\fR
-because
-\fBnix\-copy\-closure\fR
-currently connects twice to the remote machine, first to get the set of paths missing on the target machine, and second to send the dump of those paths\&. If this bothers you, use
-\fBssh\-agent\fR\&.
-.SS "Options"
-.PP
-\fB\-\-to\fR
-.RS 4
-Copy the closure of
-\fIpaths\fR
-from the local Nix store to the Nix store on
-\fImachine\fR\&. This is the default\&.
-.RE
-.PP
-\fB\-\-from\fR
-.RS 4
-Copy the closure of
-\fIpaths\fR
-from the Nix store on
-\fImachine\fR
-to the local Nix store\&.
-.RE
-.PP
-\fB\-\-sign\fR
-.RS 4
-Let the sending machine cryptographically sign the dump of each path with the key in
-\fIsysconfdir\fR/nix/signing\-key\&.sec\&. If the user on the target machine does not have direct access to the Nix store (i\&.e\&., if the target machine has a multi\-user Nix installation), then the target machine will check the dump against
-\fIsysconfdir\fR/nix/signing\-key\&.pub
-before unpacking it in its Nix store\&. This allows secure sharing of store paths between untrusted users on two machines, provided that there is a trust relation between the Nix installations on both machines (namely, they have matching public/secret keys)\&.
-.RE
-.PP
-\fB\-\-gzip\fR
-.RS 4
-Enable compression of the SSH connection\&.
-.RE
-.PP
-\fB\-\-include\-outputs\fR
-.RS 4
-Also copy the outputs of store derivations included in the closure\&.
-.RE
-.PP
-\fB\-\-use\-substitutes\fR / \fB\-s\fR
-.RS 4
-Attempt to download missing paths on the target machine using Nix\(cqs substitute mechanism\&. Any paths that cannot be substituted on the target are still copied normally from the source\&. This is useful, for instance, if the connection between the source and target machine is slow, but the connection between the target machine and
-nixos\&.org
-(the default binary cache server) is fast\&.
-.RE
-.PP
-\fB\-v\fR
-.RS 4
-Show verbose output\&.
-.RE
-.SS "Environment variables"
-.PP
-\fBNIX_SSHOPTS\fR
-.RS 4
-Additional options to be passed to
-\fBssh\fR
-on the command line\&.
-.RE
-.SS "Examples"
-.PP
-Copy Firefox with all its dependencies to a remote machine:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-copy\-closure \-\-to alice@itchy\&.labs $(type \-tP firefox)
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-Copy Subversion from a remote machine and then install it into a user environment:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-copy\-closure \-\-from alice@itchy\&.labs \e
-    /nix/store/0dj0503hjxy5mbwlafv1rsbdiyx1gkdy\-subversion\-1\&.4\&.4
-$ nix\-env \-i /nix/store/0dj0503hjxy5mbwlafv1rsbdiyx1gkdy\-subversion\-1\&.4\&.4
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
--- nix-1.11.15.orig/doc/manual/nix-daemon.8
+++ /dev/null
@@ -1,49 +0,0 @@
-'\" t
-.\"     Title: nix-daemon
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-DAEMON" "8" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-daemon \- Nix multi\-user support daemon
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-daemon\fR\ 'u
-\fBnix\-daemon\fR
-.SH "DESCRIPTION"
-.PP
-The Nix daemon is necessary in multi\-user Nix installations\&. It performs build actions and other operations on the Nix store on behalf of unprivileged users\&.
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
--- nix-1.11.15.orig/doc/manual/nix-env.1
+++ /dev/null
@@ -1,1673 +0,0 @@
-'\" t
-.\"     Title: nix-env
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-ENV" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-env \- manipulate or query Nix user environments
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-env\fR\ 'u
-\fBnix\-env\fR [\fB\-\-help\fR] [\fB\-\-version\fR] [\fB\-\-verbose\fR...] [\fB\-v\fR...] [\fB\-\-no\-build\-output\fR] [\fB\-Q\fR] [{\fB\-\-max\-jobs\fR\ |\ \fB\-j\fR}\ \fInumber\fR] [\fB\-\-cores\fR\ \fInumber\fR] [\fB\-\-max\-silent\-time\fR\ \fInumber\fR] [\fB\-\-timeout\fR\ \fInumber\fR] [\fB\-\-keep\-going\fR] [\fB\-k\fR] [\fB\-\-keep\-failed\fR] [\fB\-K\fR] [\fB\-\-fallback\fR] [\fB\-\-readonly\-mode\fR] [\fB\-\-log\-type\fR\ \fItype\fR] [\fB\-\-show\-trace\fR] [\fB\-I\fR\ \fIpath\fR] [\fB\-\-option\fR\ \fIname\fR\ \fIvalue\fR]
-.br
-[\fB\-\-arg\fR\ \fIname\fR\ \fIvalue\fR] [\fB\-\-argstr\fR\ \fIname\fR\ \fIvalue\fR] [{\fB\-\-file\fR\ |\ \fB\-f\fR}\ \fIpath\fR] [{\fB\-\-profile\fR\ |\ \fB\-p\fR}\ \fIpath\fR] [\fB\-\-system\-filter\fR\ \fIsystem\fR] [\fB\-\-dry\-run\fR] \fIoperation\fR [\fIoptions\fR...] [\fIarguments\fR...]
-.SH "DESCRIPTION"
-.PP
-The command
-\fBnix\-env\fR
-is used to manipulate Nix user environments\&. User environments are sets of software packages available to a user at some point in time\&. In other words, they are a synthesised view of the programs available in the Nix store\&. There may be many user environments: different users can have different environments, and individual users can switch between different environments\&.
-.PP
-\fBnix\-env\fR
-takes exactly one
-\fIoperation\fR
-flag which indicates the subcommand to be performed\&. These are documented below\&.
-.SH "SELECTORS"
-.PP
-Several commands, such as
-\fBnix\-env \-q\fR
-and
-\fBnix\-env \-i\fR, take a list of arguments that specify the packages on which to operate\&. These are extended regular expressions that must match the entire name of the package\&. (For details on regular expressions, see
-\fBregex\fR(7)\&.) The match is case\-sensitive\&. The regular expression can optionally be followed by a dash and a version number; if omitted, any version of the package will match\&. Here are some examples:
-.PP
-firefox
-.RS 4
-Matches the package name
-firefox
-and any version\&.
-.RE
-.PP
-firefox\-32\&.0
-.RS 4
-Matches the package name
-firefox
-and version
-32\&.0\&.
-.RE
-.PP
-gtk\e\e+
-.RS 4
-Matches the package name
-gtk+\&. The
-+
-character must be escaped using a backslash to prevent it from being interpreted as a quantifier, and the backslash must be escaped in turn with another backslash to ensure that the shell passes it on\&.
-.RE
-.PP
-\&.\e*
-.RS 4
-Matches any package name\&. This is the default for most commands\&.
-.RE
-.PP
-\*(Aq\&.*zip\&.*\*(Aq
-.RS 4
-Matches any package name containing the string
-zip\&. Note the dots:
-\*(Aq*zip*\*(Aq
-does not work, because in a regular expression, the character
-*
-is interpreted as a quantifier\&.
-.RE
-.PP
-\*(Aq\&.*(firefox|chromium)\&.*\*(Aq
-.RS 4
-Matches any package name containing the strings
-firefox
-or
-chromium\&.
-.RE
-.SH "COMMON OPTIONS"
-.PP
-This section lists the options that are common to all operations\&. These options are allowed for every subcommand, though they may not always have an effect\&.
-.PP
-\fB\-\-file\fR, \fB\-f\fR
-.RS 4
-Specifies the Nix expression (designated below as the
-\fIactive Nix expression\fR) used by the
-\fB\-\-install\fR,
-\fB\-\-upgrade\fR, and
-\fB\-\-query \-\-available\fR
-operations to obtain derivations\&. The default is
-~/\&.nix\-defexpr\&.
-.sp
-If the argument starts with
-http://
-or
-https://, it is interpreted as the URL of a tarball that will be downloaded and unpacked to a temporary location\&. The tarball must include a single top\-level directory containing at least a file named
-default\&.nix\&.
-.RE
-.PP
-\fB\-\-profile\fR, \fB\-p\fR
-.RS 4
-Specifies the profile to be used by those operations that operate on a profile (designated below as the
-\fIactive profile\fR)\&. A profile is a sequence of user environments called
-\fIgenerations\fR, one of which is the
-\fIcurrent generation\fR\&.
-.RE
-.PP
-\fB\-\-dry\-run\fR
-.RS 4
-For the
-\fB\-\-install\fR,
-\fB\-\-upgrade\fR,
-\fB\-\-uninstall\fR,
-\fB\-\-switch\-generation\fR,
-\fB\-\-delete\-generations\fR
-and
-\fB\-\-rollback\fR
-operations, this flag will cause
-\fBnix\-env\fR
-to print what
-\fIwould\fR
-be done if this flag had not been specified, without actually doing it\&.
-.sp
-\fB\-\-dry\-run\fR
-also prints out which paths will be
-substituted
-(i\&.e\&., downloaded) and which paths will be built from source (because no substitute is available)\&.
-.RE
-.PP
-\fB\-\-system\-filter\fR \fIsystem\fR
-.RS 4
-By default, operations such as
-\fB\-\-query \-\-available\fR
-show derivations matching any platform\&. This option allows you to use derivations for the specified platform
-\fIsystem\fR\&.
-.RE
-.PP
-\fB\-\-help\fR
-.RS 4
-Prints out a summary of the command syntax and exits\&.
-.RE
-.PP
-\fB\-\-version\fR
-.RS 4
-Prints out the Nix version number on standard output and exits\&.
-.RE
-.PP
-\fB\-\-verbose\fR, \fB\-v\fR
-.RS 4
-Increases the level of verbosity of diagnostic messages printed on standard error\&. For each Nix operation, the information printed on standard output is well\-defined; any diagnostic information is printed on standard error, never on standard output\&.
-.sp
-This option may be specified repeatedly\&. Currently, the following verbosity levels exist:
-.PP
-0
-.RS 4
-\(lqErrors only\(rq: only print messages explaining why the Nix invocation failed\&.
-.RE
-.PP
-1
-.RS 4
-\(lqInformational\(rq: print
-\fIuseful\fR
-messages about what Nix is doing\&. This is the default\&.
-.RE
-.PP
-2
-.RS 4
-\(lqTalkative\(rq: print more informational messages\&.
-.RE
-.PP
-3
-.RS 4
-\(lqChatty\(rq: print even more informational messages\&.
-.RE
-.PP
-4
-.RS 4
-\(lqDebug\(rq: print debug information\&.
-.RE
-.PP
-5
-.RS 4
-\(lqVomit\(rq: print vast amounts of debug information\&.
-.RE
-.RE
-.PP
-\fB\-\-no\-build\-output\fR, \fB\-Q\fR
-.RS 4
-By default, output written by builders to standard output and standard error is echoed to the Nix command\*(Aqs standard error\&. This option suppresses this behaviour\&. Note that the builder\*(Aqs standard output and error are always written to a log file in
-\fIprefix\fR/nix/var/log/nix\&.
-.RE
-.PP
-\fB\-\-max\-jobs\fR, \fB\-j\fR
-.RS 4
-Sets the maximum number of build jobs that Nix will perform in parallel to the specified number\&. The default is specified by the
-build\-max\-jobs
-configuration setting, which itself defaults to
-1\&. A higher value is useful on SMP systems or to exploit I/O latency\&.
-.RE
-.PP
-\fB\-\-cores\fR
-.RS 4
-Sets the value of the
-\fBNIX_BUILD_CORES\fR
-environment variable in the invocation of builders\&. Builders can use this variable at their discretion to control the maximum amount of parallelism\&. For instance, in Nixpkgs, if the derivation attribute
-\fIenableParallelBuilding\fR
-is set to
-true, the builder passes the
-\fB\-j\fR\fB\fIN\fR\fR
-flag to GNU Make\&. It defaults to the value of the
-build\-cores
-configuration setting, if set, or
-1
-otherwise\&. The value
-0
-means that the builder should use all available CPU cores in the system\&.
-.RE
-.PP
-\fB\-\-max\-silent\-time\fR
-.RS 4
-Sets the maximum number of seconds that a builder can go without producing any data on standard output or standard error\&. The default is specified by the
-build\-max\-silent\-time
-configuration setting\&.
-0
-means no time\-out\&.
-.RE
-.PP
-\fB\-\-timeout\fR
-.RS 4
-Sets the maximum number of seconds that a builder can run\&. The default is specified by the
-build\-timeout
-configuration setting\&.
-0
-means no timeout\&.
-.RE
-.PP
-\fB\-\-keep\-going\fR, \fB\-k\fR
-.RS 4
-Keep going in case of failed builds, to the greatest extent possible\&. That is, if building an input of some derivation fails, Nix will still build the other inputs, but not the derivation itself\&. Without this option, Nix stops if any build fails (except for builds of substitutes), possibly killing builds in progress (in case of parallel or distributed builds)\&.
-.RE
-.PP
-\fB\-\-keep\-failed\fR, \fB\-K\fR
-.RS 4
-Specifies that in case of a build failure, the temporary directory (usually in
-/tmp) in which the build takes place should not be deleted\&. The path of the build directory is printed as an informational message\&.
-.RE
-.PP
-\fB\-\-fallback\fR
-.RS 4
-Whenever Nix attempts to build a derivation for which substitutes are known for each output path, but realising the output paths through the substitutes fails, fall back on building the derivation\&.
-.sp
-The most common scenario in which this is useful is when we have registered substitutes in order to perform binary distribution from, say, a network repository\&. If the repository is down, the realisation of the derivation will fail\&. When this option is specified, Nix will build the derivation instead\&. Thus, installation from binaries falls back on installation from source\&. This option is not the default since it is generally not desirable for a transient failure in obtaining the substitutes to lead to a full build from source (with the related consumption of resources)\&.
-.RE
-.PP
-\fB\-\-readonly\-mode\fR
-.RS 4
-When this option is used, no attempt is made to open the Nix database\&. Most Nix operations do need database access, so those operations will fail\&.
-.RE
-.PP
-\fB\-\-log\-type\fR \fItype\fR
-.RS 4
-This option determines how the output written to standard error is formatted\&. Nix\(cqs diagnostic messages are typically
-\fInested\fR\&. For instance, when tracing Nix expression evaluation (\fBnix\-env \-vvvvv\fR, messages from subexpressions are nested inside their parent expressions\&. Nix builder output is also often nested\&. For instance, the Nix Packages generic builder nests the various build tasks (unpack, configure, compile, etc\&.), and the GNU Make in
-stdenv\-linux
-has been patched to provide nesting for recursive Make invocations\&.
-.sp
-\fItype\fR
-can be one of the following:
-.PP
-pretty
-.RS 4
-Pretty\-print the output, indicating different nesting levels using spaces\&. This is the default\&.
-.RE
-.PP
-escapes
-.RS 4
-Indicate nesting using escape codes that can be interpreted by the
-\fBnix\-log2xml\fR
-tool in the Nix source distribution\&. The resulting XML file can be fed into the
-\fBlog2html\&.xsl\fR
-stylesheet to create an HTML file that can be browsed interactively, using JavaScript to expand and collapse parts of the output\&.
-.RE
-.PP
-flat
-.RS 4
-Remove all nesting\&.
-.RE
-.sp
-.RE
-.PP
-\fB\-\-arg\fR \fIname\fR \fIvalue\fR
-.RS 4
-This option is accepted by
-\fBnix\-env\fR,
-\fBnix\-instantiate\fR
-and
-\fBnix\-build\fR\&. When evaluating Nix expressions, the expression evaluator will automatically try to call functions that it encounters\&. It can automatically call functions for which every argument has a
-default value
-(e\&.g\&.,
-{ \fIargName\fR ? \fIdefaultValue\fR }: \fI\&.\&.\&.\fR)\&. With
-\fB\-\-arg\fR, you can also call functions that have arguments without a default value (or override a default value)\&. That is, if the evaluator encounters a function with an argument named
-\fIname\fR, it will call it with value
-\fIvalue\fR\&.
-.sp
-For instance, the file
-pkgs/top\-level/all\-packages\&.nix
-in Nixpkgs is actually a function:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-{ # The system (e\&.g\&., `i686\-linux\*(Aq) for which to build the packages\&.
-  system ? builtins\&.currentSystem
-  \fI\&.\&.\&.\fR
-}: \fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-So if you call this Nix expression (e\&.g\&., when you do
-nix\-env \-i \fIpkgname\fR), the function will be called automatically using the value
-builtins\&.currentSystem
-for the
-system
-argument\&. You can override this using
-\fB\-\-arg\fR, e\&.g\&.,
-nix\-env \-i \fIpkgname\fR \-\-arg system \e"i686\-freebsd\e"\&. (Note that since the argument is a Nix string literal, you have to escape the quotes\&.)
-.RE
-.PP
-\fB\-\-argstr\fR \fIname\fR \fIvalue\fR
-.RS 4
-This option is like
-\fB\-\-arg\fR, only the value is not a Nix expression but a string\&. So instead of
-\-\-arg system \e"i686\-linux\e"
-(the outer quotes are to keep the shell happy) you can say
-\-\-argstr system i686\-linux\&.
-.RE
-.PP
-\fB\-\-attr\fR / \fB\-A\fR \fIattrPath\fR
-.RS 4
-Select an attribute from the top\-level Nix expression being evaluated\&. (\fBnix\-env\fR,
-\fBnix\-instantiate\fR,
-\fBnix\-build\fR
-and
-\fBnix\-shell\fR
-only\&.) The
-\fIattribute path\fR
-\fIattrPath\fR
-is a sequence of attribute names separated by dots\&. For instance, given a top\-level Nix expression
-\fIe\fR, the attribute path
-xorg\&.xorgserver
-would cause the expression
-\fIe\fR\&.xorg\&.xorgserver
-to be used\&. See
-\fBnix\-env \-\-install\fR
-for some concrete examples\&.
-.sp
-In addition to attribute names, you can also specify array indices\&. For instance, the attribute path
-foo\&.3\&.bar
-selects the
-bar
-attribute of the fourth element of the array in the
-foo
-attribute of the top\-level expression\&.
-.RE
-.PP
-\fB\-\-expr\fR / \fB\-E\fR
-.RS 4
-Interpret the command line arguments as a list of Nix expressions to be parsed and evaluated, rather than as a list of file names of Nix expressions\&. (\fBnix\-instantiate\fR,
-\fBnix\-build\fR
-and
-\fBnix\-shell\fR
-only\&.)
-.RE
-.PP
-\fB\-\-show\-trace\fR
-.RS 4
-Causes Nix to print out a stack trace in case of Nix expression evaluation errors\&.
-.RE
-.PP
-\fB\-I\fR \fIpath\fR
-.RS 4
-Add a path to the Nix expression search path\&. This option may be given multiple times\&. See the
-\fBNIX_PATH\fR
-environment variable for information on the semantics of the Nix search path\&. Paths added through
-\fB\-I\fR
-take precedence over
-\fBNIX_PATH\fR\&.
-.RE
-.PP
-\fB\-\-option\fR \fIname\fR \fIvalue\fR
-.RS 4
-Set the Nix configuration option
-\fIname\fR
-to
-\fIvalue\fR\&. This overrides settings in the Nix configuration file (see
-\fBnix.conf\fR(5))\&.
-.RE
-.PP
-\fB\-\-repair\fR
-.RS 4
-Fix corrupted or missing store paths by redownloading or rebuilding them\&. Note that this is slow because it requires computing a cryptographic hash of the contents of every path in the closure of the build\&. Also note the warning under
-\fBnix\-store \-\-repair\-path\fR\&.
-.RE
-.SH "FILES"
-.PP
-~/\&.nix\-defexpr
-.RS 4
-A directory that contains the default Nix expressions used by the
-\fB\-\-install\fR,
-\fB\-\-upgrade\fR, and
-\fB\-\-query \-\-available\fR
-operations to obtain derivations\&. The
-\fB\-\-file\fR
-option may be used to override this default\&.
-.sp
-The Nix expressions in this directory are combined into a single set, with each file as an attribute that has the name of the file\&. Thus, if
-~/\&.nix\-defexpr
-contains two files,
-foo
-and
-bar, then the default Nix expression will essentially be
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-{
-  foo = import ~/\&.nix\-defexpr/foo;
-  bar = import ~/\&.nix\-defexpr/bar;
-}
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-The command
-\fBnix\-channel\fR
-places symlinks to the downloaded Nix expressions from each subscribed channel in this directory\&.
-.RE
-.PP
-~/\&.nix\-profile
-.RS 4
-A symbolic link to the user\*(Aqs current profile\&. By default, this symlink points to
-\fIprefix\fR/var/nix/profiles/default\&. The
-\fBPATH\fR
-environment variable should include
-~/\&.nix\-profile/bin
-for the user environment to be visible to the user\&.
-.RE
-.SH "OPERATION \-\-INSTALL"
-.SS "Synopsis"
-.HP \w'\fBnix\-env\fR\ 'u
-\fBnix\-env\fR {\fB\-\-install\fR | \fB\-i\fR} [{\fB\-\-prebuilt\-only\fR\ |\ \fB\-b\fR}] [{\fB\-\-attr\fR\ |\ \fB\-A\fR}] [\fB\-\-from\-expression\fR] [\fB\-E\fR] [\fB\-\-from\-profile\fR\ \fIpath\fR] [\fB\-\-preserve\-installed\fR | \fB\-P\fR] [\fB\-\-remove\-all\fR | \fB\-r\fR] \fIargs\fR...
-.SS "Description"
-.PP
-The install operation creates a new user environment, based on the current generation of the active profile, to which a set of store paths described by
-\fIargs\fR
-is added\&. The arguments
-\fIargs\fR
-map to store paths in a number of possible ways:
-.sp
-.RS 4
-.ie n \{\
-\h'-04'\(bu\h'+03'\c
-.\}
-.el \{\
-.sp -1
-.IP \(bu 2.3
-.\}
-By default,
-\fIargs\fR
-is a set of derivation names denoting derivations in the active Nix expression\&. These are realised, and the resulting output paths are installed\&. Currently installed derivations with a name equal to the name of a derivation being added are removed unless the option
-\fB\-\-preserve\-installed\fR
-is specified\&.
-.sp
-If there are multiple derivations matching a name in
-\fIargs\fR
-that have the same name (e\&.g\&.,
-gcc\-3\&.3\&.6
-and
-gcc\-4\&.1\&.1), then the derivation with the highest
-\fIpriority\fR
-is used\&. A derivation can define a priority by declaring the
-\fImeta\&.priority\fR
-attribute\&. This attribute should be a number, with a higher value denoting a lower priority\&. The default priority is
-0\&.
-.sp
-If there are multiple matching derivations with the same priority, then the derivation with the highest version will be installed\&.
-.sp
-You can force the installation of multiple derivations with the same name by being specific about the versions\&. For instance,
-nix\-env \-i gcc\-3\&.3\&.6 gcc\-4\&.1\&.1
-will install both version of GCC (and will probably cause a user environment conflict!)\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04'\(bu\h'+03'\c
-.\}
-.el \{\
-.sp -1
-.IP \(bu 2.3
-.\}
-If
-\fB\-\-attr\fR
-(\fB\-A\fR) is specified, the arguments are
-\fIattribute paths\fR
-that select attributes from the top\-level Nix expression\&. This is faster than using derivation names and unambiguous\&. To find out the attribute paths of available packages, use
-nix\-env \-qaP\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04'\(bu\h'+03'\c
-.\}
-.el \{\
-.sp -1
-.IP \(bu 2.3
-.\}
-If
-\fB\-\-from\-profile\fR
-\fIpath\fR
-is given,
-\fIargs\fR
-is a set of names denoting installed store paths in the profile
-\fIpath\fR\&. This is an easy way to copy user environment elements from one profile to another\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04'\(bu\h'+03'\c
-.\}
-.el \{\
-.sp -1
-.IP \(bu 2.3
-.\}
-If
-\fB\-\-from\-expression\fR
-is given,
-\fIargs\fR
-are Nix
-functions
-that are called with the active Nix expression as their single argument\&. The derivations returned by those function calls are installed\&. This allows derivations to be specified in an unambiguous way, which is necessary if there are multiple derivations with the same name\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04'\(bu\h'+03'\c
-.\}
-.el \{\
-.sp -1
-.IP \(bu 2.3
-.\}
-If
-\fIargs\fR
-are store derivations, then these are
-realised, and the resulting output paths are installed\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04'\(bu\h'+03'\c
-.\}
-.el \{\
-.sp -1
-.IP \(bu 2.3
-.\}
-If
-\fIargs\fR
-are store paths that are not store derivations, then these are
-realised
-and installed\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04'\(bu\h'+03'\c
-.\}
-.el \{\
-.sp -1
-.IP \(bu 2.3
-.\}
-By default all outputs are installed for each derivation\&. That can be reduced by setting
-meta\&.outputsToInstall\&.
-.RE
-.sp
-.SS "Flags"
-.PP
-\fB\-\-prebuilt\-only\fR / \fB\-b\fR
-.RS 4
-Use only derivations for which a substitute is registered, i\&.e\&., there is a pre\-built binary available that can be downloaded in lieu of building the derivation\&. Thus, no packages will be built from source\&.
-.RE
-.PP
-\fB\-\-preserve\-installed\fR, \fB\-P\fR
-.RS 4
-Do not remove derivations with a name matching one of the derivations being installed\&. Usually, trying to have two versions of the same package installed in the same generation of a profile will lead to an error in building the generation, due to file name clashes between the two versions\&. However, this is not the case for all packages\&.
-.RE
-.PP
-\fB\-\-remove\-all\fR, \fB\-r\fR
-.RS 4
-Remove all previously installed packages first\&. This is equivalent to running
-nix\-env \-e \*(Aq\&.*\*(Aq
-first, except that everything happens in a single transaction\&.
-.RE
-.SS "Examples"
-.PP
-To install a specific version of
-\fBgcc\fR
-from the active Nix expression:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-\-install gcc\-3\&.3\&.2
-installing `gcc\-3\&.3\&.2\*(Aq
-uninstalling `gcc\-3\&.1\*(Aq
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Note the previously installed version is removed, since
-\fB\-\-preserve\-installed\fR
-was not specified\&.
-.PP
-To install an arbitrary version:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-\-install gcc
-installing `gcc\-3\&.3\&.2\*(Aq
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To install using a specific attribute:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-i \-A gcc40mips
-$ nix\-env \-i \-A xorg\&.xorgserver
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To install all derivations in the Nix expression
-foo\&.nix:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-f ~/foo\&.nix \-i \*(Aq\&.*\*(Aq
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To copy the store path with symbolic name
-gcc
-from another profile:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-i \-\-from\-profile /nix/var/nix/profiles/foo \-i gcc
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To install a specific store derivation (typically created by
-\fBnix\-instantiate\fR):
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-i /nix/store/fibjb1bfbpm5mrsxc4mh2d8n37sxh91i\-gcc\-3\&.4\&.3\&.drv
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To install a specific output path:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-i /nix/store/y3cgx0xj1p4iv9x0pnnmdhr8iyg741vk\-gcc\-3\&.4\&.3
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To install from a Nix expression specified on the command\-line:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-f \&./foo\&.nix \-i \-E \e
-    \*(Aqf: (f {system = "i686\-linux";})\&.subversionWithJava\*(Aq
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-I\&.e\&., this evaluates to
-(f: (f {system = "i686\-linux";})\&.subversionWithJava) (import \&./foo\&.nix), thus selecting the
-subversionWithJava
-attribute from the set returned by calling the function defined in
-\&./foo\&.nix\&.
-.PP
-A dry\-run tells you which paths will be downloaded or built from source:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-f pkgs/top\-level/all\-packages\&.nix \-i f\-spot \-\-dry\-run
-(dry run; not doing anything)
-installing `f\-spot\-0\&.0\&.10\*(Aq
-the following derivations will be built:
-  /nix/store/0g63jv9aagwbgci4nnzs2dkxqz84kdja\-libgnomeprintui\-2\&.12\&.1\&.tar\&.bz2\&.drv
-  /nix/store/0gfarvxq6sannsdw8a1ir40j1ys2mqb4\-ORBit2\-2\&.14\&.2\&.tar\&.bz2\&.drv
-  /nix/store/0i9gs5zc04668qiy60ga2rc16abkj7g8\-sqlite\-2\&.8\&.17\&.drv
-  \fI\&.\&.\&.\fR
-the following paths will be substituted:
-  /nix/store/8zbipvm4gp9jfqh9nnk1n3bary1a37gs\-perl\-XML\-Parser\-2\&.34
-  /nix/store/b8a2bg7gnyvvvjjibp4axg9x1hzkw36c\-mono\-1\&.1\&.4
-  \fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To install Firefox from the latest revision in the Nixpkgs/NixOS 14\&.12 channel:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-f https://github\&.com/NixOS/nixpkgs\-channels/archive/nixos\-14\&.12\&.tar\&.gz \-iA firefox
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-(The GitHub repository
-nixpkgs\-channels
-is updated automatically from the main
-nixpkgs
-repository after certain tests have succeeded and binaries have been built and uploaded to the binary cache at
-cache\&.nixos\&.org\&.)
-.SH "OPERATION \-\-UPGRADE"
-.SS "Synopsis"
-.HP \w'\fBnix\-env\fR\ 'u
-\fBnix\-env\fR {\fB\-\-upgrade\fR | \fB\-u\fR} [{\fB\-\-prebuilt\-only\fR\ |\ \fB\-b\fR}] [{\fB\-\-attr\fR\ |\ \fB\-A\fR}] [\fB\-\-from\-expression\fR] [\fB\-E\fR] [\fB\-\-from\-profile\fR\ \fIpath\fR] [\fB\-\-lt\fR | \fB\-\-leq\fR | \fB\-\-eq\fR | \fB\-\-always\fR] \fIargs\fR...
-.SS "Description"
-.PP
-The upgrade operation creates a new user environment, based on the current generation of the active profile, in which all store paths are replaced for which there are newer versions in the set of paths described by
-\fIargs\fR\&. Paths for which there are no newer versions are left untouched; this is not an error\&. It is also not an error if an element of
-\fIargs\fR
-matches no installed derivations\&.
-.PP
-For a description of how
-\fIargs\fR
-is mapped to a set of store paths, see
-\fB\-\-install\fR\&. If
-\fIargs\fR
-describes multiple store paths with the same symbolic name, only the one with the highest version is installed\&.
-.SS "Flags"
-.PP
-\fB\-\-lt\fR
-.RS 4
-Only upgrade a derivation to newer versions\&. This is the default\&.
-.RE
-.PP
-\fB\-\-leq\fR
-.RS 4
-In addition to upgrading to newer versions, also \(lqupgrade\(rq to derivations that have the same version\&. Version are not a unique identification of a derivation, so there may be many derivations that have the same version\&. This flag may be useful to force \(lqsynchronisation\(rq between the installed and available derivations\&.
-.RE
-.PP
-\fB\-\-eq\fR
-.RS 4
-\fIOnly\fR
-\(lqupgrade\(rq to derivations that have the same version\&. This may not seem very useful, but it actually is, e\&.g\&., when there is a new release of Nixpkgs and you want to replace installed applications with the same versions built against newer dependencies (to reduce the number of dependencies floating around on your system)\&.
-.RE
-.PP
-\fB\-\-always\fR
-.RS 4
-In addition to upgrading to newer versions, also \(lqupgrade\(rq to derivations that have the same or a lower version\&. I\&.e\&., derivations may actually be downgraded depending on what is available in the active Nix expression\&.
-.RE
-.PP
-For the other flags, see
-\fB\-\-install\fR\&.
-.SS "Examples"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-\-upgrade gcc
-upgrading `gcc\-3\&.3\&.1\*(Aq to `gcc\-3\&.4\*(Aq
-
-$ nix\-env \-u gcc\-3\&.3\&.2 \-\-always (switch to a specific version)
-upgrading `gcc\-3\&.4\*(Aq to `gcc\-3\&.3\&.2\*(Aq
-
-$ nix\-env \-\-upgrade pan
-(no upgrades available, so nothing happens)
-
-$ nix\-env \-u (try to upgrade everything)
-upgrading `hello\-2\&.1\&.2\*(Aq to `hello\-2\&.1\&.3\*(Aq
-upgrading `mozilla\-1\&.2\*(Aq to `mozilla\-1\&.4\*(Aq
-.fi
-.if n \{\
-.RE
-.\}
-.SS "Versions"
-.PP
-The upgrade operation determines whether a derivation
-\fIy\fR
-is an upgrade of a derivation
-\fIx\fR
-by looking at their respective
-name
-attributes\&. The names (e\&.g\&.,
-gcc\-3\&.3\&.1
-are split into two parts: the package name (gcc), and the version (3\&.3\&.1)\&. The version part starts after the first dash not following by a letter\&.
-\fIx\fR
-is considered an upgrade of
-\fIy\fR
-if their package names match, and the version of
-\fIy\fR
-is higher that that of
-\fIx\fR\&.
-.PP
-The versions are compared by splitting them into contiguous components of numbers and letters\&. E\&.g\&.,
-3\&.3\&.1pre5
-is split into
-[3, 3, 1, "pre", 5]\&. These lists are then compared lexicographically (from left to right)\&. Corresponding components
-\fIa\fR
-and
-\fIb\fR
-are compared as follows\&. If they are both numbers, integer comparison is used\&. If
-\fIa\fR
-is an empty string and
-\fIb\fR
-is a number,
-\fIa\fR
-is considered less than
-\fIb\fR\&. The special string component
-pre
-(for
-\fIpre\-release\fR) is considered to be less than other components\&. String components are considered less than number components\&. Otherwise, they are compared lexicographically (i\&.e\&., using case\-sensitive string comparison)\&.
-.PP
-This is illustrated by the following examples:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-1\&.0 < 2\&.3
-2\&.1 < 2\&.3
-2\&.3 = 2\&.3
-2\&.5 > 2\&.3
-3\&.1 > 2\&.3
-2\&.3\&.1 > 2\&.3
-2\&.3\&.1 > 2\&.3a
-2\&.3pre1 < 2\&.3
-2\&.3pre3 < 2\&.3pre12
-2\&.3a < 2\&.3c
-2\&.3pre1 < 2\&.3c
-2\&.3pre1 < 2\&.3q
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "OPERATION \-\-UNINSTALL"
-.SS "Synopsis"
-.HP \w'\fBnix\-env\fR\ 'u
-\fBnix\-env\fR {\fB\-\-uninstall\fR | \fB\-e\fR} \fIdrvnames\fR...
-.SS "Description"
-.PP
-The uninstall operation creates a new user environment, based on the current generation of the active profile, from which the store paths designated by the symbolic names
-\fInames\fR
-are removed\&.
-.SS "Examples"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-\-uninstall gcc
-$ nix\-env \-e \*(Aq\&.*\*(Aq (remove everything)
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-SET"
-.SS "Synopsis"
-.HP \w'\fBnix\-env\fR\ 'u
-\fBnix\-env\fR \fB\-\-set\fR \fIdrvname\fR
-.SS "Description"
-.PP
-The
-\fB\-\-set\fR
-operation modifies the current generation of a profile so that it contains exactly the specified derivation, and nothing else\&.
-.SS "Examples"
-.PP
-The following updates a profile such that its current generation will contain just Firefox:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-p /nix/var/nix/profiles/browser \-\-set firefox
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "OPERATION \-\-SET\-FLAG"
-.SS "Synopsis"
-.HP \w'\fBnix\-env\fR\ 'u
-\fBnix\-env\fR \fB\-\-set\-flag\fR \fIname\fR \fIvalue\fR \fIdrvnames\fR...
-.SS "Description"
-.PP
-The
-\fB\-\-set\-flag\fR
-operation allows meta attributes of installed packages to be modified\&. There are several attributes that can be usefully modified, because they affect the behaviour of
-\fBnix\-env\fR
-or the user environment build script:
-.sp
-.RS 4
-.ie n \{\
-\h'-04'\(bu\h'+03'\c
-.\}
-.el \{\
-.sp -1
-.IP \(bu 2.3
-.\}
-\fIpriority\fR
-can be changed to resolve filename clashes\&. The user environment build script uses the
-\fImeta\&.priority\fR
-attribute of derivations to resolve filename collisions between packages\&. Lower priority values denote a higher priority\&. For instance, the GCC wrapper package and the Binutils package in Nixpkgs both have a file
-bin/ld, so previously if you tried to install both you would get a collision\&. Now, on the other hand, the GCC wrapper declares a higher priority than Binutils, so the former\(cqs
-bin/ld
-is symlinked in the user environment\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04'\(bu\h'+03'\c
-.\}
-.el \{\
-.sp -1
-.IP \(bu 2.3
-.\}
-\fIkeep\fR
-can be set to
-true
-to prevent the package from being upgraded or replaced\&. This is useful if you want to hang on to an older version of a package\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04'\(bu\h'+03'\c
-.\}
-.el \{\
-.sp -1
-.IP \(bu 2.3
-.\}
-\fIactive\fR
-can be set to
-false
-to \(lqdisable\(rq the package\&. That is, no symlinks will be generated to the files of the package, but it remains part of the profile (so it won\(cqt be garbage\-collected)\&. It can be set back to
-true
-to re\-enable the package\&.
-.RE
-.sp
-.SS "Examples"
-.PP
-To prevent the currently installed Firefox from being upgraded:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-\-set\-flag keep true firefox
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-After this,
-\fBnix\-env \-u\fR
-will ignore Firefox\&.
-.PP
-To disable the currently installed Firefox, then install a new Firefox while the old remains part of the profile:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-q
-firefox\-2\&.0\&.0\&.9 (the current one)
-
-$ nix\-env \-\-preserve\-installed \-i firefox\-2\&.0\&.0\&.11
-installing `firefox\-2\&.0\&.0\&.11\*(Aq
-building path(s) `/nix/store/myy0y59q3ig70dgq37jqwg1j0rsapzsl\-user\-environment\*(Aq
-collision between `/nix/store/\fI\&.\&.\&.\fR\-firefox\-2\&.0\&.0\&.11/bin/firefox\*(Aq
-  and `/nix/store/\fI\&.\&.\&.\fR\-firefox\-2\&.0\&.0\&.9/bin/firefox\*(Aq\&.
-(i\&.e\&., can\(cqt have two active at the same time)
-
-$ nix\-env \-\-set\-flag active false firefox
-setting flag on `firefox\-2\&.0\&.0\&.9\*(Aq
-
-$ nix\-env \-\-preserve\-installed \-i firefox\-2\&.0\&.0\&.11
-installing `firefox\-2\&.0\&.0\&.11\*(Aq
-
-$ nix\-env \-q
-firefox\-2\&.0\&.0\&.11 (the enabled one)
-firefox\-2\&.0\&.0\&.9 (the disabled one)
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To make files from
-binutils
-take precedence over files from
-gcc:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-\-set\-flag priority 5 binutils
-$ nix\-env \-\-set\-flag priority 10 gcc
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "OPERATION \-\-QUERY"
-.SS "Synopsis"
-.HP \w'\fBnix\-env\fR\ 'u
-\fBnix\-env\fR {\fB\-\-query\fR | \fB\-q\fR} [\fB\-\-installed\fR | \fB\-\-available\fR | \fB\-a\fR]
-.br
-[{\fB\-\-status\fR\ |\ \fB\-s\fR}] [{\fB\-\-attr\-path\fR\ |\ \fB\-P\fR}] [\fB\-\-no\-name\fR] [{\fB\-\-compare\-versions\fR\ |\ \fB\-c\fR}] [\fB\-\-system\fR] [\fB\-\-drv\-path\fR] [\fB\-\-out\-path\fR] [\fB\-\-description\fR] [\fB\-\-meta\fR]
-.br
-[\fB\-\-xml\fR] [\fB\-\-json\fR] [{\fB\-\-prebuilt\-only\fR\ |\ \fB\-b\fR}] [{\fB\-\-attr\fR\ |\ \fB\-A\fR}\ \fIattribute\-path\fR]
-.br
-\fInames\fR...
-.SS "Description"
-.PP
-The query operation displays information about either the store paths that are installed in the current generation of the active profile (\fB\-\-installed\fR), or the derivations that are available for installation in the active Nix expression (\fB\-\-available\fR)\&. It only prints information about derivations whose symbolic name matches one of
-\fInames\fR\&.
-.PP
-The derivations are sorted by their
-name
-attributes\&.
-.SS "Source selection"
-.PP
-The following flags specify the set of things on which the query operates\&.
-.PP
-\fB\-\-installed\fR
-.RS 4
-The query operates on the store paths that are installed in the current generation of the active profile\&. This is the default\&.
-.RE
-.PP
-\fB\-\-available\fR, \fB\-a\fR
-.RS 4
-The query operates on the derivations that are available in the active Nix expression\&.
-.RE
-.SS "Queries"
-.PP
-The following flags specify what information to display about the selected derivations\&. Multiple flags may be specified, in which case the information is shown in the order given here\&. Note that the name of the derivation is shown unless
-\fB\-\-no\-name\fR
-is specified\&.
-.PP
-\fB\-\-xml\fR
-.RS 4
-Print the result in an XML representation suitable for automatic processing by other tools\&. The root element is called
-items, which contains a
-item
-element for each available or installed derivation\&. The fields discussed below are all stored in attributes of the
-item
-elements\&.
-.RE
-.PP
-\fB\-\-json\fR
-.RS 4
-Print the result in a JSON representation suitable for automatic processing by other tools\&.
-.RE
-.PP
-\fB\-\-prebuilt\-only\fR / \fB\-b\fR
-.RS 4
-Show only derivations for which a substitute is registered, i\&.e\&., there is a pre\-built binary available that can be downloaded in lieu of building the derivation\&. Thus, this shows all packages that probably can be installed quickly\&.
-.RE
-.PP
-\fB\-\-status\fR, \fB\-s\fR
-.RS 4
-Print the
-\fIstatus\fR
-of the derivation\&. The status consists of three characters\&. The first is
-I
-or
-\-, indicating whether the derivation is currently installed in the current generation of the active profile\&. This is by definition the case for
-\fB\-\-installed\fR, but not for
-\fB\-\-available\fR\&. The second is
-P
-or
-\-, indicating whether the derivation is present on the system\&. This indicates whether installation of an available derivation will require the derivation to be built\&. The third is
-S
-or
-\-, indicating whether a substitute is available for the derivation\&.
-.RE
-.PP
-\fB\-\-attr\-path\fR, \fB\-P\fR
-.RS 4
-Print the
-\fIattribute path\fR
-of the derivation, which can be used to unambiguously select it using the
-\fB\-\-attr\fR option
-available in commands that install derivations like
-nix\-env \-\-install\&.
-.RE
-.PP
-\fB\-\-no\-name\fR
-.RS 4
-Suppress printing of the
-name
-attribute of each derivation\&.
-.RE
-.PP
-\fB\-\-compare\-versions\fR / \fB\-c\fR
-.RS 4
-Compare installed versions to available versions, or vice versa (if
-\fB\-\-available\fR
-is given)\&. This is useful for quickly seeing whether upgrades for installed packages are available in a Nix expression\&. A column is added with the following meaning:
-.PP
-< \fIversion\fR
-.RS 4
-A newer version of the package is available or installed\&.
-.RE
-.PP
-= \fIversion\fR
-.RS 4
-At most the same version of the package is available or installed\&.
-.RE
-.PP
-> \fIversion\fR
-.RS 4
-Only older versions of the package are available or installed\&.
-.RE
-.PP
-\- ?
-.RS 4
-No version of the package is available or installed\&.
-.RE
-.sp
-.RE
-.PP
-\fB\-\-system\fR
-.RS 4
-Print the
-system
-attribute of the derivation\&.
-.RE
-.PP
-\fB\-\-drv\-path\fR
-.RS 4
-Print the path of the store derivation\&.
-.RE
-.PP
-\fB\-\-out\-path\fR
-.RS 4
-Print the output path of the derivation\&.
-.RE
-.PP
-\fB\-\-description\fR
-.RS 4
-Print a short (one\-line) description of the derivation, if available\&. The description is taken from the
-meta\&.description
-attribute of the derivation\&.
-.RE
-.PP
-\fB\-\-meta\fR
-.RS 4
-Print all of the meta\-attributes of the derivation\&. This option is only available with
-\fB\-\-xml\fR\&.
-.RE
-.SS "Examples"
-.PP
-To show installed packages:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-q
-bison\-1\&.875c
-docbook\-xml\-4\&.2
-firefox\-1\&.0\&.4
-MPlayer\-1\&.0pre7
-ORBit2\-2\&.8\&.3
-\fI\&...\fR
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To show available packages:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-qa
-firefox\-1\&.0\&.7
-GConf\-2\&.4\&.0\&.1
-MPlayer\-1\&.0pre7
-ORBit2\-2\&.8\&.3
-\fI\&...\fR
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To show the status of available packages:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-qas
-\-P\- firefox\-1\&.0\&.7   (not installed but present)
-\-\-S GConf\-2\&.4\&.0\&.1   (not present, but there is a substitute for fast installation)
-\-\-S MPlayer\-1\&.0pre3 (i\&.e\&., this is not the installed MPlayer, even though the version is the same!)
-IP\- ORBit2\-2\&.8\&.3    (installed and by definition present)
-\fI\&...\fR
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To show available packages in the Nix expression
-foo\&.nix:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-f \&./foo\&.nix \-qa
-foo\-1\&.2\&.3
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To compare installed versions to what\(cqs available:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-qc
-\fI\&.\&.\&.\fR
-acrobat\-reader\-7\&.0 \- ?      (package is not available at all)
-autoconf\-2\&.59      = 2\&.59   (same version)
-firefox\-1\&.0\&.4      < 1\&.0\&.7  (a more recent version is available)
-\fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To show all packages with \(lqzip\(rq in the name:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-qa \*(Aq\&.*zip\&.*\*(Aq
-bzip2\-1\&.0\&.6
-gzip\-1\&.6
-zip\-3\&.0
-\fI\&...\fR
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To show all packages with \(lqfirefox\(rq or \(lqchromium\(rq in the name:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-qa \*(Aq\&.*(firefox|chromium)\&.*\*(Aq
-chromium\-37\&.0\&.2062\&.94
-chromium\-beta\-38\&.0\&.2125\&.24
-firefox\-32\&.0\&.3
-firefox\-with\-plugins\-13\&.0\&.1
-\fI\&...\fR
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To show all packages in the latest revision of the Nixpkgs repository:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-f https://github\&.com/NixOS/nixpkgs/archive/master\&.tar\&.gz \-qa
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "OPERATION \-\-SWITCH\-PROFILE"
-.SS "Synopsis"
-.HP \w'\fBnix\-env\fR\ 'u
-\fBnix\-env\fR {\fB\-\-switch\-profile\fR | \fB\-S\fR} {\fIpath\fR}
-.SS "Description"
-.PP
-This operation makes
-\fIpath\fR
-the current profile for the user\&. That is, the symlink
-~/\&.nix\-profile
-is made to point to
-\fIpath\fR\&.
-.SS "Examples"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-S ~/my\-profile
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-LIST\-GENERATIONS"
-.SS "Synopsis"
-.HP \w'\fBnix\-env\fR\ 'u
-\fBnix\-env\fR \fB\-\-list\-generations\fR
-.SS "Description"
-.PP
-This operation print a list of all the currently existing generations for the active profile\&. These may be switched to using the
-\fB\-\-switch\-generation\fR
-operation\&. It also prints the creation date of the generation, and indicates the current generation\&.
-.SS "Examples"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-\-list\-generations
-  95   2004\-02\-06 11:48:24
-  96   2004\-02\-06 11:49:01
-  97   2004\-02\-06 16:22:45
-  98   2004\-02\-06 16:24:33   (current)
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-DELETE\-GENERATIONS"
-.SS "Synopsis"
-.HP \w'\fBnix\-env\fR\ 'u
-\fBnix\-env\fR \fB\-\-delete\-generations\fR \fIgenerations\fR...
-.SS "Description"
-.PP
-This operation deletes the specified generations of the current profile\&. The generations can be a list of generation numbers, the special value
-old
-to delete all non\-current generations, or a value such as
-30d
-to delete all generations older than the specified number of days (except for the generation that was active at that point in time)\&. Periodically deleting old generations is important to make garbage collection effective\&.
-.SS "Examples"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-\-delete\-generations 3 4 8
-
-$ nix\-env \-\-delete\-generations 30d
-
-$ nix\-env \-p other_profile \-\-delete\-generations old
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-SWITCH\-GENERATION"
-.SS "Synopsis"
-.HP \w'\fBnix\-env\fR\ 'u
-\fBnix\-env\fR {\fB\-\-switch\-generation\fR | \fB\-G\fR} {\fIgeneration\fR}
-.SS "Description"
-.PP
-This operation makes generation number
-\fIgeneration\fR
-the current generation of the active profile\&. That is, if the
-\fIprofile\fR
-is the path to the active profile, then the symlink
-\fIprofile\fR
-is made to point to
-\fIprofile\fR\-\fIgeneration\fR\-link, which is in turn a symlink to the actual user environment in the Nix store\&.
-.PP
-Switching will fail if the specified generation does not exist\&.
-.SS "Examples"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-G 42
-switching from generation 50 to 42
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-ROLLBACK"
-.SS "Synopsis"
-.HP \w'\fBnix\-env\fR\ 'u
-\fBnix\-env\fR \fB\-\-rollback\fR
-.SS "Description"
-.PP
-This operation switches to the \(lqprevious\(rq generation of the active profile, that is, the highest numbered generation lower than the current generation, if it exists\&. It is just a convenience wrapper around
-\fB\-\-list\-generations\fR
-and
-\fB\-\-switch\-generation\fR\&.
-.SS "Examples"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-env \-\-rollback
-switching from generation 92 to 91
-
-$ nix\-env \-\-rollback
-error: no generation older than the current (91) exists
-.fi
-.if n \{\
-.RE
-.\}
-.SH "ENVIRONMENT VARIABLES"
-.PP
-\fBNIX_PROFILE\fR
-.RS 4
-Location of the Nix profile\&. Defaults to the target of the symlink
-~/\&.nix\-profile, if it exists, or
-/nix/var/nix/profiles/default
-otherwise\&.
-.RE
-.PP
-\fBNIX_PATH\fR
-.RS 4
-A colon\-separated list of directories used to look up Nix expressions enclosed in angle brackets (i\&.e\&.,
-<\fIpath\fR>)\&. For instance, the value
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-/home/eelco/Dev:/etc/nixos
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-will cause Nix to look for paths relative to
-/home/eelco/Dev
-and
-/etc/nixos, in that order\&. It is also possible to match paths against a prefix\&. For example, the value
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-nixpkgs=/home/eelco/Dev/nixpkgs\-branch:/etc/nixos
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-will cause Nix to search for
-<nixpkgs/\fIpath\fR>
-in
-/home/eelco/Dev/nixpkgs\-branch/\fIpath\fR
-and
-/etc/nixos/nixpkgs/\fIpath\fR\&.
-.sp
-If a path in the Nix search path starts with
-http://
-or
-https://, it is interpreted as the URL of a tarball that will be downloaded and unpacked to a temporary location\&. The tarball must consist of a single top\-level directory\&. For example, setting
-\fBNIX_PATH\fR
-to
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-nixpkgs=https://github\&.com/NixOS/nixpkgs\-channels/archive/nixos\-14\&.12\&.tar\&.gz
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-tells Nix to download the latest revision in the Nixpkgs/NixOS 14\&.12 channel\&.
-.sp
-The search path can be extended using the
-\fB\-I\fR
-option, which takes precedence over
-\fBNIX_PATH\fR\&.
-.RE
-.PP
-\fBNIX_IGNORE_SYMLINK_STORE\fR
-.RS 4
-Normally, the Nix store directory (typically
-/nix/store) is not allowed to contain any symlink components\&. This is to prevent \(lqimpure\(rq builds\&. Builders sometimes \(lqcanonicalise\(rq paths by resolving all symlink components\&. Thus, builds on different machines (with
-/nix/store
-resolving to different locations) could yield different results\&. This is generally not a problem, except when builds are deployed to machines where
-/nix/store
-resolves differently\&. If you are sure that you\(cqre not going to do that, you can set
-\fBNIX_IGNORE_SYMLINK_STORE\fR
-to
-\fB1\fR\&.
-.sp
-Note that if you\(cqre symlinking the Nix store so that you can put it on another file system than the root file system, on Linux you\(cqre better off using
-bind
-mount points, e\&.g\&.,
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ mkdir /nix
-$ mount \-o bind /mnt/otherdisk/nix /nix
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Consult the
-\fBmount\fR(8)
-manual page for details\&.
-.RE
-.PP
-\fBNIX_STORE_DIR\fR
-.RS 4
-Overrides the location of the Nix store (default
-\fIprefix\fR/store)\&.
-.RE
-.PP
-\fBNIX_DATA_DIR\fR
-.RS 4
-Overrides the location of the Nix static data directory (default
-\fIprefix\fR/share)\&.
-.RE
-.PP
-\fBNIX_LOG_DIR\fR
-.RS 4
-Overrides the location of the Nix log directory (default
-\fIprefix\fR/log/nix)\&.
-.RE
-.PP
-\fBNIX_STATE_DIR\fR
-.RS 4
-Overrides the location of the Nix state directory (default
-\fIprefix\fR/var/nix)\&.
-.RE
-.PP
-\fBNIX_DB_DIR\fR
-.RS 4
-Overrides the location of the Nix database (default
-\fI$NIX_STATE_DIR\fR/db, i\&.e\&.,
-\fIprefix\fR/var/nix/db)\&.
-.RE
-.PP
-\fBNIX_CONF_DIR\fR
-.RS 4
-Overrides the location of the Nix configuration directory (default
-\fIprefix\fR/etc/nix)\&.
-.RE
-.PP
-\fBTMPDIR\fR
-.RS 4
-Use the specified directory to store temporary files\&. In particular, this includes temporary build directories; these can take up substantial amounts of disk space\&. The default is
-/tmp\&.
-.RE
-.PP
-\fBNIX_BUILD_HOOK\fR
-.RS 4
-Specifies the location of the
-\fIbuild hook\fR, which is a program (typically some script) that Nix will call whenever it wants to build a derivation\&. This is used to implement distributed builds\&.
-.RE
-.PP
-\fBNIX_REMOTE\fR
-.RS 4
-This variable should be set to
-daemon
-if you want to use the Nix daemon to execute Nix operations\&. This is necessary in
-multi\-user Nix installations\&. Otherwise, it should be left unset\&.
-.RE
-.PP
-\fBNIX_SHOW_STATS\fR
-.RS 4
-If set to
-1, Nix will print some evaluation statistics, such as the number of values allocated\&.
-.RE
-.PP
-\fBNIX_COUNT_CALLS\fR
-.RS 4
-If set to
-1, Nix will print how often functions were called during Nix expression evaluation\&. This is useful for profiling your Nix expressions\&.
-.RE
-.PP
-\fBGC_INITIAL_HEAP_SIZE\fR
-.RS 4
-If Nix has been configured to use the Boehm garbage collector, this variable sets the initial size of the heap in bytes\&. It defaults to 384 MiB\&. Setting it to a low value reduces memory consumption, but will increase runtime due to the overhead of garbage collection\&.
-.RE
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
--- nix-1.11.15.orig/doc/manual/nix-hash.1
+++ /dev/null
@@ -1,160 +0,0 @@
-'\" t
-.\"     Title: nix-hash
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-HASH" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-hash \- compute the cryptographic hash of a path
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-hash\fR\ 'u
-\fBnix\-hash\fR [\fB\-\-flat\fR] [\fB\-\-base32\fR] [\fB\-\-truncate\fR] [\fB\-\-type\fR\ \fIhashAlgo\fR] \fIpath\fR...
-.HP \w'\fBnix\-hash\fR\ 'u
-\fBnix\-hash\fR \fB\-\-to\-base16\fR \fIhash\fR...
-.HP \w'\fBnix\-hash\fR\ 'u
-\fBnix\-hash\fR \fB\-\-to\-base32\fR \fIhash\fR...
-.SH "DESCRIPTION"
-.PP
-The command
-\fBnix\-hash\fR
-computes the cryptographic hash of the contents of each
-\fIpath\fR
-and prints it on standard output\&. By default, it computes an MD5 hash, but other hash algorithms are available as well\&. The hash is printed in hexadecimal\&.
-.PP
-The hash is computed over a
-\fIserialisation\fR
-of each path: a dump of the file system tree rooted at the path\&. This allows directories and symlinks to be hashed as well as regular files\&. The dump is in the
-\fINAR format\fR
-produced by
-\fBnix\-store\fR \fB\-\-dump\fR\&. Thus,
-nix\-hash \fIpath\fR
-yields the same cryptographic hash as
-nix\-store \-\-dump \fIpath\fR | md5sum\&.
-.SH "OPTIONS"
-.PP
-\fB\-\-flat\fR
-.RS 4
-Print the cryptographic hash of the contents of each regular file
-\fIpath\fR\&. That is, do not compute the hash over the dump of
-\fIpath\fR\&. The result is identical to that produced by the GNU commands
-\fBmd5sum\fR
-and
-\fBsha1sum\fR\&.
-.RE
-.PP
-\fB\-\-base32\fR
-.RS 4
-Print the hash in a base\-32 representation rather than hexadecimal\&. This base\-32 representation is more compact and can be used in Nix expressions (such as in calls to
-\fBfetchurl\fR)\&.
-.RE
-.PP
-\fB\-\-truncate\fR
-.RS 4
-Truncate hashes longer than 160 bits (such as SHA\-256) to 160 bits\&.
-.RE
-.PP
-\fB\-\-type\fR \fIhashAlgo\fR
-.RS 4
-Use the specified cryptographic hash algorithm, which can be one of
-md5,
-sha1, and
-sha256\&.
-.RE
-.PP
-\fB\-\-to\-base16\fR
-.RS 4
-Don\(cqt hash anything, but convert the base\-32 hash representation
-\fIhash\fR
-to hexadecimal\&.
-.RE
-.PP
-\fB\-\-to\-base32\fR
-.RS 4
-Don\(cqt hash anything, but convert the hexadecimal hash representation
-\fIhash\fR
-to base\-32\&.
-.RE
-.SH "EXAMPLES"
-.PP
-Computing hashes:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ mkdir test
-$ echo "hello" > test/world
-
-$ nix\-hash test/ (MD5 hash; default)
-8179d3caeff1869b5ba1744e5a245c04
-
-$ nix\-store \-\-dump test/ | md5sum (for comparison)
-8179d3caeff1869b5ba1744e5a245c04  \-
-
-$ nix\-hash \-\-type sha1 test/
-e4fd8ba5f7bbeaea5ace89fe10255536cd60dab6
-
-$ nix\-hash \-\-type sha1 \-\-base32 test/
-nvd61k9nalji1zl9rrdfmsmvyyjqpzg4
-
-$ nix\-hash \-\-type sha256 \-\-flat test/
-error: reading file `test/\*(Aq: Is a directory
-
-$ nix\-hash \-\-type sha256 \-\-flat test/world
-5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-Converting between hexadecimal and base\-32:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-hash \-\-type sha1 \-\-to\-base32 e4fd8ba5f7bbeaea5ace89fe10255536cd60dab6
-nvd61k9nalji1zl9rrdfmsmvyyjqpzg4
-
-$ nix\-hash \-\-type sha1 \-\-to\-base16 nvd61k9nalji1zl9rrdfmsmvyyjqpzg4
-e4fd8ba5f7bbeaea5ace89fe10255536cd60dab6
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
--- nix-1.11.15.orig/doc/manual/nix-install-package.1
+++ /dev/null
@@ -1,193 +0,0 @@
-'\" t
-.\"     Title: nix-install-package
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-INSTALL\-PACKAG" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-install-package \- install a Nix Package file
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-install\-package\fR\ 'u
-\fBnix\-install\-package\fR [\fB\-\-non\-interactive\fR] [{\fB\-\-profile\fR\ |\ \fB\-p\fR}\ \fIpath\fR] [\fB\-\-set\fR]
-.br
-{{\fB\-\-url\fR\ \fIurl\fR} | {\fIfile\fR}}
-.SH "DESCRIPTION"
-.PP
-The command
-\fBnix\-install\-package\fR
-interactively installs a Nix Package file (*\&.nixpkg), which is a small file that contains a store path to be installed along with the URL of a binary cache\&. The Nix Package file is either
-\fIfile\fR, or automatically downloaded from
-\fIurl\fR
-if the
-\fB\-\-url\fR
-switch is used\&.
-.PP
-\fBnix\-install\-package\fR
-is used in
-one\-click installs
-to download and install pre\-built binary packages with all necessary dependencies\&.
-\fBnix\-install\-package\fR
-is intended to be associated with the MIME type
-application/nix\-package
-in a web browser so that it is invoked automatically when you click on
-*\&.nixpkg
-files\&. When invoked, it restarts itself in a terminal window (since otherwise it would be invisible when run from a browser), asks the user to confirm whether to install the package, and if so downloads and installs the package into the user\(cqs current profile\&.
-.PP
-To obtain a window,
-\fBnix\-install\-package\fR
-tries to restart itself with
-\fBxterm\fR,
-\fBkonsole\fR
-and
-\fBgnome\-terminal\fR\&.
-.SH "OPTIONS"
-.PP
-\fB\-\-non\-interactive\fR
-.RS 4
-Do not open a new terminal window and do not ask for confirmation\&.
-.RE
-.PP
-\fB\-\-profile\fR, \fB\-p\fR
-.RS 4
-Install the package into the specified profile rather than the user\(cqs current profile\&.
-.RE
-.PP
-\fB\-\-set\fR
-.RS 4
-Install the package as the profile so that the profile contains exactly the contents of the package\&.
-.RE
-.SH "EXAMPLES"
-.PP
-To install
-subversion\-1\&.4\&.0\&.nixpkg
-into the user\(cqs current profile, without any prompting:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-install\-package \-\-non\-interactive subversion\-1\&.4\&.0\&.nixpkg
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To install the same package from some URL into a different profile:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-install\-package \-\-non\-interactive \-p /nix/var/nix/profiles/eelco \e
-    \-\-url http://nix\&.cs\&.uu\&.nl/dist/nix/nixpkgs\-0\&.10pre6622/pkgs/subversion\-1\&.4\&.0\-i686\-linux\&.nixpkg
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "FORMAT OF NIXPKG FILES"
-.PP
-A Nix Package file consists of a single line with the following format:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-NIXPKG1 \fImanifestURL\fR \fIname\fR \fIsystem\fR \fIdrvPath\fR \fIoutPath\fR
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-The elements are as follows:
-.PP
-NIXPKG1
-.RS 4
-The version of the Nix Package file\&.
-.RE
-.PP
-\fImanifestURL\fR
-.RS 4
-The manifest to be pulled by
-\fBnix\-pull\fR\&. The manifest must contain
-\fIoutPath\fR\&.
-.RE
-.PP
-\fIname\fR
-.RS 4
-The symbolic name and version of the package\&.
-.RE
-.PP
-\fIsystem\fR
-.RS 4
-The platform identifier of the platform for which this binary package is intended\&.
-.RE
-.PP
-\fIdrvPath\fR
-.RS 4
-The path in the Nix store of the derivation from which
-\fIoutPath\fR
-was built\&. Not currently used\&.
-.RE
-.PP
-\fIoutPath\fR
-.RS 4
-The path in the Nix store of the package\&.
-.RE
-.PP
-\fIbinaryCacheURL\fR
-.RS 4
-The URL of a binary cache containing the closure of
-\fIoutPath\fR\&.
-.RE
-.PP
-An example follows:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-NIXPKG1 http://\&.\&.\&./nixpkgs\-0\&.10pre6622/MANIFEST subversion\-1\&.4\&.0 i686\-darwin \e
-  /nix/store/4kh60jkp\&.\&.\&.\-subversion\-1\&.4\&.0\&.drv \e
-  /nix/store/nkw7wpgb\&.\&.\&.\-subversion\-1\&.4\&.0
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-(The line breaks (\e) are for presentation purposes and not part of the actual file\&.)
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
--- nix-1.11.15.orig/doc/manual/nix-instantiate.1
+++ /dev/null
@@ -1,691 +0,0 @@
-'\" t
-.\"     Title: nix-instantiate
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-INSTANTIATE" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-instantiate \- instantiate store derivations from Nix expressions
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-instantiate\fR\ 'u
-\fBnix\-instantiate\fR [\fB\-\-parse\fR | \fB\-\-eval\fR\ [\fB\-\-strict\fR]\ [\fB\-\-xml\fR] ] [\fB\-\-read\-write\-mode\fR] [\fB\-\-arg\fR\ \fIname\fR\ \fIvalue\fR] [{\fB\-\-attr\fR\ |\ \fB\-A\fR}\ \fIattrPath\fR] [\fB\-\-add\-root\fR\ \fIpath\fR] [\fB\-\-indirect\fR] {\fB\-\-expr\fR | \fB\-E\fR} \fIfiles\fR...
-.HP \w'\fBnix\-instantiate\fR\ 'u
-\fBnix\-instantiate\fR \fB\-\-find\-file\fR \fIfiles\fR...
-.SH "DESCRIPTION"
-.PP
-The command
-\fBnix\-instantiate\fR
-generates
-store derivations
-from (high\-level) Nix expressions\&. It evaluates the Nix expressions in each of
-\fIfiles\fR
-(which defaults to
-\fI\&./default\&.nix\fR)\&. Each top\-level expression should evaluate to a derivation, a list of derivations, or a set of derivations\&. The paths of the resulting store derivations are printed on standard output\&.
-.PP
-If
-\fIfiles\fR
-is the character
-\-, then a Nix expression will be read from standard input\&.
-.SH "OPTIONS"
-.PP
-\fB\-\-add\-root\fR \fIpath\fR, \fB\-\-indirect\fR
-.RS 4
-See the
-corresponding options
-in
-\fBnix\-store\fR\&.
-.RE
-.PP
-\fB\-\-parse\fR
-.RS 4
-Just parse the input files, and print their abstract syntax trees on standard output in ATerm format\&.
-.RE
-.PP
-\fB\-\-eval\fR
-.RS 4
-Just parse and evaluate the input files, and print the resulting values on standard output\&. No instantiation of store derivations takes place\&.
-.RE
-.PP
-\fB\-\-find\-file\fR
-.RS 4
-Look up the given files in Nix\(cqs search path (as specified by the
-\fBNIX_PATH\fR
-environment variable)\&. If found, print the corresponding absolute paths on standard output\&. For instance, if
-\fBNIX_PATH\fR
-is
-nixpkgs=/home/alice/nixpkgs, then
-nix\-instantiate \-\-find\-file nixpkgs/default\&.nix
-will print
-/home/alice/nixpkgs/default\&.nix\&.
-.RE
-.PP
-\fB\-\-xml\fR
-.RS 4
-When used with
-\fB\-\-parse\fR
-and
-\fB\-\-eval\fR, print the resulting expression as an XML representation of the abstract syntax tree rather than as an ATerm\&. The schema is the same as that used by the
-\fBtoXML\fR built\-in\&.
-.RE
-.PP
-\fB\-\-json\fR
-.RS 4
-When used with
-\fB\-\-parse\fR
-and
-\fB\-\-eval\fR, print the resulting expression as an JSON representation of the abstract syntax tree rather than as an ATerm\&.
-.RE
-.PP
-\fB\-\-strict\fR
-.RS 4
-When used with
-\fB\-\-eval\fR, recursively evaluate list elements and attributes\&. Normally, such sub\-expressions are left unevaluated (since the Nix expression language is lazy)\&.
-.if n \{\
-.sp
-.\}
-.RS 4
-.it 1 an-trap
-.nr an-no-space-flag 1
-.nr an-break-flag 1
-.br
-.ps +1
-\fBWarning\fR
-.ps -1
-.br
-This option can cause non\-termination, because lazy data structures can be infinitely large\&.
-.sp .5v
-.RE
-.RE
-.PP
-\fB\-\-read\-write\-mode\fR
-.RS 4
-When used with
-\fB\-\-eval\fR, perform evaluation in read/write mode so nix language features that require it will still work (at the cost of needing to do instantiation of every evaluated derivation)\&.
-.RE
-.PP
-\fB\-\-help\fR
-.RS 4
-Prints out a summary of the command syntax and exits\&.
-.RE
-.PP
-\fB\-\-version\fR
-.RS 4
-Prints out the Nix version number on standard output and exits\&.
-.RE
-.PP
-\fB\-\-verbose\fR, \fB\-v\fR
-.RS 4
-Increases the level of verbosity of diagnostic messages printed on standard error\&. For each Nix operation, the information printed on standard output is well\-defined; any diagnostic information is printed on standard error, never on standard output\&.
-.sp
-This option may be specified repeatedly\&. Currently, the following verbosity levels exist:
-.PP
-0
-.RS 4
-\(lqErrors only\(rq: only print messages explaining why the Nix invocation failed\&.
-.RE
-.PP
-1
-.RS 4
-\(lqInformational\(rq: print
-\fIuseful\fR
-messages about what Nix is doing\&. This is the default\&.
-.RE
-.PP
-2
-.RS 4
-\(lqTalkative\(rq: print more informational messages\&.
-.RE
-.PP
-3
-.RS 4
-\(lqChatty\(rq: print even more informational messages\&.
-.RE
-.PP
-4
-.RS 4
-\(lqDebug\(rq: print debug information\&.
-.RE
-.PP
-5
-.RS 4
-\(lqVomit\(rq: print vast amounts of debug information\&.
-.RE
-.RE
-.PP
-\fB\-\-no\-build\-output\fR, \fB\-Q\fR
-.RS 4
-By default, output written by builders to standard output and standard error is echoed to the Nix command\*(Aqs standard error\&. This option suppresses this behaviour\&. Note that the builder\*(Aqs standard output and error are always written to a log file in
-\fIprefix\fR/nix/var/log/nix\&.
-.RE
-.PP
-\fB\-\-max\-jobs\fR, \fB\-j\fR
-.RS 4
-Sets the maximum number of build jobs that Nix will perform in parallel to the specified number\&. The default is specified by the
-build\-max\-jobs
-configuration setting, which itself defaults to
-1\&. A higher value is useful on SMP systems or to exploit I/O latency\&.
-.RE
-.PP
-\fB\-\-cores\fR
-.RS 4
-Sets the value of the
-\fBNIX_BUILD_CORES\fR
-environment variable in the invocation of builders\&. Builders can use this variable at their discretion to control the maximum amount of parallelism\&. For instance, in Nixpkgs, if the derivation attribute
-\fIenableParallelBuilding\fR
-is set to
-true, the builder passes the
-\fB\-j\fR\fB\fIN\fR\fR
-flag to GNU Make\&. It defaults to the value of the
-build\-cores
-configuration setting, if set, or
-1
-otherwise\&. The value
-0
-means that the builder should use all available CPU cores in the system\&.
-.RE
-.PP
-\fB\-\-max\-silent\-time\fR
-.RS 4
-Sets the maximum number of seconds that a builder can go without producing any data on standard output or standard error\&. The default is specified by the
-build\-max\-silent\-time
-configuration setting\&.
-0
-means no time\-out\&.
-.RE
-.PP
-\fB\-\-timeout\fR
-.RS 4
-Sets the maximum number of seconds that a builder can run\&. The default is specified by the
-build\-timeout
-configuration setting\&.
-0
-means no timeout\&.
-.RE
-.PP
-\fB\-\-keep\-going\fR, \fB\-k\fR
-.RS 4
-Keep going in case of failed builds, to the greatest extent possible\&. That is, if building an input of some derivation fails, Nix will still build the other inputs, but not the derivation itself\&. Without this option, Nix stops if any build fails (except for builds of substitutes), possibly killing builds in progress (in case of parallel or distributed builds)\&.
-.RE
-.PP
-\fB\-\-keep\-failed\fR, \fB\-K\fR
-.RS 4
-Specifies that in case of a build failure, the temporary directory (usually in
-/tmp) in which the build takes place should not be deleted\&. The path of the build directory is printed as an informational message\&.
-.RE
-.PP
-\fB\-\-fallback\fR
-.RS 4
-Whenever Nix attempts to build a derivation for which substitutes are known for each output path, but realising the output paths through the substitutes fails, fall back on building the derivation\&.
-.sp
-The most common scenario in which this is useful is when we have registered substitutes in order to perform binary distribution from, say, a network repository\&. If the repository is down, the realisation of the derivation will fail\&. When this option is specified, Nix will build the derivation instead\&. Thus, installation from binaries falls back on installation from source\&. This option is not the default since it is generally not desirable for a transient failure in obtaining the substitutes to lead to a full build from source (with the related consumption of resources)\&.
-.RE
-.PP
-\fB\-\-readonly\-mode\fR
-.RS 4
-When this option is used, no attempt is made to open the Nix database\&. Most Nix operations do need database access, so those operations will fail\&.
-.RE
-.PP
-\fB\-\-log\-type\fR \fItype\fR
-.RS 4
-This option determines how the output written to standard error is formatted\&. Nix\(cqs diagnostic messages are typically
-\fInested\fR\&. For instance, when tracing Nix expression evaluation (\fBnix\-env \-vvvvv\fR, messages from subexpressions are nested inside their parent expressions\&. Nix builder output is also often nested\&. For instance, the Nix Packages generic builder nests the various build tasks (unpack, configure, compile, etc\&.), and the GNU Make in
-stdenv\-linux
-has been patched to provide nesting for recursive Make invocations\&.
-.sp
-\fItype\fR
-can be one of the following:
-.PP
-pretty
-.RS 4
-Pretty\-print the output, indicating different nesting levels using spaces\&. This is the default\&.
-.RE
-.PP
-escapes
-.RS 4
-Indicate nesting using escape codes that can be interpreted by the
-\fBnix\-log2xml\fR
-tool in the Nix source distribution\&. The resulting XML file can be fed into the
-\fBlog2html\&.xsl\fR
-stylesheet to create an HTML file that can be browsed interactively, using JavaScript to expand and collapse parts of the output\&.
-.RE
-.PP
-flat
-.RS 4
-Remove all nesting\&.
-.RE
-.sp
-.RE
-.PP
-\fB\-\-arg\fR \fIname\fR \fIvalue\fR
-.RS 4
-This option is accepted by
-\fBnix\-env\fR,
-\fBnix\-instantiate\fR
-and
-\fBnix\-build\fR\&. When evaluating Nix expressions, the expression evaluator will automatically try to call functions that it encounters\&. It can automatically call functions for which every argument has a
-default value
-(e\&.g\&.,
-{ \fIargName\fR ? \fIdefaultValue\fR }: \fI\&.\&.\&.\fR)\&. With
-\fB\-\-arg\fR, you can also call functions that have arguments without a default value (or override a default value)\&. That is, if the evaluator encounters a function with an argument named
-\fIname\fR, it will call it with value
-\fIvalue\fR\&.
-.sp
-For instance, the file
-pkgs/top\-level/all\-packages\&.nix
-in Nixpkgs is actually a function:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-{ # The system (e\&.g\&., `i686\-linux\*(Aq) for which to build the packages\&.
-  system ? builtins\&.currentSystem
-  \fI\&.\&.\&.\fR
-}: \fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-So if you call this Nix expression (e\&.g\&., when you do
-nix\-env \-i \fIpkgname\fR), the function will be called automatically using the value
-builtins\&.currentSystem
-for the
-system
-argument\&. You can override this using
-\fB\-\-arg\fR, e\&.g\&.,
-nix\-env \-i \fIpkgname\fR \-\-arg system \e"i686\-freebsd\e"\&. (Note that since the argument is a Nix string literal, you have to escape the quotes\&.)
-.RE
-.PP
-\fB\-\-argstr\fR \fIname\fR \fIvalue\fR
-.RS 4
-This option is like
-\fB\-\-arg\fR, only the value is not a Nix expression but a string\&. So instead of
-\-\-arg system \e"i686\-linux\e"
-(the outer quotes are to keep the shell happy) you can say
-\-\-argstr system i686\-linux\&.
-.RE
-.PP
-\fB\-\-attr\fR / \fB\-A\fR \fIattrPath\fR
-.RS 4
-Select an attribute from the top\-level Nix expression being evaluated\&. (\fBnix\-env\fR,
-\fBnix\-instantiate\fR,
-\fBnix\-build\fR
-and
-\fBnix\-shell\fR
-only\&.) The
-\fIattribute path\fR
-\fIattrPath\fR
-is a sequence of attribute names separated by dots\&. For instance, given a top\-level Nix expression
-\fIe\fR, the attribute path
-xorg\&.xorgserver
-would cause the expression
-\fIe\fR\&.xorg\&.xorgserver
-to be used\&. See
-\fBnix\-env \-\-install\fR
-for some concrete examples\&.
-.sp
-In addition to attribute names, you can also specify array indices\&. For instance, the attribute path
-foo\&.3\&.bar
-selects the
-bar
-attribute of the fourth element of the array in the
-foo
-attribute of the top\-level expression\&.
-.RE
-.PP
-\fB\-\-expr\fR / \fB\-E\fR
-.RS 4
-Interpret the command line arguments as a list of Nix expressions to be parsed and evaluated, rather than as a list of file names of Nix expressions\&. (\fBnix\-instantiate\fR,
-\fBnix\-build\fR
-and
-\fBnix\-shell\fR
-only\&.)
-.RE
-.PP
-\fB\-\-show\-trace\fR
-.RS 4
-Causes Nix to print out a stack trace in case of Nix expression evaluation errors\&.
-.RE
-.PP
-\fB\-I\fR \fIpath\fR
-.RS 4
-Add a path to the Nix expression search path\&. This option may be given multiple times\&. See the
-\fBNIX_PATH\fR
-environment variable for information on the semantics of the Nix search path\&. Paths added through
-\fB\-I\fR
-take precedence over
-\fBNIX_PATH\fR\&.
-.RE
-.PP
-\fB\-\-option\fR \fIname\fR \fIvalue\fR
-.RS 4
-Set the Nix configuration option
-\fIname\fR
-to
-\fIvalue\fR\&. This overrides settings in the Nix configuration file (see
-\fBnix.conf\fR(5))\&.
-.RE
-.PP
-\fB\-\-repair\fR
-.RS 4
-Fix corrupted or missing store paths by redownloading or rebuilding them\&. Note that this is slow because it requires computing a cryptographic hash of the contents of every path in the closure of the build\&. Also note the warning under
-\fBnix\-store \-\-repair\-path\fR\&.
-.RE
-.SH "EXAMPLES"
-.PP
-Instantiating store derivations from a Nix expression, and building them using
-\fBnix\-store\fR:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-instantiate test\&.nix (instantiate)
-/nix/store/cigxbmvy6dzix98dxxh9b6shg7ar5bvs\-perl\-BerkeleyDB\-0\&.26\&.drv
-
-$ nix\-store \-r $(nix\-instantiate test\&.nix) (build)
-\fI\&.\&.\&.\fR
-/nix/store/qhqk4n8ci095g3sdp93x7rgwyh9rdvgk\-perl\-BerkeleyDB\-0\&.26 (output path)
-
-$ ls \-l /nix/store/qhqk4n8ci095g3sdp93x7rgwyh9rdvgk\-perl\-BerkeleyDB\-0\&.26
-dr\-xr\-xr\-x    2 eelco    users        4096 1970\-01\-01 01:00 lib
-\&.\&.\&.
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-You can also give a Nix expression on the command line:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-instantiate \-E \*(Aqwith import <nixpkgs> { }; hello\*(Aq
-/nix/store/j8s4zyv75a724q38cb0r87rlczaiag4y\-hello\-2\&.8\&.drv
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-This is equivalent to:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-instantiate \*(Aq<nixpkgs>\*(Aq \-A hello
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-Parsing and evaluating Nix expressions:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-instantiate \-\-parse \-E \*(Aq1 + 2\*(Aq
-1 + 2
-
-$ nix\-instantiate \-\-eval \-E \*(Aq1 + 2\*(Aq
-3
-
-$ nix\-instantiate \-\-eval \-\-xml \-E \*(Aq1 + 2\*(Aq
-<?xml version=\*(Aq1\&.0\*(Aq encoding=\*(Aqutf\-8\*(Aq?>
-<expr>
-  <int value="3" />
-</expr>
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-The difference between non\-strict and strict evaluation:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-instantiate \-\-eval \-\-xml \-E \*(Aqrec { x = "foo"; y = x; }\*(Aq
-\fI\&.\&.\&.\fR
-  <attr name="x">
-    <string value="foo" />
-  </attr>
-  <attr name="y">
-    <unevaluated />
-  </attr>
-\fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Note that
-\fIy\fR
-is left unevaluated (the XML representation doesn\(cqt attempt to show non\-normal forms)\&.
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-instantiate \-\-eval \-\-xml \-\-strict \-E \*(Aqrec { x = "foo"; y = x; }\*(Aq
-\fI\&.\&.\&.\fR
-  <attr name="x">
-    <string value="foo" />
-  </attr>
-  <attr name="y">
-    <string value="foo" />
-  </attr>
-\fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "ENVIRONMENT VARIABLES"
-.PP
-\fBNIX_PATH\fR
-.RS 4
-A colon\-separated list of directories used to look up Nix expressions enclosed in angle brackets (i\&.e\&.,
-<\fIpath\fR>)\&. For instance, the value
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-/home/eelco/Dev:/etc/nixos
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-will cause Nix to look for paths relative to
-/home/eelco/Dev
-and
-/etc/nixos, in that order\&. It is also possible to match paths against a prefix\&. For example, the value
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-nixpkgs=/home/eelco/Dev/nixpkgs\-branch:/etc/nixos
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-will cause Nix to search for
-<nixpkgs/\fIpath\fR>
-in
-/home/eelco/Dev/nixpkgs\-branch/\fIpath\fR
-and
-/etc/nixos/nixpkgs/\fIpath\fR\&.
-.sp
-If a path in the Nix search path starts with
-http://
-or
-https://, it is interpreted as the URL of a tarball that will be downloaded and unpacked to a temporary location\&. The tarball must consist of a single top\-level directory\&. For example, setting
-\fBNIX_PATH\fR
-to
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-nixpkgs=https://github\&.com/NixOS/nixpkgs\-channels/archive/nixos\-14\&.12\&.tar\&.gz
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-tells Nix to download the latest revision in the Nixpkgs/NixOS 14\&.12 channel\&.
-.sp
-The search path can be extended using the
-\fB\-I\fR
-option, which takes precedence over
-\fBNIX_PATH\fR\&.
-.RE
-.PP
-\fBNIX_IGNORE_SYMLINK_STORE\fR
-.RS 4
-Normally, the Nix store directory (typically
-/nix/store) is not allowed to contain any symlink components\&. This is to prevent \(lqimpure\(rq builds\&. Builders sometimes \(lqcanonicalise\(rq paths by resolving all symlink components\&. Thus, builds on different machines (with
-/nix/store
-resolving to different locations) could yield different results\&. This is generally not a problem, except when builds are deployed to machines where
-/nix/store
-resolves differently\&. If you are sure that you\(cqre not going to do that, you can set
-\fBNIX_IGNORE_SYMLINK_STORE\fR
-to
-\fB1\fR\&.
-.sp
-Note that if you\(cqre symlinking the Nix store so that you can put it on another file system than the root file system, on Linux you\(cqre better off using
-bind
-mount points, e\&.g\&.,
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ mkdir /nix
-$ mount \-o bind /mnt/otherdisk/nix /nix
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Consult the
-\fBmount\fR(8)
-manual page for details\&.
-.RE
-.PP
-\fBNIX_STORE_DIR\fR
-.RS 4
-Overrides the location of the Nix store (default
-\fIprefix\fR/store)\&.
-.RE
-.PP
-\fBNIX_DATA_DIR\fR
-.RS 4
-Overrides the location of the Nix static data directory (default
-\fIprefix\fR/share)\&.
-.RE
-.PP
-\fBNIX_LOG_DIR\fR
-.RS 4
-Overrides the location of the Nix log directory (default
-\fIprefix\fR/log/nix)\&.
-.RE
-.PP
-\fBNIX_STATE_DIR\fR
-.RS 4
-Overrides the location of the Nix state directory (default
-\fIprefix\fR/var/nix)\&.
-.RE
-.PP
-\fBNIX_DB_DIR\fR
-.RS 4
-Overrides the location of the Nix database (default
-\fI$NIX_STATE_DIR\fR/db, i\&.e\&.,
-\fIprefix\fR/var/nix/db)\&.
-.RE
-.PP
-\fBNIX_CONF_DIR\fR
-.RS 4
-Overrides the location of the Nix configuration directory (default
-\fIprefix\fR/etc/nix)\&.
-.RE
-.PP
-\fBTMPDIR\fR
-.RS 4
-Use the specified directory to store temporary files\&. In particular, this includes temporary build directories; these can take up substantial amounts of disk space\&. The default is
-/tmp\&.
-.RE
-.PP
-\fBNIX_BUILD_HOOK\fR
-.RS 4
-Specifies the location of the
-\fIbuild hook\fR, which is a program (typically some script) that Nix will call whenever it wants to build a derivation\&. This is used to implement distributed builds\&.
-.RE
-.PP
-\fBNIX_REMOTE\fR
-.RS 4
-This variable should be set to
-daemon
-if you want to use the Nix daemon to execute Nix operations\&. This is necessary in
-multi\-user Nix installations\&. Otherwise, it should be left unset\&.
-.RE
-.PP
-\fBNIX_SHOW_STATS\fR
-.RS 4
-If set to
-1, Nix will print some evaluation statistics, such as the number of values allocated\&.
-.RE
-.PP
-\fBNIX_COUNT_CALLS\fR
-.RS 4
-If set to
-1, Nix will print how often functions were called during Nix expression evaluation\&. This is useful for profiling your Nix expressions\&.
-.RE
-.PP
-\fBGC_INITIAL_HEAP_SIZE\fR
-.RS 4
-If Nix has been configured to use the Boehm garbage collector, this variable sets the initial size of the heap in bytes\&. It defaults to 384 MiB\&. Setting it to a low value reduces memory consumption, but will increase runtime due to the overhead of garbage collection\&.
-.RE
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
--- nix-1.11.15.orig/doc/manual/nix-prefetch-url.1
+++ /dev/null
@@ -1,128 +0,0 @@
-'\" t
-.\"     Title: nix-prefetch-url
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-PREFETCH\-URL" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-prefetch-url \- copy a file from a URL into the store and print its hash
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-prefetch\-url\fR\ 'u
-\fBnix\-prefetch\-url\fR [\fB\-\-type\fR\ \fIhashAlgo\fR] [\fB\-\-print\-path\fR] \fIurl\fR [\fIhash\fR]
-.SH "DESCRIPTION"
-.PP
-The command
-\fBnix\-prefetch\-url\fR
-downloads the file referenced by the URL
-\fIurl\fR, prints its cryptographic hash, and copies it into the Nix store\&. The file name in the store is
-\fIhash\fR\-\fIbaseName\fR, where
-\fIbaseName\fR
-is everything following the final slash in
-\fIurl\fR\&.
-.PP
-This command is just a convenience for Nix expression writers\&. Often a Nix expression fetches some source distribution from the network using the
-fetchurl
-expression contained in Nixpkgs\&. However,
-fetchurl
-requires a cryptographic hash\&. If you don\*(Aqt know the hash, you would have to download the file first, and then
-fetchurl
-would download it again when you build your Nix expression\&. Since
-fetchurl
-uses the same name for the downloaded file as
-\fBnix\-prefetch\-url\fR, the redundant download can be avoided\&.
-.PP
-If
-\fIhash\fR
-is specified, then a download is not performed if the Nix store already contains a file with the same hash and base name\&. Otherwise, the file is downloaded, and an error if signaled if the actual hash of the file does not match the specified hash\&.
-.PP
-This command prints the hash on standard output\&. Additionally, if the option
-\fB\-\-print\-path\fR
-is used, the path of the downloaded file in the Nix store is also printed\&.
-.SH "OPTIONS"
-.PP
-\fB\-\-type\fR \fIhashAlgo\fR
-.RS 4
-Use the specified cryptographic hash algorithm, which can be one of
-md5,
-sha1, and
-sha256\&.
-.RE
-.PP
-\fB\-\-print\-path\fR
-.RS 4
-Print the store path of the downloaded file on standard output\&.
-.RE
-.PP
-\fB\-\-unpack\fR
-.RS 4
-Unpack the archive (which must be a tarball or zip file) and add the result to the Nix store\&. The resulting hash can be used with functions such as Nixpkgs\(cqs
-\fIfetchzip\fR
-or
-\fIfetchFromGitHub\fR\&.
-.RE
-.PP
-\fB\-\-name\fR
-.RS 4
-Override the name of the file in the Nix store\&. By default, this is
-\fIhash\fR\-\fIbasename\fR, where
-\fIbasename\fR
-is the last component of
-\fIurl\fR\&. Overriding the name is necessary when
-\fIbasename\fR
-contains characters that are not allowed in Nix store paths\&.
-.RE
-.SH "EXAMPLES"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-prefetch\-url ftp://ftp\&.gnu\&.org/pub/gnu/hello/hello\-2\&.10\&.tar\&.gz
-0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i
-
-$ nix\-prefetch\-url \-\-print\-path mirror://gnu/hello/hello\-2\&.10\&.tar\&.gz
-0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i
-/nix/store/3x7dwzq014bblazs7kq20p9hyzz0qh8g\-hello\-2\&.10\&.tar\&.gz
-
-$ nix\-prefetch\-url \-\-unpack \-\-print\-path https://github\&.com/NixOS/patchelf/archive/0\&.8\&.tar\&.gz
-079agjlv0hrv7fxnx9ngipx14gyncbkllxrp9cccnh3a50fxcmy7
-/nix/store/19zrmhm3m40xxaw81c8cqm6aljgrnwj2\-0\&.8\&.tar\&.gz
-.fi
-.if n \{\
-.RE
-.\}
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
--- nix-1.11.15.orig/doc/manual/nix-pull.1
+++ /dev/null
@@ -1,84 +0,0 @@
-'\" t
-.\"     Title: nix-pull
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-PULL" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-pull \- register availability of pre\-built binaries (deprecated)
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-pull\fR\ 'u
-\fBnix\-pull\fR \fIurl\fR
-.SH "DESCRIPTION"
-.if n \{\
-.sp
-.\}
-.RS 4
-.it 1 an-trap
-.nr an-no-space-flag 1
-.nr an-break-flag 1
-.br
-.ps +1
-\fBNote\fR
-.ps -1
-.br
-.PP
-This command and the use of manifests is deprecated\&. It is better to use binary caches\&.
-.sp .5v
-.RE
-.PP
-The command
-\fBnix\-pull\fR
-obtains a list of pre\-built store paths from the URL
-\fIurl\fR, and for each of these store paths, registers a substitute derivation that downloads and unpacks it into the Nix store\&. This is used to speed up installations: if you attempt to install something that has already been built and stored into the network cache, Nix can transparently re\-use the pre\-built store paths\&.
-.PP
-The file at
-\fIurl\fR
-must be compatible with the files created by
-\fInix\-push\fR\&.
-.SH "EXAMPLES"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-pull https://nixos\&.org/releases/nixpkgs/nixpkgs\-15\&.05pre54468\&.69858d7/MANIFEST
-.fi
-.if n \{\
-.RE
-.\}
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
--- nix-1.11.15.orig/doc/manual/nix-push.1
+++ /dev/null
@@ -1,543 +0,0 @@
-'\" t
-.\"     Title: nix-push
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-PUSH" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-push \- generate a binary cache
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-push\fR\ 'u
-\fBnix\-push\fR \fB\-\-dest\fR\ \fIdest\-dir\fR [\fB\-\-bzip2\fR] [\fB\-\-none\fR] [\fB\-\-force\fR] [\fB\-\-link\fR] [\fB\-\-manifest\fR] [\fB\-\-manifest\-path\fR\ \fIfilename\fR] [\fB\-\-url\-prefix\fR\ \fIurl\fR] [\fB\-\-key\-file\fR\ \fIpath\fR] \fIpaths\fR...
-.SH "DESCRIPTION"
-.PP
-The command
-\fBnix\-push\fR
-produces a
-\fIbinary cache\fR, a directory containing compressed Nix archives (NARs) plus some metadata of the closure of the specified store paths\&. This directory can then be made available through a web server to other Nix installations, allowing them to skip building from source and instead download binaries from the cache automatically\&.
-.PP
-\fBnix\-push\fR
-performs the following actions\&.
-.sp
-.RS 4
-.ie n \{\
-\h'-04' 1.\h'+01'\c
-.\}
-.el \{\
-.sp -1
-.IP "  1." 4.2
-.\}
-Each path in
-\fIpaths\fR
-is built (using
-\fBnix\-store \-\-realise\fR)\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04' 2.\h'+01'\c
-.\}
-.el \{\
-.sp -1
-.IP "  2." 4.2
-.\}
-All paths in the closure of
-\fIpaths\fR
-are determined (using
-\fBnix\-store \-\-query \-\-requisites \-\-include\-outputs\fR)\&. Note that since the
-\fB\-\-include\-outputs\fR
-flag is used, if
-\fIpaths\fR
-includes a store derivation, you get a combined source/binary distribution (e\&.g\&., source tarballs will be included)\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04' 3.\h'+01'\c
-.\}
-.el \{\
-.sp -1
-.IP "  3." 4.2
-.\}
-All store paths determined in the previous step are packaged into a NAR (using
-\fBnix\-store \-\-dump\fR) and compressed using
-\fBxz\fR
-or
-\fBbzip2\fR\&. The resulting files have the extension
-\&.nar\&.xz
-or
-\&.nar\&.bz2\&. Also for each store path, Nix generates a file with extension
-\&.narinfo
-containing metadata such as the references, cryptographic hash and size of each path\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04' 4.\h'+01'\c
-.\}
-.el \{\
-.sp -1
-.IP "  4." 4.2
-.\}
-Optionally, a single
-\fImanifest\fR
-file is created that contains the same metadata as the
-\&.narinfo
-files\&. This is for compatibility with Nix versions prior to 1\&.2 (see
-\fBnix\-pull\fR
-for details)\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04' 5.\h'+01'\c
-.\}
-.el \{\
-.sp -1
-.IP "  5." 4.2
-.\}
-A file named
-\fBnix\-cache\-info\fR
-is placed in the destination directory\&. The existence of this file marks the directory as a binary cache\&.
-.RE
-.sp
-.SH "OPTIONS"
-.PP
-\fB\-\-dest\fR \fIdest\-dir\fR
-.RS 4
-Set the destination directory to
-\fIdir\fR, which is created if it does not exist\&. This flag is required\&.
-.RE
-.PP
-\fB\-\-bzip2\fR
-.RS 4
-Compress NARs using
-\fBbzip2\fR
-instead of
-\fBxz\fR\&. The latter compresses about 30% better on typical archives, decompresses about twice as fast, but compresses a lot slower and is not supported by Nix prior to version 1\&.2\&.
-.RE
-.PP
-\fB\-\-none\fR
-.RS 4
-Do not compress NARs\&.
-.RE
-.PP
-\fB\-\-force\fR
-.RS 4
-Overwrite
-\&.narinfo
-files if they already exist\&.
-.RE
-.PP
-\fB\-\-link\fR
-.RS 4
-By default, NARs are generated in the Nix store and then copied to
-\fIdest\-dir\fR\&. If this option is given, hard links are used instead\&. This only works if
-\fIdest\-dir\fR
-is on the same filesystem as the Nix store\&.
-.RE
-.PP
-\fB\-\-manifest\fR
-.RS 4
-Force the generation of a manifest suitable for use by
-\fBnix\-pull\fR\&. The manifest is stored as
-\fIdest\-dir\fR/MANIFEST\&.
-.RE
-.PP
-\fB\-\-manifest\-path\fR \fIfilename\fR
-.RS 4
-Like
-\fB\-\-manifest\fR, but store the manifest in
-\fIfilename\fR\&.
-.RE
-.PP
-\fB\-\-url\-prefix\fR \fIurl\fR
-.RS 4
-Manifests are expected to contain the absolute URLs of NARs\&. For generating these URLs, the prefix
-\fIurl\fR
-is used\&. It defaults to
-file://\fIdest\-dir\fR\&.
-.RE
-.PP
-\fB\-\-key\-file\fR \fIpath\fR
-.RS 4
-Sign the binary cache using the secret key stored in
-\fIpath\fR\&. This secret key must have been created using
-\fBnix\-store \-\-generate\-binary\-cache\-key\fR\&. Users of this binary cache should add the corresponding public key to the option
-\fBbinary\-cache\-public\-keys\fR
-in
-nix\&.conf\&.
-.RE
-.SH "EXAMPLES"
-.PP
-To add the closure of Thunderbird to a binary cache:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-push \-\-dest /tmp/cache $(nix\-build \-A thunderbird)
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Assuming that
-/tmp/cache
-is exported by a web server as
-http://example\&.org/cache, you can then use this cache on another machine to speed up the installation of Thunderbird:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-build \-A thunderbird \-\-option binary\-caches http://example\&.org/cache
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Alternatively, you could add
-binary\-caches = http://example\&.org/cache
-to
-nix\&.conf\&.
-.PP
-To also include build\-time dependencies (such as source tarballs):
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-push \-\-dest /tmp/cache $(nix\-instantiate \-A thunderbird)
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To generate a manifest suitable for
-\fBnix\-pull\fR:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-push \-\-dest /tmp/cache $(nix\-build \-A thunderbird) \-\-manifest
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-On another machine you can then do:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-pull http://example\&.org/cache
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-to cause the binaries to be used by subsequent Nix operations\&.
-.PP
-To generate a signed binary cache, you must first generate a key pair, in this example called
-cache\&.example\&.org\-1, storing the secret key in
-\&./sk
-and the public key in
-\&./pk:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-generate\-binary\-cache\-key cache\&.example\&.org\-1 sk pk
-
-$ cat sk
-cache\&.example\&.org\-1:jcMRQYFo8pQKzTtimpQLIPeHkMYZjfhB24hGfwF+u9PuX8H8FO7q564+X3G/JDlqqIqGar3OXRRwS9N3Wh3vbw==
-
-$ cat pk
-cache\&.example\&.org\-1:7l/B/BTu6ueuPl9xvyQ5aqiKhmq9zl0UcEvTd1od728=
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-You can then generate a binary cache signed with the secret key:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-push \-\-dest /tmp/cache \-\-key\-file \&./sk $(type \-p firefox)
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Users who wish to verify the integrity of binaries downloaded from your cache would add the following to their
-nix\&.conf:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-binary\-caches = http://cache\&.example\&.org
-signed\-binary\-caches = *
-binary\-cache\-public\-keys = cache\&.example\&.org\-1:7l/B/BTu6ueuPl9xvyQ5aqiKhmq9zl0UcEvTd1od728=
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Nix will then ignore any binary that has a missing, incorrect or unrecognised signature\&.
-.SH "BINARY CACHE FORMAT AND OPERATION"
-.PP
-A binary cache with URL
-\fIurl\fR
-only denotes a valid binary cache if the file
-\fIurl\fR/nix\-cache\-info
-exists\&. If this file does not exist (or cannot be downloaded), the cache is ignored\&. If it does exist, it must be a text file containing cache properties\&. Here\(cqs an example:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-StoreDir: /nix/store
-WantMassQuery: 1
-Priority: 10
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-The properties that are currently supported are:
-.PP
-StoreDir
-.RS 4
-The path of the Nix store to which this binary cache applies\&. Binaries are not relocatable \(em a binary built for
-/nix/store
-won\(cqt generally work in
-/home/alice/store
-\(em so to prevent binaries from being used in a wrong store, a binary cache is only used if its
-StoreDir
-matches the local Nix configuration\&. The default is
-/nix/store\&.
-.RE
-.PP
-WantMassQuery
-.RS 4
-Query operations such as
-\fBnix\-env \-qas\fR
-can cause thousands of cache queries, and thus thousands of HTTP requests, to determine which packages are available in binary form\&. While these requests are small, not every server may appreciate a potential onslaught of queries\&. If
-WantMassQuery
-is set to
-0
-(default), \(lqmass queries\(rq such as
-\fBnix\-env \-qas\fR
-will skip this cache\&. Thus a package may appear not to have a binary substitute\&. However, the binary will still be used when you actually install the package\&. If
-WantMassQuery
-is set to
-1, mass queries will use this cache\&.
-.RE
-.PP
-Priority
-.RS 4
-Each binary cache has a priority (defaulting to 50)\&. Binary caches are checked for binaries in order of ascending priority; thus a higher number denotes a lower priority\&. The binary cache
-https://cache\&.nixos\&.org
-has priority 40\&.
-.RE
-.PP
-Every time Nix needs to build some store path
-\fIp\fR, it will check each configured binary cache to see if it has a NAR file for
-\fIp\fR, until it finds one\&. If no cache has a NAR, Nix will fall back to building the path from source (if applicable)\&. To see if a cache with URL
-\fIurl\fR
-has a binary for
-\fIp\fR, Nix fetches
-\fIurl/h\fR, where
-\fIh\fR
-is the hash part of
-\fIp\fR\&. Thus, if we have a cache
-https://cache\&.nixos\&.org
-and we want to obtain the store path
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-/nix/store/a8922c0h87iilxzzvwn2hmv8x210aqb9\-glibc\-2\&.7
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-then Nix will attempt to fetch
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-https://cache\&.nixos\&.org/a8922c0h87iilxzzvwn2hmv8x210aqb9\&.narinfo
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-(Commands such as
-\fBnix\-env \-qas\fR
-will issue an HTTP HEAD request, since it only needs to know if the
-\&.narinfo
-file exists\&.) The
-\&.narinfo
-file is a simple text file that looks like this:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-StorePath: /nix/store/a8922c0h87iilxzzvwn2hmv8x210aqb9\-glibc\-2\&.7
-URL: nar/0zzjpdz46mdn74v09m053yczlz4am038g8r74iy8w43gx8801h70\&.nar\&.bz2
-Compression: bzip2
-FileHash: sha256:0zzjpdz46mdn74v09m053yczlz4am038g8r74iy8w43gx8801h70
-FileSize: 24473768
-NarHash: sha256:0s491y1h9hxj5ghiizlxk7ax6jwbha00zwn7lpyd5xg5bhf60vzg
-NarSize: 109521136
-References: 2ma2k0ys8knh4an48n28vigcmc2z8773\-linux\-headers\-2\&.6\&.23\&.16 \&.\&.\&.
-Deriver: 7akyyc87ka32xwmqza9dvyg5pwx3j212\-glibc\-2\&.7\&.drv
-Sig: cache\&.example\&.org\-1:WepnSp2UT0odDpR3NRjPVhJBHmdBgSBSTbHpdh4SCz92nGXwFY82bkPEmISoC0hGqBXDXEmB6y3Ohgna3mMgDg==
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-The fields are as follows:
-.PP
-StorePath
-.RS 4
-The full store path, including the name part (e\&.g\&.,
-glibc\-2\&.7)\&. It must match the requested store path\&.
-.RE
-.PP
-URL
-.RS 4
-The URL of the NAR, relative to the binary cache URL\&.
-.RE
-.PP
-Compression
-.RS 4
-The compression method; either
-xz
-or
-bzip2\&.
-.RE
-.PP
-FileHash
-.RS 4
-The SHA\-256 hash of the compressed NAR\&.
-.RE
-.PP
-FileSize
-.RS 4
-The size of the compressed NAR\&.
-.RE
-.PP
-NarHash
-.RS 4
-The SHA\-256 hash of the uncompressed NAR\&. This is equal to the hash of the store path as returned by
-\fBnix\-store \-q \-\-hash \fR\fB\fIp\fR\fR\&.
-.RE
-.PP
-NarSize
-.RS 4
-The size of the uncompressed NAR\&.
-.RE
-.PP
-References
-.RS 4
-The references of the store path, without the Nix store prefix\&.
-.RE
-.PP
-Deriver
-.RS 4
-The deriver of the store path, without the Nix store prefix\&. This field is optional\&.
-.RE
-.PP
-System
-.RS 4
-The Nix platform type of this binary, if known\&. This field is optional\&.
-.RE
-.PP
-Sig
-.RS 4
-A signature of the the form
-\fIkey\-name\fR:\fIsig\fR, where
-\fIkey\-name\fR
-is the symbolic name of the key pair used to sign and verify the cache (e\&.g\&.
-cache\&.example\&.org\-1), and
-\fIsig\fR
-is the actual signature, computed over the
-\fIStorePath\fR,
-\fINarHash\fR,
-\fINarSize\fR
-and
-\fIReferences\fR
-fields using the
-\m[blue]\fBEd25519 public\-key signature system\fR\m[]\&\s-2\u[1]\d\s+2\&.
-.RE
-.PP
-Thus, in our example, after recursively ensuring that the references exist (e\&.g\&.,
-/nix/store/2ma2k0ys8knh4an48n28vigcmc2z8773\-linux\-headers\-2\&.6\&.23\&.16), Nix will fetch
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-https://cache\&.nixos\&.org/nar/0zzjpdz46mdn74v09m053yczlz4am038g8r74iy8w43gx8801h70\&.nar\&.bz2
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-and decompress and unpack it to
-/nix/store/a8922c0h87iilxzzvwn2hmv8x210aqb9\-glibc\-2\&.7\&.
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
-.SH "NOTES"
-.IP " 1." 4
-Ed25519 public-key signature system
-.RS 4
-\%http://ed25519.cr.yp.to/
-.RE
--- nix-1.11.15.orig/doc/manual/nix-shell.1
+++ /dev/null
@@ -1,852 +0,0 @@
-'\" t
-.\"     Title: nix-shell
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-SHELL" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-shell \- start an interactive shell based on a Nix expression
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-shell\fR\ 'u
-\fBnix\-shell\fR [\fB\-\-arg\fR\ \fIname\fR\ \fIvalue\fR] [\fB\-\-argstr\fR\ \fIname\fR\ \fIvalue\fR] [{\fB\-\-attr\fR\ |\ \fB\-A\fR}\ \fIattrPath\fR] [\fB\-\-command\fR\ \fIcmd\fR] [\fB\-\-run\fR\ \fIcmd\fR] [\fB\-\-exclude\fR\ \fIregexp\fR] [\fB\-\-pure\fR] {[\fB\-\-packages\fR | \fB\-p\fR]\fIpackages\fR | [\fIpath\fR]}
-.SH "DESCRIPTION"
-.PP
-The command
-\fBnix\-shell\fR
-will build the dependencies of the specified derivation, but not the derivation itself\&. It will then start an interactive shell in which all environment variables defined by the derivation
-\fIpath\fR
-have been set to their corresponding values, and the script
-$stdenv/setup
-has been sourced\&. This is useful for reproducing the environment of a derivation for development\&.
-.PP
-If
-\fIpath\fR
-is not given,
-\fBnix\-shell\fR
-defaults to
-shell\&.nix
-if it exists, and
-default\&.nix
-otherwise\&.
-.PP
-If
-\fIpath\fR
-starts with
-http://
-or
-https://, it is interpreted as the URL of a tarball that will be downloaded and unpacked to a temporary location\&. The tarball must include a single top\-level directory containing at least a file named
-default\&.nix\&.
-.PP
-If the derivation defines the variable
-\fIshellHook\fR, it will be evaluated after
-$stdenv/setup
-has been sourced\&. Since this hook is not executed by regular Nix builds, it allows you to perform initialisation specific to
-\fBnix\-shell\fR\&. For example, the derivation attribute
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-shellHook =
-  \*(Aq\*(Aq
-    echo "Hello shell"
-  \*(Aq\*(Aq;
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-will cause
-\fBnix\-shell\fR
-to print
-Hello shell\&.
-.SH "OPTIONS"
-.PP
-All options not listed here are passed to
-\fBnix\-store \-\-realise\fR, except for
-\fB\-\-arg\fR
-and
-\fB\-\-attr\fR
-/
-\fB\-A\fR
-which are passed to
-\fBnix\-instantiate\fR\&.
-.PP
-\fB\-\-command\fR \fIcmd\fR
-.RS 4
-In the environment of the derivation, run the shell command
-\fIcmd\fR\&. This command is executed in an interactive shell\&. (Use
-\fB\-\-run\fR
-to use a non\-interactive shell instead\&.) However, a call to
-exit
-is implicitly added to the command, so the shell will exit after running the command\&. To prevent this, add
-return
-at the end; e\&.g\&.
-\-\-command "echo Hello; return"
-will print
-Hello
-and then drop you into the interactive shell\&. This can be useful for doing any additional initialisation\&.
-.RE
-.PP
-\fB\-\-run\fR \fIcmd\fR
-.RS 4
-Like
-\fB\-\-command\fR, but executes the command in a non\-interactive shell\&. This means (among other things) that if you hit Ctrl\-C while the command is running, the shell exits\&.
-.RE
-.PP
-\fB\-\-exclude\fR \fIregexp\fR
-.RS 4
-Do not build any dependencies whose store path matches the regular expression
-\fIregexp\fR\&. This option may be specified multiple times\&.
-.RE
-.PP
-\fB\-\-pure\fR
-.RS 4
-If this flag is specified, the environment is almost entirely cleared before the interactive shell is started, so you get an environment that more closely corresponds to the \(lqreal\(rq Nix build\&. A few variables, in particular
-\fBHOME\fR,
-\fBUSER\fR
-and
-\fBDISPLAY\fR, are retained\&. Note that
-~/\&.bashrc
-and (depending on your Bash installation)
-/etc/bashrc
-are still sourced, so any variables set there will affect the interactive shell\&.
-.RE
-.PP
-\fB\-\-packages\fR / \fB\-p\fR
-.RS 4
-Set up an environment in which the specified packages are present\&. The command line arguments are interpreted as attribute names inside the Nix Packages collection\&. Thus,
-nix\-shell \-p libjpeg openjdk
-will start a shell in which the packages denoted by the attribute names
-\fIlibjpeg\fR
-and
-\fIopenjdk\fR
-are present\&.
-.RE
-.PP
-\fB\-i\fR \fIinterpreter\fR
-.RS 4
-The chained script interpreter to be invoked by
-\fBnix\-shell\fR\&. Only applicable in
-#!\-scripts (described
-below)\&.
-.RE
-.PP
-The following common options are supported:
-.PP
-\fB\-\-help\fR
-.RS 4
-Prints out a summary of the command syntax and exits\&.
-.RE
-.PP
-\fB\-\-version\fR
-.RS 4
-Prints out the Nix version number on standard output and exits\&.
-.RE
-.PP
-\fB\-\-verbose\fR, \fB\-v\fR
-.RS 4
-Increases the level of verbosity of diagnostic messages printed on standard error\&. For each Nix operation, the information printed on standard output is well\-defined; any diagnostic information is printed on standard error, never on standard output\&.
-.sp
-This option may be specified repeatedly\&. Currently, the following verbosity levels exist:
-.PP
-0
-.RS 4
-\(lqErrors only\(rq: only print messages explaining why the Nix invocation failed\&.
-.RE
-.PP
-1
-.RS 4
-\(lqInformational\(rq: print
-\fIuseful\fR
-messages about what Nix is doing\&. This is the default\&.
-.RE
-.PP
-2
-.RS 4
-\(lqTalkative\(rq: print more informational messages\&.
-.RE
-.PP
-3
-.RS 4
-\(lqChatty\(rq: print even more informational messages\&.
-.RE
-.PP
-4
-.RS 4
-\(lqDebug\(rq: print debug information\&.
-.RE
-.PP
-5
-.RS 4
-\(lqVomit\(rq: print vast amounts of debug information\&.
-.RE
-.RE
-.PP
-\fB\-\-no\-build\-output\fR, \fB\-Q\fR
-.RS 4
-By default, output written by builders to standard output and standard error is echoed to the Nix command\*(Aqs standard error\&. This option suppresses this behaviour\&. Note that the builder\*(Aqs standard output and error are always written to a log file in
-\fIprefix\fR/nix/var/log/nix\&.
-.RE
-.PP
-\fB\-\-max\-jobs\fR, \fB\-j\fR
-.RS 4
-Sets the maximum number of build jobs that Nix will perform in parallel to the specified number\&. The default is specified by the
-build\-max\-jobs
-configuration setting, which itself defaults to
-1\&. A higher value is useful on SMP systems or to exploit I/O latency\&.
-.RE
-.PP
-\fB\-\-cores\fR
-.RS 4
-Sets the value of the
-\fBNIX_BUILD_CORES\fR
-environment variable in the invocation of builders\&. Builders can use this variable at their discretion to control the maximum amount of parallelism\&. For instance, in Nixpkgs, if the derivation attribute
-\fIenableParallelBuilding\fR
-is set to
-true, the builder passes the
-\fB\-j\fR\fB\fIN\fR\fR
-flag to GNU Make\&. It defaults to the value of the
-build\-cores
-configuration setting, if set, or
-1
-otherwise\&. The value
-0
-means that the builder should use all available CPU cores in the system\&.
-.RE
-.PP
-\fB\-\-max\-silent\-time\fR
-.RS 4
-Sets the maximum number of seconds that a builder can go without producing any data on standard output or standard error\&. The default is specified by the
-build\-max\-silent\-time
-configuration setting\&.
-0
-means no time\-out\&.
-.RE
-.PP
-\fB\-\-timeout\fR
-.RS 4
-Sets the maximum number of seconds that a builder can run\&. The default is specified by the
-build\-timeout
-configuration setting\&.
-0
-means no timeout\&.
-.RE
-.PP
-\fB\-\-keep\-going\fR, \fB\-k\fR
-.RS 4
-Keep going in case of failed builds, to the greatest extent possible\&. That is, if building an input of some derivation fails, Nix will still build the other inputs, but not the derivation itself\&. Without this option, Nix stops if any build fails (except for builds of substitutes), possibly killing builds in progress (in case of parallel or distributed builds)\&.
-.RE
-.PP
-\fB\-\-keep\-failed\fR, \fB\-K\fR
-.RS 4
-Specifies that in case of a build failure, the temporary directory (usually in
-/tmp) in which the build takes place should not be deleted\&. The path of the build directory is printed as an informational message\&.
-.RE
-.PP
-\fB\-\-fallback\fR
-.RS 4
-Whenever Nix attempts to build a derivation for which substitutes are known for each output path, but realising the output paths through the substitutes fails, fall back on building the derivation\&.
-.sp
-The most common scenario in which this is useful is when we have registered substitutes in order to perform binary distribution from, say, a network repository\&. If the repository is down, the realisation of the derivation will fail\&. When this option is specified, Nix will build the derivation instead\&. Thus, installation from binaries falls back on installation from source\&. This option is not the default since it is generally not desirable for a transient failure in obtaining the substitutes to lead to a full build from source (with the related consumption of resources)\&.
-.RE
-.PP
-\fB\-\-readonly\-mode\fR
-.RS 4
-When this option is used, no attempt is made to open the Nix database\&. Most Nix operations do need database access, so those operations will fail\&.
-.RE
-.PP
-\fB\-\-log\-type\fR \fItype\fR
-.RS 4
-This option determines how the output written to standard error is formatted\&. Nix\(cqs diagnostic messages are typically
-\fInested\fR\&. For instance, when tracing Nix expression evaluation (\fBnix\-env \-vvvvv\fR, messages from subexpressions are nested inside their parent expressions\&. Nix builder output is also often nested\&. For instance, the Nix Packages generic builder nests the various build tasks (unpack, configure, compile, etc\&.), and the GNU Make in
-stdenv\-linux
-has been patched to provide nesting for recursive Make invocations\&.
-.sp
-\fItype\fR
-can be one of the following:
-.PP
-pretty
-.RS 4
-Pretty\-print the output, indicating different nesting levels using spaces\&. This is the default\&.
-.RE
-.PP
-escapes
-.RS 4
-Indicate nesting using escape codes that can be interpreted by the
-\fBnix\-log2xml\fR
-tool in the Nix source distribution\&. The resulting XML file can be fed into the
-\fBlog2html\&.xsl\fR
-stylesheet to create an HTML file that can be browsed interactively, using JavaScript to expand and collapse parts of the output\&.
-.RE
-.PP
-flat
-.RS 4
-Remove all nesting\&.
-.RE
-.sp
-.RE
-.PP
-\fB\-\-arg\fR \fIname\fR \fIvalue\fR
-.RS 4
-This option is accepted by
-\fBnix\-env\fR,
-\fBnix\-instantiate\fR
-and
-\fBnix\-build\fR\&. When evaluating Nix expressions, the expression evaluator will automatically try to call functions that it encounters\&. It can automatically call functions for which every argument has a
-default value
-(e\&.g\&.,
-{ \fIargName\fR ? \fIdefaultValue\fR }: \fI\&.\&.\&.\fR)\&. With
-\fB\-\-arg\fR, you can also call functions that have arguments without a default value (or override a default value)\&. That is, if the evaluator encounters a function with an argument named
-\fIname\fR, it will call it with value
-\fIvalue\fR\&.
-.sp
-For instance, the file
-pkgs/top\-level/all\-packages\&.nix
-in Nixpkgs is actually a function:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-{ # The system (e\&.g\&., `i686\-linux\*(Aq) for which to build the packages\&.
-  system ? builtins\&.currentSystem
-  \fI\&.\&.\&.\fR
-}: \fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-So if you call this Nix expression (e\&.g\&., when you do
-nix\-env \-i \fIpkgname\fR), the function will be called automatically using the value
-builtins\&.currentSystem
-for the
-system
-argument\&. You can override this using
-\fB\-\-arg\fR, e\&.g\&.,
-nix\-env \-i \fIpkgname\fR \-\-arg system \e"i686\-freebsd\e"\&. (Note that since the argument is a Nix string literal, you have to escape the quotes\&.)
-.RE
-.PP
-\fB\-\-argstr\fR \fIname\fR \fIvalue\fR
-.RS 4
-This option is like
-\fB\-\-arg\fR, only the value is not a Nix expression but a string\&. So instead of
-\-\-arg system \e"i686\-linux\e"
-(the outer quotes are to keep the shell happy) you can say
-\-\-argstr system i686\-linux\&.
-.RE
-.PP
-\fB\-\-attr\fR / \fB\-A\fR \fIattrPath\fR
-.RS 4
-Select an attribute from the top\-level Nix expression being evaluated\&. (\fBnix\-env\fR,
-\fBnix\-instantiate\fR,
-\fBnix\-build\fR
-and
-\fBnix\-shell\fR
-only\&.) The
-\fIattribute path\fR
-\fIattrPath\fR
-is a sequence of attribute names separated by dots\&. For instance, given a top\-level Nix expression
-\fIe\fR, the attribute path
-xorg\&.xorgserver
-would cause the expression
-\fIe\fR\&.xorg\&.xorgserver
-to be used\&. See
-\fBnix\-env \-\-install\fR
-for some concrete examples\&.
-.sp
-In addition to attribute names, you can also specify array indices\&. For instance, the attribute path
-foo\&.3\&.bar
-selects the
-bar
-attribute of the fourth element of the array in the
-foo
-attribute of the top\-level expression\&.
-.RE
-.PP
-\fB\-\-expr\fR / \fB\-E\fR
-.RS 4
-Interpret the command line arguments as a list of Nix expressions to be parsed and evaluated, rather than as a list of file names of Nix expressions\&. (\fBnix\-instantiate\fR,
-\fBnix\-build\fR
-and
-\fBnix\-shell\fR
-only\&.)
-.RE
-.PP
-\fB\-\-show\-trace\fR
-.RS 4
-Causes Nix to print out a stack trace in case of Nix expression evaluation errors\&.
-.RE
-.PP
-\fB\-I\fR \fIpath\fR
-.RS 4
-Add a path to the Nix expression search path\&. This option may be given multiple times\&. See the
-\fBNIX_PATH\fR
-environment variable for information on the semantics of the Nix search path\&. Paths added through
-\fB\-I\fR
-take precedence over
-\fBNIX_PATH\fR\&.
-.RE
-.PP
-\fB\-\-option\fR \fIname\fR \fIvalue\fR
-.RS 4
-Set the Nix configuration option
-\fIname\fR
-to
-\fIvalue\fR\&. This overrides settings in the Nix configuration file (see
-\fBnix.conf\fR(5))\&.
-.RE
-.PP
-\fB\-\-repair\fR
-.RS 4
-Fix corrupted or missing store paths by redownloading or rebuilding them\&. Note that this is slow because it requires computing a cryptographic hash of the contents of every path in the closure of the build\&. Also note the warning under
-\fBnix\-store \-\-repair\-path\fR\&.
-.RE
-.SH "ENVIRONMENT VARIABLES"
-.PP
-\fBNIX_BUILD_SHELL\fR
-.RS 4
-Shell used to start the interactive environment\&. Defaults to the
-\fBbash\fR
-found in
-\fBPATH\fR\&.
-.RE
-.SH "EXAMPLES"
-.PP
-To build the dependencies of the package Pan, and start an interactive shell in which to build it:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-shell \*(Aq<nixpkgs>\*(Aq \-A pan
-[nix\-shell]$ unpackPhase
-[nix\-shell]$ cd pan\-*
-[nix\-shell]$ configurePhase
-[nix\-shell]$ buildPhase
-[nix\-shell]$ \&./pan/gui/pan
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-To clear the environment first, and do some additional automatic initialisation of the interactive shell:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-shell \*(Aq<nixpkgs>\*(Aq \-A pan \-\-pure \e
-    \-\-command \*(Aqexport NIX_DEBUG=1; export NIX_CORES=8; return\*(Aq
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Nix expressions can also be given on the command line\&. For instance, the following starts a shell containing the packages
-sqlite
-and
-libX11:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-shell \-E \*(Aqwith import <nixpkgs> { }; runCommand "dummy" { buildInputs = [ sqlite xorg\&.libX11 ]; } ""\*(Aq
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-A shorter way to do the same is:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-shell \-p sqlite xorg\&.libX11
-[nix\-shell]$ echo $NIX_LDFLAGS
-\&... \-L/nix/store/j1zg5v\&...\-sqlite\-3\&.8\&.0\&.2/lib \-L/nix/store/0gmcz9\&...\-libX11\-1\&.6\&.1/lib \&...
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-The
-\fB\-p\fR
-flag looks up Nixpkgs in the Nix search path\&. You can override it by passing
-\fB\-I\fR
-or setting
-\fBNIX_PATH\fR\&. For example, the following gives you a shell containing the Pan package from a specific revision of Nixpkgs:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-shell \-p pan \-I nixpkgs=https://github\&.com/NixOS/nixpkgs\-channels/archive/8a3eea054838b55aca962c3fbde9c83c102b8bf2\&.tar\&.gz
-
-[nix\-shell:~]$ pan \-\-version
-Pan 0\&.139
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "USE AS A #!\-INTERPRETER"
-.PP
-You can use
-\fBnix\-shell\fR
-as a script interpreter to allow scripts written in arbitrary languages to obtain their own dependencies via Nix\&. This is done by starting the script with the following lines:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-#! /usr/bin/env nix\-shell
-#! nix\-shell \-i \fIreal\-interpreter\fR \-p \fIpackages\fR
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-where
-\fIreal\-interpreter\fR
-is the \(lqreal\(rq script interpreter that will be invoked by
-\fBnix\-shell\fR
-after it has obtained the dependencies and initialised the environment, and
-\fIpackages\fR
-are the attribute names of the dependencies in Nixpkgs\&.
-.PP
-The lines starting with
-#! nix\-shell
-specify
-\fBnix\-shell\fR
-options (see above)\&. Note that you cannot write
-#1 /usr/bin/env nix\-shell \-i \&.\&.\&.
-because many operating systems only allow one argument in
-#!
-lines\&.
-.PP
-For example, here is a Python script that depends on Python and the
-prettytable
-package:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-#! /usr/bin/env nix\-shell
-#! nix\-shell \-i python \-p python pythonPackages\&.prettytable
-
-import prettytable
-
-# Print a simple table\&.
-t = prettytable\&.PrettyTable(["N", "N^2"])
-for n in range(1, 10): t\&.add_row([n, n * n])
-print t
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-Similarly, the following is a Perl script that specifies that it requires Perl and the
-HTML::TokeParser::Simple
-and
-LWP
-packages:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-#! /usr/bin/env nix\-shell
-#! nix\-shell \-i perl \-p perl perlPackages\&.HTMLTokeParserSimple perlPackages\&.LWP
-
-use HTML::TokeParser::Simple;
-
-# Fetch nixos\&.org and print all hrefs\&.
-my $p = HTML::TokeParser::Simple\->new(url => \*(Aqhttp://nixos\&.org/\*(Aq);
-
-while (my $token = $p\->get_tag("a")) {
-    my $href = $token\->get_attr("href");
-    print "$href\en" if $href;
-}
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-Finally, the following Haskell script uses a specific branch of Nixpkgs/NixOS (the 14\&.12 stable branch):
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-#! /usr/bin/env nix\-shell
-#! nix\-shell \-i runghc \-p haskellPackages\&.ghc haskellPackages\&.HTTP haskellPackages\&.tagsoup
-#! nix\-shell \-I nixpkgs=https://github\&.com/NixOS/nixpkgs\-channels/archive/nixos\-14\&.12\&.tar\&.gz
-
-import Network\&.HTTP
-import Text\&.HTML\&.TagSoup
-
-\-\- Fetch nixos\&.org and print all hrefs\&.
-main = do
-  resp <\- Network\&.HTTP\&.simpleHTTP (getRequest "http://nixos\&.org/")
-  body <\- getResponseBody resp
-  let tags = filter (isTagOpenName "a") $ parseTags body
-  let tags\*(Aq = map (fromAttrib "href") tags
-  mapM_ putStrLn $ filter (/= "") tags\*(Aq
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-If you want to be even more precise, you can specify a specific revision of Nixpkgs:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-#! nix\-shell \-I nixpkgs=https://github\&.com/NixOS/nixpkgs\-channels/archive/0672315759b3e15e2121365f067c1c8c56bb4722\&.tar\&.gz
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-The examples above all used
-\fB\-p\fR
-to get dependencies from Nixpkgs\&. You can also use a Nix expression to build your own dependencies\&. For example, the Python example could have been written as:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-#! /usr/bin/env nix\-shell
-#! nix\-shell deps\&.nix \-i python
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-where the file
-deps\&.nix
-in the same directory as the
-#!\-script contains:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-with import <nixpkgs> {};
-
-runCommand "dummy" { buildInputs = [ python pythonPackages\&.prettytable ]; } ""
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "ENVIRONMENT VARIABLES"
-.PP
-\fBNIX_PATH\fR
-.RS 4
-A colon\-separated list of directories used to look up Nix expressions enclosed in angle brackets (i\&.e\&.,
-<\fIpath\fR>)\&. For instance, the value
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-/home/eelco/Dev:/etc/nixos
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-will cause Nix to look for paths relative to
-/home/eelco/Dev
-and
-/etc/nixos, in that order\&. It is also possible to match paths against a prefix\&. For example, the value
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-nixpkgs=/home/eelco/Dev/nixpkgs\-branch:/etc/nixos
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-will cause Nix to search for
-<nixpkgs/\fIpath\fR>
-in
-/home/eelco/Dev/nixpkgs\-branch/\fIpath\fR
-and
-/etc/nixos/nixpkgs/\fIpath\fR\&.
-.sp
-If a path in the Nix search path starts with
-http://
-or
-https://, it is interpreted as the URL of a tarball that will be downloaded and unpacked to a temporary location\&. The tarball must consist of a single top\-level directory\&. For example, setting
-\fBNIX_PATH\fR
-to
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-nixpkgs=https://github\&.com/NixOS/nixpkgs\-channels/archive/nixos\-14\&.12\&.tar\&.gz
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-tells Nix to download the latest revision in the Nixpkgs/NixOS 14\&.12 channel\&.
-.sp
-The search path can be extended using the
-\fB\-I\fR
-option, which takes precedence over
-\fBNIX_PATH\fR\&.
-.RE
-.PP
-\fBNIX_IGNORE_SYMLINK_STORE\fR
-.RS 4
-Normally, the Nix store directory (typically
-/nix/store) is not allowed to contain any symlink components\&. This is to prevent \(lqimpure\(rq builds\&. Builders sometimes \(lqcanonicalise\(rq paths by resolving all symlink components\&. Thus, builds on different machines (with
-/nix/store
-resolving to different locations) could yield different results\&. This is generally not a problem, except when builds are deployed to machines where
-/nix/store
-resolves differently\&. If you are sure that you\(cqre not going to do that, you can set
-\fBNIX_IGNORE_SYMLINK_STORE\fR
-to
-\fB1\fR\&.
-.sp
-Note that if you\(cqre symlinking the Nix store so that you can put it on another file system than the root file system, on Linux you\(cqre better off using
-bind
-mount points, e\&.g\&.,
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ mkdir /nix
-$ mount \-o bind /mnt/otherdisk/nix /nix
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Consult the
-\fBmount\fR(8)
-manual page for details\&.
-.RE
-.PP
-\fBNIX_STORE_DIR\fR
-.RS 4
-Overrides the location of the Nix store (default
-\fIprefix\fR/store)\&.
-.RE
-.PP
-\fBNIX_DATA_DIR\fR
-.RS 4
-Overrides the location of the Nix static data directory (default
-\fIprefix\fR/share)\&.
-.RE
-.PP
-\fBNIX_LOG_DIR\fR
-.RS 4
-Overrides the location of the Nix log directory (default
-\fIprefix\fR/log/nix)\&.
-.RE
-.PP
-\fBNIX_STATE_DIR\fR
-.RS 4
-Overrides the location of the Nix state directory (default
-\fIprefix\fR/var/nix)\&.
-.RE
-.PP
-\fBNIX_DB_DIR\fR
-.RS 4
-Overrides the location of the Nix database (default
-\fI$NIX_STATE_DIR\fR/db, i\&.e\&.,
-\fIprefix\fR/var/nix/db)\&.
-.RE
-.PP
-\fBNIX_CONF_DIR\fR
-.RS 4
-Overrides the location of the Nix configuration directory (default
-\fIprefix\fR/etc/nix)\&.
-.RE
-.PP
-\fBTMPDIR\fR
-.RS 4
-Use the specified directory to store temporary files\&. In particular, this includes temporary build directories; these can take up substantial amounts of disk space\&. The default is
-/tmp\&.
-.RE
-.PP
-\fBNIX_BUILD_HOOK\fR
-.RS 4
-Specifies the location of the
-\fIbuild hook\fR, which is a program (typically some script) that Nix will call whenever it wants to build a derivation\&. This is used to implement distributed builds\&.
-.RE
-.PP
-\fBNIX_REMOTE\fR
-.RS 4
-This variable should be set to
-daemon
-if you want to use the Nix daemon to execute Nix operations\&. This is necessary in
-multi\-user Nix installations\&. Otherwise, it should be left unset\&.
-.RE
-.PP
-\fBNIX_SHOW_STATS\fR
-.RS 4
-If set to
-1, Nix will print some evaluation statistics, such as the number of values allocated\&.
-.RE
-.PP
-\fBNIX_COUNT_CALLS\fR
-.RS 4
-If set to
-1, Nix will print how often functions were called during Nix expression evaluation\&. This is useful for profiling your Nix expressions\&.
-.RE
-.PP
-\fBGC_INITIAL_HEAP_SIZE\fR
-.RS 4
-If Nix has been configured to use the Boehm garbage collector, this variable sets the initial size of the heap in bytes\&. It defaults to 384 MiB\&. Setting it to a low value reduces memory consumption, but will increase runtime due to the overhead of garbage collection\&.
-.RE
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
--- nix-1.11.15.orig/doc/manual/nix-store.1
+++ /dev/null
@@ -1,1470 +0,0 @@
-'\" t
-.\"     Title: nix-store
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\-STORE" "1" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix-store \- manipulate or query the Nix store
-.SH "SYNOPSIS"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR [\fB\-\-help\fR] [\fB\-\-version\fR] [\fB\-\-verbose\fR...] [\fB\-v\fR...] [\fB\-\-no\-build\-output\fR] [\fB\-Q\fR] [{\fB\-\-max\-jobs\fR\ |\ \fB\-j\fR}\ \fInumber\fR] [\fB\-\-cores\fR\ \fInumber\fR] [\fB\-\-max\-silent\-time\fR\ \fInumber\fR] [\fB\-\-timeout\fR\ \fInumber\fR] [\fB\-\-keep\-going\fR] [\fB\-k\fR] [\fB\-\-keep\-failed\fR] [\fB\-K\fR] [\fB\-\-fallback\fR] [\fB\-\-readonly\-mode\fR] [\fB\-\-log\-type\fR\ \fItype\fR] [\fB\-\-show\-trace\fR] [\fB\-I\fR\ \fIpath\fR] [\fB\-\-option\fR\ \fIname\fR\ \fIvalue\fR]
-.br
-[\fB\-\-add\-root\fR\ \fIpath\fR] [\fB\-\-indirect\fR] \fIoperation\fR [\fIoptions\fR...] [\fIarguments\fR...]
-.SH "DESCRIPTION"
-.PP
-The command
-\fBnix\-store\fR
-performs primitive operations on the Nix store\&. You generally do not need to run this command manually\&.
-.PP
-\fBnix\-store\fR
-takes exactly one
-\fIoperation\fR
-flag which indicates the subcommand to be performed\&. These are documented below\&.
-.SH "COMMON OPTIONS"
-.PP
-This section lists the options that are common to all operations\&. These options are allowed for every subcommand, though they may not always have an effect\&.
-.PP
-\fB\-\-add\-root\fR \fIpath\fR
-.RS 4
-Causes the result of a realisation (\fB\-\-realise\fR
-and
-\fB\-\-force\-realise\fR) to be registered as a root of the garbage collector\&. The root is stored in
-\fIpath\fR, which must be inside a directory that is scanned for roots by the garbage collector (i\&.e\&., typically in a subdirectory of
-/nix/var/nix/gcroots/)
-\fIunless\fR
-the
-\fB\-\-indirect\fR
-flag is used\&.
-.sp
-If there are multiple results, then multiple symlinks will be created by sequentially numbering symlinks beyond the first one (e\&.g\&.,
-foo,
-foo\-2,
-foo\-3, and so on)\&.
-.RE
-.PP
-\fB\-\-indirect\fR
-.RS 4
-In conjunction with
-\fB\-\-add\-root\fR, this option allows roots to be stored
-\fIoutside\fR
-of the GC roots directory\&. This is useful for commands such as
-\fBnix\-build\fR
-that place a symlink to the build result in the current directory; such a build result should not be garbage\-collected unless the symlink is removed\&.
-.sp
-The
-\fB\-\-indirect\fR
-flag causes a uniquely named symlink to
-\fIpath\fR
-to be stored in
-/nix/var/nix/gcroots/auto/\&. For instance,
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-add\-root /home/eelco/bla/result \-\-indirect \-r \fI\&.\&.\&.\fR
-
-$ ls \-l /nix/var/nix/gcroots/auto
-lrwxrwxrwx    1 \&.\&.\&. 2005\-03\-13 21:10 dn54lcypm8f8\&.\&.\&. \-> /home/eelco/bla/result
-
-$ ls \-l /home/eelco/bla/result
-lrwxrwxrwx    1 \&.\&.\&. 2005\-03\-13 21:10 /home/eelco/bla/result \-> /nix/store/1r11343n6qd4\&.\&.\&.\-f\-spot\-0\&.0\&.10
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Thus, when
-/home/eelco/bla/result
-is removed, the GC root in the
-auto
-directory becomes a dangling symlink and will be ignored by the collector\&.
-.if n \{\
-.sp
-.\}
-.RS 4
-.it 1 an-trap
-.nr an-no-space-flag 1
-.nr an-break-flag 1
-.br
-.ps +1
-\fBWarning\fR
-.ps -1
-.br
-Note that it is not possible to move or rename indirect GC roots, since the symlink in the
-auto
-directory will still point to the old location\&.
-.sp .5v
-.RE
-.RE
-.PP
-\fB\-\-help\fR
-.RS 4
-Prints out a summary of the command syntax and exits\&.
-.RE
-.PP
-\fB\-\-version\fR
-.RS 4
-Prints out the Nix version number on standard output and exits\&.
-.RE
-.PP
-\fB\-\-verbose\fR, \fB\-v\fR
-.RS 4
-Increases the level of verbosity of diagnostic messages printed on standard error\&. For each Nix operation, the information printed on standard output is well\-defined; any diagnostic information is printed on standard error, never on standard output\&.
-.sp
-This option may be specified repeatedly\&. Currently, the following verbosity levels exist:
-.PP
-0
-.RS 4
-\(lqErrors only\(rq: only print messages explaining why the Nix invocation failed\&.
-.RE
-.PP
-1
-.RS 4
-\(lqInformational\(rq: print
-\fIuseful\fR
-messages about what Nix is doing\&. This is the default\&.
-.RE
-.PP
-2
-.RS 4
-\(lqTalkative\(rq: print more informational messages\&.
-.RE
-.PP
-3
-.RS 4
-\(lqChatty\(rq: print even more informational messages\&.
-.RE
-.PP
-4
-.RS 4
-\(lqDebug\(rq: print debug information\&.
-.RE
-.PP
-5
-.RS 4
-\(lqVomit\(rq: print vast amounts of debug information\&.
-.RE
-.RE
-.PP
-\fB\-\-no\-build\-output\fR, \fB\-Q\fR
-.RS 4
-By default, output written by builders to standard output and standard error is echoed to the Nix command\*(Aqs standard error\&. This option suppresses this behaviour\&. Note that the builder\*(Aqs standard output and error are always written to a log file in
-\fIprefix\fR/nix/var/log/nix\&.
-.RE
-.PP
-\fB\-\-max\-jobs\fR, \fB\-j\fR
-.RS 4
-Sets the maximum number of build jobs that Nix will perform in parallel to the specified number\&. The default is specified by the
-build\-max\-jobs
-configuration setting, which itself defaults to
-1\&. A higher value is useful on SMP systems or to exploit I/O latency\&.
-.RE
-.PP
-\fB\-\-cores\fR
-.RS 4
-Sets the value of the
-\fBNIX_BUILD_CORES\fR
-environment variable in the invocation of builders\&. Builders can use this variable at their discretion to control the maximum amount of parallelism\&. For instance, in Nixpkgs, if the derivation attribute
-\fIenableParallelBuilding\fR
-is set to
-true, the builder passes the
-\fB\-j\fR\fB\fIN\fR\fR
-flag to GNU Make\&. It defaults to the value of the
-build\-cores
-configuration setting, if set, or
-1
-otherwise\&. The value
-0
-means that the builder should use all available CPU cores in the system\&.
-.RE
-.PP
-\fB\-\-max\-silent\-time\fR
-.RS 4
-Sets the maximum number of seconds that a builder can go without producing any data on standard output or standard error\&. The default is specified by the
-build\-max\-silent\-time
-configuration setting\&.
-0
-means no time\-out\&.
-.RE
-.PP
-\fB\-\-timeout\fR
-.RS 4
-Sets the maximum number of seconds that a builder can run\&. The default is specified by the
-build\-timeout
-configuration setting\&.
-0
-means no timeout\&.
-.RE
-.PP
-\fB\-\-keep\-going\fR, \fB\-k\fR
-.RS 4
-Keep going in case of failed builds, to the greatest extent possible\&. That is, if building an input of some derivation fails, Nix will still build the other inputs, but not the derivation itself\&. Without this option, Nix stops if any build fails (except for builds of substitutes), possibly killing builds in progress (in case of parallel or distributed builds)\&.
-.RE
-.PP
-\fB\-\-keep\-failed\fR, \fB\-K\fR
-.RS 4
-Specifies that in case of a build failure, the temporary directory (usually in
-/tmp) in which the build takes place should not be deleted\&. The path of the build directory is printed as an informational message\&.
-.RE
-.PP
-\fB\-\-fallback\fR
-.RS 4
-Whenever Nix attempts to build a derivation for which substitutes are known for each output path, but realising the output paths through the substitutes fails, fall back on building the derivation\&.
-.sp
-The most common scenario in which this is useful is when we have registered substitutes in order to perform binary distribution from, say, a network repository\&. If the repository is down, the realisation of the derivation will fail\&. When this option is specified, Nix will build the derivation instead\&. Thus, installation from binaries falls back on installation from source\&. This option is not the default since it is generally not desirable for a transient failure in obtaining the substitutes to lead to a full build from source (with the related consumption of resources)\&.
-.RE
-.PP
-\fB\-\-readonly\-mode\fR
-.RS 4
-When this option is used, no attempt is made to open the Nix database\&. Most Nix operations do need database access, so those operations will fail\&.
-.RE
-.PP
-\fB\-\-log\-type\fR \fItype\fR
-.RS 4
-This option determines how the output written to standard error is formatted\&. Nix\(cqs diagnostic messages are typically
-\fInested\fR\&. For instance, when tracing Nix expression evaluation (\fBnix\-env \-vvvvv\fR, messages from subexpressions are nested inside their parent expressions\&. Nix builder output is also often nested\&. For instance, the Nix Packages generic builder nests the various build tasks (unpack, configure, compile, etc\&.), and the GNU Make in
-stdenv\-linux
-has been patched to provide nesting for recursive Make invocations\&.
-.sp
-\fItype\fR
-can be one of the following:
-.PP
-pretty
-.RS 4
-Pretty\-print the output, indicating different nesting levels using spaces\&. This is the default\&.
-.RE
-.PP
-escapes
-.RS 4
-Indicate nesting using escape codes that can be interpreted by the
-\fBnix\-log2xml\fR
-tool in the Nix source distribution\&. The resulting XML file can be fed into the
-\fBlog2html\&.xsl\fR
-stylesheet to create an HTML file that can be browsed interactively, using JavaScript to expand and collapse parts of the output\&.
-.RE
-.PP
-flat
-.RS 4
-Remove all nesting\&.
-.RE
-.sp
-.RE
-.PP
-\fB\-\-arg\fR \fIname\fR \fIvalue\fR
-.RS 4
-This option is accepted by
-\fBnix\-env\fR,
-\fBnix\-instantiate\fR
-and
-\fBnix\-build\fR\&. When evaluating Nix expressions, the expression evaluator will automatically try to call functions that it encounters\&. It can automatically call functions for which every argument has a
-default value
-(e\&.g\&.,
-{ \fIargName\fR ? \fIdefaultValue\fR }: \fI\&.\&.\&.\fR)\&. With
-\fB\-\-arg\fR, you can also call functions that have arguments without a default value (or override a default value)\&. That is, if the evaluator encounters a function with an argument named
-\fIname\fR, it will call it with value
-\fIvalue\fR\&.
-.sp
-For instance, the file
-pkgs/top\-level/all\-packages\&.nix
-in Nixpkgs is actually a function:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-{ # The system (e\&.g\&., `i686\-linux\*(Aq) for which to build the packages\&.
-  system ? builtins\&.currentSystem
-  \fI\&.\&.\&.\fR
-}: \fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-So if you call this Nix expression (e\&.g\&., when you do
-nix\-env \-i \fIpkgname\fR), the function will be called automatically using the value
-builtins\&.currentSystem
-for the
-system
-argument\&. You can override this using
-\fB\-\-arg\fR, e\&.g\&.,
-nix\-env \-i \fIpkgname\fR \-\-arg system \e"i686\-freebsd\e"\&. (Note that since the argument is a Nix string literal, you have to escape the quotes\&.)
-.RE
-.PP
-\fB\-\-argstr\fR \fIname\fR \fIvalue\fR
-.RS 4
-This option is like
-\fB\-\-arg\fR, only the value is not a Nix expression but a string\&. So instead of
-\-\-arg system \e"i686\-linux\e"
-(the outer quotes are to keep the shell happy) you can say
-\-\-argstr system i686\-linux\&.
-.RE
-.PP
-\fB\-\-attr\fR / \fB\-A\fR \fIattrPath\fR
-.RS 4
-Select an attribute from the top\-level Nix expression being evaluated\&. (\fBnix\-env\fR,
-\fBnix\-instantiate\fR,
-\fBnix\-build\fR
-and
-\fBnix\-shell\fR
-only\&.) The
-\fIattribute path\fR
-\fIattrPath\fR
-is a sequence of attribute names separated by dots\&. For instance, given a top\-level Nix expression
-\fIe\fR, the attribute path
-xorg\&.xorgserver
-would cause the expression
-\fIe\fR\&.xorg\&.xorgserver
-to be used\&. See
-\fBnix\-env \-\-install\fR
-for some concrete examples\&.
-.sp
-In addition to attribute names, you can also specify array indices\&. For instance, the attribute path
-foo\&.3\&.bar
-selects the
-bar
-attribute of the fourth element of the array in the
-foo
-attribute of the top\-level expression\&.
-.RE
-.PP
-\fB\-\-expr\fR / \fB\-E\fR
-.RS 4
-Interpret the command line arguments as a list of Nix expressions to be parsed and evaluated, rather than as a list of file names of Nix expressions\&. (\fBnix\-instantiate\fR,
-\fBnix\-build\fR
-and
-\fBnix\-shell\fR
-only\&.)
-.RE
-.PP
-\fB\-\-show\-trace\fR
-.RS 4
-Causes Nix to print out a stack trace in case of Nix expression evaluation errors\&.
-.RE
-.PP
-\fB\-I\fR \fIpath\fR
-.RS 4
-Add a path to the Nix expression search path\&. This option may be given multiple times\&. See the
-\fBNIX_PATH\fR
-environment variable for information on the semantics of the Nix search path\&. Paths added through
-\fB\-I\fR
-take precedence over
-\fBNIX_PATH\fR\&.
-.RE
-.PP
-\fB\-\-option\fR \fIname\fR \fIvalue\fR
-.RS 4
-Set the Nix configuration option
-\fIname\fR
-to
-\fIvalue\fR\&. This overrides settings in the Nix configuration file (see
-\fBnix.conf\fR(5))\&.
-.RE
-.PP
-\fB\-\-repair\fR
-.RS 4
-Fix corrupted or missing store paths by redownloading or rebuilding them\&. Note that this is slow because it requires computing a cryptographic hash of the contents of every path in the closure of the build\&. Also note the warning under
-\fBnix\-store \-\-repair\-path\fR\&.
-.RE
-.SH "OPERATION \-\-REALISE"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR {\fB\-\-realise\fR | \fB\-r\fR} \fIpaths\fR... [\fB\-\-dry\-run\fR]
-.SS "Description"
-.PP
-The operation
-\fB\-\-realise\fR
-essentially \(lqbuilds\(rq the specified store paths\&. Realisation is a somewhat overloaded term:
-.sp
-.RS 4
-.ie n \{\
-\h'-04'\(bu\h'+03'\c
-.\}
-.el \{\
-.sp -1
-.IP \(bu 2.3
-.\}
-If the store path is a
-\fIderivation\fR, realisation ensures that the output paths of the derivation are
-valid
-(i\&.e\&., the output path and its closure exist in the file system)\&. This can be done in several ways\&. First, it is possible that the outputs are already valid, in which case we are done immediately\&. Otherwise, there may be
-substitutes
-that produce the outputs (e\&.g\&., by downloading them)\&. Finally, the outputs can be produced by performing the build action described by the derivation\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04'\(bu\h'+03'\c
-.\}
-.el \{\
-.sp -1
-.IP \(bu 2.3
-.\}
-If the store path is not a derivation, realisation ensures that the specified path is valid (i\&.e\&., it and its closure exist in the file system)\&. If the path is already valid, we are done immediately\&. Otherwise, the path and any missing paths in its closure may be produced through substitutes\&. If there are no (successful) subsitutes, realisation fails\&.
-.RE
-.PP
-The output path of each derivation is printed on standard output\&. (For non\-derivations argument, the argument itself is printed\&.)
-.PP
-The following flags are available:
-.PP
-\fB\-\-dry\-run\fR
-.RS 4
-Print on standard error a description of what packages would be built or downloaded, without actually performing the operation\&.
-.RE
-.PP
-\fB\-\-ignore\-unknown\fR
-.RS 4
-If a non\-derivation path does not have a substitute, then silently ignore it\&.
-.RE
-.PP
-\fB\-\-check\fR
-.RS 4
-This option allows you to check whether a derivation is deterministic\&. It rebuilds the specified derivation and checks whether the result is bitwise\-identical with the existing outputs, printing an error if that\(cqs not the case\&. The outputs of the specified derivation must already exist\&. When used with
-\fB\-K\fR, if an output path is not identical to the corresponding output from the previous build, the new output path is left in
-/nix/store/\fIname\fR\-check\&.
-.sp
-See also the
-\fBbuild\-repeat\fR
-configuration option, which repeats a derivation a number of times and prevents its outputs from being registered as \(lqvalid\(rq in the Nix store unless they are identical\&.
-.RE
-.SS "Examples"
-.PP
-This operation is typically used to build store derivations produced by
-\fBnix\-instantiate\fR:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-r $(nix\-instantiate \&./test\&.nix)
-/nix/store/31axcgrlbfsxzmfff1gyj1bf62hvkby2\-aterm\-2\&.3\&.1
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-This is essentially what
-\fBnix\-build\fR
-does\&.
-.PP
-To test whether a previously\-built derivation is deterministic:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-build \-r \*(Aq<nixpkgs>\*(Aq \-A hello \-\-check \-K
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "OPERATION \-\-GC"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-gc\fR [\fB\-\-print\-roots\fR | \fB\-\-print\-live\fR | \fB\-\-print\-dead\fR | \fB\-\-delete\fR] [\fB\-\-max\-freed\fR\ \fIbytes\fR]
-.SS "Description"
-.PP
-Without additional flags, the operation
-\fB\-\-gc\fR
-performs a garbage collection on the Nix store\&. That is, all paths in the Nix store not reachable via file system references from a set of \(lqroots\(rq, are deleted\&.
-.PP
-The following suboperations may be specified:
-.PP
-\fB\-\-print\-roots\fR
-.RS 4
-This operation prints on standard output the set of roots used by the garbage collector\&. What constitutes a root is described in
-Section\ \&10.1, \(lqGarbage Collector Roots\(rq\&.
-.RE
-.PP
-\fB\-\-print\-live\fR
-.RS 4
-This operation prints on standard output the set of \(lqlive\(rq store paths, which are all the store paths reachable from the roots\&. Live paths should never be deleted, since that would break consistency \(em it would become possible that applications are installed that reference things that are no longer present in the store\&.
-.RE
-.PP
-\fB\-\-print\-dead\fR
-.RS 4
-This operation prints out on standard output the set of \(lqdead\(rq store paths, which is just the opposite of the set of live paths: any path in the store that is not live (with respect to the roots) is dead\&.
-.RE
-.PP
-\fB\-\-delete\fR
-.RS 4
-This operation performs an actual garbage collection\&. All dead paths are removed from the store\&. This is the default\&.
-.RE
-.PP
-By default, all unreachable paths are deleted\&. The following options control what gets deleted and in what order:
-.PP
-\fB\-\-max\-freed\fR \fIbytes\fR
-.RS 4
-Keep deleting paths until at least
-\fIbytes\fR
-bytes have been deleted, then stop\&. The argument
-\fIbytes\fR
-can be followed by the multiplicative suffix
-K,
-M,
-G
-or
-T, denoting KiB, MiB, GiB or TiB units\&.
-.RE
-.PP
-The behaviour of the collector is also influenced by the
-gc\-keep\-outputs
-and
-gc\-keep\-derivations
-variables in the Nix configuration file\&.
-.PP
-With
-\fB\-\-delete\fR, the collector prints the total number of freed bytes when it finishes (or when it is interrupted)\&. With
-\fB\-\-print\-dead\fR, it prints the number of bytes that would be freed\&.
-.SS "Examples"
-.PP
-To delete all unreachable paths, just do:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-gc
-deleting `/nix/store/kq82idx6g0nyzsp2s14gfsc38npai7lf\-cairo\-1\&.0\&.4\&.tar\&.gz\&.drv\*(Aq
-\fI\&.\&.\&.\fR
-8825586 bytes freed (8\&.42 MiB)
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-To delete at least 100 MiBs of unreachable paths:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-gc \-\-max\-freed $((100 * 1024 * 1024))
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "OPERATION \-\-DELETE"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-delete\fR [\fB\-\-ignore\-liveness\fR] \fIpaths\fR...
-.SS "Description"
-.PP
-The operation
-\fB\-\-delete\fR
-deletes the store paths
-\fIpaths\fR
-from the Nix store, but only if it is safe to do so; that is, when the path is not reachable from a root of the garbage collector\&. This means that you can only delete paths that would also be deleted by
-nix\-store \-\-gc\&. Thus,
-\-\-delete
-is a more targeted version of
-\-\-gc\&.
-.PP
-With the option
-\fB\-\-ignore\-liveness\fR, reachability from the roots is ignored\&. However, the path still won\(cqt be deleted if there are other paths in the store that refer to it (i\&.e\&., depend on it)\&.
-.SS "Example"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-delete /nix/store/zq0h41l75vlb4z45kzgjjmsjxvcv1qk7\-mesa\-6\&.4
-0 bytes freed (0\&.00 MiB)
-error: cannot delete path `/nix/store/zq0h41l75vlb4z45kzgjjmsjxvcv1qk7\-mesa\-6\&.4\*(Aq since it is still alive
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-QUERY"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR {\fB\-\-query\fR | \fB\-q\fR} {\fB\-\-outputs\fR | \fB\-\-requisites\fR | \fB\-R\fR | \fB\-\-references\fR | \fB\-\-referrers\fR | \fB\-\-referrers\-closure\fR | \fB\-\-deriver\fR | \fB\-\-deriver\fR | \fB\-\-graph\fR | \fB\-\-tree\fR | \fB\-\-binding\fR\ \fIname\fR | \fB\-\-hash\fR | \fB\-\-size\fR | \fB\-\-roots\fR} [\fB\-\-use\-output\fR] [\fB\-u\fR] [\fB\-\-force\-realise\fR] [\fB\-f\fR] \fIpaths\fR...
-.SS "Description"
-.PP
-The operation
-\fB\-\-query\fR
-displays various bits of information about the store paths \&. The queries are described below\&. At most one query can be specified\&. The default query is
-\fB\-\-outputs\fR\&.
-.PP
-The paths
-\fIpaths\fR
-may also be symlinks from outside of the Nix store, to the Nix store\&. In that case, the query is applied to the target of the symlink\&.
-.SS "Common query options"
-.PP
-\fB\-\-use\-output\fR, \fB\-u\fR
-.RS 4
-For each argument to the query that is a store derivation, apply the query to the output path of the derivation instead\&.
-.RE
-.PP
-\fB\-\-force\-realise\fR, \fB\-f\fR
-.RS 4
-Realise each argument to the query first (see
-\fBnix\-store \-\-realise\fR)\&.
-.RE
-.SS "Queries"
-.PP
-\fB\-\-outputs\fR
-.RS 4
-Prints out the
-output paths
-of the store derivations
-\fIpaths\fR\&. These are the paths that will be produced when the derivation is built\&.
-.RE
-.PP
-\fB\-\-requisites\fR, \fB\-R\fR
-.RS 4
-Prints out the
-closure
-of the store path
-\fIpaths\fR\&.
-.sp
-This query has one option:
-.PP
-\fB\-\-include\-outputs\fR
-.RS 4
-Also include the output path of store derivations, and their closures\&.
-.RE
-.sp
-This query can be used to implement various kinds of deployment\&. A
-\fIsource deployment\fR
-is obtained by distributing the closure of a store derivation\&. A
-\fIbinary deployment\fR
-is obtained by distributing the closure of an output path\&. A
-\fIcache deployment\fR
-(combined source/binary deployment, including binaries of build\-time\-only dependencies) is obtained by distributing the closure of a store derivation and specifying the option
-\fB\-\-include\-outputs\fR\&.
-.RE
-.PP
-\fB\-\-references\fR
-.RS 4
-Prints the set of
-references
-of the store paths
-\fIpaths\fR, that is, their immediate dependencies\&. (For
-\fIall\fR
-dependencies, use
-\fB\-\-requisites\fR\&.)
-.RE
-.PP
-\fB\-\-referrers\fR
-.RS 4
-Prints the set of
-\fIreferrers\fR
-of the store paths
-\fIpaths\fR, that is, the store paths currently existing in the Nix store that refer to one of
-\fIpaths\fR\&. Note that contrary to the references, the set of referrers is not constant; it can change as store paths are added or removed\&.
-.RE
-.PP
-\fB\-\-referrers\-closure\fR
-.RS 4
-Prints the closure of the set of store paths
-\fIpaths\fR
-under the referrers relation; that is, all store paths that directly or indirectly refer to one of
-\fIpaths\fR\&. These are all the path currently in the Nix store that are dependent on
-\fIpaths\fR\&.
-.RE
-.PP
-\fB\-\-deriver\fR
-.RS 4
-Prints the
-deriver
-of the store paths
-\fIpaths\fR\&. If the path has no deriver (e\&.g\&., if it is a source file), or if the deriver is not known (e\&.g\&., in the case of a binary\-only deployment), the string
-unknown\-deriver
-is printed\&.
-.RE
-.PP
-\fB\-\-graph\fR
-.RS 4
-Prints the references graph of the store paths
-\fIpaths\fR
-in the format of the
-\fBdot\fR
-tool of AT&T\*(Aqs
-\m[blue]\fBGraphviz package\fR\m[]\&\s-2\u[1]\d\s+2\&. This can be used to visualise dependency graphs\&. To obtain a build\-time dependency graph, apply this to a store derivation\&. To obtain a runtime dependency graph, apply it to an output path\&.
-.RE
-.PP
-\fB\-\-tree\fR
-.RS 4
-Prints the references graph of the store paths
-\fIpaths\fR
-as a nested ASCII tree\&. References are ordered by descending closure size; this tends to flatten the tree, making it more readable\&. The query only recurses into a store path when it is first encountered; this prevents a blowup of the tree representation of the graph\&.
-.RE
-.PP
-\fB\-\-binding\fR \fIname\fR
-.RS 4
-Prints the value of the attribute
-\fIname\fR
-(i\&.e\&., environment variable) of the store derivations
-\fIpaths\fR\&. It is an error for a derivation to not have the specified attribute\&.
-.RE
-.PP
-\fB\-\-hash\fR
-.RS 4
-Prints the SHA\-256 hash of the contents of the store paths
-\fIpaths\fR
-(that is, the hash of the output of
-\fBnix\-store \-\-dump\fR
-on the given paths)\&. Since the hash is stored in the Nix database, this is a fast operation\&.
-.RE
-.PP
-\fB\-\-size\fR
-.RS 4
-Prints the size in bytes of the contents of the store paths
-\fIpaths\fR
-\(em to be precise, the size of the output of
-\fBnix\-store \-\-dump\fR
-on the given paths\&. Note that the actual disk space required by the store paths may be higher, especially on filesystems with large cluster sizes\&.
-.RE
-.PP
-\fB\-\-roots\fR
-.RS 4
-Prints the garbage collector roots that point, directly or indirectly, at the store paths
-\fIpaths\fR\&.
-.RE
-.SS "Examples"
-.PP
-Print the closure (runtime dependencies) of the
-\fBsvn\fR
-program in the current user environment:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-qR $(which svn)
-/nix/store/5mbglq5ldqld8sj57273aljwkfvj22mc\-subversion\-1\&.1\&.4
-/nix/store/9lz9yc6zgmc0vlqmn2ipcpkjlmbi51vv\-glibc\-2\&.3\&.4
-\fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-Print the build\-time dependencies of
-\fBsvn\fR:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-qR $(nix\-store \-qd $(which svn))
-/nix/store/02iizgn86m42q905rddvg4ja975bk2i4\-grep\-2\&.5\&.1\&.tar\&.bz2\&.drv
-/nix/store/07a2bzxmzwz5hp58nf03pahrv2ygwgs3\-gcc\-wrapper\&.sh
-/nix/store/0ma7c9wsbaxahwwl04gbw3fcd806ski4\-glibc\-2\&.3\&.4\&.drv
-\fI\&.\&.\&. lots of other paths \&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-The difference with the previous example is that we ask the closure of the derivation (\fB\-qd\fR), not the closure of the output path that contains
-\fBsvn\fR\&.
-.PP
-Show the build\-time dependencies as a tree:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-q \-\-tree $(nix\-store \-qd $(which svn))
-/nix/store/7i5082kfb6yjbqdbiwdhhza0am2xvh6c\-subversion\-1\&.1\&.4\&.drv
-+\-\-\-/nix/store/d8afh10z72n8l1cr5w42366abiblgn54\-builder\&.sh
-+\-\-\-/nix/store/fmzxmpjx2lh849ph0l36snfj9zdibw67\-bash\-3\&.0\&.drv
-|   +\-\-\-/nix/store/570hmhmx3v57605cqg9yfvvyh0nnb8k8\-bash
-|   +\-\-\-/nix/store/p3srsbd8dx44v2pg6nbnszab5mcwx03v\-builder\&.sh
-\fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-Show all paths that depend on the same OpenSSL library as
-\fBsvn\fR:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-q \-\-referrers $(nix\-store \-q \-\-binding openssl $(nix\-store \-qd $(which svn)))
-/nix/store/23ny9l9wixx21632y2wi4p585qhva1q8\-sylpheed\-1\&.0\&.0
-/nix/store/5mbglq5ldqld8sj57273aljwkfvj22mc\-subversion\-1\&.1\&.4
-/nix/store/dpmvp969yhdqs7lm2r1a3gng7pyq6vy4\-subversion\-1\&.1\&.3
-/nix/store/l51240xqsgg8a7yrbqdx1rfzyv6l26fx\-lynx\-2\&.8\&.5
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-Show all paths that directly or indirectly depend on the Glibc (C library) used by
-\fBsvn\fR:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-q \-\-referrers\-closure $(ldd $(which svn) | grep /libc\&.so | awk \*(Aq{print $3}\*(Aq)
-/nix/store/034a6h4vpz9kds5r6kzb9lhh81mscw43\-libgnomeprintui\-2\&.8\&.2
-/nix/store/15l3yi0d45prm7a82pcrknxdh6nzmxza\-gawk\-3\&.1\&.4
-\fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Note that
-\fBldd\fR
-is a command that prints out the dynamic libraries used by an ELF executable\&.
-.PP
-Make a picture of the runtime dependency graph of the current user environment:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-q \-\-graph ~/\&.nix\-profile | dot \-Tps > graph\&.ps
-$ gv graph\&.ps
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-Show every garbage collector root that points to a store path that depends on
-\fBsvn\fR:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-q \-\-roots $(which svn)
-/nix/var/nix/profiles/default\-81\-link
-/nix/var/nix/profiles/default\-82\-link
-/nix/var/nix/profiles/per\-user/eelco/profile\-97\-link
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "OPERATION \-\-ADD"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-add\fR \fIpaths\fR...
-.SS "Description"
-.PP
-The operation
-\fB\-\-add\fR
-adds the specified paths to the Nix store\&. It prints the resulting paths in the Nix store on standard output\&.
-.SS "Example"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-add \&./foo\&.c
-/nix/store/m7lrha58ph6rcnv109yzx1nk1cj7k7zf\-foo\&.c
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-VERIFY"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-verify\fR [\fB\-\-check\-contents\fR] [\fB\-\-repair\fR]
-.SS "Description"
-.PP
-The operation
-\fB\-\-verify\fR
-verifies the internal consistency of the Nix database, and the consistency between the Nix database and the Nix store\&. Any inconsistencies encountered are automatically repaired\&. Inconsistencies are generally the result of the Nix store or database being modified by non\-Nix tools, or of bugs in Nix itself\&.
-.PP
-This operation has the following options:
-.PP
-\fB\-\-check\-contents\fR
-.RS 4
-Checks that the contents of every valid store path has not been altered by computing a SHA\-256 hash of the contents and comparing it with the hash stored in the Nix database at build time\&. Paths that have been modified are printed out\&. For large stores,
-\fB\-\-check\-contents\fR
-is obviously quite slow\&.
-.RE
-.PP
-\fB\-\-repair\fR
-.RS 4
-If any valid path is missing from the store, or (if
-\fB\-\-check\-contents\fR
-is given) the contents of a valid path has been modified, then try to repair the path by redownloading it\&. See
-\fBnix\-store \-\-repair\-path\fR
-for details\&.
-.RE
-.SH "OPERATION \-\-VERIFY\-PATH"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-verify\-path\fR \fIpaths\fR...
-.SS "Description"
-.PP
-The operation
-\fB\-\-verify\-path\fR
-compares the contents of the given store paths to their cryptographic hashes stored in Nix\(cqs database\&. For every changed path, it prints a warning message\&. The exit status is 0 if no path has changed, and 1 otherwise\&.
-.SS "Example"
-.PP
-To verify the integrity of the
-\fBsvn\fR
-command and all its dependencies:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-verify\-path $(nix\-store \-qR $(which svn))
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-.SH "OPERATION \-\-REPAIR\-PATH"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-repair\-path\fR \fIpaths\fR...
-.SS "Description"
-.PP
-The operation
-\fB\-\-repair\-path\fR
-attempts to \(lqrepair\(rq the specified paths by redownloading them using the available substituters\&. If no substitutes are available, then repair is not possible\&.
-.if n \{\
-.sp
-.\}
-.RS 4
-.it 1 an-trap
-.nr an-no-space-flag 1
-.nr an-break-flag 1
-.br
-.ps +1
-\fBWarning\fR
-.ps -1
-.br
-.PP
-During repair, there is a very small time window during which the old path (if it exists) is moved out of the way and replaced with the new path\&. If repair is interrupted in between, then the system may be left in a broken state (e\&.g\&., if the path contains a critical system component like the GNU C Library)\&.
-.sp .5v
-.RE
-.SS "Example"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-verify\-path /nix/store/dj7a81wsm1ijwwpkks3725661h3263p5\-glibc\-2\&.13
-path `/nix/store/dj7a81wsm1ijwwpkks3725661h3263p5\-glibc\-2\&.13\*(Aq was modified!
-  expected hash `2db57715ae90b7e31ff1f2ecb8c12ec1cc43da920efcbe3b22763f36a1861588\*(Aq,
-  got `481c5aa5483ebc97c20457bb8bca24deea56550d3985cda0027f67fe54b808e4\*(Aq
-
-$ nix\-store \-\-repair\-path /nix/store/dj7a81wsm1ijwwpkks3725661h3263p5\-glibc\-2\&.13
-fetching path `/nix/store/d7a81wsm1ijwwpkks3725661h3263p5\-glibc\-2\&.13\*(Aq\&.\&.\&.
-\&...
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-DUMP"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-dump\fR \fIpath\fR
-.SS "Description"
-.PP
-The operation
-\fB\-\-dump\fR
-produces a NAR (Nix ARchive) file containing the contents of the file system tree rooted at
-\fIpath\fR\&. The archive is written to standard output\&.
-.PP
-A NAR archive is like a TAR or Zip archive, but it contains only the information that Nix considers important\&. For instance, timestamps are elided because all files in the Nix store have their timestamp set to 0 anyway\&. Likewise, all permissions are left out except for the execute bit, because all files in the Nix store have 644 or 755 permission\&.
-.PP
-Also, a NAR archive is
-\fIcanonical\fR, meaning that \(lqequal\(rq paths always produce the same NAR archive\&. For instance, directory entries are always sorted so that the actual on\-disk order doesn\(cqt influence the result\&. This means that the cryptographic hash of a NAR dump of a path is usable as a fingerprint of the contents of the path\&. Indeed, the hashes of store paths stored in Nix\(cqs database (see
-nix\-store \-q \-\-hash) are SHA\-256 hashes of the NAR dump of each store path\&.
-.PP
-NAR archives support filenames of unlimited length and 64\-bit file sizes\&. They can contain regular files, directories, and symbolic links, but not other types of files (such as device nodes)\&.
-.PP
-A Nix archive can be unpacked using
-nix\-store \-\-restore\&.
-.SH "OPERATION \-\-RESTORE"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-restore\fR \fIpath\fR
-.SS "Description"
-.PP
-The operation
-\fB\-\-restore\fR
-unpacks a NAR archive to
-\fIpath\fR, which must not already exist\&. The archive is read from standard input\&.
-.SH "OPERATION \-\-EXPORT"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-export\fR \fIpaths\fR...
-.SS "Description"
-.PP
-The operation
-\fB\-\-export\fR
-writes a serialisation of the specified store paths to standard output in a format that can be imported into another Nix store with
-\fBnix\-store \-\-import\fR\&. This is like
-\fBnix\-store \-\-dump\fR, except that the NAR archive produced by that command doesn\(cqt contain the necessary meta\-information to allow it to be imported into another Nix store (namely, the set of references of the path)\&.
-.PP
-This command does not produce a
-\fIclosure\fR
-of the specified paths, so if a store path references other store paths that are missing in the target Nix store, the import will fail\&. To copy a whole closure, do something like
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-export $(nix\-store \-qR \fIpaths\fR) > out
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-For an example of how
-\fB\-\-export\fR
-and
-\fB\-\-import\fR
-can be used, see the source of the
-\fBnix\-copy\-closure\fR
-command\&.
-.SH "OPERATION \-\-IMPORT"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-import\fR
-.SS "Description"
-.PP
-The operation
-\fB\-\-import\fR
-reads a serialisation of a set of store paths produced by
-\fBnix\-store \-\-export\fR
-from standard input and adds those store paths to the Nix store\&. Paths that already exist in the Nix store are ignored\&. If a path refers to another path that doesn\(cqt exist in the Nix store, the import fails\&.
-.SH "OPERATION \-\-OPTIMISE"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-optimise\fR
-.SS "Description"
-.PP
-The operation
-\fB\-\-optimise\fR
-reduces Nix store disk space usage by finding identical files in the store and hard\-linking them to each other\&. It typically reduces the size of the store by something like 25\-35%\&. Only regular files and symlinks are hard\-linked in this manner\&. Files are considered identical when they have the same NAR archive serialisation: that is, regular files must have the same contents and permission (executable or non\-executable), and symlinks must have the same contents\&.
-.PP
-After completion, or when the command is interrupted, a report on the achieved savings is printed on standard error\&.
-.PP
-Use
-\fB\-vv\fR
-or
-\fB\-vvv\fR
-to get some progress indication\&.
-.SS "Example"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-optimise
-hashing files in `/nix/store/qhqx7l2f1kmwihc9bnxs7rc159hsxnf3\-gcc\-4\&.1\&.1\*(Aq
-\fI\&.\&.\&.\fR
-541838819 bytes (516\&.74 MiB) freed by hard\-linking 54143 files;
-there are 114486 files with equal contents out of 215894 files in total
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-READ\-LOG"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR {\fB\-\-read\-log\fR | \fB\-l\fR} \fIpaths\fR...
-.SS "Description"
-.PP
-The operation
-\fB\-\-read\-log\fR
-prints the build log of the specified store paths on standard output\&. The build log is whatever the builder of a derivation wrote to standard output and standard error\&. If a store path is not a derivation, the deriver of the store path is used\&.
-.PP
-Build logs are kept in
-/nix/var/log/nix/drvs\&. However, there is no guarantee that a build log is available for any particular store path\&. For instance, if the path was downloaded as a pre\-built binary through a substitute, then the log is unavailable\&. If the log is not available locally, then
-\fBnix\-store\fR
-will try to download the log from the servers specified in the Nix option
-\fBlog\-servers\fR\&. For example, if it\(cqs set to
-http://hydra\&.nixos\&.org/log, then Nix will check
-http://hydra\&.nixos\&.org/log/\fIbase\-name\fR\&.
-.SS "Example"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-l $(which ktorrent)
-building /nix/store/dhc73pvzpnzxhdgpimsd9sw39di66ph1\-ktorrent\-2\&.2\&.1
-unpacking sources
-unpacking source archive /nix/store/p8n1jpqs27mgkjw07pb5269717nzf5f8\-ktorrent\-2\&.2\&.1\&.tar\&.gz
-ktorrent\-2\&.2\&.1/
-ktorrent\-2\&.2\&.1/NEWS
-\fI\&.\&.\&.\fR
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-DUMP\-DB"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-dump\-db\fR
-.SS "Description"
-.PP
-The operation
-\fB\-\-dump\-db\fR
-writes a dump of the Nix database to standard output\&. It can be loaded into an empty Nix store using
-\fB\-\-load\-db\fR\&. This is useful for making backups and when migrating to different database schemas\&.
-.SH "OPERATION \-\-LOAD\-DB"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-load\-db\fR
-.SS "Description"
-.PP
-The operation
-\fB\-\-load\-db\fR
-reads a dump of the Nix database created by
-\fB\-\-dump\-db\fR
-from standard input and loads it into the Nix database\&.
-.SH "OPERATION \-\-PRINT\-ENV"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-print\-env\fR \fIdrvpath\fR
-.SS "Description"
-.PP
-The operation
-\fB\-\-print\-env\fR
-prints out the environment of a derivation in a format that can be evaluated by a shell\&. The command line arguments of the builder are placed in the variable
-\fB_args\fR\&.
-.SS "Example"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-print\-env $(nix\-instantiate \*(Aq<nixpkgs>\*(Aq \-A firefox)
-\fI\&...\fR
-export src; src=\*(Aq/nix/store/plpj7qrwcz94z2psh6fchsi7s8yihc7k\-firefox\-12\&.0\&.source\&.tar\&.bz2\*(Aq
-export stdenv; stdenv=\*(Aq/nix/store/7c8asx3yfrg5dg1gzhzyq2236zfgibnn\-stdenv\*(Aq
-export system; system=\*(Aqx86_64\-linux\*(Aq
-export _args; _args=\*(Aq\-e /nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25c\-default\-builder\&.sh\*(Aq
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-QUERY\-FAILED\-PATHS"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-query\-failed\-paths\fR
-.SS "Description"
-.PP
-If build failure caching is enabled through the
-build\-cache\-failure
-configuration option, the operation
-\fB\-\-query\-failed\-paths\fR
-will print out all store paths that have failed to build\&.
-.SS "Example"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-query\-failed\-paths
-/nix/store/000zi5dcla86l92jn1g997jb06sidm7x\-perl\-PerlMagick\-6\&.59
-/nix/store/0011iy7sfwbc1qj5a1f6ifjnbcdail8a\-haskell\-gitit\-ghc7\&.0\&.4\-0\&.8\&.1
-/nix/store/001c0yn1hkh86gprvrb46cxnz3pki7q3\-gamin\-0\&.1\&.10
-\fI\&...\fR
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-CLEAR\-FAILED\-PATHS"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-clear\-failed\-paths\fR \fIpaths\fR...
-.SS "Description"
-.PP
-If build failure caching is enabled through the
-build\-cache\-failure
-configuration option, the operation
-\fB\-\-clear\-failed\-paths\fR
-clears the \(lqfailed\(rq state of the given store paths, allowing them to be built again\&. This is useful if the failure was actually transient (e\&.g\&. because the disk was full)\&.
-.PP
-If a path denotes a derivation, its output paths are cleared\&. You can provide the argument
-*
-to clear all store paths\&.
-.SS "Example"
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ nix\-store \-\-clear\-failed\-paths /nix/store/000zi5dcla86l92jn1g997jb06sidm7x\-perl\-PerlMagick\-6\&.59
-$ nix\-store \-\-clear\-failed\-paths *
-.fi
-.if n \{\
-.RE
-.\}
-.SH "OPERATION \-\-GENERATE\-BINARY\-CACHE\-KEY"
-.SS "Synopsis"
-.HP \w'\fBnix\-store\fR\ 'u
-\fBnix\-store\fR \fB\-\-generate\-binary\-cache\-key\fR\ \fBkey\-name\fR\ \fBsecret\-key\-file\fR\ \fBpublic\-key\-file\fR
-.SS "Description"
-.PP
-This command generates an
-\m[blue]\fBEd25519 key pair\fR\m[]\&\s-2\u[2]\d\s+2
-that can be used to create a signed binary cache\&. It takes three mandatory parameters:
-.sp
-.RS 4
-.ie n \{\
-\h'-04' 1.\h'+01'\c
-.\}
-.el \{\
-.sp -1
-.IP "  1." 4.2
-.\}
-A key name, such as
-cache\&.example\&.org\-1, that is used to look up keys on the client when it verifies signatures\&. It can be anything, but it\(cqs suggested to use the host name of your cache (e\&.g\&.
-cache\&.example\&.org) with a suffix denoting the number of the key (to be incremented every time you need to revoke a key)\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04' 2.\h'+01'\c
-.\}
-.el \{\
-.sp -1
-.IP "  2." 4.2
-.\}
-The file name where the secret key is to be stored\&.
-.RE
-.sp
-.RS 4
-.ie n \{\
-\h'-04' 3.\h'+01'\c
-.\}
-.el \{\
-.sp -1
-.IP "  3." 4.2
-.\}
-The file name where the public key is to be stored\&.
-.RE
-.sp
-For an example, see the manual page for
-\fBnix\-push\fR\&.
-.SH "ENVIRONMENT VARIABLES"
-.PP
-\fBNIX_PATH\fR
-.RS 4
-A colon\-separated list of directories used to look up Nix expressions enclosed in angle brackets (i\&.e\&.,
-<\fIpath\fR>)\&. For instance, the value
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-/home/eelco/Dev:/etc/nixos
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-will cause Nix to look for paths relative to
-/home/eelco/Dev
-and
-/etc/nixos, in that order\&. It is also possible to match paths against a prefix\&. For example, the value
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-nixpkgs=/home/eelco/Dev/nixpkgs\-branch:/etc/nixos
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-will cause Nix to search for
-<nixpkgs/\fIpath\fR>
-in
-/home/eelco/Dev/nixpkgs\-branch/\fIpath\fR
-and
-/etc/nixos/nixpkgs/\fIpath\fR\&.
-.sp
-If a path in the Nix search path starts with
-http://
-or
-https://, it is interpreted as the URL of a tarball that will be downloaded and unpacked to a temporary location\&. The tarball must consist of a single top\-level directory\&. For example, setting
-\fBNIX_PATH\fR
-to
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-nixpkgs=https://github\&.com/NixOS/nixpkgs\-channels/archive/nixos\-14\&.12\&.tar\&.gz
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-tells Nix to download the latest revision in the Nixpkgs/NixOS 14\&.12 channel\&.
-.sp
-The search path can be extended using the
-\fB\-I\fR
-option, which takes precedence over
-\fBNIX_PATH\fR\&.
-.RE
-.PP
-\fBNIX_IGNORE_SYMLINK_STORE\fR
-.RS 4
-Normally, the Nix store directory (typically
-/nix/store) is not allowed to contain any symlink components\&. This is to prevent \(lqimpure\(rq builds\&. Builders sometimes \(lqcanonicalise\(rq paths by resolving all symlink components\&. Thus, builds on different machines (with
-/nix/store
-resolving to different locations) could yield different results\&. This is generally not a problem, except when builds are deployed to machines where
-/nix/store
-resolves differently\&. If you are sure that you\(cqre not going to do that, you can set
-\fBNIX_IGNORE_SYMLINK_STORE\fR
-to
-\fB1\fR\&.
-.sp
-Note that if you\(cqre symlinking the Nix store so that you can put it on another file system than the root file system, on Linux you\(cqre better off using
-bind
-mount points, e\&.g\&.,
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-$ mkdir /nix
-$ mount \-o bind /mnt/otherdisk/nix /nix
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-Consult the
-\fBmount\fR(8)
-manual page for details\&.
-.RE
-.PP
-\fBNIX_STORE_DIR\fR
-.RS 4
-Overrides the location of the Nix store (default
-\fIprefix\fR/store)\&.
-.RE
-.PP
-\fBNIX_DATA_DIR\fR
-.RS 4
-Overrides the location of the Nix static data directory (default
-\fIprefix\fR/share)\&.
-.RE
-.PP
-\fBNIX_LOG_DIR\fR
-.RS 4
-Overrides the location of the Nix log directory (default
-\fIprefix\fR/log/nix)\&.
-.RE
-.PP
-\fBNIX_STATE_DIR\fR
-.RS 4
-Overrides the location of the Nix state directory (default
-\fIprefix\fR/var/nix)\&.
-.RE
-.PP
-\fBNIX_DB_DIR\fR
-.RS 4
-Overrides the location of the Nix database (default
-\fI$NIX_STATE_DIR\fR/db, i\&.e\&.,
-\fIprefix\fR/var/nix/db)\&.
-.RE
-.PP
-\fBNIX_CONF_DIR\fR
-.RS 4
-Overrides the location of the Nix configuration directory (default
-\fIprefix\fR/etc/nix)\&.
-.RE
-.PP
-\fBTMPDIR\fR
-.RS 4
-Use the specified directory to store temporary files\&. In particular, this includes temporary build directories; these can take up substantial amounts of disk space\&. The default is
-/tmp\&.
-.RE
-.PP
-\fBNIX_BUILD_HOOK\fR
-.RS 4
-Specifies the location of the
-\fIbuild hook\fR, which is a program (typically some script) that Nix will call whenever it wants to build a derivation\&. This is used to implement distributed builds\&.
-.RE
-.PP
-\fBNIX_REMOTE\fR
-.RS 4
-This variable should be set to
-daemon
-if you want to use the Nix daemon to execute Nix operations\&. This is necessary in
-multi\-user Nix installations\&. Otherwise, it should be left unset\&.
-.RE
-.PP
-\fBNIX_SHOW_STATS\fR
-.RS 4
-If set to
-1, Nix will print some evaluation statistics, such as the number of values allocated\&.
-.RE
-.PP
-\fBNIX_COUNT_CALLS\fR
-.RS 4
-If set to
-1, Nix will print how often functions were called during Nix expression evaluation\&. This is useful for profiling your Nix expressions\&.
-.RE
-.PP
-\fBGC_INITIAL_HEAP_SIZE\fR
-.RS 4
-If Nix has been configured to use the Boehm garbage collector, this variable sets the initial size of the heap in bytes\&. It defaults to 384 MiB\&. Setting it to a low value reduces memory consumption, but will increase runtime due to the overhead of garbage collection\&.
-.RE
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
-.SH "NOTES"
-.IP " 1." 4
-Graphviz package
-.RS 4
-\%http://www.graphviz.org/
-.RE
-.IP " 2." 4
-Ed25519 key pair
-.RS 4
-\%http://ed25519.cr.yp.to/
-.RE
--- nix-1.11.15.orig/doc/manual/nix.conf.5
+++ /dev/null
@@ -1,520 +0,0 @@
-'\" t
-.\"     Title: nix.conf
-.\"    Author: Eelco Dolstra
-.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
-.\"      Date: November 2014
-.\"    Manual: Command Reference
-.\"    Source: Nix 1.11.15
-.\"  Language: English
-.\"
-.TH "NIX\&.CONF" "5" "November 2014" "Nix 1\&.11\&.15" "Command Reference"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-.SH "NAME"
-nix.conf \- Nix configuration file
-.SH "DESCRIPTION"
-.PP
-A number of persistent settings of Nix are stored in the file
-\fIsysconfdir\fR/nix/nix\&.conf\&. This file is a list of
-\fIname\fR = \fIvalue\fR
-pairs, one per line\&. Comments start with a
-#
-character\&. Here is an example configuration file:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-gc\-keep\-outputs = true       # Nice for developers
-gc\-keep\-derivations = true   # Idem
-env\-keep\-derivations = false
-.fi
-.if n \{\
-.RE
-.\}
-.PP
-You can override settings using the
-\fB\-\-option\fR
-flag, e\&.g\&.
-\-\-option gc\-keep\-outputs false\&.
-.PP
-The following settings are currently available:
-.PP
-gc\-keep\-outputs
-.RS 4
-If
-true, the garbage collector will keep the outputs of non\-garbage derivations\&. If
-false
-(default), outputs will be deleted unless they are GC roots themselves (or reachable from other roots)\&.
-.sp
-In general, outputs must be registered as roots separately\&. However, even if the output of a derivation is registered as a root, the collector will still delete store paths that are used only at build time (e\&.g\&., the C compiler, or source tarballs downloaded from the network)\&. To prevent it from doing so, set this option to
-true\&.
-.RE
-.PP
-gc\-keep\-derivations
-.RS 4
-If
-true
-(default), the garbage collector will keep the derivations from which non\-garbage store paths were built\&. If
-false, they will be deleted unless explicitly registered as a root (or reachable from other roots)\&.
-.sp
-Keeping derivation around is useful for querying and traceability (e\&.g\&., it allows you to ask with what dependencies or options a store path was built), so by default this option is on\&. Turn it off to save a bit of disk space (or a lot if
-gc\-keep\-outputs
-is also turned on)\&.
-.RE
-.PP
-env\-keep\-derivations
-.RS 4
-If
-false
-(default), derivations are not stored in Nix user environments\&. That is, the derivation any build\-time\-only dependencies may be garbage\-collected\&.
-.sp
-If
-true, when you add a Nix derivation to a user environment, the path of the derivation is stored in the user environment\&. Thus, the derivation will not be garbage\-collected until the user environment generation is deleted (\fBnix\-env \-\-delete\-generations\fR)\&. To prevent build\-time\-only dependencies from being collected, you should also turn on
-gc\-keep\-outputs\&.
-.sp
-The difference between this option and
-gc\-keep\-derivations
-is that this one is \(lqsticky\(rq: it applies to any user environment created while this option was enabled, while
-gc\-keep\-derivations
-only applies at the moment the garbage collector is run\&.
-.RE
-.PP
-build\-max\-jobs
-.RS 4
-This option defines the maximum number of jobs that Nix will try to build in parallel\&. The default is
-1\&. You should generally set it to the number of CPUs in your system (e\&.g\&.,
-2
-on an Athlon 64 X2)\&. It can be overridden using the
-\fB\-\-max\-jobs\fR
-(\fB\-j\fR) command line switch\&.
-.RE
-.PP
-build\-cores
-.RS 4
-Sets the value of the
-\fBNIX_BUILD_CORES\fR
-environment variable in the invocation of builders\&. Builders can use this variable at their discretion to control the maximum amount of parallelism\&. For instance, in Nixpkgs, if the derivation attribute
-\fIenableParallelBuilding\fR
-is set to
-true, the builder passes the
-\fB\-j\fR\fB\fIN\fR\fR
-flag to GNU Make\&. It can be overridden using the
-\fB\-\-cores\fR
-command line switch and defaults to
-1\&. The value
-0
-means that the builder should use all available CPU cores in the system\&.
-.RE
-.PP
-build\-max\-silent\-time
-.RS 4
-This option defines the maximum number of seconds that a builder can go without producing any data on standard output or standard error\&. This is useful (for instance in an automated build system) to catch builds that are stuck in an infinite loop, or to catch remote builds that are hanging due to network problems\&. It can be overridden using the
-\fB\-\-max\-silent\-time\fR
-command line switch\&.
-.sp
-The value
-0
-means that there is no timeout\&. This is also the default\&.
-.RE
-.PP
-build\-timeout
-.RS 4
-This option defines the maximum number of seconds that a builder can run\&. This is useful (for instance in an automated build system) to catch builds that are stuck in an infinite loop but keep writing to their standard output or standard error\&. It can be overridden using the
-\fB\-\-timeout\fR
-command line switch\&.
-.sp
-The value
-0
-means that there is no timeout\&. This is also the default\&.
-.RE
-.PP
-build\-max\-log\-size
-.RS 4
-This option defines the maximum number of bytes that a builder can write to its stdout/stderr\&. If the builder exceeds this limit, it\(cqs killed\&. A value of
-0
-(the default) means that there is no limit\&.
-.RE
-.PP
-build\-users\-group
-.RS 4
-This options specifies the Unix group containing the Nix build user accounts\&. In multi\-user Nix installations, builds should not be performed by the Nix account since that would allow users to arbitrarily modify the Nix store and database by supplying specially crafted builders; and they cannot be performed by the calling user since that would allow him/her to influence the build result\&.
-.sp
-Therefore, if this option is non\-empty and specifies a valid group, builds will be performed under the user accounts that are a member of the group specified here (as listed in
-/etc/group)\&. Those user accounts should not be used for any other purpose!
-.sp
-Nix will never run two builds under the same user account at the same time\&. This is to prevent an obvious security hole: a malicious user writing a Nix expression that modifies the build result of a legitimate Nix expression being built by another user\&. Therefore it is good to have as many Nix build user accounts as you can spare\&. (Remember: uids are cheap\&.)
-.sp
-The build users should have permission to create files in the Nix store, but not delete them\&. Therefore,
-/nix/store
-should be owned by the Nix account, its group should be the group specified here, and its mode should be
-1775\&.
-.sp
-If the build users group is empty, builds will be performed under the uid of the Nix process (that is, the uid of the caller if
-\fBNIX_REMOTE\fR
-is empty, the uid under which the Nix daemon runs if
-\fBNIX_REMOTE\fR
-is
-daemon)\&. Obviously, this should not be used in multi\-user settings with untrusted users\&.
-.RE
-.PP
-build\-use\-sandbox
-.RS 4
-If set to
-true, builds will be performed in a
-\fIsandboxed environment\fR, i\&.e\&., they\(cqre isolated from the normal file system hierarchy and will only see their dependencies in the Nix store, the temporary build directory, private versions of
-/proc,
-/dev,
-/dev/shm
-and
-/dev/pts
-(on Linux), and the paths configured with the
-build\-sandbox\-paths option\&. This is useful to prevent undeclared dependencies on files in directories such as
-/usr/bin\&. In addition, on Linux, builds run in private PID, mount, network, IPC and UTS namespaces to isolate them from other processes in the system (except that fixed\-output derivations do not run in private network namespace to ensure they can access the network)\&.
-.sp
-Currently, sandboxing only work on Linux and Mac OS X\&. The use of a sandbox requires that Nix is run as root (so you should use the
-\(lqbuild users\(rq feature
-to perform the actual builds under different users than root)\&.
-.sp
-If this option is set to
-relaxed, then fixed\-output derivations and derivations that have the
-\fI__noChroot\fR
-attribute set to
-true
-do not run in sandboxes\&.
-.sp
-The default is
-false\&.
-.RE
-.PP
-build\-sandbox\-paths
-.RS 4
-A list of paths bind\-mounted into Nix sandbox environments\&. You can use the syntax
-\fItarget\fR=\fIsource\fR
-to mount a path in a different location in the sandbox; for instance,
-/bin=/nix\-bin
-will mount the path
-/nix\-bin
-as
-/bin
-inside the sandbox\&. If
-\fIsource\fR
-is followed by
-?, then it is not an error if
-\fIsource\fR
-does not exist; for example,
-/dev/nvidiactl?
-specifies that
-/dev/nvidiactl
-will only be mounted in the sandbox if it exists in the host filesystem\&.
-.sp
-Depending on how Nix was built, the default value for this option may be empty or provide
-/bin/sh
-as a bind\-mount of
-\fBbash\fR\&.
-.RE
-.PP
-build\-extra\-sandbox\-paths
-.RS 4
-A list of additional paths appended to
-\fBbuild\-sandbox\-paths\fR\&. Useful if you want to extend its default value\&.
-.RE
-.PP
-build\-use\-substitutes
-.RS 4
-If set to
-true
-(default), Nix will use binary substitutes if available\&. This option can be disabled to force building from source\&.
-.RE
-.PP
-build\-fallback
-.RS 4
-If set to
-true, Nix will fall back to building from source if a binary substitute fails\&. This is equivalent to the
-\fB\-\-fallback\fR
-flag\&. The default is
-false\&.
-.RE
-.PP
-build\-cache\-failure
-.RS 4
-If set to
-true, Nix will \(lqcache\(rq build failures, meaning that it will remember (in its database) that a derivation previously failed\&. If you then try to build the derivation again, Nix will immediately fail rather than perform the build again\&. Failures in fixed\-output derivations (such as
-\fBfetchurl\fR
-calls) are never cached\&. The \(lqfailed\(rq status of a derivation can be cleared using
-\fBnix\-store \-\-clear\-failed\-paths\fR\&. By default, failure caching is disabled\&.
-.RE
-.PP
-build\-keep\-log
-.RS 4
-If set to
-true
-(the default), Nix will write the build log of a derivation (i\&.e\&. the standard output and error of its builder) to the directory
-/nix/var/log/nix/drvs\&. The build log can be retrieved using the command
-\fBnix\-store \-l \fR\fB\fIpath\fR\fR\&.
-.RE
-.PP
-build\-compress\-log
-.RS 4
-If set to
-true
-(the default), build logs written to
-/nix/var/log/nix/drvs
-will be compressed on the fly using bzip2\&. Otherwise, they will not be compressed\&.
-.RE
-.PP
-use\-binary\-caches
-.RS 4
-If set to
-true
-(the default), Nix will check the binary caches specified by
-\fBbinary\-caches\fR
-and related options to obtain binary substitutes\&.
-.RE
-.PP
-binary\-caches
-.RS 4
-A list of URLs of binary caches, separated by whitespace\&. The default is
-https://cache\&.nixos\&.org\&.
-.RE
-.PP
-binary\-caches\-files
-.RS 4
-A list of names of files that will be read to obtain additional binary cache URLs\&. The default is
-/nix/var/nix/profiles/per\-user/\fIusername\fR/channels/binary\-caches/*\&. Note that when you\(cqre using the Nix daemon,
-\fIusername\fR
-is always equal to
-root, so Nix will only use the binary caches provided by the channels installed by root\&. Do not set this option to read files created by untrusted users!
-.RE
-.PP
-trusted\-binary\-caches
-.RS 4
-A list of URLs of binary caches, separated by whitespace\&. These are not used by default, but can be enabled by users of the Nix daemon by specifying
-\-\-option binary\-caches \fIurls\fR
-on the command line\&. Unprivileged users are only allowed to pass a subset of the URLs listed in
-binary\-caches
-and
-trusted\-binary\-caches\&.
-.RE
-.PP
-extra\-binary\-caches
-.RS 4
-Additional binary caches appended to those specified in
-\fBbinary\-caches\fR
-and
-\fBbinary\-caches\-files\fR\&. When used by unprivileged users, untrusted binary caches (i\&.e\&. those not listed in
-\fBtrusted\-binary\-caches\fR) are silently ignored\&.
-.RE
-.PP
-signed\-binary\-caches
-.RS 4
-If set to
-*, Nix will only download binaries if they are signed using one of the keys listed in
-\fBbinary\-cache\-public\-keys\fR\&.
-.RE
-.PP
-binary\-cache\-public\-keys
-.RS 4
-A whitespace\-separated list of public keys corresponding to the secret keys trusted to sign binary caches\&. For example:
-cache\&.nixos\&.org\-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra\&.nixos\&.org\-1:CNHJZBh9K4tP3EKF6FkkgeVYsS3ohTl+oS0Qa8bezVs=\&.
-.RE
-.PP
-binary\-caches\-parallel\-connections
-.RS 4
-The maximum number of parallel HTTP connections used by the binary cache substituter to get NAR info files\&. This number should be high to minimise latency\&. It defaults to 25\&.
-.RE
-.PP
-verify\-https\-binary\-caches
-.RS 4
-Whether HTTPS binary caches are required to have a certificate that can be verified\&. Defaults to
-true\&.
-.RE
-.PP
-force\-manifest
-.RS 4
-If this option is set to
-false
-(default) and a Nix channel provides both a manifest and a binary cache, only the binary cache will be used\&. If set to
-true, the manifest will be fetched as well\&. This is useful if you want to use binary patches (which are currently not supported by binary caches)\&.
-.RE
-.PP
-netrc\-file
-.RS 4
-If set to an absolute path to a
-netrc
-file, Nix will use the HTTP authentication credentials in this file when trying to download from a remote host through HTTP or HTTPS\&. Defaults to
-$NIX_CONF_DIR/netrc\&.
-.sp
-The
-netrc
-file consists of a list of accounts in the following format:
-.sp
-.if n \{\
-.RS 4
-.\}
-.nf
-machine \fImy\-machine\fR
-login \fImy\-username\fR
-password \fImy\-password\fR
-.fi
-.if n \{\
-.RE
-.\}
-.sp
-For the exact syntax, see
-\m[blue]\fBthe curl documentation\&.\fR\m[]\&\s-2\u[1]\d\s+2
-.RE
-.PP
-system
-.RS 4
-This option specifies the canonical Nix system name of the current installation, such as
-i686\-linux
-or
-powerpc\-darwin\&. Nix can only build derivations whose
-system
-attribute equals the value specified here\&. In general, it never makes sense to modify this value from its default, since you can use it to \(oqlie\(cq about the platform you are building on (e\&.g\&., perform a Mac OS build on a Linux machine; the result would obviously be wrong)\&. It only makes sense if the Nix binaries can run on multiple platforms, e\&.g\&., \(oquniversal binaries\(cq that run on
-powerpc\-darwin
-and
-i686\-darwin\&.
-.sp
-It defaults to the canonical Nix system name detected by
-configure
-at build time\&.
-.RE
-.PP
-fsync\-metadata
-.RS 4
-If set to
-true, changes to the Nix store metadata (in
-/nix/var/nix/db) are synchronously flushed to disk\&. This improves robustness in case of system crashes, but reduces performance\&. The default is
-true\&.
-.RE
-.PP
-auto\-optimise\-store
-.RS 4
-If set to
-true, Nix automatically detects files in the store that have identical contents, and replaces them with hard links to a single copy\&. This saves disk space\&. If set to
-false
-(the default), you can still run
-\fBnix\-store \-\-optimise\fR
-to get rid of duplicate files\&.
-.RE
-.PP
-connect\-timeout
-.RS 4
-The timeout (in seconds) for establishing connections in the binary cache substituter\&. It corresponds to
-\fBcurl\fR\(cqs
-\fB\-\-connect\-timeout\fR
-option\&.
-.RE
-.PP
-log\-servers
-.RS 4
-A list of URL prefixes (such as
-http://hydra\&.nixos\&.org/log) from which
-\fBnix\-store \-l\fR
-will try to fetch build logs if they\(cqre not available locally\&.
-.RE
-.PP
-trusted\-users
-.RS 4
-A list of names of users (separated by whitespace) that have additional rights when connecting to the Nix daemon, such as the ability to specify additional binary caches, or to import unsigned NARs\&. You can also specify groups by prefixing them with
-@; for instance,
-@wheel
-means all users in the
-wheel
-group\&. The default is
-root\&.
-.if n \{\
-.sp
-.\}
-.RS 4
-.it 1 an-trap
-.nr an-no-space-flag 1
-.nr an-break-flag 1
-.br
-.ps +1
-\fBWarning\fR
-.ps -1
-.br
-The users listed here have the ability to compromise the security of a multi\-user Nix store\&. For instance, they could install Trojan horses subsequently executed by other users\&. So you should consider carefully whether to add users to this list\&.
-.sp .5v
-.RE
-.RE
-.PP
-allowed\-users
-.RS 4
-A list of names of users (separated by whitespace) that are allowed to connect to the Nix daemon\&. As with the
-\fBtrusted\-users\fR
-option, you can specify groups by prefixing them with
-@\&. Also, you can allow all users by specifying
-*\&. The default is
-*\&.
-.sp
-Note that trusted users are always allowed to connect\&.
-.RE
-.PP
-restrict\-eval
-.RS 4
-If set to
-true, the Nix evaluator will not allow access to any files outside of the Nix search path (as set via the
-\fBNIX_PATH\fR
-environment variable or the
-\fB\-I\fR
-option)\&. The default is
-false\&.
-.RE
-.PP
-pre\-build\-hook
-.RS 4
-If set, the path to a program that can set extra derivation\-specific settings for this system\&. This is used for settings that can\*(Aqt be captured by the derivation model itself and are too variable between different versions of the same system to be hard\-coded into nix\&.
-.sp
-The hook is passed the derivation path and, if sandboxes are enabled, the sandbox directory\&. It can then modify the sandbox and send a series of commands to modify various settings to stdout\&. The currently recognized commands are:
-.PP
-extra\-sandbox\-paths
-.RS 4
-Pass a list of files and directories to be included in the sandbox for this build\&. One entry per line, terminated by an empty line\&. Entries have the same format as
-build\-sandbox\-paths\&.
-.RE
-.RE
-.PP
-build\-repeat
-.RS 4
-How many times to repeat builds to check whether they are deterministic\&. The default value is 0\&. If the value is non\-zero, every build is repeated the specified number of times\&. If the contents of any of the runs differs from the previous ones, the build is rejected and the resulting store paths are not registered as \(lqvalid\(rq in Nix\(cqs database\&.
-.RE
-.SH "AUTHOR"
-.PP
-\fBEelco Dolstra\fR
-.br
-LogicBlox
-.RS 4
-Author
-.RE
-.SH "COPYRIGHT"
-.br
-Copyright \(co 2004-2014 Eelco Dolstra
-.br
-.SH "NOTES"
-.IP " 1." 4
-the
-    curl documentation.
-.RS 4
-\%https://ec.haxx.se/usingcurl-netrc.html
-.RE
--- nix-1.11.15.orig/doc/manual/version.txt
+++ /dev/null
@@ -1 +0,0 @@
-1.11.15
\ No newline at end of file
--- nix-1.11.15.orig/perl/lib/Nix/Store.cc
+++ /dev/null
@@ -1,959 +0,0 @@
-/*
- * This file was generated automatically by ExtUtils::ParseXS version 3.31 from the
- * contents of Store.xs. Do not edit this file, edit Store.xs instead.
- *
- *    ANY CHANGES MADE HERE WILL BE LOST!
- *
- */
-
-#line 1 "perl/lib/Nix/Store.xs"
-#include "EXTERN.h"
-#include "perl.h"
-#include "XSUB.h"
-
-/* Prevent a clash between some Perl and libstdc++ macros. */
-#undef do_open
-#undef do_close
-
-#include <store-api.hh>
-#include <globals.hh>
-#include <misc.hh>
-#include <util.hh>
-
-#if HAVE_SODIUM
-#include <sodium.h>
-#endif
-
-
-using namespace nix;
-
-
-void doInit()
-{
-    if (!store) {
-        try {
-            settings.processEnvironment();
-            settings.loadConfFile();
-            settings.update();
-            settings.lockCPU = false;
-            store = openStore();
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-    }
-}
-
-
-#line 48 "perl/lib/Nix/Store.cc"
-#ifndef PERL_UNUSED_VAR
-#  define PERL_UNUSED_VAR(var) if (0) var = var
-#endif
-
-#ifndef dVAR
-#  define dVAR		dNOOP
-#endif
-
-
-/* This stuff is not part of the API! You have been warned. */
-#ifndef PERL_VERSION_DECIMAL
-#  define PERL_VERSION_DECIMAL(r,v,s) (r*1000000 + v*1000 + s)
-#endif
-#ifndef PERL_DECIMAL_VERSION
-#  define PERL_DECIMAL_VERSION \
-	  PERL_VERSION_DECIMAL(PERL_REVISION,PERL_VERSION,PERL_SUBVERSION)
-#endif
-#ifndef PERL_VERSION_GE
-#  define PERL_VERSION_GE(r,v,s) \
-	  (PERL_DECIMAL_VERSION >= PERL_VERSION_DECIMAL(r,v,s))
-#endif
-#ifndef PERL_VERSION_LE
-#  define PERL_VERSION_LE(r,v,s) \
-	  (PERL_DECIMAL_VERSION <= PERL_VERSION_DECIMAL(r,v,s))
-#endif
-
-/* XS_INTERNAL is the explicit static-linkage variant of the default
- * XS macro.
- *
- * XS_EXTERNAL is the same as XS_INTERNAL except it does not include
- * "STATIC", ie. it exports XSUB symbols. You probably don't want that
- * for anything but the BOOT XSUB.
- *
- * See XSUB.h in core!
- */
-
-
-/* TODO: This might be compatible further back than 5.10.0. */
-#if PERL_VERSION_GE(5, 10, 0) && PERL_VERSION_LE(5, 15, 1)
-#  undef XS_EXTERNAL
-#  undef XS_INTERNAL
-#  if defined(__CYGWIN__) && defined(USE_DYNAMIC_LOADING)
-#    define XS_EXTERNAL(name) __declspec(dllexport) XSPROTO(name)
-#    define XS_INTERNAL(name) STATIC XSPROTO(name)
-#  endif
-#  if defined(__SYMBIAN32__)
-#    define XS_EXTERNAL(name) EXPORT_C XSPROTO(name)
-#    define XS_INTERNAL(name) EXPORT_C STATIC XSPROTO(name)
-#  endif
-#  ifndef XS_EXTERNAL
-#    if defined(HASATTRIBUTE_UNUSED) && !defined(__cplusplus)
-#      define XS_EXTERNAL(name) void name(pTHX_ CV* cv __attribute__unused__)
-#      define XS_INTERNAL(name) STATIC void name(pTHX_ CV* cv __attribute__unused__)
-#    else
-#      ifdef __cplusplus
-#        define XS_EXTERNAL(name) extern "C" XSPROTO(name)
-#        define XS_INTERNAL(name) static XSPROTO(name)
-#      else
-#        define XS_EXTERNAL(name) XSPROTO(name)
-#        define XS_INTERNAL(name) STATIC XSPROTO(name)
-#      endif
-#    endif
-#  endif
-#endif
-
-/* perl >= 5.10.0 && perl <= 5.15.1 */
-
-
-/* The XS_EXTERNAL macro is used for functions that must not be static
- * like the boot XSUB of a module. If perl didn't have an XS_EXTERNAL
- * macro defined, the best we can do is assume XS is the same.
- * Dito for XS_INTERNAL.
- */
-#ifndef XS_EXTERNAL
-#  define XS_EXTERNAL(name) XS(name)
-#endif
-#ifndef XS_INTERNAL
-#  define XS_INTERNAL(name) XS(name)
-#endif
-
-/* Now, finally, after all this mess, we want an ExtUtils::ParseXS
- * internal macro that we're free to redefine for varying linkage due
- * to the EXPORT_XSUB_SYMBOLS XS keyword. This is internal, use
- * XS_EXTERNAL(name) or XS_INTERNAL(name) in your code if you need to!
- */
-
-#undef XS_EUPXS
-#if defined(PERL_EUPXS_ALWAYS_EXPORT)
-#  define XS_EUPXS(name) XS_EXTERNAL(name)
-#else
-   /* default to internal */
-#  define XS_EUPXS(name) XS_INTERNAL(name)
-#endif
-
-#ifndef PERL_ARGS_ASSERT_CROAK_XS_USAGE
-#define PERL_ARGS_ASSERT_CROAK_XS_USAGE assert(cv); assert(params)
-
-/* prototype to pass -Wmissing-prototypes */
-STATIC void
-S_croak_xs_usage(const CV *const cv, const char *const params);
-
-STATIC void
-S_croak_xs_usage(const CV *const cv, const char *const params)
-{
-    const GV *const gv = CvGV(cv);
-
-    PERL_ARGS_ASSERT_CROAK_XS_USAGE;
-
-    if (gv) {
-        const char *const gvname = GvNAME(gv);
-        const HV *const stash = GvSTASH(gv);
-        const char *const hvname = stash ? HvNAME(stash) : NULL;
-
-        if (hvname)
-	    Perl_croak_nocontext("Usage: %s::%s(%s)", hvname, gvname, params);
-        else
-	    Perl_croak_nocontext("Usage: %s(%s)", gvname, params);
-    } else {
-        /* Pants. I don't think that it should be possible to get here. */
-	Perl_croak_nocontext("Usage: CODE(0x%"UVxf")(%s)", PTR2UV(cv), params);
-    }
-}
-#undef  PERL_ARGS_ASSERT_CROAK_XS_USAGE
-
-#define croak_xs_usage        S_croak_xs_usage
-
-#endif
-
-/* NOTE: the prototype of newXSproto() is different in versions of perls,
- * so we define a portable version of newXSproto()
- */
-#ifdef newXS_flags
-#define newXSproto_portable(name, c_impl, file, proto) newXS_flags(name, c_impl, file, proto, 0)
-#else
-#define newXSproto_portable(name, c_impl, file, proto) (PL_Sv=(SV*)newXS(name, c_impl, file), sv_setpv(PL_Sv, proto), (CV*)PL_Sv)
-#endif /* !defined(newXS_flags) */
-
-#if PERL_VERSION_LE(5, 21, 5)
-#  define newXS_deffile(a,b) Perl_newXS(aTHX_ a,b,file)
-#else
-#  define newXS_deffile(a,b) Perl_newXS_deffile(aTHX_ a,b)
-#endif
-
-#line 192 "perl/lib/Nix/Store.cc"
-#undef dNOOP // Hack to work around "error: declaration of 'Perl___notused' has a different language linkage" error message on clang.
-#define dNOOP
-
-XS_EUPXS(XS_Nix__Store_init); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_init)
-{
-    dVAR; dXSARGS;
-    if (items != 0)
-       croak_xs_usage(cv,  "");
-    {
-#line 48 "perl/lib/Nix/Store.xs"
-        doInit();
-#line 205 "perl/lib/Nix/Store.cc"
-    }
-    XSRETURN_EMPTY;
-}
-
-
-XS_EUPXS(XS_Nix__Store_setVerbosity); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_setVerbosity)
-{
-    dVAR; dXSARGS;
-    if (items != 1)
-       croak_xs_usage(cv,  "level");
-    {
-	int	level = (int)SvIV(ST(0))
-;
-#line 53 "perl/lib/Nix/Store.xs"
-        verbosity = (Verbosity) level;
-#line 222 "perl/lib/Nix/Store.cc"
-    }
-    XSRETURN_EMPTY;
-}
-
-
-XS_EUPXS(XS_Nix__Store_isValidPath); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_isValidPath)
-{
-    dVAR; dXSARGS;
-    if (items != 1)
-       croak_xs_usage(cv,  "path");
-    {
-	int	RETVAL;
-	dXSTARG;
-	char *	path = (char *)SvPV_nolen(ST(0))
-;
-#line 58 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            RETVAL = store->isValidPath(path);
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 246 "perl/lib/Nix/Store.cc"
-	XSprePUSH; PUSHi((IV)RETVAL);
-    }
-    XSRETURN(1);
-}
-
-
-XS_EUPXS(XS_Nix__Store_queryReferences); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_queryReferences)
-{
-    dVAR; dXSARGS;
-    if (items != 1)
-       croak_xs_usage(cv,  "path");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	char *	path = (char *)SvPV_nolen(ST(0))
-;
-#line 70 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            PathSet paths;
-            store->queryReferences(path, paths);
-            for (PathSet::iterator i = paths.begin(); i != paths.end(); ++i)
-                XPUSHs(sv_2mortal(newSVpv(i->c_str(), 0)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 275 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_queryPathHash); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_queryPathHash)
-{
-    dVAR; dXSARGS;
-    if (items != 1)
-       croak_xs_usage(cv,  "path");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	char *	path = (char *)SvPV_nolen(ST(0))
-;
-#line 83 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            Hash hash = store->queryPathHash(path);
-            string s = "sha256:" + printHash32(hash);
-            XPUSHs(sv_2mortal(newSVpv(s.c_str(), 0)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 303 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_queryDeriver); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_queryDeriver)
-{
-    dVAR; dXSARGS;
-    if (items != 1)
-       croak_xs_usage(cv,  "path");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	char *	path = (char *)SvPV_nolen(ST(0))
-;
-#line 95 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            Path deriver = store->queryDeriver(path);
-            if (deriver == "") XSRETURN_UNDEF;
-            XPUSHs(sv_2mortal(newSVpv(deriver.c_str(), 0)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 331 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_queryPathInfo); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_queryPathInfo)
-{
-    dVAR; dXSARGS;
-    if (items != 2)
-       croak_xs_usage(cv,  "path, base32");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	char *	path = (char *)SvPV_nolen(ST(0))
-;
-	int	base32 = (int)SvIV(ST(1))
-;
-#line 107 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            ValidPathInfo info = store->queryPathInfo(path);
-            if (info.deriver == "")
-                XPUSHs(&PL_sv_undef);
-            else
-                XPUSHs(sv_2mortal(newSVpv(info.deriver.c_str(), 0)));
-            string s = "sha256:" + (base32 ? printHash32(info.hash) : printHash(info.hash));
-            XPUSHs(sv_2mortal(newSVpv(s.c_str(), 0)));
-            mXPUSHi(info.registrationTime);
-            mXPUSHi(info.narSize);
-            AV * arr = newAV();
-            for (PathSet::iterator i = info.references.begin(); i != info.references.end(); ++i)
-                av_push(arr, newSVpv(i->c_str(), 0));
-            XPUSHs(sv_2mortal(newRV((SV *) arr)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 371 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_queryPathFromHashPart); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_queryPathFromHashPart)
-{
-    dVAR; dXSARGS;
-    if (items != 1)
-       croak_xs_usage(cv,  "hashPart");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	char *	hashPart = (char *)SvPV_nolen(ST(0))
-;
-#line 129 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            Path path = store->queryPathFromHashPart(hashPart);
-            XPUSHs(sv_2mortal(newSVpv(path.c_str(), 0)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 398 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_computeFSClosure); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_computeFSClosure)
-{
-    dVAR; dXSARGS;
-    if (items < 2)
-       croak_xs_usage(cv,  "flipDirection, includeOutputs, ...");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	int	flipDirection = (int)SvIV(ST(0))
-;
-	int	includeOutputs = (int)SvIV(ST(1))
-;
-#line 140 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            PathSet paths;
-            for (int n = 2; n < items; ++n)
-                computeFSClosure(*store, SvPV_nolen(ST(n)), paths, flipDirection, includeOutputs);
-            for (PathSet::iterator i = paths.begin(); i != paths.end(); ++i)
-                XPUSHs(sv_2mortal(newSVpv(i->c_str(), 0)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 430 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_topoSortPaths); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_topoSortPaths)
-{
-    dVAR; dXSARGS;
-    PERL_UNUSED_VAR(cv); /* -W */
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-#line 154 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            PathSet paths;
-            for (int n = 0; n < items; ++n) paths.insert(SvPV_nolen(ST(n)));
-            Paths sorted = topoSortPaths(*store, paths);
-            for (Paths::iterator i = sorted.begin(); i != sorted.end(); ++i)
-                XPUSHs(sv_2mortal(newSVpv(i->c_str(), 0)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 457 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_followLinksToStorePath); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_followLinksToStorePath)
-{
-    dVAR; dXSARGS;
-    if (items != 1)
-       croak_xs_usage(cv,  "path");
-    {
-	SV *	RETVAL;
-	char *	path = (char *)SvPV_nolen(ST(0))
-;
-#line 168 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            RETVAL = newSVpv(followLinksToStorePath(path).c_str(), 0);
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 481 "perl/lib/Nix/Store.cc"
-	RETVAL = sv_2mortal(RETVAL);
-	ST(0) = RETVAL;
-    }
-    XSRETURN(1);
-}
-
-
-XS_EUPXS(XS_Nix__Store_exportPaths); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_exportPaths)
-{
-    dVAR; dXSARGS;
-    if (items < 2)
-       croak_xs_usage(cv,  "fd, sign, ...");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	int	fd = (int)SvIV(ST(0))
-;
-	int	sign = (int)SvIV(ST(1))
-;
-#line 180 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            Paths paths;
-            for (int n = 2; n < items; ++n) paths.push_back(SvPV_nolen(ST(n)));
-            FdSink sink(fd);
-            exportPaths(*store, paths, sign, sink);
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 512 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_importPaths); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_importPaths)
-{
-    dVAR; dXSARGS;
-    if (items != 1)
-       croak_xs_usage(cv,  "fd");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	int	fd = (int)SvIV(ST(0))
-;
-#line 193 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            FdSource source(fd);
-            store->importPaths(false, source);
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 538 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_hashPath); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_hashPath)
-{
-    dVAR; dXSARGS;
-    if (items != 3)
-       croak_xs_usage(cv,  "algo, base32, path");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	char *	algo = (char *)SvPV_nolen(ST(0))
-;
-	int	base32 = (int)SvIV(ST(1))
-;
-	char *	path = (char *)SvPV_nolen(ST(2))
-;
-#line 204 "perl/lib/Nix/Store.xs"
-        try {
-            Hash h = hashPath(parseHashType(algo), path).first;
-            string s = base32 ? printHash32(h) : printHash(h);
-            XPUSHs(sv_2mortal(newSVpv(s.c_str(), 0)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 569 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_hashFile); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_hashFile)
-{
-    dVAR; dXSARGS;
-    if (items != 3)
-       croak_xs_usage(cv,  "algo, base32, path");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	char *	algo = (char *)SvPV_nolen(ST(0))
-;
-	int	base32 = (int)SvIV(ST(1))
-;
-	char *	path = (char *)SvPV_nolen(ST(2))
-;
-#line 215 "perl/lib/Nix/Store.xs"
-        try {
-            Hash h = hashFile(parseHashType(algo), path);
-            string s = base32 ? printHash32(h) : printHash(h);
-            XPUSHs(sv_2mortal(newSVpv(s.c_str(), 0)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 600 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_hashString); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_hashString)
-{
-    dVAR; dXSARGS;
-    if (items != 3)
-       croak_xs_usage(cv,  "algo, base32, s");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	char *	algo = (char *)SvPV_nolen(ST(0))
-;
-	int	base32 = (int)SvIV(ST(1))
-;
-	char *	s = (char *)SvPV_nolen(ST(2))
-;
-#line 226 "perl/lib/Nix/Store.xs"
-        try {
-            Hash h = hashString(parseHashType(algo), s);
-            string s = base32 ? printHash32(h) : printHash(h);
-            XPUSHs(sv_2mortal(newSVpv(s.c_str(), 0)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 631 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_convertHash); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_convertHash)
-{
-    dVAR; dXSARGS;
-    if (items != 3)
-       croak_xs_usage(cv,  "algo, s, toBase32");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	char *	algo = (char *)SvPV_nolen(ST(0))
-;
-	char *	s = (char *)SvPV_nolen(ST(1))
-;
-	int	toBase32 = (int)SvIV(ST(2))
-;
-#line 237 "perl/lib/Nix/Store.xs"
-        try {
-            Hash h = parseHash16or32(parseHashType(algo), s);
-            string s = toBase32 ? printHash32(h) : printHash(h);
-            XPUSHs(sv_2mortal(newSVpv(s.c_str(), 0)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 662 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_signString); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_signString)
-{
-    dVAR; dXSARGS;
-    if (items != 2)
-       croak_xs_usage(cv,  "secretKey_, msg");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	SV *	secretKey_ = ST(0)
-;
-	char *	msg = (char *)SvPV_nolen(ST(1))
-;
-#line 248 "perl/lib/Nix/Store.xs"
-        try {
-#if HAVE_SODIUM
-            STRLEN secretKeyLen;
-            unsigned char * secretKey = (unsigned char *) SvPV(secretKey_, secretKeyLen);
-            if (secretKeyLen != crypto_sign_SECRETKEYBYTES)
-                throw Error("secret key is not valid");
-
-            unsigned char sig[crypto_sign_BYTES];
-            unsigned long long sigLen;
-            crypto_sign_detached(sig, &sigLen, (unsigned char *) msg, strlen(msg), secretKey);
-            XPUSHs(sv_2mortal(newSVpv((char *) sig, sigLen)));
-#else
-            throw Error("Nix was not compiled with libsodium, required for signed binary cache support");
-#endif
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 701 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_checkSignature); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_checkSignature)
-{
-    dVAR; dXSARGS;
-    if (items != 3)
-       croak_xs_usage(cv,  "publicKey_, sig_, msg");
-    {
-	int	RETVAL;
-	dXSTARG;
-	SV *	publicKey_ = ST(0)
-;
-	SV *	sig_ = ST(1)
-;
-	char *	msg = (char *)SvPV_nolen(ST(2))
-;
-#line 269 "perl/lib/Nix/Store.xs"
-        try {
-#if HAVE_SODIUM
-            STRLEN publicKeyLen;
-            unsigned char * publicKey = (unsigned char *) SvPV(publicKey_, publicKeyLen);
-            if (publicKeyLen != crypto_sign_PUBLICKEYBYTES)
-                throw Error("public key is not valid");
-
-            STRLEN sigLen;
-            unsigned char * sig = (unsigned char *) SvPV(sig_, sigLen);
-            if (sigLen != crypto_sign_BYTES)
-                throw Error("signature is not valid");
-
-            RETVAL = crypto_sign_verify_detached(sig, (unsigned char *) msg, strlen(msg), publicKey) == 0;
-#else
-            throw Error("Nix was not compiled with libsodium, required for signed binary cache support");
-#endif
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 743 "perl/lib/Nix/Store.cc"
-	XSprePUSH; PUSHi((IV)RETVAL);
-    }
-    XSRETURN(1);
-}
-
-
-XS_EUPXS(XS_Nix__Store_addToStore); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_addToStore)
-{
-    dVAR; dXSARGS;
-    if (items != 3)
-       croak_xs_usage(cv,  "srcPath, recursive, algo");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	char *	srcPath = (char *)SvPV_nolen(ST(0))
-;
-	int	recursive = (int)SvIV(ST(1))
-;
-	char *	algo = (char *)SvPV_nolen(ST(2))
-;
-#line 294 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            Path path = store->addToStore(baseNameOf(srcPath), srcPath, recursive, parseHashType(algo));
-            XPUSHs(sv_2mortal(newSVpv(path.c_str(), 0)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 774 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_makeFixedOutputPath); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_makeFixedOutputPath)
-{
-    dVAR; dXSARGS;
-    if (items != 4)
-       croak_xs_usage(cv,  "recursive, algo, hash, name");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	SV *	RETVAL;
-	int	recursive = (int)SvIV(ST(0))
-;
-	char *	algo = (char *)SvPV_nolen(ST(1))
-;
-	char *	hash = (char *)SvPV_nolen(ST(2))
-;
-	char *	name = (char *)SvPV_nolen(ST(3))
-;
-#line 305 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            HashType ht = parseHashType(algo);
-            Path path = makeFixedOutputPath(recursive, ht,
-                parseHash16or32(ht, hash), name);
-            XPUSHs(sv_2mortal(newSVpv(path.c_str(), 0)));
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 809 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-
-XS_EUPXS(XS_Nix__Store_derivationFromPath); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_derivationFromPath)
-{
-    dVAR; dXSARGS;
-    if (items != 1)
-       croak_xs_usage(cv,  "drvPath");
-    {
-#line 318 "perl/lib/Nix/Store.xs"
-        HV *hash;
-#line 825 "perl/lib/Nix/Store.cc"
-	SV *	RETVAL;
-	char *	drvPath = (char *)SvPV_nolen(ST(0))
-;
-#line 320 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            Derivation drv = derivationFromPath(*store, drvPath);
-            hash = newHV();
-
-            HV * outputs = newHV();
-            for (DerivationOutputs::iterator i = drv.outputs.begin(); i != drv.outputs.end(); ++i)
-                hv_store(outputs, i->first.c_str(), i->first.size(), newSVpv(i->second.path.c_str(), 0), 0);
-            hv_stores(hash, "outputs", newRV((SV *) outputs));
-
-            AV * inputDrvs = newAV();
-            for (DerivationInputs::iterator i = drv.inputDrvs.begin(); i != drv.inputDrvs.end(); ++i)
-                av_push(inputDrvs, newSVpv(i->first.c_str(), 0)); // !!! ignores i->second
-            hv_stores(hash, "inputDrvs", newRV((SV *) inputDrvs));
-
-            AV * inputSrcs = newAV();
-            for (PathSet::iterator i = drv.inputSrcs.begin(); i != drv.inputSrcs.end(); ++i)
-                av_push(inputSrcs, newSVpv(i->c_str(), 0));
-            hv_stores(hash, "inputSrcs", newRV((SV *) inputSrcs));
-
-            hv_stores(hash, "platform", newSVpv(drv.platform.c_str(), 0));
-            hv_stores(hash, "builder", newSVpv(drv.builder.c_str(), 0));
-
-            AV * args = newAV();
-            for (Strings::iterator i = drv.args.begin(); i != drv.args.end(); ++i)
-                av_push(args, newSVpv(i->c_str(), 0));
-            hv_stores(hash, "args", newRV((SV *) args));
-
-            HV * env = newHV();
-            for (StringPairs::iterator i = drv.env.begin(); i != drv.env.end(); ++i)
-                hv_store(env, i->first.c_str(), i->first.size(), newSVpv(i->second.c_str(), 0), 0);
-            hv_stores(hash, "env", newRV((SV *) env));
-
-            RETVAL = newRV_noinc((SV *)hash);
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 867 "perl/lib/Nix/Store.cc"
-	RETVAL = sv_2mortal(RETVAL);
-	ST(0) = RETVAL;
-    }
-    XSRETURN(1);
-}
-
-
-XS_EUPXS(XS_Nix__Store_addTempRoot); /* prototype to pass -Wmissing-prototypes */
-XS_EUPXS(XS_Nix__Store_addTempRoot)
-{
-    dVAR; dXSARGS;
-    if (items != 1)
-       croak_xs_usage(cv,  "storePath");
-    PERL_UNUSED_VAR(ax); /* -Wall */
-    SP -= items;
-    {
-	char *	storePath = (char *)SvPV_nolen(ST(0))
-;
-#line 363 "perl/lib/Nix/Store.xs"
-        try {
-            doInit();
-            store->addTempRoot(storePath);
-        } catch (Error & e) {
-            croak("%s", e.what());
-        }
-#line 893 "perl/lib/Nix/Store.cc"
-	PUTBACK;
-	return;
-    }
-}
-
-#ifdef __cplusplus
-extern "C"
-#endif
-XS_EXTERNAL(boot_Nix__Store); /* prototype to pass -Wmissing-prototypes */
-XS_EXTERNAL(boot_Nix__Store)
-{
-#if PERL_VERSION_LE(5, 21, 5)
-    dVAR; dXSARGS;
-#else
-    dVAR; dXSBOOTARGSXSAPIVERCHK;
-#endif
-#if (PERL_REVISION == 5 && PERL_VERSION < 9)
-    char* file = __FILE__;
-#else
-    const char* file = __FILE__;
-#endif
-
-    PERL_UNUSED_VAR(file);
-
-    PERL_UNUSED_VAR(cv); /* -W */
-    PERL_UNUSED_VAR(items); /* -W */
-#if PERL_VERSION_LE(5, 21, 5)
-    XS_VERSION_BOOTCHECK;
-#  ifdef XS_APIVERSION_BOOTCHECK
-    XS_APIVERSION_BOOTCHECK;
-#  endif
-#endif
-
-        (void)newXSproto_portable("Nix::Store::init", XS_Nix__Store_init, file, "");
-        (void)newXSproto_portable("Nix::Store::setVerbosity", XS_Nix__Store_setVerbosity, file, "$");
-        (void)newXSproto_portable("Nix::Store::isValidPath", XS_Nix__Store_isValidPath, file, "$");
-        (void)newXSproto_portable("Nix::Store::queryReferences", XS_Nix__Store_queryReferences, file, "$");
-        (void)newXSproto_portable("Nix::Store::queryPathHash", XS_Nix__Store_queryPathHash, file, "$");
-        (void)newXSproto_portable("Nix::Store::queryDeriver", XS_Nix__Store_queryDeriver, file, "$");
-        (void)newXSproto_portable("Nix::Store::queryPathInfo", XS_Nix__Store_queryPathInfo, file, "$$");
-        (void)newXSproto_portable("Nix::Store::queryPathFromHashPart", XS_Nix__Store_queryPathFromHashPart, file, "$");
-        (void)newXSproto_portable("Nix::Store::computeFSClosure", XS_Nix__Store_computeFSClosure, file, "$$;@");
-        (void)newXSproto_portable("Nix::Store::topoSortPaths", XS_Nix__Store_topoSortPaths, file, ";@");
-        (void)newXSproto_portable("Nix::Store::followLinksToStorePath", XS_Nix__Store_followLinksToStorePath, file, "$");
-        (void)newXSproto_portable("Nix::Store::exportPaths", XS_Nix__Store_exportPaths, file, "$$;@");
-        (void)newXSproto_portable("Nix::Store::importPaths", XS_Nix__Store_importPaths, file, "$");
-        (void)newXSproto_portable("Nix::Store::hashPath", XS_Nix__Store_hashPath, file, "$$$");
-        (void)newXSproto_portable("Nix::Store::hashFile", XS_Nix__Store_hashFile, file, "$$$");
-        (void)newXSproto_portable("Nix::Store::hashString", XS_Nix__Store_hashString, file, "$$$");
-        (void)newXSproto_portable("Nix::Store::convertHash", XS_Nix__Store_convertHash, file, "$$$");
-        (void)newXSproto_portable("Nix::Store::signString", XS_Nix__Store_signString, file, "$$");
-        (void)newXSproto_portable("Nix::Store::checkSignature", XS_Nix__Store_checkSignature, file, "$$$");
-        (void)newXSproto_portable("Nix::Store::addToStore", XS_Nix__Store_addToStore, file, "$$$");
-        (void)newXSproto_portable("Nix::Store::makeFixedOutputPath", XS_Nix__Store_makeFixedOutputPath, file, "$$$$");
-        (void)newXSproto_portable("Nix::Store::derivationFromPath", XS_Nix__Store_derivationFromPath, file, "$");
-        (void)newXSproto_portable("Nix::Store::addTempRoot", XS_Nix__Store_addTempRoot, file, "$");
-#if PERL_VERSION_LE(5, 21, 5)
-#  if PERL_VERSION_GE(5, 9, 0)
-    if (PL_unitcheckav)
-        call_list(PL_scopestack_ix, PL_unitcheckav);
-#  endif
-    XSRETURN_YES;
-#else
-    Perl_xs_boot_epilog(aTHX_ ax);
-#endif
-}
-
--- nix-1.11.15.orig/src/libexpr/lexer-tab.cc
+++ /dev/null
@@ -1,2486 +0,0 @@
-#line 1 "src/libexpr/lexer-tab.cc"
-
-#line 3 "src/libexpr/lexer-tab.cc"
-
-#define  YY_INT_ALIGNED short int
-
-/* A lexical scanner generated by flex */
-
-#define FLEX_SCANNER
-#define YY_FLEX_MAJOR_VERSION 2
-#define YY_FLEX_MINOR_VERSION 6
-#define YY_FLEX_SUBMINOR_VERSION 4
-#if YY_FLEX_SUBMINOR_VERSION > 0
-#define FLEX_BETA
-#endif
-
-#ifdef yyget_lval
-#define yyget_lval_ALREADY_DEFINED
-#else
-#define yyget_lval yyget_lval
-#endif
-
-#ifdef yyset_lval
-#define yyset_lval_ALREADY_DEFINED
-#else
-#define yyset_lval yyset_lval
-#endif
-
-#ifdef yyget_lloc
-#define yyget_lloc_ALREADY_DEFINED
-#else
-#define yyget_lloc yyget_lloc
-#endif
-
-#ifdef yyset_lloc
-#define yyset_lloc_ALREADY_DEFINED
-#else
-#define yyset_lloc yyset_lloc
-#endif
-
-/* First, we deal with  platform-specific or compiler-specific issues. */
-
-/* begin standard C headers. */
-#include <stdio.h>
-#include <string.h>
-#include <errno.h>
-#include <stdlib.h>
-
-/* end standard C headers. */
-
-/* flex integer type definitions */
-
-#ifndef FLEXINT_H
-#define FLEXINT_H
-
-/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
-
-#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
-
-/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
- * if you want the limit (max/min) macros for int types. 
- */
-#ifndef __STDC_LIMIT_MACROS
-#define __STDC_LIMIT_MACROS 1
-#endif
-
-#include <inttypes.h>
-typedef int8_t flex_int8_t;
-typedef uint8_t flex_uint8_t;
-typedef int16_t flex_int16_t;
-typedef uint16_t flex_uint16_t;
-typedef int32_t flex_int32_t;
-typedef uint32_t flex_uint32_t;
-#else
-typedef signed char flex_int8_t;
-typedef short int flex_int16_t;
-typedef int flex_int32_t;
-typedef unsigned char flex_uint8_t; 
-typedef unsigned short int flex_uint16_t;
-typedef unsigned int flex_uint32_t;
-
-/* Limits of integral types. */
-#ifndef INT8_MIN
-#define INT8_MIN               (-128)
-#endif
-#ifndef INT16_MIN
-#define INT16_MIN              (-32767-1)
-#endif
-#ifndef INT32_MIN
-#define INT32_MIN              (-2147483647-1)
-#endif
-#ifndef INT8_MAX
-#define INT8_MAX               (127)
-#endif
-#ifndef INT16_MAX
-#define INT16_MAX              (32767)
-#endif
-#ifndef INT32_MAX
-#define INT32_MAX              (2147483647)
-#endif
-#ifndef UINT8_MAX
-#define UINT8_MAX              (255U)
-#endif
-#ifndef UINT16_MAX
-#define UINT16_MAX             (65535U)
-#endif
-#ifndef UINT32_MAX
-#define UINT32_MAX             (4294967295U)
-#endif
-
-#ifndef SIZE_MAX
-#define SIZE_MAX               (~(size_t)0)
-#endif
-
-#endif /* ! C99 */
-
-#endif /* ! FLEXINT_H */
-
-/* begin standard C++ headers. */
-
-/* TODO: this is always defined, so inline it */
-#define yyconst const
-
-#if defined(__GNUC__) && __GNUC__ >= 3
-#define yynoreturn __attribute__((__noreturn__))
-#else
-#define yynoreturn
-#endif
-
-/* Returned upon end-of-file. */
-#define YY_NULL 0
-
-/* Promotes a possibly negative, possibly signed char to an
- *   integer in range [0..255] for use as an array index.
- */
-#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
-
-/* An opaque pointer. */
-#ifndef YY_TYPEDEF_YY_SCANNER_T
-#define YY_TYPEDEF_YY_SCANNER_T
-typedef void* yyscan_t;
-#endif
-
-/* For convenience, these vars (plus the bison vars far below)
-   are macros in the reentrant scanner. */
-#define yyin yyg->yyin_r
-#define yyout yyg->yyout_r
-#define yyextra yyg->yyextra_r
-#define yyleng yyg->yyleng_r
-#define yytext yyg->yytext_r
-#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
-#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
-#define yy_flex_debug yyg->yy_flex_debug_r
-
-/* Enter a start condition.  This macro really ought to take a parameter,
- * but we do it the disgusting crufty way forced on us by the ()-less
- * definition of BEGIN.
- */
-#define BEGIN yyg->yy_start = 1 + 2 *
-/* Translate the current start state into a value that can be later handed
- * to BEGIN to return to the state.  The YYSTATE alias is for lex
- * compatibility.
- */
-#define YY_START ((yyg->yy_start - 1) / 2)
-#define YYSTATE YY_START
-/* Action number for EOF rule of a given start state. */
-#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
-/* Special action meaning "start processing a new file". */
-#define YY_NEW_FILE yyrestart( yyin , yyscanner )
-#define YY_END_OF_BUFFER_CHAR 0
-
-/* Size of default input buffer. */
-#ifndef YY_BUF_SIZE
-#ifdef __ia64__
-/* On IA-64, the buffer size is 16k, not 8k.
- * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
- * Ditto for the __ia64__ case accordingly.
- */
-#define YY_BUF_SIZE 32768
-#else
-#define YY_BUF_SIZE 16384
-#endif /* __ia64__ */
-#endif
-
-/* The state buf must be large enough to hold one state per character in the main buffer.
- */
-#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
-
-#ifndef YY_TYPEDEF_YY_BUFFER_STATE
-#define YY_TYPEDEF_YY_BUFFER_STATE
-typedef struct yy_buffer_state *YY_BUFFER_STATE;
-#endif
-
-#ifndef YY_TYPEDEF_YY_SIZE_T
-#define YY_TYPEDEF_YY_SIZE_T
-typedef size_t yy_size_t;
-#endif
-
-#define EOB_ACT_CONTINUE_SCAN 0
-#define EOB_ACT_END_OF_FILE 1
-#define EOB_ACT_LAST_MATCH 2
-    
-    #define YY_LESS_LINENO(n)
-    #define YY_LINENO_REWIND_TO(ptr)
-    
-/* Return all but the first "n" matched characters back to the input stream. */
-#define yyless(n) \
-	do \
-		{ \
-		/* Undo effects of setting up yytext. */ \
-        int yyless_macro_arg = (n); \
-        YY_LESS_LINENO(yyless_macro_arg);\
-		*yy_cp = yyg->yy_hold_char; \
-		YY_RESTORE_YY_MORE_OFFSET \
-		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
-		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
-		} \
-	while ( 0 )
-#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )
-
-#ifndef YY_STRUCT_YY_BUFFER_STATE
-#define YY_STRUCT_YY_BUFFER_STATE
-struct yy_buffer_state
-	{
-	FILE *yy_input_file;
-
-	char *yy_ch_buf;		/* input buffer */
-	char *yy_buf_pos;		/* current position in input buffer */
-
-	/* Size of input buffer in bytes, not including room for EOB
-	 * characters.
-	 */
-	int yy_buf_size;
-
-	/* Number of characters read into yy_ch_buf, not including EOB
-	 * characters.
-	 */
-	int yy_n_chars;
-
-	/* Whether we "own" the buffer - i.e., we know we created it,
-	 * and can realloc() it to grow it, and should free() it to
-	 * delete it.
-	 */
-	int yy_is_our_buffer;
-
-	/* Whether this is an "interactive" input source; if so, and
-	 * if we're using stdio for input, then we want to use getc()
-	 * instead of fread(), to make sure we stop fetching input after
-	 * each newline.
-	 */
-	int yy_is_interactive;
-
-	/* Whether we're considered to be at the beginning of a line.
-	 * If so, '^' rules will be active on the next match, otherwise
-	 * not.
-	 */
-	int yy_at_bol;
-
-    int yy_bs_lineno; /**< The line count. */
-    int yy_bs_column; /**< The column count. */
-
-	/* Whether to try to fill the input buffer when we reach the
-	 * end of it.
-	 */
-	int yy_fill_buffer;
-
-	int yy_buffer_status;
-
-#define YY_BUFFER_NEW 0
-#define YY_BUFFER_NORMAL 1
-	/* When an EOF's been seen but there's still some text to process
-	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
-	 * shouldn't try reading from the input source any more.  We might
-	 * still have a bunch of tokens to match, though, because of
-	 * possible backing-up.
-	 *
-	 * When we actually see the EOF, we change the status to "new"
-	 * (via yyrestart()), so that the user can continue scanning by
-	 * just pointing yyin at a new input file.
-	 */
-#define YY_BUFFER_EOF_PENDING 2
-
-	};
-#endif /* !YY_STRUCT_YY_BUFFER_STATE */
-
-/* We provide macros for accessing buffer states in case in the
- * future we want to put the buffer states in a more general
- * "scanner state".
- *
- * Returns the top of the stack, or NULL.
- */
-#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
-                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
-                          : NULL)
-/* Same as previous macro, but useful when we know that the buffer stack is not
- * NULL or when we need an lvalue. For internal use only.
- */
-#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]
-
-void yyrestart ( FILE *input_file , yyscan_t yyscanner );
-void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
-YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
-void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
-void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
-void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
-void yypop_buffer_state ( yyscan_t yyscanner );
-
-static void yyensure_buffer_stack ( yyscan_t yyscanner );
-static void yy_load_buffer_state ( yyscan_t yyscanner );
-static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
-#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)
-
-YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
-YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
-YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );
-
-void *yyalloc ( yy_size_t , yyscan_t yyscanner );
-void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
-void yyfree ( void * , yyscan_t yyscanner );
-
-#define yy_new_buffer yy_create_buffer
-#define yy_set_interactive(is_interactive) \
-	{ \
-	if ( ! YY_CURRENT_BUFFER ){ \
-        yyensure_buffer_stack (yyscanner); \
-		YY_CURRENT_BUFFER_LVALUE =    \
-            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
-	} \
-	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
-	}
-#define yy_set_bol(at_bol) \
-	{ \
-	if ( ! YY_CURRENT_BUFFER ){\
-        yyensure_buffer_stack (yyscanner); \
-		YY_CURRENT_BUFFER_LVALUE =    \
-            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
-	} \
-	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
-	}
-#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
-
-/* Begin user sect3 */
-
-#define yywrap(yyscanner) (/*CONSTCOND*/1)
-#define YY_SKIP_YYWRAP
-typedef flex_uint8_t YY_CHAR;
-
-typedef int yy_state_type;
-
-#define yytext_ptr yytext_r
-
-static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
-static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
-static int yy_get_next_buffer ( yyscan_t yyscanner );
-static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );
-
-/* Done after the current pattern has been matched and before the
- * corresponding action - sets up yytext.
- */
-#define YY_DO_BEFORE_ACTION \
-	yyg->yytext_ptr = yy_bp; \
-	yyleng = (int) (yy_cp - yy_bp); \
-	yyg->yy_hold_char = *yy_cp; \
-	*yy_cp = '\0'; \
-	yyg->yy_c_buf_p = yy_cp;
-#define YY_NUM_RULES 51
-#define YY_END_OF_BUFFER 52
-/* This struct is not used in this scanner,
-   but its presence is necessary. */
-struct yy_trans_info
-	{
-	flex_int32_t yy_verify;
-	flex_int32_t yy_nxt;
-	};
-static const flex_int16_t yy_accept[130] =
-    {   0,
-        0,    0,    0,    0,    0,    0,    0,    0,   52,   50,
-       47,   47,   50,   28,   48,   50,   50,   50,   50,   50,
-       50,   50,   22,   50,   50,   50,   21,   21,   21,   21,
-       21,   21,   21,   21,   21,   21,   26,   50,   24,   50,
-       30,   32,   33,   33,   35,   37,   42,   27,   25,   47,
-       13,   48,   23,   16,   34,   20,    0,    0,   18,    0,
-        0,   43,   19,   22,    0,   14,   12,   15,   21,    0,
-       21,    0,   21,   21,   21,    1,    7,   21,   10,   21,
-       21,   21,   17,    0,   30,    0,    0,   29,   33,   31,
-       35,    0,    0,   40,   41,   34,    0,   11,    0,    0,
-
-        0,   45,   46,   21,   21,   21,    6,    8,   21,   21,
-       44,    0,   36,   38,    0,   49,    0,   21,    3,   21,
-        2,    5,   39,   21,   21,    4,   21,    9,    0
-    } ;
-
-static const YY_CHAR yy_ec[256] =
-    {   0,
-        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
-        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    5,    6,    7,    8,    9,   10,   11,   12,    1,
-        1,   13,   14,   10,   15,   16,   17,   18,   18,   18,
-       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
-       21,   22,   10,   10,   23,   23,   23,   23,   23,   23,
-       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
-       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
-        1,   24,    1,    1,   25,    1,   26,   23,   27,   23,
-
-       28,   29,   23,   30,   31,   23,   23,   32,   23,   33,
-       34,   23,   23,   35,   36,   37,   23,   23,   38,   23,
-       23,   23,   39,   40,   41,   42,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1
-    } ;
-
-static const YY_CHAR yy_meta[43] =
-    {   0,
-        1,    1,    2,    3,    1,    4,    5,    1,    4,    4,
-        4,    6,    7,    8,    9,    8,   10,    9,   11,    1,
-       12,    1,    9,    1,    9,    9,    9,    9,    9,    9,
-        9,    9,    9,    9,    9,    9,    9,    9,    1,    1,
-        1,    4
-    } ;
-
-static const flex_int16_t yy_base[147] =
-    {   0,
-        0,    0,   36,   37,   38,   39,   13,   14,  343,  344,
-       54,   60,  321,  344,    0,  302,  329,  327,   52,   50,
-       54,   60,   57,  317,  316,  315,   64,   70,   78,   64,
-       69,   57,   71,   63,   74,   77,  344,  295,  344,  317,
-       92,  344,  102,  108,  108,  100,  109,  344,  344,  120,
-      344,    0,  344,  344,  124,  316,  315,  115,  344,  114,
-      308,  120,  344,  117,  121,  344,  344,  344,    0,  127,
-      272,    0,  133,  265,  264,  231,  118,  119,  223,   52,
-      123,  121,  344,    0,  144,  153,  133,  344,  158,  344,
-      154,  150,  155,  344,  160,  344,  168,  236,  237,  232,
-
-        0,  344,    0,  142,  146,  147,  194,  193,  143,  150,
-      185,  178,  344,  344,    0,  344,  171,  155,  165,  159,
-      151,   83,  344,  160,  167,   32,  163,   13,  344,  203,
-      215,  227,  232,  236,  239,  246,  252,  262,  274,  286,
-      293,  295,  303,  308,  310,  319
-    } ;
-
-static const flex_int16_t yy_def[147] =
-    {   0,
-      129,    1,  130,  130,  131,  131,    1,    1,  129,  129,
-      129,  129,  129,  129,  132,  129,  129,  129,  133,  133,
-      133,  134,  133,  135,  129,  129,  136,  137,  136,   29,
-       29,   29,   29,   29,   29,   29,  129,  129,  129,  129,
-      138,  129,  138,  138,  139,  139,  139,  129,  129,  129,
-      129,  132,  129,  129,  129,  133,  133,  134,  129,  133,
-      140,  134,  129,  133,  135,  129,  129,  129,  141,  142,
-       29,  143,  137,   29,   29,   29,   29,   29,   29,   29,
-       29,   29,  129,  144,  138,  138,  138,  129,  138,  129,
-      139,  139,  139,  129,  129,  129,  129,  133,  140,  140,
-
-      145,  129,  143,   29,   29,   29,   29,   29,   29,   29,
-      144,  138,  129,  129,  146,  129,  145,   29,   29,   29,
-       29,   29,  129,   29,   29,   29,   29,   29,    0,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129
-    } ;
-
-static const flex_int16_t yy_nxt[387] =
-    {   0,
-       10,   11,   12,   11,   11,   13,   14,   15,   16,   10,
-       17,   18,   10,   19,   20,   21,   22,   23,   10,   24,
-       25,   26,   27,   10,   28,   29,   27,   30,   27,   27,
-       31,   32,   27,   33,   34,   27,   35,   36,   37,   38,
-       39,   40,   42,   42,   43,   43,   46,   46,   71,   47,
-       47,   48,   48,   49,   49,   50,   50,   50,   50,   44,
-       44,   50,   50,   50,   50,   56,   58,   71,   58,   60,
-       58,   59,   61,   58,   64,   69,   63,   70,  108,   70,
-       58,   69,   72,   57,   78,   57,   58,   71,   73,   69,
-       80,   70,   71,   70,   58,   75,   72,   76,   71,   71,
-
-       86,   77,   73,   81,   71,   79,   71,   82,   88,   71,
-      129,  129,   71,   74,   85,   87,   92,  129,   71,   93,
-       95,   50,   50,   50,   50,   89,   96,  129,   97,   98,
-       58,  129,  129,   58,   64,  129,   58,  101,   94,   85,
-       90,  129,  102,   58,   69,   72,   57,  106,   57,   58,
-      109,   57,   86,   71,   71,  107,   71,  110,   71,   88,
-      129,  129,   92,  129,   85,   93,  129,   87,  113,  118,
-       96,  114,   97,  119,  120,  121,  112,   71,   71,  122,
-      129,   71,   71,  115,   85,   71,   71,  101,  129,  124,
-       71,  129,  102,  125,   71,   71,  126,  127,   71,  128,
-
-       71,   84,   71,   41,   41,   41,   41,   41,   41,   41,
-       41,   41,   41,   41,   41,   45,   45,   45,   45,   45,
-       45,   45,   45,   45,   45,   45,   45,   52,   71,   71,
-       52,   52,   52,   52,   52,   52,   52,   52,   52,   57,
-       57,   57,   62,   62,   62,   62,   65,   65,  116,  100,
-       65,   71,   58,   71,   71,   71,   71,   73,   71,   73,
-       73,   73,   85,   85,   85,   85,   71,   85,   85,   85,
-       85,   85,   85,   85,   91,   91,   91,   91,   91,   91,
-       91,   91,   91,   91,   91,   91,   99,   99,   99,   99,
-       99,   99,   99,   99,   99,   99,   99,   99,   69,  105,
-
-      104,   69,   70,   70,   70,   70,  103,   71,  103,  103,
-      103,  103,  103,  103,  103,  111,  111,  117,  117,  123,
-      100,  123,  123,  123,  123,  123,  123,  123,  123,  123,
-      123,   58,   58,   84,   83,   68,   67,   66,   55,   54,
-       53,   51,  129,    9,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129
-    } ;
-
-static const flex_int16_t yy_chk[387] =
-    {   0,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    3,    4,    3,    4,    5,    6,  128,    5,
-        6,    7,    8,    7,    8,   11,   11,   11,   11,    3,
-        4,   12,   12,   12,   12,   19,   20,  126,   19,   21,
-       21,   20,   22,   23,   23,   27,   22,   27,   80,   27,
-       27,   28,   27,   28,   32,   28,   28,   80,   27,   29,
-       34,   29,   32,   29,   29,   30,   29,   31,   34,   30,
-
-       41,   31,   29,   35,   31,   33,   33,   36,   43,   35,
-       44,   46,   36,   29,   44,   41,   45,   47,  122,   45,
-       47,   50,   50,   50,   50,   43,   55,   58,   55,   60,
-       60,   58,   62,   64,   64,   87,   62,   65,   46,   87,
-       43,   65,   65,   70,   73,   70,   73,   77,   73,   73,
-       81,   70,   85,   77,   78,   78,   82,   82,   81,   86,
-       89,   92,   91,   93,   89,   91,   93,   85,   95,  104,
-       97,   95,   97,  105,  106,  109,   86,  104,  109,  110,
-      112,  105,  106,   95,  112,  110,  121,  117,   92,  118,
-      118,   86,  117,  120,  120,  124,  124,  125,  127,  127,
-
-      119,  111,  125,  130,  130,  130,  130,  130,  130,  130,
-      130,  130,  130,  130,  130,  131,  131,  131,  131,  131,
-      131,  131,  131,  131,  131,  131,  131,  132,  108,  107,
-      132,  132,  132,  132,  132,  132,  132,  132,  132,  133,
-      133,  133,  134,  134,  134,  134,  135,  135,  100,   99,
-      135,  136,   98,  136,  136,  136,  136,  137,   79,  137,
-      137,  137,  138,  138,  138,  138,   76,  138,  138,  138,
-      138,  138,  138,  138,  139,  139,  139,  139,  139,  139,
-      139,  139,  139,  139,  139,  139,  140,  140,  140,  140,
-      140,  140,  140,  140,  140,  140,  140,  140,  141,   75,
-
-       74,  141,  142,  142,  142,  142,  143,   71,  143,  143,
-      143,  143,  143,  143,  143,  144,  144,  145,  145,  146,
-       61,  146,  146,  146,  146,  146,  146,  146,  146,  146,
-      146,   57,   56,   40,   38,   26,   25,   24,   18,   17,
-       16,   13,    9,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129
-    } ;
-
-/* The intent behind this definition is that it'll catch
- * any uses of REJECT which flex missed.
- */
-#define REJECT reject_used_but_not_detected
-#define yymore() yymore_used_but_not_detected
-#define YY_MORE_ADJ 0
-#define YY_RESTORE_YY_MORE_OFFSET
-#line 1 "src/libexpr/lexer.l"
-
-
-
-#line 15 "src/libexpr/lexer.l"
-#include "nixexpr.hh"
-#include "parser-tab.hh"
-
-using namespace nix;
-
-namespace nix {
-
-
-static void initLoc(YYLTYPE * loc)
-{
-    loc->first_line = loc->last_line = 1;
-    loc->first_column = loc->last_column = 1;
-}
-
-
-static void adjustLoc(YYLTYPE * loc, const char * s, size_t len)
-{
-    loc->first_line = loc->last_line;
-    loc->first_column = loc->last_column;
-
-    while (len--) {
-       switch (*s++) {
-       case '\r':
-           if (*s == '\n') /* cr/lf */
-               s++;
-           /* fall through */
-       case '\n':
-           ++loc->last_line;
-           loc->last_column = 1;
-           break;
-       default:
-           ++loc->last_column;
-       }
-    }
-}
-
-
-static Expr * unescapeStr(SymbolTable & symbols, const char * s)
-{
-    string t;
-    char c;
-    while ((c = *s++)) {
-        if (c == '\\') {
-            assert(*s);
-            c = *s++;
-            if (c == 'n') t += '\n';
-            else if (c == 'r') t += '\r';
-            else if (c == 't') t += '\t';
-            else t += c;
-        }
-        else if (c == '\r') {
-            /* Normalise CR and CR/LF into LF. */
-            t += '\n';
-            if (*s == '\n') s++; /* cr/lf */
-        }
-        else t += c;
-    }
-    return new ExprString(symbols.create(t));
-}
-
-
-}
-
-#define YY_USER_INIT initLoc(yylloc)
-#define YY_USER_ACTION adjustLoc(yylloc, yytext, yyleng);
-
-#define PUSH_STATE(state) yy_push_state(state, yyscanner)
-#define POP_STATE() yy_pop_state(yyscanner)
-
-#line 647 "src/libexpr/lexer-tab.cc"
-#line 648 "src/libexpr/lexer-tab.cc"
-
-#define INITIAL 0
-#define STRING 1
-#define IND_STRING 2
-#define INSIDE_DOLLAR_CURLY 3
-
-#ifndef YY_NO_UNISTD_H
-/* Special case for "unistd.h", since it is non-ANSI. We include it way
- * down here because we want the user's section 1 to have been scanned first.
- * The user has a chance to override it with an option.
- */
-#include <unistd.h>
-#endif
-
-#ifndef YY_EXTRA_TYPE
-#define YY_EXTRA_TYPE void *
-#endif
-
-/* Holds the entire state of the reentrant scanner. */
-struct yyguts_t
-    {
-
-    /* User-defined. Not touched by flex. */
-    YY_EXTRA_TYPE yyextra_r;
-
-    /* The rest are the same as the globals declared in the non-reentrant scanner. */
-    FILE *yyin_r, *yyout_r;
-    size_t yy_buffer_stack_top; /**< index of top of stack. */
-    size_t yy_buffer_stack_max; /**< capacity of stack. */
-    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
-    char yy_hold_char;
-    int yy_n_chars;
-    int yyleng_r;
-    char *yy_c_buf_p;
-    int yy_init;
-    int yy_start;
-    int yy_did_buffer_switch_on_eof;
-    int yy_start_stack_ptr;
-    int yy_start_stack_depth;
-    int *yy_start_stack;
-    yy_state_type yy_last_accepting_state;
-    char* yy_last_accepting_cpos;
-
-    int yylineno_r;
-    int yy_flex_debug_r;
-
-    char *yytext_r;
-    int yy_more_flag;
-    int yy_more_len;
-
-    YYSTYPE * yylval_r;
-
-    YYLTYPE * yylloc_r;
-
-    }; /* end struct yyguts_t */
-
-static int yy_init_globals ( yyscan_t yyscanner );
-
-    /* This must go here because YYSTYPE and YYLTYPE are included
-     * from bison output in section 1.*/
-    #    define yylval yyg->yylval_r
-    
-    #    define yylloc yyg->yylloc_r
-    
-int yylex_init (yyscan_t* scanner);
-
-int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);
-
-/* Accessor methods to globals.
-   These are made visible to non-reentrant scanners for convenience. */
-
-int yylex_destroy ( yyscan_t yyscanner );
-
-int yyget_debug ( yyscan_t yyscanner );
-
-void yyset_debug ( int debug_flag , yyscan_t yyscanner );
-
-YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );
-
-void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );
-
-FILE *yyget_in ( yyscan_t yyscanner );
-
-void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );
-
-FILE *yyget_out ( yyscan_t yyscanner );
-
-void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );
-
-			int yyget_leng ( yyscan_t yyscanner );
-
-char *yyget_text ( yyscan_t yyscanner );
-
-int yyget_lineno ( yyscan_t yyscanner );
-
-void yyset_lineno ( int _line_number , yyscan_t yyscanner );
-
-int yyget_column  ( yyscan_t yyscanner );
-
-void yyset_column ( int _column_no , yyscan_t yyscanner );
-
-YYSTYPE * yyget_lval ( yyscan_t yyscanner );
-
-void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );
-
-       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
-    
-        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
-    
-/* Macros after this point can all be overridden by user definitions in
- * section 1.
- */
-
-#ifndef YY_SKIP_YYWRAP
-#ifdef __cplusplus
-extern "C" int yywrap ( yyscan_t yyscanner );
-#else
-extern int yywrap ( yyscan_t yyscanner );
-#endif
-#endif
-
-#ifndef YY_NO_UNPUT
-    
-#endif
-
-#ifndef yytext_ptr
-static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
-#endif
-
-#ifdef YY_NEED_STRLEN
-static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
-#endif
-
-#ifndef YY_NO_INPUT
-#ifdef __cplusplus
-static int yyinput ( yyscan_t yyscanner );
-#else
-static int input ( yyscan_t yyscanner );
-#endif
-
-#endif
-
-    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
-    
-    static void yy_pop_state ( yyscan_t yyscanner );
-    
-/* Amount of stuff to slurp up with each read. */
-#ifndef YY_READ_BUF_SIZE
-#ifdef __ia64__
-/* On IA-64, the buffer size is 16k, not 8k */
-#define YY_READ_BUF_SIZE 16384
-#else
-#define YY_READ_BUF_SIZE 8192
-#endif /* __ia64__ */
-#endif
-
-/* Copy whatever the last rule matched to the standard output. */
-#ifndef ECHO
-/* This used to be an fputs(), but since the string might contain NUL's,
- * we now use fwrite().
- */
-#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
-#endif
-
-/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
- * is returned in "result".
- */
-#ifndef YY_INPUT
-#define YY_INPUT(buf,result,max_size) \
-	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
-		{ \
-		int c = '*'; \
-		int n; \
-		for ( n = 0; n < max_size && \
-			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
-			buf[n] = (char) c; \
-		if ( c == '\n' ) \
-			buf[n++] = (char) c; \
-		if ( c == EOF && ferror( yyin ) ) \
-			YY_FATAL_ERROR( "input in flex scanner failed" ); \
-		result = n; \
-		} \
-	else \
-		{ \
-		errno=0; \
-		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
-			{ \
-			if( errno != EINTR) \
-				{ \
-				YY_FATAL_ERROR( "input in flex scanner failed" ); \
-				break; \
-				} \
-			errno=0; \
-			clearerr(yyin); \
-			} \
-		}\
-\
-
-#endif
-
-/* No semi-colon after return; correct usage is to write "yyterminate();" -
- * we don't want an extra ';' after the "return" because that will cause
- * some compilers to complain about unreachable statements.
- */
-#ifndef yyterminate
-#define yyterminate() return YY_NULL
-#endif
-
-/* Number of entries by which start-condition stack grows. */
-#ifndef YY_START_STACK_INCR
-#define YY_START_STACK_INCR 25
-#endif
-
-/* Report a fatal error. */
-#ifndef YY_FATAL_ERROR
-#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
-#endif
-
-/* end tables serialization structures and prototypes */
-
-/* Default declaration of generated scanner - a define so the user can
- * easily add parameters.
- */
-#ifndef YY_DECL
-#define YY_DECL_IS_OURS 1
-
-extern int yylex \
-               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);
-
-#define YY_DECL int yylex \
-               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
-#endif /* !YY_DECL */
-
-/* Code executed at the beginning of each rule, after yytext and yyleng
- * have been set up.
- */
-#ifndef YY_USER_ACTION
-#define YY_USER_ACTION
-#endif
-
-/* Code executed at the end of each rule. */
-#ifndef YY_BREAK
-#define YY_BREAK /*LINTED*/break;
-#endif
-
-#define YY_RULE_SETUP \
-	YY_USER_ACTION
-
-/** The main scanner function which does all the work.
- */
-YY_DECL
-{
-	yy_state_type yy_current_state;
-	char *yy_cp, *yy_bp;
-	int yy_act;
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-    yylval = yylval_param;
-
-    yylloc = yylloc_param;
-
-	if ( !yyg->yy_init )
-		{
-		yyg->yy_init = 1;
-
-#ifdef YY_USER_INIT
-		YY_USER_INIT;
-#endif
-
-		if ( ! yyg->yy_start )
-			yyg->yy_start = 1;	/* first start state */
-
-		if ( ! yyin )
-			yyin = stdin;
-
-		if ( ! yyout )
-			yyout = stdout;
-
-		if ( ! YY_CURRENT_BUFFER ) {
-			yyensure_buffer_stack (yyscanner);
-			YY_CURRENT_BUFFER_LVALUE =
-				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
-		}
-
-		yy_load_buffer_state( yyscanner );
-		}
-
-	{
-#line 95 "src/libexpr/lexer.l"
-
-
-#line 940 "src/libexpr/lexer-tab.cc"
-
-	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
-		{
-		yy_cp = yyg->yy_c_buf_p;
-
-		/* Support of yytext. */
-		*yy_cp = yyg->yy_hold_char;
-
-		/* yy_bp points to the position in yy_ch_buf of the start of
-		 * the current run.
-		 */
-		yy_bp = yy_cp;
-
-		yy_current_state = yyg->yy_start;
-yy_match:
-		do
-			{
-			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
-			if ( yy_accept[yy_current_state] )
-				{
-				yyg->yy_last_accepting_state = yy_current_state;
-				yyg->yy_last_accepting_cpos = yy_cp;
-				}
-			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
-				{
-				yy_current_state = (int) yy_def[yy_current_state];
-				if ( yy_current_state >= 130 )
-					yy_c = yy_meta[yy_c];
-				}
-			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
-			++yy_cp;
-			}
-		while ( yy_current_state != 129 );
-		yy_cp = yyg->yy_last_accepting_cpos;
-		yy_current_state = yyg->yy_last_accepting_state;
-
-yy_find_action:
-		yy_act = yy_accept[yy_current_state];
-
-		YY_DO_BEFORE_ACTION;
-
-do_action:	/* This label is used only to access EOF actions. */
-
-		switch ( yy_act )
-	{ /* beginning of action switch */
-			case 0: /* must back up */
-			/* undo the effects of YY_DO_BEFORE_ACTION */
-			*yy_cp = yyg->yy_hold_char;
-			yy_cp = yyg->yy_last_accepting_cpos;
-			yy_current_state = yyg->yy_last_accepting_state;
-			goto yy_find_action;
-
-case 1:
-YY_RULE_SETUP
-#line 100 "src/libexpr/lexer.l"
-{ return IF; }
-	YY_BREAK
-case 2:
-YY_RULE_SETUP
-#line 101 "src/libexpr/lexer.l"
-{ return THEN; }
-	YY_BREAK
-case 3:
-YY_RULE_SETUP
-#line 102 "src/libexpr/lexer.l"
-{ return ELSE; }
-	YY_BREAK
-case 4:
-YY_RULE_SETUP
-#line 103 "src/libexpr/lexer.l"
-{ return ASSERT; }
-	YY_BREAK
-case 5:
-YY_RULE_SETUP
-#line 104 "src/libexpr/lexer.l"
-{ return WITH; }
-	YY_BREAK
-case 6:
-YY_RULE_SETUP
-#line 105 "src/libexpr/lexer.l"
-{ return LET; }
-	YY_BREAK
-case 7:
-YY_RULE_SETUP
-#line 106 "src/libexpr/lexer.l"
-{ return IN; }
-	YY_BREAK
-case 8:
-YY_RULE_SETUP
-#line 107 "src/libexpr/lexer.l"
-{ return REC; }
-	YY_BREAK
-case 9:
-YY_RULE_SETUP
-#line 108 "src/libexpr/lexer.l"
-{ return INHERIT; }
-	YY_BREAK
-case 10:
-YY_RULE_SETUP
-#line 109 "src/libexpr/lexer.l"
-{ return OR_KW; }
-	YY_BREAK
-case 11:
-YY_RULE_SETUP
-#line 110 "src/libexpr/lexer.l"
-{ return ELLIPSIS; }
-	YY_BREAK
-case 12:
-YY_RULE_SETUP
-#line 112 "src/libexpr/lexer.l"
-{ return EQ; }
-	YY_BREAK
-case 13:
-YY_RULE_SETUP
-#line 113 "src/libexpr/lexer.l"
-{ return NEQ; }
-	YY_BREAK
-case 14:
-YY_RULE_SETUP
-#line 114 "src/libexpr/lexer.l"
-{ return LEQ; }
-	YY_BREAK
-case 15:
-YY_RULE_SETUP
-#line 115 "src/libexpr/lexer.l"
-{ return GEQ; }
-	YY_BREAK
-case 16:
-YY_RULE_SETUP
-#line 116 "src/libexpr/lexer.l"
-{ return AND; }
-	YY_BREAK
-case 17:
-YY_RULE_SETUP
-#line 117 "src/libexpr/lexer.l"
-{ return OR; }
-	YY_BREAK
-case 18:
-YY_RULE_SETUP
-#line 118 "src/libexpr/lexer.l"
-{ return IMPL; }
-	YY_BREAK
-case 19:
-YY_RULE_SETUP
-#line 119 "src/libexpr/lexer.l"
-{ return UPDATE; }
-	YY_BREAK
-case 20:
-YY_RULE_SETUP
-#line 120 "src/libexpr/lexer.l"
-{ return CONCAT; }
-	YY_BREAK
-case 21:
-YY_RULE_SETUP
-#line 122 "src/libexpr/lexer.l"
-{ yylval->id = strdup(yytext); return ID; }
-	YY_BREAK
-case 22:
-YY_RULE_SETUP
-#line 123 "src/libexpr/lexer.l"
-{ errno = 0;
-              yylval->n = strtol(yytext, 0, 10);
-              if (errno != 0)
-                  throw ParseError(format("invalid integer ‘%1%’") % yytext);
-              return INT;
-            }
-	YY_BREAK
-case 23:
-YY_RULE_SETUP
-#line 130 "src/libexpr/lexer.l"
-{ PUSH_STATE(INSIDE_DOLLAR_CURLY); return DOLLAR_CURLY; }
-	YY_BREAK
-
-case 24:
-YY_RULE_SETUP
-#line 133 "src/libexpr/lexer.l"
-{ return '}'; }
-	YY_BREAK
-case 25:
-YY_RULE_SETUP
-#line 134 "src/libexpr/lexer.l"
-{ POP_STATE(); return '}'; }
-	YY_BREAK
-case 26:
-YY_RULE_SETUP
-#line 135 "src/libexpr/lexer.l"
-{ return '{'; }
-	YY_BREAK
-case 27:
-YY_RULE_SETUP
-#line 136 "src/libexpr/lexer.l"
-{ PUSH_STATE(INSIDE_DOLLAR_CURLY); return '{'; }
-	YY_BREAK
-case 28:
-YY_RULE_SETUP
-#line 138 "src/libexpr/lexer.l"
-{
-                PUSH_STATE(STRING); return '"';
-              }
-	YY_BREAK
-case 29:
-/* rule 29 can match eol */
-*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
-YY_LINENO_REWIND_TO(yy_cp - 1);
-yyg->yy_c_buf_p = yy_cp -= 1;
-YY_DO_BEFORE_ACTION; /* set up yytext again */
-#line 142 "src/libexpr/lexer.l"
-case 30:
-/* rule 30 can match eol */
-YY_RULE_SETUP
-#line 142 "src/libexpr/lexer.l"
-{
-                /* It is impossible to match strings ending with '$' with one
-                   regex because trailing contexts are only valid at the end
-                   of a rule. (A sane but undocumented limitation.) */
-                yylval->e = unescapeStr(data->symbols, yytext);
-                return STR;
-              }
-	YY_BREAK
-case 31:
-YY_RULE_SETUP
-#line 149 "src/libexpr/lexer.l"
-{ PUSH_STATE(INSIDE_DOLLAR_CURLY); return DOLLAR_CURLY; }
-	YY_BREAK
-case 32:
-YY_RULE_SETUP
-#line 150 "src/libexpr/lexer.l"
-{ POP_STATE(); return '"'; }
-	YY_BREAK
-case 33:
-YY_RULE_SETUP
-#line 151 "src/libexpr/lexer.l"
-{
-                /* This can only occur when we reach EOF, otherwise the above
-                   (...|\$[^\{\"\\]|\\.|\$\\.)+ would have triggered.
-                   This is technically invalid, but we leave the problem to the
-                   parser who fails with exact location. */
-                return STR;
-              }
-	YY_BREAK
-case 34:
-/* rule 34 can match eol */
-YY_RULE_SETUP
-#line 159 "src/libexpr/lexer.l"
-{ PUSH_STATE(IND_STRING); return IND_STRING_OPEN; }
-	YY_BREAK
-case 35:
-/* rule 35 can match eol */
-YY_RULE_SETUP
-#line 160 "src/libexpr/lexer.l"
-{
-                   yylval->e = new ExprIndStr(yytext);
-                   return IND_STR;
-                 }
-	YY_BREAK
-case 36:
-#line 165 "src/libexpr/lexer.l"
-case 37:
-YY_RULE_SETUP
-#line 165 "src/libexpr/lexer.l"
-{
-                   yylval->e = new ExprIndStr("$");
-                   return IND_STR;
-                 }
-	YY_BREAK
-case 38:
-YY_RULE_SETUP
-#line 169 "src/libexpr/lexer.l"
-{
-                   yylval->e = new ExprIndStr("''");
-                   return IND_STR;
-                 }
-	YY_BREAK
-case 39:
-YY_RULE_SETUP
-#line 173 "src/libexpr/lexer.l"
-{
-                   yylval->e = unescapeStr(data->symbols, yytext + 2);
-                   return IND_STR;
-                 }
-	YY_BREAK
-case 40:
-YY_RULE_SETUP
-#line 177 "src/libexpr/lexer.l"
-{ PUSH_STATE(INSIDE_DOLLAR_CURLY); return DOLLAR_CURLY; }
-	YY_BREAK
-case 41:
-YY_RULE_SETUP
-#line 178 "src/libexpr/lexer.l"
-{ POP_STATE(); return IND_STRING_CLOSE; }
-	YY_BREAK
-case 42:
-YY_RULE_SETUP
-#line 179 "src/libexpr/lexer.l"
-{
-                   yylval->e = new ExprIndStr("'");
-                   return IND_STR;
-                 }
-	YY_BREAK
-
-case 43:
-YY_RULE_SETUP
-#line 186 "src/libexpr/lexer.l"
-{ yylval->path = strdup(yytext); return PATH; }
-	YY_BREAK
-case 44:
-YY_RULE_SETUP
-#line 187 "src/libexpr/lexer.l"
-{ yylval->path = strdup(yytext); return HPATH; }
-	YY_BREAK
-case 45:
-YY_RULE_SETUP
-#line 188 "src/libexpr/lexer.l"
-{ yylval->path = strdup(yytext); return SPATH; }
-	YY_BREAK
-case 46:
-YY_RULE_SETUP
-#line 189 "src/libexpr/lexer.l"
-{ yylval->uri = strdup(yytext); return URI; }
-	YY_BREAK
-case 47:
-/* rule 47 can match eol */
-YY_RULE_SETUP
-#line 191 "src/libexpr/lexer.l"
-/* eat up whitespace */
-	YY_BREAK
-case 48:
-YY_RULE_SETUP
-#line 192 "src/libexpr/lexer.l"
-/* single-line comments */
-	YY_BREAK
-case 49:
-/* rule 49 can match eol */
-YY_RULE_SETUP
-#line 193 "src/libexpr/lexer.l"
-/* long comments */
-	YY_BREAK
-case 50:
-YY_RULE_SETUP
-#line 195 "src/libexpr/lexer.l"
-return yytext[0];
-	YY_BREAK
-
-case 51:
-YY_RULE_SETUP
-#line 199 "src/libexpr/lexer.l"
-YY_FATAL_ERROR( "flex scanner jammed" );
-	YY_BREAK
-#line 1289 "src/libexpr/lexer-tab.cc"
-case YY_STATE_EOF(INITIAL):
-case YY_STATE_EOF(STRING):
-case YY_STATE_EOF(IND_STRING):
-case YY_STATE_EOF(INSIDE_DOLLAR_CURLY):
-	yyterminate();
-
-	case YY_END_OF_BUFFER:
-		{
-		/* Amount of text matched not including the EOB char. */
-		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;
-
-		/* Undo the effects of YY_DO_BEFORE_ACTION. */
-		*yy_cp = yyg->yy_hold_char;
-		YY_RESTORE_YY_MORE_OFFSET
-
-		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
-			{
-			/* We're scanning a new file or input source.  It's
-			 * possible that this happened because the user
-			 * just pointed yyin at a new source and called
-			 * yylex().  If so, then we have to assure
-			 * consistency between YY_CURRENT_BUFFER and our
-			 * globals.  Here is the right place to do so, because
-			 * this is the first action (other than possibly a
-			 * back-up) that will match for the new input source.
-			 */
-			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
-			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
-			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
-			}
-
-		/* Note that here we test for yy_c_buf_p "<=" to the position
-		 * of the first EOB in the buffer, since yy_c_buf_p will
-		 * already have been incremented past the NUL character
-		 * (since all states make transitions on EOB to the
-		 * end-of-buffer state).  Contrast this with the test
-		 * in input().
-		 */
-		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
-			{ /* This was really a NUL. */
-			yy_state_type yy_next_state;
-
-			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;
-
-			yy_current_state = yy_get_previous_state( yyscanner );
-
-			/* Okay, we're now positioned to make the NUL
-			 * transition.  We couldn't have
-			 * yy_get_previous_state() go ahead and do it
-			 * for us because it doesn't know how to deal
-			 * with the possibility of jamming (and we don't
-			 * want to build jamming into it because then it
-			 * will run more slowly).
-			 */
-
-			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);
-
-			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
-
-			if ( yy_next_state )
-				{
-				/* Consume the NUL. */
-				yy_cp = ++yyg->yy_c_buf_p;
-				yy_current_state = yy_next_state;
-				goto yy_match;
-				}
-
-			else
-				{
-				yy_cp = yyg->yy_last_accepting_cpos;
-				yy_current_state = yyg->yy_last_accepting_state;
-				goto yy_find_action;
-				}
-			}
-
-		else switch ( yy_get_next_buffer( yyscanner ) )
-			{
-			case EOB_ACT_END_OF_FILE:
-				{
-				yyg->yy_did_buffer_switch_on_eof = 0;
-
-				if ( yywrap( yyscanner ) )
-					{
-					/* Note: because we've taken care in
-					 * yy_get_next_buffer() to have set up
-					 * yytext, we can now set up
-					 * yy_c_buf_p so that if some total
-					 * hoser (like flex itself) wants to
-					 * call the scanner after we return the
-					 * YY_NULL, it'll still work - another
-					 * YY_NULL will get returned.
-					 */
-					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;
-
-					yy_act = YY_STATE_EOF(YY_START);
-					goto do_action;
-					}
-
-				else
-					{
-					if ( ! yyg->yy_did_buffer_switch_on_eof )
-						YY_NEW_FILE;
-					}
-				break;
-				}
-
-			case EOB_ACT_CONTINUE_SCAN:
-				yyg->yy_c_buf_p =
-					yyg->yytext_ptr + yy_amount_of_matched_text;
-
-				yy_current_state = yy_get_previous_state( yyscanner );
-
-				yy_cp = yyg->yy_c_buf_p;
-				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
-				goto yy_match;
-
-			case EOB_ACT_LAST_MATCH:
-				yyg->yy_c_buf_p =
-				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];
-
-				yy_current_state = yy_get_previous_state( yyscanner );
-
-				yy_cp = yyg->yy_c_buf_p;
-				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
-				goto yy_find_action;
-			}
-		break;
-		}
-
-	default:
-		YY_FATAL_ERROR(
-			"fatal flex scanner internal error--no action found" );
-	} /* end of action switch */
-		} /* end of scanning one token */
-	} /* end of user's declarations */
-} /* end of yylex */
-
-/* yy_get_next_buffer - try to read in a new buffer
- *
- * Returns a code representing an action:
- *	EOB_ACT_LAST_MATCH -
- *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
- *	EOB_ACT_END_OF_FILE - end of file
- */
-static int yy_get_next_buffer (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
-	char *source = yyg->yytext_ptr;
-	int number_to_move, i;
-	int ret_val;
-
-	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
-		YY_FATAL_ERROR(
-		"fatal flex scanner internal error--end of buffer missed" );
-
-	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
-		{ /* Don't try to fill the buffer, so this is an EOF. */
-		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
-			{
-			/* We matched a single character, the EOB, so
-			 * treat this as a final EOF.
-			 */
-			return EOB_ACT_END_OF_FILE;
-			}
-
-		else
-			{
-			/* We matched some text prior to the EOB, first
-			 * process it.
-			 */
-			return EOB_ACT_LAST_MATCH;
-			}
-		}
-
-	/* Try to read more data. */
-
-	/* First move last chars to start of buffer. */
-	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);
-
-	for ( i = 0; i < number_to_move; ++i )
-		*(dest++) = *(source++);
-
-	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
-		/* don't do the read, it's not guaranteed to return an EOF,
-		 * just force an EOF
-		 */
-		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;
-
-	else
-		{
-			int num_to_read =
-			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
-
-		while ( num_to_read <= 0 )
-			{ /* Not enough room in the buffer - grow it. */
-
-			/* just a shorter name for the current buffer */
-			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;
-
-			int yy_c_buf_p_offset =
-				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);
-
-			if ( b->yy_is_our_buffer )
-				{
-				int new_size = b->yy_buf_size * 2;
-
-				if ( new_size <= 0 )
-					b->yy_buf_size += b->yy_buf_size / 8;
-				else
-					b->yy_buf_size *= 2;
-
-				b->yy_ch_buf = (char *)
-					/* Include room in for 2 EOB chars. */
-					yyrealloc( (void *) b->yy_ch_buf,
-							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
-				}
-			else
-				/* Can't grow it, we don't own it. */
-				b->yy_ch_buf = NULL;
-
-			if ( ! b->yy_ch_buf )
-				YY_FATAL_ERROR(
-				"fatal error - scanner input buffer overflow" );
-
-			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
-
-			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
-						number_to_move - 1;
-
-			}
-
-		if ( num_to_read > YY_READ_BUF_SIZE )
-			num_to_read = YY_READ_BUF_SIZE;
-
-		/* Read in more data. */
-		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
-			yyg->yy_n_chars, num_to_read );
-
-		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
-		}
-
-	if ( yyg->yy_n_chars == 0 )
-		{
-		if ( number_to_move == YY_MORE_ADJ )
-			{
-			ret_val = EOB_ACT_END_OF_FILE;
-			yyrestart( yyin  , yyscanner);
-			}
-
-		else
-			{
-			ret_val = EOB_ACT_LAST_MATCH;
-			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
-				YY_BUFFER_EOF_PENDING;
-			}
-		}
-
-	else
-		ret_val = EOB_ACT_CONTINUE_SCAN;
-
-	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
-		/* Extend the array by 50%, plus the number we really need. */
-		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
-		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
-			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
-		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
-			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
-		/* "- 2" to take care of EOB's */
-		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
-	}
-
-	yyg->yy_n_chars += number_to_move;
-	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
-	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
-
-	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
-
-	return ret_val;
-}
-
-/* yy_get_previous_state - get the state just before the EOB char was reached */
-
-    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
-{
-	yy_state_type yy_current_state;
-	char *yy_cp;
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-	yy_current_state = yyg->yy_start;
-
-	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
-		{
-		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
-		if ( yy_accept[yy_current_state] )
-			{
-			yyg->yy_last_accepting_state = yy_current_state;
-			yyg->yy_last_accepting_cpos = yy_cp;
-			}
-		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
-			{
-			yy_current_state = (int) yy_def[yy_current_state];
-			if ( yy_current_state >= 130 )
-				yy_c = yy_meta[yy_c];
-			}
-		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
-		}
-
-	return yy_current_state;
-}
-
-/* yy_try_NUL_trans - try to make a transition on the NUL character
- *
- * synopsis
- *	next_state = yy_try_NUL_trans( current_state );
- */
-    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
-{
-	int yy_is_jam;
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
-	char *yy_cp = yyg->yy_c_buf_p;
-
-	YY_CHAR yy_c = 1;
-	if ( yy_accept[yy_current_state] )
-		{
-		yyg->yy_last_accepting_state = yy_current_state;
-		yyg->yy_last_accepting_cpos = yy_cp;
-		}
-	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
-		{
-		yy_current_state = (int) yy_def[yy_current_state];
-		if ( yy_current_state >= 130 )
-			yy_c = yy_meta[yy_c];
-		}
-	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
-	yy_is_jam = (yy_current_state == 129);
-
-	(void)yyg;
-	return yy_is_jam ? 0 : yy_current_state;
-}
-
-#ifndef YY_NO_UNPUT
-
-#endif
-
-#ifndef YY_NO_INPUT
-#ifdef __cplusplus
-    static int yyinput (yyscan_t yyscanner)
-#else
-    static int input  (yyscan_t yyscanner)
-#endif
-
-{
-	int c;
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-	*yyg->yy_c_buf_p = yyg->yy_hold_char;
-
-	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
-		{
-		/* yy_c_buf_p now points to the character we want to return.
-		 * If this occurs *before* the EOB characters, then it's a
-		 * valid NUL; if not, then we've hit the end of the buffer.
-		 */
-		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
-			/* This was really a NUL. */
-			*yyg->yy_c_buf_p = '\0';
-
-		else
-			{ /* need more input */
-			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
-			++yyg->yy_c_buf_p;
-
-			switch ( yy_get_next_buffer( yyscanner ) )
-				{
-				case EOB_ACT_LAST_MATCH:
-					/* This happens because yy_g_n_b()
-					 * sees that we've accumulated a
-					 * token and flags that we need to
-					 * try matching the token before
-					 * proceeding.  But for input(),
-					 * there's no matching to consider.
-					 * So convert the EOB_ACT_LAST_MATCH
-					 * to EOB_ACT_END_OF_FILE.
-					 */
-
-					/* Reset buffer status. */
-					yyrestart( yyin , yyscanner);
-
-					/*FALLTHROUGH*/
-
-				case EOB_ACT_END_OF_FILE:
-					{
-					if ( yywrap( yyscanner ) )
-						return 0;
-
-					if ( ! yyg->yy_did_buffer_switch_on_eof )
-						YY_NEW_FILE;
-#ifdef __cplusplus
-					return yyinput(yyscanner);
-#else
-					return input(yyscanner);
-#endif
-					}
-
-				case EOB_ACT_CONTINUE_SCAN:
-					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
-					break;
-				}
-			}
-		}
-
-	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
-	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
-	yyg->yy_hold_char = *++yyg->yy_c_buf_p;
-
-	return c;
-}
-#endif	/* ifndef YY_NO_INPUT */
-
-/** Immediately switch to a different input stream.
- * @param input_file A readable stream.
- * @param yyscanner The scanner object.
- * @note This function does not reset the start condition to @c INITIAL .
- */
-    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-	if ( ! YY_CURRENT_BUFFER ){
-        yyensure_buffer_stack (yyscanner);
-		YY_CURRENT_BUFFER_LVALUE =
-            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
-	}
-
-	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
-	yy_load_buffer_state( yyscanner );
-}
-
-/** Switch to a different input buffer.
- * @param new_buffer The new input buffer.
- * @param yyscanner The scanner object.
- */
-    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-	/* TODO. We should be able to replace this entire function body
-	 * with
-	 *		yypop_buffer_state();
-	 *		yypush_buffer_state(new_buffer);
-     */
-	yyensure_buffer_stack (yyscanner);
-	if ( YY_CURRENT_BUFFER == new_buffer )
-		return;
-
-	if ( YY_CURRENT_BUFFER )
-		{
-		/* Flush out information for old buffer. */
-		*yyg->yy_c_buf_p = yyg->yy_hold_char;
-		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
-		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
-		}
-
-	YY_CURRENT_BUFFER_LVALUE = new_buffer;
-	yy_load_buffer_state( yyscanner );
-
-	/* We don't actually know whether we did this switch during
-	 * EOF (yywrap()) processing, but the only time this flag
-	 * is looked at is after yywrap() is called, so it's safe
-	 * to go ahead and always set it.
-	 */
-	yyg->yy_did_buffer_switch_on_eof = 1;
-}
-
-static void yy_load_buffer_state  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
-	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
-	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
-	yyg->yy_hold_char = *yyg->yy_c_buf_p;
-}
-
-/** Allocate and initialize an input buffer state.
- * @param file A readable stream.
- * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
- * @param yyscanner The scanner object.
- * @return the allocated buffer state.
- */
-    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
-{
-	YY_BUFFER_STATE b;
-    
-	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
-	if ( ! b )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
-
-	b->yy_buf_size = size;
-
-	/* yy_ch_buf has to be 2 characters longer than the size given because
-	 * we need to put in 2 end-of-buffer characters.
-	 */
-	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
-	if ( ! b->yy_ch_buf )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
-
-	b->yy_is_our_buffer = 1;
-
-	yy_init_buffer( b, file , yyscanner);
-
-	return b;
-}
-
-/** Destroy the buffer.
- * @param b a buffer created with yy_create_buffer()
- * @param yyscanner The scanner object.
- */
-    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-	if ( ! b )
-		return;
-
-	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
-		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
-
-	if ( b->yy_is_our_buffer )
-		yyfree( (void *) b->yy_ch_buf , yyscanner );
-
-	yyfree( (void *) b , yyscanner );
-}
-
-/* Initializes or reinitializes a buffer.
- * This function is sometimes called more than once on the same buffer,
- * such as during a yyrestart() or at EOF.
- */
-    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
-
-{
-	int oerrno = errno;
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-	yy_flush_buffer( b , yyscanner);
-
-	b->yy_input_file = file;
-	b->yy_fill_buffer = 1;
-
-    /* If b is the current buffer, then yy_init_buffer was _probably_
-     * called from yyrestart() or through yy_get_next_buffer.
-     * In that case, we don't want to reset the lineno or column.
-     */
-    if (b != YY_CURRENT_BUFFER){
-        b->yy_bs_lineno = 1;
-        b->yy_bs_column = 0;
-    }
-
-        b->yy_is_interactive = 0;
-    
-	errno = oerrno;
-}
-
-/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
- * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
- * @param yyscanner The scanner object.
- */
-    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-	if ( ! b )
-		return;
-
-	b->yy_n_chars = 0;
-
-	/* We always need two end-of-buffer characters.  The first causes
-	 * a transition to the end-of-buffer state.  The second causes
-	 * a jam in that state.
-	 */
-	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
-	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
-
-	b->yy_buf_pos = &b->yy_ch_buf[0];
-
-	b->yy_at_bol = 1;
-	b->yy_buffer_status = YY_BUFFER_NEW;
-
-	if ( b == YY_CURRENT_BUFFER )
-		yy_load_buffer_state( yyscanner );
-}
-
-/** Pushes the new state onto the stack. The new state becomes
- *  the current state. This function will allocate the stack
- *  if necessary.
- *  @param new_buffer The new state.
- *  @param yyscanner The scanner object.
- */
-void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-	if (new_buffer == NULL)
-		return;
-
-	yyensure_buffer_stack(yyscanner);
-
-	/* This block is copied from yy_switch_to_buffer. */
-	if ( YY_CURRENT_BUFFER )
-		{
-		/* Flush out information for old buffer. */
-		*yyg->yy_c_buf_p = yyg->yy_hold_char;
-		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
-		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
-		}
-
-	/* Only push if top exists. Otherwise, replace top. */
-	if (YY_CURRENT_BUFFER)
-		yyg->yy_buffer_stack_top++;
-	YY_CURRENT_BUFFER_LVALUE = new_buffer;
-
-	/* copied from yy_switch_to_buffer. */
-	yy_load_buffer_state( yyscanner );
-	yyg->yy_did_buffer_switch_on_eof = 1;
-}
-
-/** Removes and deletes the top of the stack, if present.
- *  The next element becomes the new top.
- *  @param yyscanner The scanner object.
- */
-void yypop_buffer_state (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-	if (!YY_CURRENT_BUFFER)
-		return;
-
-	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
-	YY_CURRENT_BUFFER_LVALUE = NULL;
-	if (yyg->yy_buffer_stack_top > 0)
-		--yyg->yy_buffer_stack_top;
-
-	if (YY_CURRENT_BUFFER) {
-		yy_load_buffer_state( yyscanner );
-		yyg->yy_did_buffer_switch_on_eof = 1;
-	}
-}
-
-/* Allocates the stack if it does not exist.
- *  Guarantees space for at least one push.
- */
-static void yyensure_buffer_stack (yyscan_t yyscanner)
-{
-	yy_size_t num_to_alloc;
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-	if (!yyg->yy_buffer_stack) {
-
-		/* First allocation is just for 2 elements, since we don't know if this
-		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
-		 * immediate realloc on the next call.
-         */
-      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
-		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
-								(num_to_alloc * sizeof(struct yy_buffer_state*)
-								, yyscanner);
-		if ( ! yyg->yy_buffer_stack )
-			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
-
-		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
-
-		yyg->yy_buffer_stack_max = num_to_alloc;
-		yyg->yy_buffer_stack_top = 0;
-		return;
-	}
-
-	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){
-
-		/* Increase the buffer to prepare for a possible push. */
-		yy_size_t grow_size = 8 /* arbitrary grow size */;
-
-		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
-		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
-								(yyg->yy_buffer_stack,
-								num_to_alloc * sizeof(struct yy_buffer_state*)
-								, yyscanner);
-		if ( ! yyg->yy_buffer_stack )
-			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
-
-		/* zero only the new slots.*/
-		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
-		yyg->yy_buffer_stack_max = num_to_alloc;
-	}
-}
-
-/** Setup the input buffer state to scan directly from a user-specified character buffer.
- * @param base the character buffer
- * @param size the size in bytes of the character buffer
- * @param yyscanner The scanner object.
- * @return the newly allocated buffer state object.
- */
-YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
-{
-	YY_BUFFER_STATE b;
-    
-	if ( size < 2 ||
-	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
-	     base[size-1] != YY_END_OF_BUFFER_CHAR )
-		/* They forgot to leave room for the EOB's. */
-		return NULL;
-
-	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
-	if ( ! b )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
-
-	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
-	b->yy_buf_pos = b->yy_ch_buf = base;
-	b->yy_is_our_buffer = 0;
-	b->yy_input_file = NULL;
-	b->yy_n_chars = b->yy_buf_size;
-	b->yy_is_interactive = 0;
-	b->yy_at_bol = 1;
-	b->yy_fill_buffer = 0;
-	b->yy_buffer_status = YY_BUFFER_NEW;
-
-	yy_switch_to_buffer( b , yyscanner );
-
-	return b;
-}
-
-/** Setup the input buffer state to scan a string. The next call to yylex() will
- * scan from a @e copy of @a str.
- * @param yystr a NUL-terminated string to scan
- * @param yyscanner The scanner object.
- * @return the newly allocated buffer state object.
- * @note If you want to scan bytes that may contain NUL values, then use
- *       yy_scan_bytes() instead.
- */
-YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
-{
-    
-	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
-}
-
-/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
- * scan from a @e copy of @a bytes.
- * @param yybytes the byte buffer to scan
- * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
- * @param yyscanner The scanner object.
- * @return the newly allocated buffer state object.
- */
-YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
-{
-	YY_BUFFER_STATE b;
-	char *buf;
-	yy_size_t n;
-	int i;
-    
-	/* Get memory for full buffer, including space for trailing EOB's. */
-	n = (yy_size_t) (_yybytes_len + 2);
-	buf = (char *) yyalloc( n , yyscanner );
-	if ( ! buf )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
-
-	for ( i = 0; i < _yybytes_len; ++i )
-		buf[i] = yybytes[i];
-
-	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
-
-	b = yy_scan_buffer( buf, n , yyscanner);
-	if ( ! b )
-		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
-
-	/* It's okay to grow etc. this buffer, and we should throw it
-	 * away when we're done.
-	 */
-	b->yy_is_our_buffer = 1;
-
-	return b;
-}
-
-    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
-		{
-		yy_size_t new_size;
-
-		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
-		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );
-
-		if ( ! yyg->yy_start_stack )
-			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );
-
-		else
-			yyg->yy_start_stack = (int *) yyrealloc(
-					(void *) yyg->yy_start_stack, new_size , yyscanner );
-
-		if ( ! yyg->yy_start_stack )
-			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
-		}
-
-	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;
-
-	BEGIN(_new_state);
-}
-
-    static void yy_pop_state  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-	if ( --yyg->yy_start_stack_ptr < 0 )
-		YY_FATAL_ERROR( "start-condition stack underflow" );
-
-	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
-}
-
-#ifndef YY_EXIT_FAILURE
-#define YY_EXIT_FAILURE 2
-#endif
-
-static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
-{
-	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-	(void)yyg;
-	fprintf( stderr, "%s\n", msg );
-	exit( YY_EXIT_FAILURE );
-}
-
-/* Redefine yyless() so it works in section 3 code. */
-
-#undef yyless
-#define yyless(n) \
-	do \
-		{ \
-		/* Undo effects of setting up yytext. */ \
-        int yyless_macro_arg = (n); \
-        YY_LESS_LINENO(yyless_macro_arg);\
-		yytext[yyleng] = yyg->yy_hold_char; \
-		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
-		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
-		*yyg->yy_c_buf_p = '\0'; \
-		yyleng = yyless_macro_arg; \
-		} \
-	while ( 0 )
-
-/* Accessor  methods (get/set functions) to struct members. */
-
-/** Get the user-defined data for this scanner.
- * @param yyscanner The scanner object.
- */
-YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    return yyextra;
-}
-
-/** Get the current line number.
- * @param yyscanner The scanner object.
- */
-int yyget_lineno  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-        if (! YY_CURRENT_BUFFER)
-            return 0;
-    
-    return yylineno;
-}
-
-/** Get the current column number.
- * @param yyscanner The scanner object.
- */
-int yyget_column  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-        if (! YY_CURRENT_BUFFER)
-            return 0;
-    
-    return yycolumn;
-}
-
-/** Get the input stream.
- * @param yyscanner The scanner object.
- */
-FILE *yyget_in  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    return yyin;
-}
-
-/** Get the output stream.
- * @param yyscanner The scanner object.
- */
-FILE *yyget_out  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    return yyout;
-}
-
-/** Get the length of the current token.
- * @param yyscanner The scanner object.
- */
-int yyget_leng  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    return yyleng;
-}
-
-/** Get the current token.
- * @param yyscanner The scanner object.
- */
-
-char *yyget_text  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    return yytext;
-}
-
-/** Set the user-defined data. This data is never touched by the scanner.
- * @param user_defined The data to be associated with this scanner.
- * @param yyscanner The scanner object.
- */
-void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    yyextra = user_defined ;
-}
-
-/** Set the current line number.
- * @param _line_number line number
- * @param yyscanner The scanner object.
- */
-void yyset_lineno (int  _line_number , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-        /* lineno is only valid if an input buffer exists. */
-        if (! YY_CURRENT_BUFFER )
-           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
-    
-    yylineno = _line_number;
-}
-
-/** Set the current column.
- * @param _column_no column number
- * @param yyscanner The scanner object.
- */
-void yyset_column (int  _column_no , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-        /* column is only valid if an input buffer exists. */
-        if (! YY_CURRENT_BUFFER )
-           YY_FATAL_ERROR( "yyset_column called with no buffer" );
-    
-    yycolumn = _column_no;
-}
-
-/** Set the input stream. This does not discard the current
- * input buffer.
- * @param _in_str A readable stream.
- * @param yyscanner The scanner object.
- * @see yy_switch_to_buffer
- */
-void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    yyin = _in_str ;
-}
-
-void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    yyout = _out_str ;
-}
-
-int yyget_debug  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    return yy_flex_debug;
-}
-
-void yyset_debug (int  _bdebug , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    yy_flex_debug = _bdebug ;
-}
-
-/* Accessor methods for yylval and yylloc */
-
-YYSTYPE * yyget_lval  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    return yylval;
-}
-
-void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    yylval = yylval_param;
-}
-
-YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    return yylloc;
-}
-    
-void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    yylloc = yylloc_param;
-}
-    
-/* User-visible API */
-
-/* yylex_init is special because it creates the scanner itself, so it is
- * the ONLY reentrant function that doesn't take the scanner as the last argument.
- * That's why we explicitly handle the declaration, instead of using our macros.
- */
-int yylex_init(yyscan_t* ptr_yy_globals)
-{
-    if (ptr_yy_globals == NULL){
-        errno = EINVAL;
-        return 1;
-    }
-
-    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );
-
-    if (*ptr_yy_globals == NULL){
-        errno = ENOMEM;
-        return 1;
-    }
-
-    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
-    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
-
-    return yy_init_globals ( *ptr_yy_globals );
-}
-
-/* yylex_init_extra has the same functionality as yylex_init, but follows the
- * convention of taking the scanner as the last argument. Note however, that
- * this is a *pointer* to a scanner, as it will be allocated by this call (and
- * is the reason, too, why this function also must handle its own declaration).
- * The user defined value in the first argument will be available to yyalloc in
- * the yyextra field.
- */
-int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
-{
-    struct yyguts_t dummy_yyguts;
-
-    yyset_extra (yy_user_defined, &dummy_yyguts);
-
-    if (ptr_yy_globals == NULL){
-        errno = EINVAL;
-        return 1;
-    }
-
-    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
-
-    if (*ptr_yy_globals == NULL){
-        errno = ENOMEM;
-        return 1;
-    }
-
-    /* By setting to 0xAA, we expose bugs in
-    yy_init_globals. Leave at 0x00 for releases. */
-    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
-
-    yyset_extra (yy_user_defined, *ptr_yy_globals);
-
-    return yy_init_globals ( *ptr_yy_globals );
-}
-
-static int yy_init_globals (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-    /* Initialization is the same as for the non-reentrant scanner.
-     * This function is called from yylex_destroy(), so don't allocate here.
-     */
-
-    yyg->yy_buffer_stack = NULL;
-    yyg->yy_buffer_stack_top = 0;
-    yyg->yy_buffer_stack_max = 0;
-    yyg->yy_c_buf_p = NULL;
-    yyg->yy_init = 0;
-    yyg->yy_start = 0;
-
-    yyg->yy_start_stack_ptr = 0;
-    yyg->yy_start_stack_depth = 0;
-    yyg->yy_start_stack =  NULL;
-
-/* Defined in main.c */
-#ifdef YY_STDINIT
-    yyin = stdin;
-    yyout = stdout;
-#else
-    yyin = NULL;
-    yyout = NULL;
-#endif
-
-    /* For future reference: Set errno on error, since we are called by
-     * yylex_init()
-     */
-    return 0;
-}
-
-/* yylex_destroy is for both reentrant and non-reentrant scanners. */
-int yylex_destroy  (yyscan_t yyscanner)
-{
-    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-
-    /* Pop the buffer stack, destroying each element. */
-	while(YY_CURRENT_BUFFER){
-		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
-		YY_CURRENT_BUFFER_LVALUE = NULL;
-		yypop_buffer_state(yyscanner);
-	}
-
-	/* Destroy the stack itself. */
-	yyfree(yyg->yy_buffer_stack , yyscanner);
-	yyg->yy_buffer_stack = NULL;
-
-    /* Destroy the start condition stack. */
-        yyfree( yyg->yy_start_stack , yyscanner );
-        yyg->yy_start_stack = NULL;
-
-    /* Reset the globals. This is important in a non-reentrant scanner so the next time
-     * yylex() is called, initialization will occur. */
-    yy_init_globals( yyscanner);
-
-    /* Destroy the main struct (reentrant only). */
-    yyfree ( yyscanner , yyscanner );
-    yyscanner = NULL;
-    return 0;
-}
-
-/*
- * Internal utility routines.
- */
-
-#ifndef yytext_ptr
-static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
-{
-	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-	(void)yyg;
-
-	int i;
-	for ( i = 0; i < n; ++i )
-		s1[i] = s2[i];
-}
-#endif
-
-#ifdef YY_NEED_STRLEN
-static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
-{
-	int n;
-	for ( n = 0; s[n]; ++n )
-		;
-
-	return n;
-}
-#endif
-
-void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
-{
-	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-	(void)yyg;
-	return malloc(size);
-}
-
-void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
-{
-	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-	(void)yyg;
-
-	/* The cast to (char *) in the following accommodates both
-	 * implementations that use char* generic pointers, and those
-	 * that use void* generic pointers.  It works with the latter
-	 * because both ANSI C and C++ allow castless assignment from
-	 * any pointer type to void*, and deal with argument conversions
-	 * as though doing an assignment.
-	 */
-	return realloc(ptr, size);
-}
-
-void yyfree (void * ptr , yyscan_t yyscanner)
-{
-	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
-	(void)yyg;
-	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
-}
-
-#define YYTABLES_NAME "yytables"
-
-#line 199 "src/libexpr/lexer.l"
-
-
-
--- nix-1.11.15.orig/src/libexpr/lexer-tab.hh
+++ /dev/null
@@ -1,529 +0,0 @@
-#ifndef yyHEADER_H
-#define yyHEADER_H 1
-#define yyIN_HEADER 1
-
-#line 5 "src/libexpr/lexer-tab.hh"
-
-#line 7 "src/libexpr/lexer-tab.hh"
-
-#define  YY_INT_ALIGNED short int
-
-/* A lexical scanner generated by flex */
-
-#define FLEX_SCANNER
-#define YY_FLEX_MAJOR_VERSION 2
-#define YY_FLEX_MINOR_VERSION 6
-#define YY_FLEX_SUBMINOR_VERSION 4
-#if YY_FLEX_SUBMINOR_VERSION > 0
-#define FLEX_BETA
-#endif
-
-#ifdef yyget_lval
-#define yyget_lval_ALREADY_DEFINED
-#else
-#define yyget_lval yyget_lval
-#endif
-
-#ifdef yyset_lval
-#define yyset_lval_ALREADY_DEFINED
-#else
-#define yyset_lval yyset_lval
-#endif
-
-#ifdef yyget_lloc
-#define yyget_lloc_ALREADY_DEFINED
-#else
-#define yyget_lloc yyget_lloc
-#endif
-
-#ifdef yyset_lloc
-#define yyset_lloc_ALREADY_DEFINED
-#else
-#define yyset_lloc yyset_lloc
-#endif
-
-/* First, we deal with  platform-specific or compiler-specific issues. */
-
-/* begin standard C headers. */
-#include <stdio.h>
-#include <string.h>
-#include <errno.h>
-#include <stdlib.h>
-
-/* end standard C headers. */
-
-/* flex integer type definitions */
-
-#ifndef FLEXINT_H
-#define FLEXINT_H
-
-/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
-
-#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
-
-/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
- * if you want the limit (max/min) macros for int types. 
- */
-#ifndef __STDC_LIMIT_MACROS
-#define __STDC_LIMIT_MACROS 1
-#endif
-
-#include <inttypes.h>
-typedef int8_t flex_int8_t;
-typedef uint8_t flex_uint8_t;
-typedef int16_t flex_int16_t;
-typedef uint16_t flex_uint16_t;
-typedef int32_t flex_int32_t;
-typedef uint32_t flex_uint32_t;
-#else
-typedef signed char flex_int8_t;
-typedef short int flex_int16_t;
-typedef int flex_int32_t;
-typedef unsigned char flex_uint8_t; 
-typedef unsigned short int flex_uint16_t;
-typedef unsigned int flex_uint32_t;
-
-/* Limits of integral types. */
-#ifndef INT8_MIN
-#define INT8_MIN               (-128)
-#endif
-#ifndef INT16_MIN
-#define INT16_MIN              (-32767-1)
-#endif
-#ifndef INT32_MIN
-#define INT32_MIN              (-2147483647-1)
-#endif
-#ifndef INT8_MAX
-#define INT8_MAX               (127)
-#endif
-#ifndef INT16_MAX
-#define INT16_MAX              (32767)
-#endif
-#ifndef INT32_MAX
-#define INT32_MAX              (2147483647)
-#endif
-#ifndef UINT8_MAX
-#define UINT8_MAX              (255U)
-#endif
-#ifndef UINT16_MAX
-#define UINT16_MAX             (65535U)
-#endif
-#ifndef UINT32_MAX
-#define UINT32_MAX             (4294967295U)
-#endif
-
-#ifndef SIZE_MAX
-#define SIZE_MAX               (~(size_t)0)
-#endif
-
-#endif /* ! C99 */
-
-#endif /* ! FLEXINT_H */
-
-/* begin standard C++ headers. */
-
-/* TODO: this is always defined, so inline it */
-#define yyconst const
-
-#if defined(__GNUC__) && __GNUC__ >= 3
-#define yynoreturn __attribute__((__noreturn__))
-#else
-#define yynoreturn
-#endif
-
-/* An opaque pointer. */
-#ifndef YY_TYPEDEF_YY_SCANNER_T
-#define YY_TYPEDEF_YY_SCANNER_T
-typedef void* yyscan_t;
-#endif
-
-/* For convenience, these vars (plus the bison vars far below)
-   are macros in the reentrant scanner. */
-#define yyin yyg->yyin_r
-#define yyout yyg->yyout_r
-#define yyextra yyg->yyextra_r
-#define yyleng yyg->yyleng_r
-#define yytext yyg->yytext_r
-#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
-#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
-#define yy_flex_debug yyg->yy_flex_debug_r
-
-/* Size of default input buffer. */
-#ifndef YY_BUF_SIZE
-#ifdef __ia64__
-/* On IA-64, the buffer size is 16k, not 8k.
- * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
- * Ditto for the __ia64__ case accordingly.
- */
-#define YY_BUF_SIZE 32768
-#else
-#define YY_BUF_SIZE 16384
-#endif /* __ia64__ */
-#endif
-
-#ifndef YY_TYPEDEF_YY_BUFFER_STATE
-#define YY_TYPEDEF_YY_BUFFER_STATE
-typedef struct yy_buffer_state *YY_BUFFER_STATE;
-#endif
-
-#ifndef YY_TYPEDEF_YY_SIZE_T
-#define YY_TYPEDEF_YY_SIZE_T
-typedef size_t yy_size_t;
-#endif
-
-#ifndef YY_STRUCT_YY_BUFFER_STATE
-#define YY_STRUCT_YY_BUFFER_STATE
-struct yy_buffer_state
-	{
-	FILE *yy_input_file;
-
-	char *yy_ch_buf;		/* input buffer */
-	char *yy_buf_pos;		/* current position in input buffer */
-
-	/* Size of input buffer in bytes, not including room for EOB
-	 * characters.
-	 */
-	int yy_buf_size;
-
-	/* Number of characters read into yy_ch_buf, not including EOB
-	 * characters.
-	 */
-	int yy_n_chars;
-
-	/* Whether we "own" the buffer - i.e., we know we created it,
-	 * and can realloc() it to grow it, and should free() it to
-	 * delete it.
-	 */
-	int yy_is_our_buffer;
-
-	/* Whether this is an "interactive" input source; if so, and
-	 * if we're using stdio for input, then we want to use getc()
-	 * instead of fread(), to make sure we stop fetching input after
-	 * each newline.
-	 */
-	int yy_is_interactive;
-
-	/* Whether we're considered to be at the beginning of a line.
-	 * If so, '^' rules will be active on the next match, otherwise
-	 * not.
-	 */
-	int yy_at_bol;
-
-    int yy_bs_lineno; /**< The line count. */
-    int yy_bs_column; /**< The column count. */
-
-	/* Whether to try to fill the input buffer when we reach the
-	 * end of it.
-	 */
-	int yy_fill_buffer;
-
-	int yy_buffer_status;
-
-	};
-#endif /* !YY_STRUCT_YY_BUFFER_STATE */
-
-void yyrestart ( FILE *input_file , yyscan_t yyscanner );
-void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
-YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
-void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
-void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
-void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
-void yypop_buffer_state ( yyscan_t yyscanner );
-
-YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
-YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
-YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );
-
-void *yyalloc ( yy_size_t , yyscan_t yyscanner );
-void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
-void yyfree ( void * , yyscan_t yyscanner );
-
-/* Begin user sect3 */
-
-#define yywrap(yyscanner) (/*CONSTCOND*/1)
-#define YY_SKIP_YYWRAP
-
-#define yytext_ptr yytext_r
-
-#ifdef YY_HEADER_EXPORT_START_CONDITIONS
-#define INITIAL 0
-#define STRING 1
-#define IND_STRING 2
-#define INSIDE_DOLLAR_CURLY 3
-
-#endif
-
-#ifndef YY_NO_UNISTD_H
-/* Special case for "unistd.h", since it is non-ANSI. We include it way
- * down here because we want the user's section 1 to have been scanned first.
- * The user has a chance to override it with an option.
- */
-#include <unistd.h>
-#endif
-
-#ifndef YY_EXTRA_TYPE
-#define YY_EXTRA_TYPE void *
-#endif
-
-int yylex_init (yyscan_t* scanner);
-
-int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);
-
-/* Accessor methods to globals.
-   These are made visible to non-reentrant scanners for convenience. */
-
-int yylex_destroy ( yyscan_t yyscanner );
-
-int yyget_debug ( yyscan_t yyscanner );
-
-void yyset_debug ( int debug_flag , yyscan_t yyscanner );
-
-YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );
-
-void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );
-
-FILE *yyget_in ( yyscan_t yyscanner );
-
-void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );
-
-FILE *yyget_out ( yyscan_t yyscanner );
-
-void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );
-
-			int yyget_leng ( yyscan_t yyscanner );
-
-char *yyget_text ( yyscan_t yyscanner );
-
-int yyget_lineno ( yyscan_t yyscanner );
-
-void yyset_lineno ( int _line_number , yyscan_t yyscanner );
-
-int yyget_column  ( yyscan_t yyscanner );
-
-void yyset_column ( int _column_no , yyscan_t yyscanner );
-
-YYSTYPE * yyget_lval ( yyscan_t yyscanner );
-
-void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );
-
-       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
-    
-        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
-    
-/* Macros after this point can all be overridden by user definitions in
- * section 1.
- */
-
-#ifndef YY_SKIP_YYWRAP
-#ifdef __cplusplus
-extern "C" int yywrap ( yyscan_t yyscanner );
-#else
-extern int yywrap ( yyscan_t yyscanner );
-#endif
-#endif
-
-#ifndef yytext_ptr
-static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
-#endif
-
-#ifdef YY_NEED_STRLEN
-static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
-#endif
-
-#ifndef YY_NO_INPUT
-
-#endif
-
-/* Amount of stuff to slurp up with each read. */
-#ifndef YY_READ_BUF_SIZE
-#ifdef __ia64__
-/* On IA-64, the buffer size is 16k, not 8k */
-#define YY_READ_BUF_SIZE 16384
-#else
-#define YY_READ_BUF_SIZE 8192
-#endif /* __ia64__ */
-#endif
-
-/* Number of entries by which start-condition stack grows. */
-#ifndef YY_START_STACK_INCR
-#define YY_START_STACK_INCR 25
-#endif
-
-/* Default declaration of generated scanner - a define so the user can
- * easily add parameters.
- */
-#ifndef YY_DECL
-#define YY_DECL_IS_OURS 1
-
-extern int yylex \
-               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);
-
-#define YY_DECL int yylex \
-               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
-#endif /* !YY_DECL */
-
-/* yy_get_previous_state - get the state just before the EOB char was reached */
-
-#undef YY_NEW_FILE
-#undef YY_FLUSH_BUFFER
-#undef yy_set_bol
-#undef yy_new_buffer
-#undef yy_set_interactive
-#undef YY_DO_BEFORE_ACTION
-
-#ifdef YY_DECL_IS_OURS
-#undef YY_DECL_IS_OURS
-#undef YY_DECL
-#endif
-
-#ifndef yy_create_buffer_ALREADY_DEFINED
-#undef yy_create_buffer
-#endif
-#ifndef yy_delete_buffer_ALREADY_DEFINED
-#undef yy_delete_buffer
-#endif
-#ifndef yy_scan_buffer_ALREADY_DEFINED
-#undef yy_scan_buffer
-#endif
-#ifndef yy_scan_string_ALREADY_DEFINED
-#undef yy_scan_string
-#endif
-#ifndef yy_scan_bytes_ALREADY_DEFINED
-#undef yy_scan_bytes
-#endif
-#ifndef yy_init_buffer_ALREADY_DEFINED
-#undef yy_init_buffer
-#endif
-#ifndef yy_flush_buffer_ALREADY_DEFINED
-#undef yy_flush_buffer
-#endif
-#ifndef yy_load_buffer_state_ALREADY_DEFINED
-#undef yy_load_buffer_state
-#endif
-#ifndef yy_switch_to_buffer_ALREADY_DEFINED
-#undef yy_switch_to_buffer
-#endif
-#ifndef yypush_buffer_state_ALREADY_DEFINED
-#undef yypush_buffer_state
-#endif
-#ifndef yypop_buffer_state_ALREADY_DEFINED
-#undef yypop_buffer_state
-#endif
-#ifndef yyensure_buffer_stack_ALREADY_DEFINED
-#undef yyensure_buffer_stack
-#endif
-#ifndef yylex_ALREADY_DEFINED
-#undef yylex
-#endif
-#ifndef yyrestart_ALREADY_DEFINED
-#undef yyrestart
-#endif
-#ifndef yylex_init_ALREADY_DEFINED
-#undef yylex_init
-#endif
-#ifndef yylex_init_extra_ALREADY_DEFINED
-#undef yylex_init_extra
-#endif
-#ifndef yylex_destroy_ALREADY_DEFINED
-#undef yylex_destroy
-#endif
-#ifndef yyget_debug_ALREADY_DEFINED
-#undef yyget_debug
-#endif
-#ifndef yyset_debug_ALREADY_DEFINED
-#undef yyset_debug
-#endif
-#ifndef yyget_extra_ALREADY_DEFINED
-#undef yyget_extra
-#endif
-#ifndef yyset_extra_ALREADY_DEFINED
-#undef yyset_extra
-#endif
-#ifndef yyget_in_ALREADY_DEFINED
-#undef yyget_in
-#endif
-#ifndef yyset_in_ALREADY_DEFINED
-#undef yyset_in
-#endif
-#ifndef yyget_out_ALREADY_DEFINED
-#undef yyget_out
-#endif
-#ifndef yyset_out_ALREADY_DEFINED
-#undef yyset_out
-#endif
-#ifndef yyget_leng_ALREADY_DEFINED
-#undef yyget_leng
-#endif
-#ifndef yyget_text_ALREADY_DEFINED
-#undef yyget_text
-#endif
-#ifndef yyget_lineno_ALREADY_DEFINED
-#undef yyget_lineno
-#endif
-#ifndef yyset_lineno_ALREADY_DEFINED
-#undef yyset_lineno
-#endif
-#ifndef yyget_column_ALREADY_DEFINED
-#undef yyget_column
-#endif
-#ifndef yyset_column_ALREADY_DEFINED
-#undef yyset_column
-#endif
-#ifndef yywrap_ALREADY_DEFINED
-#undef yywrap
-#endif
-#ifndef yyget_lval_ALREADY_DEFINED
-#undef yyget_lval
-#endif
-#ifndef yyset_lval_ALREADY_DEFINED
-#undef yyset_lval
-#endif
-#ifndef yyget_lloc_ALREADY_DEFINED
-#undef yyget_lloc
-#endif
-#ifndef yyset_lloc_ALREADY_DEFINED
-#undef yyset_lloc
-#endif
-#ifndef yyalloc_ALREADY_DEFINED
-#undef yyalloc
-#endif
-#ifndef yyrealloc_ALREADY_DEFINED
-#undef yyrealloc
-#endif
-#ifndef yyfree_ALREADY_DEFINED
-#undef yyfree
-#endif
-#ifndef yytext_ALREADY_DEFINED
-#undef yytext
-#endif
-#ifndef yyleng_ALREADY_DEFINED
-#undef yyleng
-#endif
-#ifndef yyin_ALREADY_DEFINED
-#undef yyin
-#endif
-#ifndef yyout_ALREADY_DEFINED
-#undef yyout
-#endif
-#ifndef yy_flex_debug_ALREADY_DEFINED
-#undef yy_flex_debug
-#endif
-#ifndef yylineno_ALREADY_DEFINED
-#undef yylineno
-#endif
-#ifndef yytables_fload_ALREADY_DEFINED
-#undef yytables_fload
-#endif
-#ifndef yytables_destroy_ALREADY_DEFINED
-#undef yytables_destroy
-#endif
-#ifndef yyTABLES_NAME_ALREADY_DEFINED
-#undef yyTABLES_NAME
-#endif
-
-#line 199 "src/libexpr/lexer.l"
-
-
-#line 527 "src/libexpr/lexer-tab.hh"
-#undef yyIN_HEADER
-#endif /* yyHEADER_H */
--- nix-1.11.15.orig/src/libexpr/parser-tab.cc
+++ /dev/null
@@ -1,3721 +0,0 @@
-/* A Bison parser, made by GNU Bison 3.0.4.  */
-
-/* Skeleton implementation for Bison GLR parsers in C
-
-   Copyright (C) 2002-2015 Free Software Foundation, Inc.
-
-   This program is free software: you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation, either version 3 of the License, or
-   (at your option) any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
-
-/* As a special exception, you may create a larger work that contains
-   part or all of the Bison parser skeleton and distribute that work
-   under terms of your choice, so long as that work isn't itself a
-   parser generator using the skeleton or a modified version thereof
-   as a parser skeleton.  Alternatively, if you modify or redistribute
-   the parser skeleton itself, you may (at your option) remove this
-   special exception, which will cause the skeleton and the resulting
-   Bison output files to be licensed under the GNU General Public
-   License without this special exception.
-
-   This special exception was added by the Free Software Foundation in
-   version 2.2 of Bison.  */
-
-/* C GLR parser skeleton written by Paul Hilfinger.  */
-
-/* Identify Bison output.  */
-#define YYBISON 1
-
-/* Bison version.  */
-#define YYBISON_VERSION "3.0.4"
-
-/* Skeleton name.  */
-#define YYSKELETON_NAME "glr.c"
-
-/* Pure parsers.  */
-#define YYPURE 1
-
-
-
-
-
-
-/* First part of user declarations.  */
-#line 51 "src/libexpr/parser.y" /* glr.c:240  */
-
-
-#include "parser-tab.hh"
-#include "lexer-tab.hh"
-
-YY_DECL;
-
-using namespace nix;
-
-
-namespace nix {
-
-
-static void dupAttr(const AttrPath & attrPath, const Pos & pos, const Pos & prevPos)
-{
-    throw ParseError(format("attribute ‘%1%’ at %2% already defined at %3%")
-        % showAttrPath(attrPath) % pos % prevPos);
-}
-
-
-static void dupAttr(Symbol attr, const Pos & pos, const Pos & prevPos)
-{
-    throw ParseError(format("attribute ‘%1%’ at %2% already defined at %3%")
-        % attr % pos % prevPos);
-}
-
-
-static void addAttr(ExprAttrs * attrs, AttrPath & attrPath,
-    Expr * e, const Pos & pos)
-{
-    AttrPath::iterator i;
-    // All attrpaths have at least one attr
-    assert(!attrPath.empty());
-    for (i = attrPath.begin(); i + 1 < attrPath.end(); i++) {
-        if (i->symbol.set()) {
-            ExprAttrs::AttrDefs::iterator j = attrs->attrs.find(i->symbol);
-            if (j != attrs->attrs.end()) {
-                if (!j->second.inherited) {
-                    ExprAttrs * attrs2 = dynamic_cast<ExprAttrs *>(j->second.e);
-                    if (!attrs2) dupAttr(attrPath, pos, j->second.pos);
-                    attrs = attrs2;
-                } else
-                    dupAttr(attrPath, pos, j->second.pos);
-            } else {
-                ExprAttrs * nested = new ExprAttrs;
-                attrs->attrs[i->symbol] = ExprAttrs::AttrDef(nested, pos);
-                attrs = nested;
-            }
-        } else {
-            ExprAttrs *nested = new ExprAttrs;
-            attrs->dynamicAttrs.push_back(ExprAttrs::DynamicAttrDef(i->expr, nested, pos));
-            attrs = nested;
-        }
-    }
-    if (i->symbol.set()) {
-        ExprAttrs::AttrDefs::iterator j = attrs->attrs.find(i->symbol);
-        if (j != attrs->attrs.end()) {
-            dupAttr(attrPath, pos, j->second.pos);
-        } else {
-            attrs->attrs[i->symbol] = ExprAttrs::AttrDef(e, pos);
-            e->setName(i->symbol);
-        }
-    } else {
-        attrs->dynamicAttrs.push_back(ExprAttrs::DynamicAttrDef(i->expr, e, pos));
-    }
-}
-
-
-static void addFormal(const Pos & pos, Formals * formals, const Formal & formal)
-{
-    if (formals->argNames.find(formal.name) != formals->argNames.end())
-        throw ParseError(format("duplicate formal function argument ‘%1%’ at %2%")
-            % formal.name % pos);
-    formals->formals.push_front(formal);
-    formals->argNames.insert(formal.name);
-}
-
-
-static Expr * stripIndentation(const Pos & pos, SymbolTable & symbols, vector<Expr *> & es)
-{
-    if (es.empty()) return new ExprString(symbols.create(""));
-
-    /* Figure out the minimum indentation.  Note that by design
-       whitespace-only final lines are not taken into account.  (So
-       the " " in "\n ''" is ignored, but the " " in "\n foo''" is.) */
-    bool atStartOfLine = true; /* = seen only whitespace in the current line */
-    unsigned int minIndent = 1000000;
-    unsigned int curIndent = 0;
-    for (auto & i : es) {
-        ExprIndStr * e = dynamic_cast<ExprIndStr *>(i);
-        if (!e) {
-            /* Anti-quotations end the current start-of-line whitespace. */
-            if (atStartOfLine) {
-                atStartOfLine = false;
-                if (curIndent < minIndent) minIndent = curIndent;
-            }
-            continue;
-        }
-        for (unsigned int j = 0; j < e->s.size(); ++j) {
-            if (atStartOfLine) {
-                if (e->s[j] == ' ')
-                    curIndent++;
-                else if (e->s[j] == '\n') {
-                    /* Empty line, doesn't influence minimum
-                       indentation. */
-                    curIndent = 0;
-                } else {
-                    atStartOfLine = false;
-                    if (curIndent < minIndent) minIndent = curIndent;
-                }
-            } else if (e->s[j] == '\n') {
-                atStartOfLine = true;
-                curIndent = 0;
-            }
-        }
-    }
-
-    /* Strip spaces from each line. */
-    vector<Expr *> * es2 = new vector<Expr *>;
-    atStartOfLine = true;
-    unsigned int curDropped = 0;
-    unsigned int n = es.size();
-    for (vector<Expr *>::iterator i = es.begin(); i != es.end(); ++i, --n) {
-        ExprIndStr * e = dynamic_cast<ExprIndStr *>(*i);
-        if (!e) {
-            atStartOfLine = false;
-            curDropped = 0;
-            es2->push_back(*i);
-            continue;
-        }
-
-        string s2;
-        for (unsigned int j = 0; j < e->s.size(); ++j) {
-            if (atStartOfLine) {
-                if (e->s[j] == ' ') {
-                    if (curDropped++ >= minIndent)
-                        s2 += e->s[j];
-                }
-                else if (e->s[j] == '\n') {
-                    curDropped = 0;
-                    s2 += e->s[j];
-                } else {
-                    atStartOfLine = false;
-                    curDropped = 0;
-                    s2 += e->s[j];
-                }
-            } else {
-                s2 += e->s[j];
-                if (e->s[j] == '\n') atStartOfLine = true;
-            }
-        }
-
-        /* Remove the last line if it is empty and consists only of
-           spaces. */
-        if (n == 1) {
-            string::size_type p = s2.find_last_of('\n');
-            if (p != string::npos && s2.find_first_not_of(' ', p + 1) == string::npos)
-                s2 = string(s2, 0, p + 1);
-        }
-
-        es2->push_back(new ExprString(symbols.create(s2)));
-    }
-
-    /* If this is a single string, then don't do a concatenation. */
-    return es2->size() == 1 && dynamic_cast<ExprString *>((*es2)[0]) ? (*es2)[0] : new ExprConcatStrings(pos, true, es2);
-}
-
-
-static inline Pos makeCurPos(const YYLTYPE & loc, ParseData * data)
-{
-    return Pos(data->path, loc.first_line, loc.first_column);
-}
-
-#define CUR_POS makeCurPos(*yylocp, data)
-
-
-}
-
-
-void yyerror(YYLTYPE * loc, yyscan_t scanner, ParseData * data, const char * error)
-{
-    data->error = (format("%1%, at %2%")
-        % error % makeCurPos(*loc, data)).str();
-}
-
-
-
-#line 242 "src/libexpr/parser-tab.cc" /* glr.c:240  */
-
-# ifndef YY_NULLPTR
-#  if defined __cplusplus && 201103L <= __cplusplus
-#   define YY_NULLPTR nullptr
-#  else
-#   define YY_NULLPTR 0
-#  endif
-# endif
-
-#include "parser-tab.hh"
-
-/* Enabling verbose error messages.  */
-#ifdef YYERROR_VERBOSE
-# undef YYERROR_VERBOSE
-# define YYERROR_VERBOSE 1
-#else
-# define YYERROR_VERBOSE 1
-#endif
-
-/* Default (constant) value used for initialization for null
-   right-hand sides.  Unlike the standard yacc.c template, here we set
-   the default value of $$ to a zeroed-out value.  Since the default
-   value is undefined, this behavior is technically correct.  */
-static YYSTYPE yyval_default;
-static YYLTYPE yyloc_default
-# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
-  = { 1, 1, 1, 1 }
-# endif
-;
-
-/* Copy the second part of user declarations.  */
-
-#line 275 "src/libexpr/parser-tab.cc" /* glr.c:263  */
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-
-#ifndef YY_
-# if defined YYENABLE_NLS && YYENABLE_NLS
-#  if ENABLE_NLS
-#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
-#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
-#  endif
-# endif
-# ifndef YY_
-#  define YY_(Msgid) Msgid
-# endif
-#endif
-
-#ifndef YYFREE
-# define YYFREE free
-#endif
-#ifndef YYMALLOC
-# define YYMALLOC malloc
-#endif
-#ifndef YYREALLOC
-# define YYREALLOC realloc
-#endif
-
-#define YYSIZEMAX ((size_t) -1)
-
-#ifdef __cplusplus
-   typedef bool yybool;
-#else
-   typedef unsigned char yybool;
-#endif
-#define yytrue 1
-#define yyfalse 0
-
-#ifndef YYSETJMP
-# include <setjmp.h>
-# define YYJMP_BUF jmp_buf
-# define YYSETJMP(Env) setjmp (Env)
-/* Pacify clang.  */
-# define YYLONGJMP(Env, Val) (longjmp (Env, Val), YYASSERT (0))
-#endif
-
-#ifndef YY_ATTRIBUTE
-# if (defined __GNUC__                                               \
-      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
-     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
-#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
-# else
-#  define YY_ATTRIBUTE(Spec) /* empty */
-# endif
-#endif
-
-#ifndef YY_ATTRIBUTE_PURE
-# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
-#endif
-
-#ifndef YY_ATTRIBUTE_UNUSED
-# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
-#endif
-
-#if !defined _Noreturn \
-     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
-# if defined _MSC_VER && 1200 <= _MSC_VER
-#  define _Noreturn __declspec (noreturn)
-# else
-#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
-# endif
-#endif
-
-/* Suppress unused-variable warnings by "using" E.  */
-#if ! defined lint || defined __GNUC__
-# define YYUSE(E) ((void) (E))
-#else
-# define YYUSE(E) /* empty */
-#endif
-
-#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
-/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
-# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
-    _Pragma ("GCC diagnostic push") \
-    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
-    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
-# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
-    _Pragma ("GCC diagnostic pop")
-#else
-# define YY_INITIAL_VALUE(Value) Value
-#endif
-#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
-# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
-# define YY_IGNORE_MAYBE_UNINITIALIZED_END
-#endif
-#ifndef YY_INITIAL_VALUE
-# define YY_INITIAL_VALUE(Value) /* Nothing. */
-#endif
-
-
-#ifndef YYASSERT
-# define YYASSERT(Condition) ((void) ((Condition) || (abort (), 0)))
-#endif
-
-/* YYFINAL -- State number of the termination state.  */
-#define YYFINAL  52
-/* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   332
-
-/* YYNTOKENS -- Number of terminals.  */
-#define YYNTOKENS  58
-/* YYNNTS -- Number of nonterminals.  */
-#define YYNNTS  20
-/* YYNRULES -- Number of rules.  */
-#define YYNRULES  84
-/* YYNRULES -- Number of states.  */
-#define YYNSTATES  168
-/* YYMAXRHS -- Maximum number of symbols on right-hand side of rule.  */
-#define YYMAXRHS 7
-/* YYMAXLEFT -- Maximum number of symbols to the left of a handle
-   accessed by $0, $-1, etc., in any rule.  */
-#define YYMAXLEFT 0
-
-/* YYTRANSLATE(X) -- Bison symbol number corresponding to X.  */
-#define YYUNDEFTOK  2
-#define YYMAXUTOK   291
-
-#define YYTRANSLATE(YYX)                                                \
-  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
-
-/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
-static const unsigned char yytranslate[] =
-{
-       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,    49,    51,     2,     2,     2,     2,     2,
-      52,    53,    39,    37,    57,    38,    50,    40,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,    44,    48,
-      31,    56,    32,    42,    47,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,    54,     2,    55,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,    45,     2,    46,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
-       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    33,    34,    35,    36,
-      41,    43
-};
-
-#if YYDEBUG
-/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
-static const unsigned short int yyrline[] =
-{
-       0,   289,   289,   291,   294,   296,   298,   300,   302,   304,
-     306,   312,   316,   317,   321,   322,   323,   324,   325,   326,
-     327,   328,   329,   330,   331,   332,   333,   334,   336,   337,
-     338,   339,   340,   344,   346,   350,   352,   356,   358,   362,
-     368,   369,   370,   373,   374,   375,   382,   383,   386,   388,
-     390,   392,   396,   397,   398,   402,   403,   404,   405,   413,
-     414,   415,   419,   420,   429,   438,   442,   443,   453,   457,
-     458,   467,   468,   480,   481,   485,   486,   490,   491,   495,
-     497,   500,   501,   506,   507
-};
-#endif
-
-#if YYDEBUG || YYERROR_VERBOSE || 1
-/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
-   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
-static const char *const yytname[] =
-{
-  "$end", "error", "$undefined", "ID", "ATTRPATH", "STR", "IND_STR",
-  "INT", "PATH", "HPATH", "SPATH", "URI", "IF", "THEN", "ELSE", "ASSERT",
-  "WITH", "LET", "IN", "REC", "INHERIT", "EQ", "NEQ", "AND", "OR", "IMPL",
-  "OR_KW", "DOLLAR_CURLY", "IND_STRING_OPEN", "IND_STRING_CLOSE",
-  "ELLIPSIS", "'<'", "'>'", "LEQ", "GEQ", "UPDATE", "NOT", "'+'", "'-'",
-  "'*'", "'/'", "CONCAT", "'?'", "NEGATE", "':'", "'{'", "'}'", "'@'",
-  "';'", "'!'", "'.'", "'\"'", "'('", "')'", "'['", "']'", "'='", "','",
-  "$accept", "start", "expr", "expr_function", "expr_if", "expr_op",
-  "expr_app", "expr_select", "expr_simple", "string_parts",
-  "string_parts_interpolated", "ind_string_parts", "binds", "attrs",
-  "attrpath", "attr", "string_attr", "expr_list", "formals", "formal", YY_NULLPTR
-};
-#endif
-
-#define YYPACT_NINF -123
-#define YYTABLE_NINF -66
-
-  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
-     STATE-NUM.  */
-static const short int yypact[] =
-{
-     134,    26,  -123,  -123,  -123,  -123,  -123,   134,   134,   134,
-     -33,   -25,  -123,   149,     4,   149,    60,   134,  -123,    49,
-    -123,  -123,  -123,   201,   199,  -123,   -13,   134,   -23,    48,
-      28,    30,  -123,     6,  -123,    52,  -123,   -33,  -123,  -123,
-      32,  -123,    18,    34,    36,   233,    85,   134,    69,    86,
-      79,     8,  -123,   149,   149,   149,   149,   149,   149,   149,
-     149,   149,   149,   149,   149,   149,   149,   149,   170,  -123,
-    -123,   170,  -123,    11,   134,   134,   134,    63,  -123,   134,
-      70,  -123,   134,    60,   -21,  -123,  -123,   144,  -123,   134,
-    -123,   134,  -123,   131,    11,   134,    87,  -123,  -123,   134,
-    -123,  -123,  -123,   268,   268,   290,   246,   224,    88,    88,
-      88,    88,    88,    76,    76,    44,    44,    44,    84,    22,
-      92,   126,  -123,  -123,  -123,  -123,   134,    20,   102,   103,
-     170,   134,  -123,   109,  -123,   134,   158,  -123,   117,  -123,
-     119,   199,   123,   134,   121,  -123,  -123,  -123,  -123,  -123,
-    -123,  -123,   128,  -123,  -123,   136,  -123,  -123,  -123,   134,
-    -123,  -123,  -123,   134,  -123,   166,  -123,  -123
-};
-
-  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
-     Performed when YYTABLE does not specify something else to do.  Zero
-     means the default is an error.  */
-static const unsigned char yydefact[] =
-{
-       0,    39,    40,    43,    44,    45,    46,     0,     0,     0,
-      65,     0,    61,     0,    65,     0,    54,     0,    78,     0,
-       2,     3,    11,    13,    32,    34,    38,     0,     0,     0,
-       0,     0,    65,     0,    65,     0,    39,     0,    65,    15,
-      83,    82,     0,     0,    80,    14,    52,     0,     0,    53,
-       0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    33,
-      37,     0,     4,    81,     0,     0,     0,     0,    73,     0,
-      68,    74,     0,    54,     0,    71,    72,     0,    59,     0,
-      42,     0,    50,     0,    81,     0,     0,    41,    55,     0,
-      47,    51,    77,    16,    17,    22,    23,    24,    18,    20,
-      19,    21,    25,    27,    28,    29,    30,    31,    26,    35,
-       0,     0,     8,     9,    48,    10,     0,     0,     0,     0,
-       0,     0,    49,     0,    84,     0,     0,    79,     0,    57,
-       0,     0,     0,     0,     0,    63,    66,    67,    76,    75,
-      69,    70,     0,    60,     5,     0,    58,    56,    36,     0,
-      12,    68,    62,     0,     7,     0,     6,    64
-};
-
-  /* YYPGOTO[NTERM-NUM].  */
-static const signed char yypgoto[] =
-{
-    -123,  -123,    -7,   -24,  -123,    41,  -123,   -20,  -123,    99,
-    -123,  -123,    -4,    38,   113,  -122,   -88,  -123,    37,  -123
-};
-
-  /* YYDEFGOTO[NTERM-NUM].  */
-static const signed char yydefgoto[] =
-{
-      -1,    19,    20,    21,    22,    23,    24,    25,    26,    48,
-      49,    35,    42,   127,    84,    85,    86,    51,    43,    44
-};
-
-  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
-     positive, shift that token.  If negative, reduce the rule whose
-     number is the opposite.  If YYTABLE_NINF, syntax error.  */
-static const short int yytable[] =
-{
-      29,    30,    31,    72,    69,   146,    33,    40,   150,    78,
-      50,    36,    32,    70,    40,     2,     3,     4,     5,     6,
-      34,    78,    73,    78,    79,    37,    80,    11,    77,   130,
-      87,   102,    81,    82,    41,   131,    12,    71,    80,   147,
-      96,    41,   151,   146,    81,    82,    81,    82,   141,    52,
-     -65,   122,   123,    38,    39,   125,    45,    83,    88,    16,
-      17,    74,    18,   101,    92,    46,    78,   121,   145,    83,
-      27,    83,   130,    28,    91,   128,    75,   147,    76,    89,
-      93,    90,   133,    80,   134,    67,    68,    47,   138,    81,
-      82,    98,   140,    94,   103,   104,   105,   106,   107,   108,
-     109,   110,   111,   112,   113,   114,   115,   116,   117,   124,
-     120,   154,    95,    99,    83,    65,    66,    67,    68,   144,
-      97,   158,   126,    62,   152,    63,    64,    65,    66,    67,
-      68,   137,   100,   139,   130,   164,   160,     1,   142,   166,
-     143,     2,     3,     4,     5,     6,     7,    78,   148,     8,
-       9,    10,    36,    11,   149,   153,     2,     3,     4,     5,
-       6,   155,    12,   156,    80,   157,    37,   159,    11,    78,
-      81,    82,    13,    78,   161,   135,   162,    12,   136,    14,
-     163,   118,   129,    15,   119,    16,    17,    13,    18,     0,
-     132,     0,    81,    82,    38,    83,    81,    82,    15,   165,
-      16,    17,    36,    18,     0,     0,     2,     3,     4,     5,
-       6,     0,     0,     0,   167,     0,    37,    83,    11,     0,
-       0,    83,    53,    54,    55,    56,    57,    12,     0,     0,
-       0,     0,    58,    59,    60,    61,    62,     0,    63,    64,
-      65,    66,    67,    68,    38,    53,    54,    55,    56,   -66,
-      16,    17,     0,    18,     0,    58,    59,    60,    61,    62,
-       0,    63,    64,    65,    66,    67,    68,    53,    54,    55,
-      63,    64,    65,    66,    67,    68,     0,    58,    59,    60,
-      61,    62,     0,    63,    64,    65,    66,    67,    68,   -66,
-     -66,     0,     0,     0,     0,     0,     0,     0,     0,    58,
-      59,    60,    61,    62,     0,    63,    64,    65,    66,    67,
-      68,    53,    54,     0,     0,     0,     0,     0,     0,     0,
-       0,    58,    59,    60,    61,    62,     0,    63,    64,    65,
-      66,    67,    68
-};
-
-static const short int yycheck[] =
-{
-       7,     8,     9,    27,    24,   127,    10,     3,   130,     3,
-      17,     3,    45,    26,     3,     7,     8,     9,    10,    11,
-      45,     3,    45,     3,    18,    17,    20,    19,    32,    50,
-      34,    51,    26,    27,    30,    56,    28,    50,    20,   127,
-      47,    30,   130,   165,    26,    27,    26,    27,    26,     0,
-      46,    75,    76,    45,    13,    79,    15,    51,     6,    51,
-      52,    13,    54,    55,    46,     5,     3,    74,    48,    51,
-      44,    51,    50,    47,    42,    82,    48,   165,    48,    27,
-      46,    29,    89,    20,    91,    41,    42,    27,    95,    26,
-      27,     5,    99,    57,    53,    54,    55,    56,    57,    58,
-      59,    60,    61,    62,    63,    64,    65,    66,    67,    46,
-      73,   135,    27,    27,    51,    39,    40,    41,    42,   126,
-      51,   141,    52,    35,   131,    37,    38,    39,    40,    41,
-      42,    94,    53,    46,    50,   159,   143,     3,    46,   163,
-      14,     7,     8,     9,    10,    11,    12,     3,    46,    15,
-      16,    17,     3,    19,    51,    46,     7,     8,     9,    10,
-      11,     3,    28,    46,    20,    46,    17,    44,    19,     3,
-      26,    27,    38,     3,    53,    44,    48,    28,    47,    45,
-      44,    68,    83,    49,    71,    51,    52,    38,    54,    -1,
-      46,    -1,    26,    27,    45,    51,    26,    27,    49,   161,
-      51,    52,     3,    54,    -1,    -1,     7,     8,     9,    10,
-      11,    -1,    -1,    -1,    48,    -1,    17,    51,    19,    -1,
-      -1,    51,    21,    22,    23,    24,    25,    28,    -1,    -1,
-      -1,    -1,    31,    32,    33,    34,    35,    -1,    37,    38,
-      39,    40,    41,    42,    45,    21,    22,    23,    24,    25,
-      51,    52,    -1,    54,    -1,    31,    32,    33,    34,    35,
-      -1,    37,    38,    39,    40,    41,    42,    21,    22,    23,
-      37,    38,    39,    40,    41,    42,    -1,    31,    32,    33,
-      34,    35,    -1,    37,    38,    39,    40,    41,    42,    21,
-      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
-      32,    33,    34,    35,    -1,    37,    38,    39,    40,    41,
-      42,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    31,    32,    33,    34,    35,    -1,    37,    38,    39,
-      40,    41,    42
-};
-
-  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
-     symbol of state STATE-NUM.  */
-static const unsigned char yystos[] =
-{
-       0,     3,     7,     8,     9,    10,    11,    12,    15,    16,
-      17,    19,    28,    38,    45,    49,    51,    52,    54,    59,
-      60,    61,    62,    63,    64,    65,    66,    44,    47,    60,
-      60,    60,    45,    70,    45,    69,     3,    17,    45,    63,
-       3,    30,    70,    76,    77,    63,     5,    27,    67,    68,
-      60,    75,     0,    21,    22,    23,    24,    25,    31,    32,
-      33,    34,    35,    37,    38,    39,    40,    41,    42,    65,
-      26,    50,    61,    45,    13,    48,    48,    70,     3,    18,
-      20,    26,    27,    51,    72,    73,    74,    70,     6,    27,
-      29,    42,    46,    46,    57,    27,    60,    51,     5,    27,
-      53,    55,    65,    63,    63,    63,    63,    63,    63,    63,
-      63,    63,    63,    63,    63,    63,    63,    63,    72,    72,
-      76,    60,    61,    61,    46,    61,    52,    71,    60,    67,
-      50,    56,    46,    60,    60,    44,    47,    76,    60,    46,
-      60,    26,    46,    14,    60,    48,    73,    74,    46,    51,
-      73,    74,    60,    46,    61,     3,    46,    46,    65,    44,
-      60,    53,    48,    44,    61,    71,    61,    48
-};
-
-  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
-static const unsigned char yyr1[] =
-{
-       0,    58,    59,    60,    61,    61,    61,    61,    61,    61,
-      61,    61,    62,    62,    63,    63,    63,    63,    63,    63,
-      63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
-      63,    63,    63,    64,    64,    65,    65,    65,    65,    66,
-      66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
-      66,    66,    67,    67,    67,    68,    68,    68,    68,    69,
-      69,    69,    70,    70,    70,    70,    71,    71,    71,    72,
-      72,    72,    72,    73,    73,    74,    74,    75,    75,    76,
-      76,    76,    76,    77,    77
-};
-
-  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
-static const unsigned char yyr2[] =
-{
-       0,     2,     1,     1,     3,     5,     7,     7,     4,     4,
-       4,     1,     6,     1,     2,     2,     3,     3,     3,     3,
-       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
-       3,     3,     1,     2,     1,     3,     5,     2,     1,     1,
-       1,     3,     3,     1,     1,     1,     1,     3,     4,     4,
-       3,     3,     1,     1,     0,     2,     4,     3,     4,     2,
-       4,     0,     5,     4,     7,     0,     2,     2,     0,     3,
-       3,     1,     1,     1,     1,     3,     3,     2,     0,     3,
-       1,     0,     1,     1,     3
-};
-
-
-/* YYDPREC[RULE-NUM] -- Dynamic precedence of rule #RULE-NUM (0 if none).  */
-static const unsigned char yydprec[] =
-{
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0
-};
-
-/* YYMERGER[RULE-NUM] -- Index of merging function for rule #RULE-NUM.  */
-static const unsigned char yymerger[] =
-{
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0
-};
-
-/* YYIMMEDIATE[RULE-NUM] -- True iff rule #RULE-NUM is not to be deferred, as
-   in the case of predicates.  */
-static const yybool yyimmediate[] =
-{
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0
-};
-
-/* YYCONFLP[YYPACT[STATE-NUM]] -- Pointer into YYCONFL of start of
-   list of conflicting reductions corresponding to action entry for
-   state STATE-NUM in yytable.  0 means no conflicts.  The list in
-   yyconfl is terminated by a rule number of 0.  */
-static const unsigned char yyconflp[] =
-{
-       0,     0,     0,     0,     0,     0,     0,     1,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       3,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0
-};
-
-/* YYCONFL[I] -- lists of conflicting rule numbers, each terminated by
-   0, pointed into by YYCONFLP.  */
-static const short int yyconfl[] =
-{
-       0,    65,     0,    81,     0
-};
-
-/* Error token number */
-#define YYTERROR 1
-
-
-/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
-   If N is 0, then set CURRENT to the empty location which ends
-   the previous symbol: RHS[0] (always defined).  */
-
-#ifndef YYLLOC_DEFAULT
-# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
-    do                                                                  \
-      if (N)                                                            \
-        {                                                               \
-          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
-          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
-          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
-          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
-        }                                                               \
-      else                                                              \
-        {                                                               \
-          (Current).first_line   = (Current).last_line   =              \
-            YYRHSLOC (Rhs, 0).last_line;                                \
-          (Current).first_column = (Current).last_column =              \
-            YYRHSLOC (Rhs, 0).last_column;                              \
-        }                                                               \
-    while (0)
-#endif
-
-# define YYRHSLOC(Rhs, K) ((Rhs)[K].yystate.yyloc)
-
-
-
-#undef yynerrs
-#define yynerrs (yystackp->yyerrcnt)
-#undef yychar
-#define yychar (yystackp->yyrawchar)
-#undef yylval
-#define yylval (yystackp->yyval)
-#undef yylloc
-#define yylloc (yystackp->yyloc)
-
-
-static const int YYEOF = 0;
-static const int YYEMPTY = -2;
-
-typedef enum { yyok, yyaccept, yyabort, yyerr } YYRESULTTAG;
-
-#define YYCHK(YYE)                              \
-  do {                                          \
-    YYRESULTTAG yychk_flag = YYE;               \
-    if (yychk_flag != yyok)                     \
-      return yychk_flag;                        \
-  } while (0)
-
-#if YYDEBUG
-
-# ifndef YYFPRINTF
-#  define YYFPRINTF fprintf
-# endif
-
-
-/* YY_LOCATION_PRINT -- Print the location on the stream.
-   This macro was not mandated originally: define only if we know
-   we won't break user code: when these are the locations we know.  */
-
-#ifndef YY_LOCATION_PRINT
-# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
-
-/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */
-
-YY_ATTRIBUTE_UNUSED
-static unsigned
-yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
-{
-  unsigned res = 0;
-  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
-  if (0 <= yylocp->first_line)
-    {
-      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
-      if (0 <= yylocp->first_column)
-        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
-    }
-  if (0 <= yylocp->last_line)
-    {
-      if (yylocp->first_line < yylocp->last_line)
-        {
-          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
-          if (0 <= end_col)
-            res += YYFPRINTF (yyo, ".%d", end_col);
-        }
-      else if (0 <= end_col && yylocp->first_column < end_col)
-        res += YYFPRINTF (yyo, "-%d", end_col);
-    }
-  return res;
- }
-
-#  define YY_LOCATION_PRINT(File, Loc)          \
-  yy_location_print_ (File, &(Loc))
-
-# else
-#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
-# endif
-#endif
-
-
-# define YYDPRINTF(Args)                        \
-  do {                                          \
-    if (yydebug)                                \
-      YYFPRINTF Args;                           \
-  } while (0)
-
-
-/*----------------------------------------.
-| Print this symbol's value on YYOUTPUT.  |
-`----------------------------------------*/
-
-static void
-yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, void * scanner, nix::ParseData * data)
-{
-  FILE *yyo = yyoutput;
-  YYUSE (yyo);
-  YYUSE (yylocationp);
-  YYUSE (scanner);
-  YYUSE (data);
-  if (!yyvaluep)
-    return;
-  YYUSE (yytype);
-}
-
-
-/*--------------------------------.
-| Print this symbol on YYOUTPUT.  |
-`--------------------------------*/
-
-static void
-yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, void * scanner, nix::ParseData * data)
-{
-  YYFPRINTF (yyoutput, "%s %s (",
-             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);
-
-  YY_LOCATION_PRINT (yyoutput, *yylocationp);
-  YYFPRINTF (yyoutput, ": ");
-  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, scanner, data);
-  YYFPRINTF (yyoutput, ")");
-}
-
-# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                  \
-  do {                                                                  \
-    if (yydebug)                                                        \
-      {                                                                 \
-        YYFPRINTF (stderr, "%s ", Title);                               \
-        yy_symbol_print (stderr, Type, Value, Location, scanner, data);        \
-        YYFPRINTF (stderr, "\n");                                       \
-      }                                                                 \
-  } while (0)
-
-/* Nonzero means print parse trace.  It is left uninitialized so that
-   multiple parsers can coexist.  */
-int yydebug;
-
-struct yyGLRStack;
-static void yypstack (struct yyGLRStack* yystackp, size_t yyk)
-  YY_ATTRIBUTE_UNUSED;
-static void yypdumpstack (struct yyGLRStack* yystackp)
-  YY_ATTRIBUTE_UNUSED;
-
-#else /* !YYDEBUG */
-
-# define YYDPRINTF(Args)
-# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
-
-#endif /* !YYDEBUG */
-
-/* YYINITDEPTH -- initial size of the parser's stacks.  */
-#ifndef YYINITDEPTH
-# define YYINITDEPTH 200
-#endif
-
-/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
-   if the built-in stack extension method is used).
-
-   Do not make this value too large; the results are undefined if
-   SIZE_MAX < YYMAXDEPTH * sizeof (GLRStackItem)
-   evaluated with infinite-precision integer arithmetic.  */
-
-#ifndef YYMAXDEPTH
-# define YYMAXDEPTH 10000
-#endif
-
-/* Minimum number of free items on the stack allowed after an
-   allocation.  This is to allow allocation and initialization
-   to be completed by functions that call yyexpandGLRStack before the
-   stack is expanded, thus insuring that all necessary pointers get
-   properly redirected to new data.  */
-#define YYHEADROOM 2
-
-#ifndef YYSTACKEXPANDABLE
-#  define YYSTACKEXPANDABLE 1
-#endif
-
-#if YYSTACKEXPANDABLE
-# define YY_RESERVE_GLRSTACK(Yystack)                   \
-  do {                                                  \
-    if (Yystack->yyspaceLeft < YYHEADROOM)              \
-      yyexpandGLRStack (Yystack);                       \
-  } while (0)
-#else
-# define YY_RESERVE_GLRSTACK(Yystack)                   \
-  do {                                                  \
-    if (Yystack->yyspaceLeft < YYHEADROOM)              \
-      yyMemoryExhausted (Yystack);                      \
-  } while (0)
-#endif
-
-
-#if YYERROR_VERBOSE
-
-# ifndef yystpcpy
-#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
-#   define yystpcpy stpcpy
-#  else
-/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
-   YYDEST.  */
-static char *
-yystpcpy (char *yydest, const char *yysrc)
-{
-  char *yyd = yydest;
-  const char *yys = yysrc;
-
-  while ((*yyd++ = *yys++) != '\0')
-    continue;
-
-  return yyd - 1;
-}
-#  endif
-# endif
-
-# ifndef yytnamerr
-/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
-   quotes and backslashes, so that it's suitable for yyerror.  The
-   heuristic is that double-quoting is unnecessary unless the string
-   contains an apostrophe, a comma, or backslash (other than
-   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
-   null, do not copy; instead, return the length of what the result
-   would have been.  */
-static size_t
-yytnamerr (char *yyres, const char *yystr)
-{
-  if (*yystr == '"')
-    {
-      size_t yyn = 0;
-      char const *yyp = yystr;
-
-      for (;;)
-        switch (*++yyp)
-          {
-          case '\'':
-          case ',':
-            goto do_not_strip_quotes;
-
-          case '\\':
-            if (*++yyp != '\\')
-              goto do_not_strip_quotes;
-            /* Fall through.  */
-          default:
-            if (yyres)
-              yyres[yyn] = *yyp;
-            yyn++;
-            break;
-
-          case '"':
-            if (yyres)
-              yyres[yyn] = '\0';
-            return yyn;
-          }
-    do_not_strip_quotes: ;
-    }
-
-  if (! yyres)
-    return strlen (yystr);
-
-  return yystpcpy (yyres, yystr) - yyres;
-}
-# endif
-
-#endif /* !YYERROR_VERBOSE */
-
-/** State numbers, as in LALR(1) machine */
-typedef int yyStateNum;
-
-/** Rule numbers, as in LALR(1) machine */
-typedef int yyRuleNum;
-
-/** Grammar symbol */
-typedef int yySymbol;
-
-/** Item references, as in LALR(1) machine */
-typedef short int yyItemNum;
-
-typedef struct yyGLRState yyGLRState;
-typedef struct yyGLRStateSet yyGLRStateSet;
-typedef struct yySemanticOption yySemanticOption;
-typedef union yyGLRStackItem yyGLRStackItem;
-typedef struct yyGLRStack yyGLRStack;
-
-struct yyGLRState {
-  /** Type tag: always true.  */
-  yybool yyisState;
-  /** Type tag for yysemantics.  If true, yysval applies, otherwise
-   *  yyfirstVal applies.  */
-  yybool yyresolved;
-  /** Number of corresponding LALR(1) machine state.  */
-  yyStateNum yylrState;
-  /** Preceding state in this stack */
-  yyGLRState* yypred;
-  /** Source position of the last token produced by my symbol */
-  size_t yyposn;
-  union {
-    /** First in a chain of alternative reductions producing the
-     *  non-terminal corresponding to this state, threaded through
-     *  yynext.  */
-    yySemanticOption* yyfirstVal;
-    /** Semantic value for this state.  */
-    YYSTYPE yysval;
-  } yysemantics;
-  /** Source location for this state.  */
-  YYLTYPE yyloc;
-};
-
-struct yyGLRStateSet {
-  yyGLRState** yystates;
-  /** During nondeterministic operation, yylookaheadNeeds tracks which
-   *  stacks have actually needed the current lookahead.  During deterministic
-   *  operation, yylookaheadNeeds[0] is not maintained since it would merely
-   *  duplicate yychar != YYEMPTY.  */
-  yybool* yylookaheadNeeds;
-  size_t yysize, yycapacity;
-};
-
-struct yySemanticOption {
-  /** Type tag: always false.  */
-  yybool yyisState;
-  /** Rule number for this reduction */
-  yyRuleNum yyrule;
-  /** The last RHS state in the list of states to be reduced.  */
-  yyGLRState* yystate;
-  /** The lookahead for this reduction.  */
-  int yyrawchar;
-  YYSTYPE yyval;
-  YYLTYPE yyloc;
-  /** Next sibling in chain of options.  To facilitate merging,
-   *  options are chained in decreasing order by address.  */
-  yySemanticOption* yynext;
-};
-
-/** Type of the items in the GLR stack.  The yyisState field
- *  indicates which item of the union is valid.  */
-union yyGLRStackItem {
-  yyGLRState yystate;
-  yySemanticOption yyoption;
-};
-
-struct yyGLRStack {
-  int yyerrState;
-  /* To compute the location of the error token.  */
-  yyGLRStackItem yyerror_range[3];
-
-  int yyerrcnt;
-  int yyrawchar;
-  YYSTYPE yyval;
-  YYLTYPE yyloc;
-
-  YYJMP_BUF yyexception_buffer;
-  yyGLRStackItem* yyitems;
-  yyGLRStackItem* yynextFree;
-  size_t yyspaceLeft;
-  yyGLRState* yysplitPoint;
-  yyGLRState* yylastDeleted;
-  yyGLRStateSet yytops;
-};
-
-#if YYSTACKEXPANDABLE
-static void yyexpandGLRStack (yyGLRStack* yystackp);
-#endif
-
-static _Noreturn void
-yyFail (yyGLRStack* yystackp, YYLTYPE *yylocp, void * scanner, nix::ParseData * data, const char* yymsg)
-{
-  if (yymsg != YY_NULLPTR)
-    yyerror (yylocp, scanner, data, yymsg);
-  YYLONGJMP (yystackp->yyexception_buffer, 1);
-}
-
-static _Noreturn void
-yyMemoryExhausted (yyGLRStack* yystackp)
-{
-  YYLONGJMP (yystackp->yyexception_buffer, 2);
-}
-
-#if YYDEBUG || YYERROR_VERBOSE
-/** A printable representation of TOKEN.  */
-static inline const char*
-yytokenName (yySymbol yytoken)
-{
-  if (yytoken == YYEMPTY)
-    return "";
-
-  return yytname[yytoken];
-}
-#endif
-
-/** Fill in YYVSP[YYLOW1 .. YYLOW0-1] from the chain of states starting
- *  at YYVSP[YYLOW0].yystate.yypred.  Leaves YYVSP[YYLOW1].yystate.yypred
- *  containing the pointer to the next state in the chain.  */
-static void yyfillin (yyGLRStackItem *, int, int) YY_ATTRIBUTE_UNUSED;
-static void
-yyfillin (yyGLRStackItem *yyvsp, int yylow0, int yylow1)
-{
-  int i;
-  yyGLRState *s = yyvsp[yylow0].yystate.yypred;
-  for (i = yylow0-1; i >= yylow1; i -= 1)
-    {
-#if YYDEBUG
-      yyvsp[i].yystate.yylrState = s->yylrState;
-#endif
-      yyvsp[i].yystate.yyresolved = s->yyresolved;
-      if (s->yyresolved)
-        yyvsp[i].yystate.yysemantics.yysval = s->yysemantics.yysval;
-      else
-        /* The effect of using yysval or yyloc (in an immediate rule) is
-         * undefined.  */
-        yyvsp[i].yystate.yysemantics.yyfirstVal = YY_NULLPTR;
-      yyvsp[i].yystate.yyloc = s->yyloc;
-      s = yyvsp[i].yystate.yypred = s->yypred;
-    }
-}
-
-/* Do nothing if YYNORMAL or if *YYLOW <= YYLOW1.  Otherwise, fill in
- * YYVSP[YYLOW1 .. *YYLOW-1] as in yyfillin and set *YYLOW = YYLOW1.
- * For convenience, always return YYLOW1.  */
-static inline int yyfill (yyGLRStackItem *, int *, int, yybool)
-     YY_ATTRIBUTE_UNUSED;
-static inline int
-yyfill (yyGLRStackItem *yyvsp, int *yylow, int yylow1, yybool yynormal)
-{
-  if (!yynormal && yylow1 < *yylow)
-    {
-      yyfillin (yyvsp, *yylow, yylow1);
-      *yylow = yylow1;
-    }
-  return yylow1;
-}
-
-/** Perform user action for rule number YYN, with RHS length YYRHSLEN,
- *  and top stack item YYVSP.  YYLVALP points to place to put semantic
- *  value ($$), and yylocp points to place for location information
- *  (@$).  Returns yyok for normal return, yyaccept for YYACCEPT,
- *  yyerr for YYERROR, yyabort for YYABORT.  */
-static YYRESULTTAG
-yyuserAction (yyRuleNum yyn, size_t yyrhslen, yyGLRStackItem* yyvsp,
-              yyGLRStack* yystackp,
-              YYSTYPE* yyvalp, YYLTYPE *yylocp, void * scanner, nix::ParseData * data)
-{
-  yybool yynormal YY_ATTRIBUTE_UNUSED = (yystackp->yysplitPoint == YY_NULLPTR);
-  int yylow;
-  YYUSE (yyvalp);
-  YYUSE (yylocp);
-  YYUSE (scanner);
-  YYUSE (data);
-  YYUSE (yyrhslen);
-# undef yyerrok
-# define yyerrok (yystackp->yyerrState = 0)
-# undef YYACCEPT
-# define YYACCEPT return yyaccept
-# undef YYABORT
-# define YYABORT return yyabort
-# undef YYERROR
-# define YYERROR return yyerrok, yyerr
-# undef YYRECOVERING
-# define YYRECOVERING() (yystackp->yyerrState != 0)
-# undef yyclearin
-# define yyclearin (yychar = YYEMPTY)
-# undef YYFILL
-# define YYFILL(N) yyfill (yyvsp, &yylow, N, yynormal)
-# undef YYBACKUP
-# define YYBACKUP(Token, Value)                                              \
-  return yyerror (yylocp, scanner, data, YY_("syntax error: cannot back up")),     \
-         yyerrok, yyerr
-
-  yylow = 1;
-  if (yyrhslen == 0)
-    *yyvalp = yyval_default;
-  else
-    *yyvalp = yyvsp[YYFILL (1-yyrhslen)].yystate.yysemantics.yysval;
-  YYLLOC_DEFAULT ((*yylocp), (yyvsp - yyrhslen), yyrhslen);
-  yystackp->yyerror_range[1].yystate.yyloc = *yylocp;
-
-  switch (yyn)
-    {
-        case 2:
-#line 289 "src/libexpr/parser.y" /* glr.c:816  */
-    { data->result = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e); }
-#line 1264 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 4:
-#line 295 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprLambda(CUR_POS, data->symbols.create((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.id)), false, 0, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1270 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 5:
-#line 297 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprLambda(CUR_POS, data->symbols.create(""), true, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.formals), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1276 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 6:
-#line 299 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprLambda(CUR_POS, data->symbols.create((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.id)), true, (((yyGLRStackItem const *)yyvsp)[YYFILL (-5)].yystate.yysemantics.yysval.formals), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1282 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 7:
-#line 301 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprLambda(CUR_POS, data->symbols.create((((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.id)), true, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.formals), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1288 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 8:
-#line 303 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprAssert(CUR_POS, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1294 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 9:
-#line 305 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprWith(CUR_POS, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1300 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 10:
-#line 307 "src/libexpr/parser.y" /* glr.c:816  */
-    { if (!(((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.attrs)->dynamicAttrs.empty())
-        throw ParseError(format("dynamic attributes not allowed in let at %1%")
-            % CUR_POS);
-      ((*yyvalp).e) = new ExprLet((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.attrs), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e));
-    }
-#line 1310 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 12:
-#line 316 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprIf((((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1316 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 14:
-#line 321 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprOpNot((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1322 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 15:
-#line 322 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprApp(CUR_POS, new ExprApp(new ExprVar(data->symbols.create("__sub")), new ExprInt(0)), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1328 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 16:
-#line 323 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprOpEq((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1334 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 17:
-#line 324 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprOpNEq((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1340 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 18:
-#line 325 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprApp(CUR_POS, new ExprApp(new ExprVar(data->symbols.create("__lessThan")), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e)), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1346 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 19:
-#line 326 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprOpNot(new ExprApp(CUR_POS, new ExprApp(new ExprVar(data->symbols.create("__lessThan")), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e))); }
-#line 1352 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 20:
-#line 327 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprApp(CUR_POS, new ExprApp(new ExprVar(data->symbols.create("__lessThan")), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e)); }
-#line 1358 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 21:
-#line 328 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprOpNot(new ExprApp(CUR_POS, new ExprApp(new ExprVar(data->symbols.create("__lessThan")), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e)), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e))); }
-#line 1364 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 22:
-#line 329 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprOpAnd(CUR_POS, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1370 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 23:
-#line 330 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprOpOr(CUR_POS, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1376 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 24:
-#line 331 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprOpImpl(CUR_POS, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1382 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 25:
-#line 332 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprOpUpdate(CUR_POS, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1388 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 26:
-#line 333 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprOpHasAttr((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), *(((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.attrNames)); }
-#line 1394 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 27:
-#line 335 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprConcatStrings(CUR_POS, false, new vector<Expr *>({(((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)})); }
-#line 1400 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 28:
-#line 336 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprApp(CUR_POS, new ExprApp(new ExprVar(data->symbols.create("__sub")), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e)), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1406 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 29:
-#line 337 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprApp(CUR_POS, new ExprApp(new ExprVar(data->symbols.create("__mul")), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e)), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1412 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 30:
-#line 338 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprApp(CUR_POS, new ExprApp(new ExprVar(data->symbols.create("__div")), (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e)), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1418 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 31:
-#line 339 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprOpConcatLists(CUR_POS, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1424 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 33:
-#line 345 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprApp(CUR_POS, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.e), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1430 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 34:
-#line 346 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e); }
-#line 1436 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 35:
-#line 351 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprSelect(CUR_POS, (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.e), *(((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.attrNames), 0); }
-#line 1442 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 36:
-#line 353 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprSelect(CUR_POS, (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.e), *(((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.attrNames), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1448 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 37:
-#line 357 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprApp(CUR_POS, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.e), new ExprVar(CUR_POS, data->symbols.create("or"))); }
-#line 1454 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 38:
-#line 358 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e); }
-#line 1460 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 39:
-#line 362 "src/libexpr/parser.y" /* glr.c:816  */
-    {
-      if (strcmp((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.id), "__curPos") == 0)
-          ((*yyvalp).e) = new ExprPos(CUR_POS);
-      else
-          ((*yyvalp).e) = new ExprVar(CUR_POS, data->symbols.create((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.id)));
-  }
-#line 1471 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 40:
-#line 368 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprInt((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.n)); }
-#line 1477 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 41:
-#line 369 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.e); }
-#line 1483 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 42:
-#line 370 "src/libexpr/parser.y" /* glr.c:816  */
-    {
-      ((*yyvalp).e) = stripIndentation(CUR_POS, data->symbols, *(((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.string_parts));
-  }
-#line 1491 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 43:
-#line 373 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprPath(absPath((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.path), data->basePath)); }
-#line 1497 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 44:
-#line 374 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprPath(getEnv("HOME", "") + string{(((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.path) + 1}); }
-#line 1503 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 45:
-#line 375 "src/libexpr/parser.y" /* glr.c:816  */
-    {
-      string path((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.path) + 1, strlen((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.path)) - 2);
-      ((*yyvalp).e) = new ExprApp(CUR_POS,
-          new ExprApp(new ExprVar(data->symbols.create("__findFile")),
-              new ExprVar(data->symbols.create("__nixPath"))),
-          new ExprString(data->symbols.create(path)));
-  }
-#line 1515 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 46:
-#line 382 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprString(data->symbols.create((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.uri))); }
-#line 1521 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 47:
-#line 383 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.e); }
-#line 1527 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 48:
-#line 387 "src/libexpr/parser.y" /* glr.c:816  */
-    { (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.attrs)->recursive = true; ((*yyvalp).e) = new ExprSelect(noPos, (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.attrs), data->symbols.create("body")); }
-#line 1533 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 49:
-#line 389 "src/libexpr/parser.y" /* glr.c:816  */
-    { (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.attrs)->recursive = true; ((*yyvalp).e) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.attrs); }
-#line 1539 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 50:
-#line 391 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.attrs); }
-#line 1545 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 51:
-#line 392 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.list); }
-#line 1551 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 53:
-#line 397 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprConcatStrings(CUR_POS, true, (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.string_parts)); }
-#line 1557 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 54:
-#line 398 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = new ExprString(data->symbols.create("")); }
-#line 1563 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 55:
-#line 402 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).string_parts) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.string_parts); (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.string_parts)->push_back((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1569 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 56:
-#line 403 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).string_parts) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.string_parts); (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.string_parts)->push_back((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.e)); }
-#line 1575 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 57:
-#line 404 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).string_parts) = new vector<Expr *>; ((*yyvalp).string_parts)->push_back((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.e)); }
-#line 1581 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 58:
-#line 405 "src/libexpr/parser.y" /* glr.c:816  */
-    {
-      ((*yyvalp).string_parts) = new vector<Expr *>;
-      ((*yyvalp).string_parts)->push_back((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.e));
-      ((*yyvalp).string_parts)->push_back((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.e));
-    }
-#line 1591 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 59:
-#line 413 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).string_parts) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.string_parts); (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.string_parts)->push_back((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1597 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 60:
-#line 414 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).string_parts) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.string_parts); (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.string_parts)->push_back((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.e)); }
-#line 1603 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 61:
-#line 415 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).string_parts) = new vector<Expr *>; }
-#line 1609 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 62:
-#line 419 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).attrs) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-4)].yystate.yysemantics.yysval.attrs); addAttr(((*yyvalp).attrs), *(((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.attrNames), (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.e), makeCurPos((((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yyloc), data)); }
-#line 1615 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 63:
-#line 421 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).attrs) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.attrs);
-      for (auto & i : *(((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.attrNames)) {
-          if (((*yyvalp).attrs)->attrs.find(i.symbol) != ((*yyvalp).attrs)->attrs.end())
-              dupAttr(i.symbol, makeCurPos((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yyloc), data), ((*yyvalp).attrs)->attrs[i.symbol].pos);
-          Pos pos = makeCurPos((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yyloc), data);
-          ((*yyvalp).attrs)->attrs[i.symbol] = ExprAttrs::AttrDef(new ExprVar(CUR_POS, i.symbol), pos, true);
-      }
-    }
-#line 1628 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 64:
-#line 430 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).attrs) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-6)].yystate.yysemantics.yysval.attrs);
-      /* !!! Should ensure sharing of the expression in $4. */
-      for (auto & i : *(((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.attrNames)) {
-          if (((*yyvalp).attrs)->attrs.find(i.symbol) != ((*yyvalp).attrs)->attrs.end())
-              dupAttr(i.symbol, makeCurPos((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yyloc), data), ((*yyvalp).attrs)->attrs[i.symbol].pos);
-          ((*yyvalp).attrs)->attrs[i.symbol] = ExprAttrs::AttrDef(new ExprSelect(CUR_POS, (((yyGLRStackItem const *)yyvsp)[YYFILL (-3)].yystate.yysemantics.yysval.e), i.symbol), makeCurPos((((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yyloc), data));
-      }
-    }
-#line 1641 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 65:
-#line 438 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).attrs) = new ExprAttrs; }
-#line 1647 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 66:
-#line 442 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).attrNames) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.attrNames); (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.attrNames)->push_back(AttrName(data->symbols.create((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.id)))); }
-#line 1653 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 67:
-#line 444 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).attrNames) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.attrNames);
-      ExprString * str = dynamic_cast<ExprString *>((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e));
-      if (str) {
-          ((*yyvalp).attrNames)->push_back(AttrName(str->s));
-          delete str;
-      } else
-          throw ParseError(format("dynamic attributes not allowed in inherit at %1%")
-              % makeCurPos((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yyloc), data));
-    }
-#line 1667 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 68:
-#line 453 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).attrNames) = new AttrPath; }
-#line 1673 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 69:
-#line 457 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).attrNames) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.attrNames); (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.attrNames)->push_back(AttrName(data->symbols.create((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.id)))); }
-#line 1679 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 70:
-#line 459 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).attrNames) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.attrNames);
-      ExprString * str = dynamic_cast<ExprString *>((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e));
-      if (str) {
-          ((*yyvalp).attrNames)->push_back(AttrName(str->s));
-          delete str;
-      } else
-          ((*yyvalp).attrNames)->push_back(AttrName((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)));
-    }
-#line 1692 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 71:
-#line 467 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).attrNames) = new vector<AttrName>; ((*yyvalp).attrNames)->push_back(AttrName(data->symbols.create((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.id)))); }
-#line 1698 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 72:
-#line 469 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).attrNames) = new vector<AttrName>;
-      ExprString *str = dynamic_cast<ExprString *>((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e));
-      if (str) {
-          ((*yyvalp).attrNames)->push_back(AttrName(str->s));
-          delete str;
-      } else
-          ((*yyvalp).attrNames)->push_back(AttrName((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)));
-    }
-#line 1711 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 73:
-#line 480 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).id) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.id); }
-#line 1717 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 74:
-#line 481 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).id) = "or"; }
-#line 1723 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 75:
-#line 485 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.e); }
-#line 1729 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 76:
-#line 486 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).e) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.e); }
-#line 1735 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 77:
-#line 490 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).list) = (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.list); (((yyGLRStackItem const *)yyvsp)[YYFILL (-1)].yystate.yysemantics.yysval.list)->elems.push_back((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); /* !!! dangerous */ }
-#line 1741 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 78:
-#line 491 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).list) = new ExprList; }
-#line 1747 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 79:
-#line 496 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).formals) = (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.formals); addFormal(CUR_POS, ((*yyvalp).formals), *(((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.formal)); }
-#line 1753 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 80:
-#line 498 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).formals) = new Formals; addFormal(CUR_POS, ((*yyvalp).formals), *(((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.formal)); ((*yyvalp).formals)->ellipsis = false; }
-#line 1759 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 81:
-#line 500 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).formals) = new Formals; ((*yyvalp).formals)->ellipsis = false; }
-#line 1765 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 82:
-#line 502 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).formals) = new Formals; ((*yyvalp).formals)->ellipsis = true; }
-#line 1771 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 83:
-#line 506 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).formal) = new Formal(data->symbols.create((((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.id)), 0); }
-#line 1777 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-  case 84:
-#line 507 "src/libexpr/parser.y" /* glr.c:816  */
-    { ((*yyvalp).formal) = new Formal(data->symbols.create((((yyGLRStackItem const *)yyvsp)[YYFILL (-2)].yystate.yysemantics.yysval.id)), (((yyGLRStackItem const *)yyvsp)[YYFILL (0)].yystate.yysemantics.yysval.e)); }
-#line 1783 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-    break;
-
-
-#line 1787 "src/libexpr/parser-tab.cc" /* glr.c:816  */
-      default: break;
-    }
-
-  return yyok;
-# undef yyerrok
-# undef YYABORT
-# undef YYACCEPT
-# undef YYERROR
-# undef YYBACKUP
-# undef yyclearin
-# undef YYRECOVERING
-}
-
-
-static void
-yyuserMerge (int yyn, YYSTYPE* yy0, YYSTYPE* yy1)
-{
-  YYUSE (yy0);
-  YYUSE (yy1);
-
-  switch (yyn)
-    {
-
-      default: break;
-    }
-}
-
-                              /* Bison grammar-table manipulation.  */
-
-/*-----------------------------------------------.
-| Release the memory associated to this symbol.  |
-`-----------------------------------------------*/
-
-static void
-yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, void * scanner, nix::ParseData * data)
-{
-  YYUSE (yyvaluep);
-  YYUSE (yylocationp);
-  YYUSE (scanner);
-  YYUSE (data);
-  if (!yymsg)
-    yymsg = "Deleting";
-  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
-
-  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
-  YYUSE (yytype);
-  YY_IGNORE_MAYBE_UNINITIALIZED_END
-}
-
-/** Number of symbols composing the right hand side of rule #RULE.  */
-static inline int
-yyrhsLength (yyRuleNum yyrule)
-{
-  return yyr2[yyrule];
-}
-
-static void
-yydestroyGLRState (char const *yymsg, yyGLRState *yys, void * scanner, nix::ParseData * data)
-{
-  if (yys->yyresolved)
-    yydestruct (yymsg, yystos[yys->yylrState],
-                &yys->yysemantics.yysval, &yys->yyloc, scanner, data);
-  else
-    {
-#if YYDEBUG
-      if (yydebug)
-        {
-          if (yys->yysemantics.yyfirstVal)
-            YYFPRINTF (stderr, "%s unresolved", yymsg);
-          else
-            YYFPRINTF (stderr, "%s incomplete", yymsg);
-          YY_SYMBOL_PRINT ("", yystos[yys->yylrState], YY_NULLPTR, &yys->yyloc);
-        }
-#endif
-
-      if (yys->yysemantics.yyfirstVal)
-        {
-          yySemanticOption *yyoption = yys->yysemantics.yyfirstVal;
-          yyGLRState *yyrh;
-          int yyn;
-          for (yyrh = yyoption->yystate, yyn = yyrhsLength (yyoption->yyrule);
-               yyn > 0;
-               yyrh = yyrh->yypred, yyn -= 1)
-            yydestroyGLRState (yymsg, yyrh, scanner, data);
-        }
-    }
-}
-
-/** Left-hand-side symbol for rule #YYRULE.  */
-static inline yySymbol
-yylhsNonterm (yyRuleNum yyrule)
-{
-  return yyr1[yyrule];
-}
-
-#define yypact_value_is_default(Yystate) \
-  (!!((Yystate) == (-123)))
-
-/** True iff LR state YYSTATE has only a default reduction (regardless
- *  of token).  */
-static inline yybool
-yyisDefaultedState (yyStateNum yystate)
-{
-  return yypact_value_is_default (yypact[yystate]);
-}
-
-/** The default reduction for YYSTATE, assuming it has one.  */
-static inline yyRuleNum
-yydefaultAction (yyStateNum yystate)
-{
-  return yydefact[yystate];
-}
-
-#define yytable_value_is_error(Yytable_value) \
-  (!!((Yytable_value) == (-66)))
-
-/** Set *YYACTION to the action to take in YYSTATE on seeing YYTOKEN.
- *  Result R means
- *    R < 0:  Reduce on rule -R.
- *    R = 0:  Error.
- *    R > 0:  Shift to state R.
- *  Set *YYCONFLICTS to a pointer into yyconfl to a 0-terminated list
- *  of conflicting reductions.
- */
-static inline void
-yygetLRActions (yyStateNum yystate, int yytoken,
-                int* yyaction, const short int** yyconflicts)
-{
-  int yyindex = yypact[yystate] + yytoken;
-  if (yypact_value_is_default (yypact[yystate])
-      || yyindex < 0 || YYLAST < yyindex || yycheck[yyindex] != yytoken)
-    {
-      *yyaction = -yydefact[yystate];
-      *yyconflicts = yyconfl;
-    }
-  else if (! yytable_value_is_error (yytable[yyindex]))
-    {
-      *yyaction = yytable[yyindex];
-      *yyconflicts = yyconfl + yyconflp[yyindex];
-    }
-  else
-    {
-      *yyaction = 0;
-      *yyconflicts = yyconfl + yyconflp[yyindex];
-    }
-}
-
-/** Compute post-reduction state.
- * \param yystate   the current state
- * \param yysym     the nonterminal to push on the stack
- */
-static inline yyStateNum
-yyLRgotoState (yyStateNum yystate, yySymbol yysym)
-{
-  int yyr = yypgoto[yysym - YYNTOKENS] + yystate;
-  if (0 <= yyr && yyr <= YYLAST && yycheck[yyr] == yystate)
-    return yytable[yyr];
-  else
-    return yydefgoto[yysym - YYNTOKENS];
-}
-
-static inline yybool
-yyisShiftAction (int yyaction)
-{
-  return 0 < yyaction;
-}
-
-static inline yybool
-yyisErrorAction (int yyaction)
-{
-  return yyaction == 0;
-}
-
-                                /* GLRStates */
-
-/** Return a fresh GLRStackItem in YYSTACKP.  The item is an LR state
- *  if YYISSTATE, and otherwise a semantic option.  Callers should call
- *  YY_RESERVE_GLRSTACK afterwards to make sure there is sufficient
- *  headroom.  */
-
-static inline yyGLRStackItem*
-yynewGLRStackItem (yyGLRStack* yystackp, yybool yyisState)
-{
-  yyGLRStackItem* yynewItem = yystackp->yynextFree;
-  yystackp->yyspaceLeft -= 1;
-  yystackp->yynextFree += 1;
-  yynewItem->yystate.yyisState = yyisState;
-  return yynewItem;
-}
-
-/** Add a new semantic action that will execute the action for rule
- *  YYRULE on the semantic values in YYRHS to the list of
- *  alternative actions for YYSTATE.  Assumes that YYRHS comes from
- *  stack #YYK of *YYSTACKP. */
-static void
-yyaddDeferredAction (yyGLRStack* yystackp, size_t yyk, yyGLRState* yystate,
-                     yyGLRState* yyrhs, yyRuleNum yyrule)
-{
-  yySemanticOption* yynewOption =
-    &yynewGLRStackItem (yystackp, yyfalse)->yyoption;
-  YYASSERT (!yynewOption->yyisState);
-  yynewOption->yystate = yyrhs;
-  yynewOption->yyrule = yyrule;
-  if (yystackp->yytops.yylookaheadNeeds[yyk])
-    {
-      yynewOption->yyrawchar = yychar;
-      yynewOption->yyval = yylval;
-      yynewOption->yyloc = yylloc;
-    }
-  else
-    yynewOption->yyrawchar = YYEMPTY;
-  yynewOption->yynext = yystate->yysemantics.yyfirstVal;
-  yystate->yysemantics.yyfirstVal = yynewOption;
-
-  YY_RESERVE_GLRSTACK (yystackp);
-}
-
-                                /* GLRStacks */
-
-/** Initialize YYSET to a singleton set containing an empty stack.  */
-static yybool
-yyinitStateSet (yyGLRStateSet* yyset)
-{
-  yyset->yysize = 1;
-  yyset->yycapacity = 16;
-  yyset->yystates = (yyGLRState**) YYMALLOC (16 * sizeof yyset->yystates[0]);
-  if (! yyset->yystates)
-    return yyfalse;
-  yyset->yystates[0] = YY_NULLPTR;
-  yyset->yylookaheadNeeds =
-    (yybool*) YYMALLOC (16 * sizeof yyset->yylookaheadNeeds[0]);
-  if (! yyset->yylookaheadNeeds)
-    {
-      YYFREE (yyset->yystates);
-      return yyfalse;
-    }
-  return yytrue;
-}
-
-static void yyfreeStateSet (yyGLRStateSet* yyset)
-{
-  YYFREE (yyset->yystates);
-  YYFREE (yyset->yylookaheadNeeds);
-}
-
-/** Initialize *YYSTACKP to a single empty stack, with total maximum
- *  capacity for all stacks of YYSIZE.  */
-static yybool
-yyinitGLRStack (yyGLRStack* yystackp, size_t yysize)
-{
-  yystackp->yyerrState = 0;
-  yynerrs = 0;
-  yystackp->yyspaceLeft = yysize;
-  yystackp->yyitems =
-    (yyGLRStackItem*) YYMALLOC (yysize * sizeof yystackp->yynextFree[0]);
-  if (!yystackp->yyitems)
-    return yyfalse;
-  yystackp->yynextFree = yystackp->yyitems;
-  yystackp->yysplitPoint = YY_NULLPTR;
-  yystackp->yylastDeleted = YY_NULLPTR;
-  return yyinitStateSet (&yystackp->yytops);
-}
-
-
-#if YYSTACKEXPANDABLE
-# define YYRELOC(YYFROMITEMS,YYTOITEMS,YYX,YYTYPE) \
-  &((YYTOITEMS) - ((YYFROMITEMS) - (yyGLRStackItem*) (YYX)))->YYTYPE
-
-/** If *YYSTACKP is expandable, extend it.  WARNING: Pointers into the
-    stack from outside should be considered invalid after this call.
-    We always expand when there are 1 or fewer items left AFTER an
-    allocation, so that we can avoid having external pointers exist
-    across an allocation.  */
-static void
-yyexpandGLRStack (yyGLRStack* yystackp)
-{
-  yyGLRStackItem* yynewItems;
-  yyGLRStackItem* yyp0, *yyp1;
-  size_t yynewSize;
-  size_t yyn;
-  size_t yysize = yystackp->yynextFree - yystackp->yyitems;
-  if (YYMAXDEPTH - YYHEADROOM < yysize)
-    yyMemoryExhausted (yystackp);
-  yynewSize = 2*yysize;
-  if (YYMAXDEPTH < yynewSize)
-    yynewSize = YYMAXDEPTH;
-  yynewItems = (yyGLRStackItem*) YYMALLOC (yynewSize * sizeof yynewItems[0]);
-  if (! yynewItems)
-    yyMemoryExhausted (yystackp);
-  for (yyp0 = yystackp->yyitems, yyp1 = yynewItems, yyn = yysize;
-       0 < yyn;
-       yyn -= 1, yyp0 += 1, yyp1 += 1)
-    {
-      *yyp1 = *yyp0;
-      if (*(yybool *) yyp0)
-        {
-          yyGLRState* yys0 = &yyp0->yystate;
-          yyGLRState* yys1 = &yyp1->yystate;
-          if (yys0->yypred != YY_NULLPTR)
-            yys1->yypred =
-              YYRELOC (yyp0, yyp1, yys0->yypred, yystate);
-          if (! yys0->yyresolved && yys0->yysemantics.yyfirstVal != YY_NULLPTR)
-            yys1->yysemantics.yyfirstVal =
-              YYRELOC (yyp0, yyp1, yys0->yysemantics.yyfirstVal, yyoption);
-        }
-      else
-        {
-          yySemanticOption* yyv0 = &yyp0->yyoption;
-          yySemanticOption* yyv1 = &yyp1->yyoption;
-          if (yyv0->yystate != YY_NULLPTR)
-            yyv1->yystate = YYRELOC (yyp0, yyp1, yyv0->yystate, yystate);
-          if (yyv0->yynext != YY_NULLPTR)
-            yyv1->yynext = YYRELOC (yyp0, yyp1, yyv0->yynext, yyoption);
-        }
-    }
-  if (yystackp->yysplitPoint != YY_NULLPTR)
-    yystackp->yysplitPoint = YYRELOC (yystackp->yyitems, yynewItems,
-                                      yystackp->yysplitPoint, yystate);
-
-  for (yyn = 0; yyn < yystackp->yytops.yysize; yyn += 1)
-    if (yystackp->yytops.yystates[yyn] != YY_NULLPTR)
-      yystackp->yytops.yystates[yyn] =
-        YYRELOC (yystackp->yyitems, yynewItems,
-                 yystackp->yytops.yystates[yyn], yystate);
-  YYFREE (yystackp->yyitems);
-  yystackp->yyitems = yynewItems;
-  yystackp->yynextFree = yynewItems + yysize;
-  yystackp->yyspaceLeft = yynewSize - yysize;
-}
-#endif
-
-static void
-yyfreeGLRStack (yyGLRStack* yystackp)
-{
-  YYFREE (yystackp->yyitems);
-  yyfreeStateSet (&yystackp->yytops);
-}
-
-/** Assuming that YYS is a GLRState somewhere on *YYSTACKP, update the
- *  splitpoint of *YYSTACKP, if needed, so that it is at least as deep as
- *  YYS.  */
-static inline void
-yyupdateSplit (yyGLRStack* yystackp, yyGLRState* yys)
-{
-  if (yystackp->yysplitPoint != YY_NULLPTR && yystackp->yysplitPoint > yys)
-    yystackp->yysplitPoint = yys;
-}
-
-/** Invalidate stack #YYK in *YYSTACKP.  */
-static inline void
-yymarkStackDeleted (yyGLRStack* yystackp, size_t yyk)
-{
-  if (yystackp->yytops.yystates[yyk] != YY_NULLPTR)
-    yystackp->yylastDeleted = yystackp->yytops.yystates[yyk];
-  yystackp->yytops.yystates[yyk] = YY_NULLPTR;
-}
-
-/** Undelete the last stack in *YYSTACKP that was marked as deleted.  Can
-    only be done once after a deletion, and only when all other stacks have
-    been deleted.  */
-static void
-yyundeleteLastStack (yyGLRStack* yystackp)
-{
-  if (yystackp->yylastDeleted == YY_NULLPTR || yystackp->yytops.yysize != 0)
-    return;
-  yystackp->yytops.yystates[0] = yystackp->yylastDeleted;
-  yystackp->yytops.yysize = 1;
-  YYDPRINTF ((stderr, "Restoring last deleted stack as stack #0.\n"));
-  yystackp->yylastDeleted = YY_NULLPTR;
-}
-
-static inline void
-yyremoveDeletes (yyGLRStack* yystackp)
-{
-  size_t yyi, yyj;
-  yyi = yyj = 0;
-  while (yyj < yystackp->yytops.yysize)
-    {
-      if (yystackp->yytops.yystates[yyi] == YY_NULLPTR)
-        {
-          if (yyi == yyj)
-            {
-              YYDPRINTF ((stderr, "Removing dead stacks.\n"));
-            }
-          yystackp->yytops.yysize -= 1;
-        }
-      else
-        {
-          yystackp->yytops.yystates[yyj] = yystackp->yytops.yystates[yyi];
-          /* In the current implementation, it's unnecessary to copy
-             yystackp->yytops.yylookaheadNeeds[yyi] since, after
-             yyremoveDeletes returns, the parser immediately either enters
-             deterministic operation or shifts a token.  However, it doesn't
-             hurt, and the code might evolve to need it.  */
-          yystackp->yytops.yylookaheadNeeds[yyj] =
-            yystackp->yytops.yylookaheadNeeds[yyi];
-          if (yyj != yyi)
-            {
-              YYDPRINTF ((stderr, "Rename stack %lu -> %lu.\n",
-                          (unsigned long int) yyi, (unsigned long int) yyj));
-            }
-          yyj += 1;
-        }
-      yyi += 1;
-    }
-}
-
-/** Shift to a new state on stack #YYK of *YYSTACKP, corresponding to LR
- * state YYLRSTATE, at input position YYPOSN, with (resolved) semantic
- * value *YYVALP and source location *YYLOCP.  */
-static inline void
-yyglrShift (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
-            size_t yyposn,
-            YYSTYPE* yyvalp, YYLTYPE* yylocp)
-{
-  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;
-
-  yynewState->yylrState = yylrState;
-  yynewState->yyposn = yyposn;
-  yynewState->yyresolved = yytrue;
-  yynewState->yypred = yystackp->yytops.yystates[yyk];
-  yynewState->yysemantics.yysval = *yyvalp;
-  yynewState->yyloc = *yylocp;
-  yystackp->yytops.yystates[yyk] = yynewState;
-
-  YY_RESERVE_GLRSTACK (yystackp);
-}
-
-/** Shift stack #YYK of *YYSTACKP, to a new state corresponding to LR
- *  state YYLRSTATE, at input position YYPOSN, with the (unresolved)
- *  semantic value of YYRHS under the action for YYRULE.  */
-static inline void
-yyglrShiftDefer (yyGLRStack* yystackp, size_t yyk, yyStateNum yylrState,
-                 size_t yyposn, yyGLRState* yyrhs, yyRuleNum yyrule)
-{
-  yyGLRState* yynewState = &yynewGLRStackItem (yystackp, yytrue)->yystate;
-  YYASSERT (yynewState->yyisState);
-
-  yynewState->yylrState = yylrState;
-  yynewState->yyposn = yyposn;
-  yynewState->yyresolved = yyfalse;
-  yynewState->yypred = yystackp->yytops.yystates[yyk];
-  yynewState->yysemantics.yyfirstVal = YY_NULLPTR;
-  yystackp->yytops.yystates[yyk] = yynewState;
-
-  /* Invokes YY_RESERVE_GLRSTACK.  */
-  yyaddDeferredAction (yystackp, yyk, yynewState, yyrhs, yyrule);
-}
-
-#if !YYDEBUG
-# define YY_REDUCE_PRINT(Args)
-#else
-# define YY_REDUCE_PRINT(Args)          \
-do {                                    \
-  if (yydebug)                          \
-    yy_reduce_print Args;               \
-} while (0)
-
-/*----------------------------------------------------------------------.
-| Report that stack #YYK of *YYSTACKP is going to be reduced by YYRULE. |
-`----------------------------------------------------------------------*/
-
-static inline void
-yy_reduce_print (int yynormal, yyGLRStackItem* yyvsp, size_t yyk,
-                 yyRuleNum yyrule, void * scanner, nix::ParseData * data)
-{
-  int yynrhs = yyrhsLength (yyrule);
-  int yylow = 1;
-  int yyi;
-  YYFPRINTF (stderr, "Reducing stack %lu by rule %d (line %lu):\n",
-             (unsigned long int) yyk, yyrule - 1,
-             (unsigned long int) yyrline[yyrule]);
-  if (! yynormal)
-    yyfillin (yyvsp, 1, -yynrhs);
-  /* The symbols being reduced.  */
-  for (yyi = 0; yyi < yynrhs; yyi++)
-    {
-      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
-      yy_symbol_print (stderr,
-                       yystos[yyvsp[yyi - yynrhs + 1].yystate.yylrState],
-                       &yyvsp[yyi - yynrhs + 1].yystate.yysemantics.yysval
-                       , &(((yyGLRStackItem const *)yyvsp)[YYFILL ((yyi + 1) - (yynrhs))].yystate.yyloc)                       , scanner, data);
-      if (!yyvsp[yyi - yynrhs + 1].yystate.yyresolved)
-        YYFPRINTF (stderr, " (unresolved)");
-      YYFPRINTF (stderr, "\n");
-    }
-}
-#endif
-
-/** Pop the symbols consumed by reduction #YYRULE from the top of stack
- *  #YYK of *YYSTACKP, and perform the appropriate semantic action on their
- *  semantic values.  Assumes that all ambiguities in semantic values
- *  have been previously resolved.  Set *YYVALP to the resulting value,
- *  and *YYLOCP to the computed location (if any).  Return value is as
- *  for userAction.  */
-static inline YYRESULTTAG
-yydoAction (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
-            YYSTYPE* yyvalp, YYLTYPE *yylocp, void * scanner, nix::ParseData * data)
-{
-  int yynrhs = yyrhsLength (yyrule);
-
-  if (yystackp->yysplitPoint == YY_NULLPTR)
-    {
-      /* Standard special case: single stack.  */
-      yyGLRStackItem* yyrhs = (yyGLRStackItem*) yystackp->yytops.yystates[yyk];
-      YYASSERT (yyk == 0);
-      yystackp->yynextFree -= yynrhs;
-      yystackp->yyspaceLeft += yynrhs;
-      yystackp->yytops.yystates[0] = & yystackp->yynextFree[-1].yystate;
-      YY_REDUCE_PRINT ((1, yyrhs, yyk, yyrule, scanner, data));
-      return yyuserAction (yyrule, yynrhs, yyrhs, yystackp,
-                           yyvalp, yylocp, scanner, data);
-    }
-  else
-    {
-      int yyi;
-      yyGLRState* yys;
-      yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
-      yys = yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred
-        = yystackp->yytops.yystates[yyk];
-      if (yynrhs == 0)
-        /* Set default location.  */
-        yyrhsVals[YYMAXRHS + YYMAXLEFT - 1].yystate.yyloc = yys->yyloc;
-      for (yyi = 0; yyi < yynrhs; yyi += 1)
-        {
-          yys = yys->yypred;
-          YYASSERT (yys);
-        }
-      yyupdateSplit (yystackp, yys);
-      yystackp->yytops.yystates[yyk] = yys;
-      YY_REDUCE_PRINT ((0, yyrhsVals + YYMAXRHS + YYMAXLEFT - 1, yyk, yyrule, scanner, data));
-      return yyuserAction (yyrule, yynrhs, yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
-                           yystackp, yyvalp, yylocp, scanner, data);
-    }
-}
-
-/** Pop items off stack #YYK of *YYSTACKP according to grammar rule YYRULE,
- *  and push back on the resulting nonterminal symbol.  Perform the
- *  semantic action associated with YYRULE and store its value with the
- *  newly pushed state, if YYFORCEEVAL or if *YYSTACKP is currently
- *  unambiguous.  Otherwise, store the deferred semantic action with
- *  the new state.  If the new state would have an identical input
- *  position, LR state, and predecessor to an existing state on the stack,
- *  it is identified with that existing state, eliminating stack #YYK from
- *  *YYSTACKP.  In this case, the semantic value is
- *  added to the options for the existing state's semantic value.
- */
-static inline YYRESULTTAG
-yyglrReduce (yyGLRStack* yystackp, size_t yyk, yyRuleNum yyrule,
-             yybool yyforceEval, void * scanner, nix::ParseData * data)
-{
-  size_t yyposn = yystackp->yytops.yystates[yyk]->yyposn;
-
-  if (yyforceEval || yystackp->yysplitPoint == YY_NULLPTR)
-    {
-      YYSTYPE yysval;
-      YYLTYPE yyloc;
-
-      YYRESULTTAG yyflag = yydoAction (yystackp, yyk, yyrule, &yysval, &yyloc, scanner, data);
-      if (yyflag == yyerr && yystackp->yysplitPoint != YY_NULLPTR)
-        {
-          YYDPRINTF ((stderr, "Parse on stack %lu rejected by rule #%d.\n",
-                     (unsigned long int) yyk, yyrule - 1));
-        }
-      if (yyflag != yyok)
-        return yyflag;
-      YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyrule], &yysval, &yyloc);
-      yyglrShift (yystackp, yyk,
-                  yyLRgotoState (yystackp->yytops.yystates[yyk]->yylrState,
-                                 yylhsNonterm (yyrule)),
-                  yyposn, &yysval, &yyloc);
-    }
-  else
-    {
-      size_t yyi;
-      int yyn;
-      yyGLRState* yys, *yys0 = yystackp->yytops.yystates[yyk];
-      yyStateNum yynewLRState;
-
-      for (yys = yystackp->yytops.yystates[yyk], yyn = yyrhsLength (yyrule);
-           0 < yyn; yyn -= 1)
-        {
-          yys = yys->yypred;
-          YYASSERT (yys);
-        }
-      yyupdateSplit (yystackp, yys);
-      yynewLRState = yyLRgotoState (yys->yylrState, yylhsNonterm (yyrule));
-      YYDPRINTF ((stderr,
-                  "Reduced stack %lu by rule #%d; action deferred.  "
-                  "Now in state %d.\n",
-                  (unsigned long int) yyk, yyrule - 1, yynewLRState));
-      for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
-        if (yyi != yyk && yystackp->yytops.yystates[yyi] != YY_NULLPTR)
-          {
-            yyGLRState *yysplit = yystackp->yysplitPoint;
-            yyGLRState *yyp = yystackp->yytops.yystates[yyi];
-            while (yyp != yys && yyp != yysplit && yyp->yyposn >= yyposn)
-              {
-                if (yyp->yylrState == yynewLRState && yyp->yypred == yys)
-                  {
-                    yyaddDeferredAction (yystackp, yyk, yyp, yys0, yyrule);
-                    yymarkStackDeleted (yystackp, yyk);
-                    YYDPRINTF ((stderr, "Merging stack %lu into stack %lu.\n",
-                                (unsigned long int) yyk,
-                                (unsigned long int) yyi));
-                    return yyok;
-                  }
-                yyp = yyp->yypred;
-              }
-          }
-      yystackp->yytops.yystates[yyk] = yys;
-      yyglrShiftDefer (yystackp, yyk, yynewLRState, yyposn, yys0, yyrule);
-    }
-  return yyok;
-}
-
-static size_t
-yysplitStack (yyGLRStack* yystackp, size_t yyk)
-{
-  if (yystackp->yysplitPoint == YY_NULLPTR)
-    {
-      YYASSERT (yyk == 0);
-      yystackp->yysplitPoint = yystackp->yytops.yystates[yyk];
-    }
-  if (yystackp->yytops.yysize >= yystackp->yytops.yycapacity)
-    {
-      yyGLRState** yynewStates;
-      yybool* yynewLookaheadNeeds;
-
-      yynewStates = YY_NULLPTR;
-
-      if (yystackp->yytops.yycapacity
-          > (YYSIZEMAX / (2 * sizeof yynewStates[0])))
-        yyMemoryExhausted (yystackp);
-      yystackp->yytops.yycapacity *= 2;
-
-      yynewStates =
-        (yyGLRState**) YYREALLOC (yystackp->yytops.yystates,
-                                  (yystackp->yytops.yycapacity
-                                   * sizeof yynewStates[0]));
-      if (yynewStates == YY_NULLPTR)
-        yyMemoryExhausted (yystackp);
-      yystackp->yytops.yystates = yynewStates;
-
-      yynewLookaheadNeeds =
-        (yybool*) YYREALLOC (yystackp->yytops.yylookaheadNeeds,
-                             (yystackp->yytops.yycapacity
-                              * sizeof yynewLookaheadNeeds[0]));
-      if (yynewLookaheadNeeds == YY_NULLPTR)
-        yyMemoryExhausted (yystackp);
-      yystackp->yytops.yylookaheadNeeds = yynewLookaheadNeeds;
-    }
-  yystackp->yytops.yystates[yystackp->yytops.yysize]
-    = yystackp->yytops.yystates[yyk];
-  yystackp->yytops.yylookaheadNeeds[yystackp->yytops.yysize]
-    = yystackp->yytops.yylookaheadNeeds[yyk];
-  yystackp->yytops.yysize += 1;
-  return yystackp->yytops.yysize-1;
-}
-
-/** True iff YYY0 and YYY1 represent identical options at the top level.
- *  That is, they represent the same rule applied to RHS symbols
- *  that produce the same terminal symbols.  */
-static yybool
-yyidenticalOptions (yySemanticOption* yyy0, yySemanticOption* yyy1)
-{
-  if (yyy0->yyrule == yyy1->yyrule)
-    {
-      yyGLRState *yys0, *yys1;
-      int yyn;
-      for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
-           yyn = yyrhsLength (yyy0->yyrule);
-           yyn > 0;
-           yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
-        if (yys0->yyposn != yys1->yyposn)
-          return yyfalse;
-      return yytrue;
-    }
-  else
-    return yyfalse;
-}
-
-/** Assuming identicalOptions (YYY0,YYY1), destructively merge the
- *  alternative semantic values for the RHS-symbols of YYY1 and YYY0.  */
-static void
-yymergeOptionSets (yySemanticOption* yyy0, yySemanticOption* yyy1)
-{
-  yyGLRState *yys0, *yys1;
-  int yyn;
-  for (yys0 = yyy0->yystate, yys1 = yyy1->yystate,
-       yyn = yyrhsLength (yyy0->yyrule);
-       yyn > 0;
-       yys0 = yys0->yypred, yys1 = yys1->yypred, yyn -= 1)
-    {
-      if (yys0 == yys1)
-        break;
-      else if (yys0->yyresolved)
-        {
-          yys1->yyresolved = yytrue;
-          yys1->yysemantics.yysval = yys0->yysemantics.yysval;
-        }
-      else if (yys1->yyresolved)
-        {
-          yys0->yyresolved = yytrue;
-          yys0->yysemantics.yysval = yys1->yysemantics.yysval;
-        }
-      else
-        {
-          yySemanticOption** yyz0p = &yys0->yysemantics.yyfirstVal;
-          yySemanticOption* yyz1 = yys1->yysemantics.yyfirstVal;
-          while (yytrue)
-            {
-              if (yyz1 == *yyz0p || yyz1 == YY_NULLPTR)
-                break;
-              else if (*yyz0p == YY_NULLPTR)
-                {
-                  *yyz0p = yyz1;
-                  break;
-                }
-              else if (*yyz0p < yyz1)
-                {
-                  yySemanticOption* yyz = *yyz0p;
-                  *yyz0p = yyz1;
-                  yyz1 = yyz1->yynext;
-                  (*yyz0p)->yynext = yyz;
-                }
-              yyz0p = &(*yyz0p)->yynext;
-            }
-          yys1->yysemantics.yyfirstVal = yys0->yysemantics.yyfirstVal;
-        }
-    }
-}
-
-/** Y0 and Y1 represent two possible actions to take in a given
- *  parsing state; return 0 if no combination is possible,
- *  1 if user-mergeable, 2 if Y0 is preferred, 3 if Y1 is preferred.  */
-static int
-yypreference (yySemanticOption* y0, yySemanticOption* y1)
-{
-  yyRuleNum r0 = y0->yyrule, r1 = y1->yyrule;
-  int p0 = yydprec[r0], p1 = yydprec[r1];
-
-  if (p0 == p1)
-    {
-      if (yymerger[r0] == 0 || yymerger[r0] != yymerger[r1])
-        return 0;
-      else
-        return 1;
-    }
-  if (p0 == 0 || p1 == 0)
-    return 0;
-  if (p0 < p1)
-    return 3;
-  if (p1 < p0)
-    return 2;
-  return 0;
-}
-
-static YYRESULTTAG yyresolveValue (yyGLRState* yys,
-                                   yyGLRStack* yystackp, void * scanner, nix::ParseData * data);
-
-
-/** Resolve the previous YYN states starting at and including state YYS
- *  on *YYSTACKP. If result != yyok, some states may have been left
- *  unresolved possibly with empty semantic option chains.  Regardless
- *  of whether result = yyok, each state has been left with consistent
- *  data so that yydestroyGLRState can be invoked if necessary.  */
-static YYRESULTTAG
-yyresolveStates (yyGLRState* yys, int yyn,
-                 yyGLRStack* yystackp, void * scanner, nix::ParseData * data)
-{
-  if (0 < yyn)
-    {
-      YYASSERT (yys->yypred);
-      YYCHK (yyresolveStates (yys->yypred, yyn-1, yystackp, scanner, data));
-      if (! yys->yyresolved)
-        YYCHK (yyresolveValue (yys, yystackp, scanner, data));
-    }
-  return yyok;
-}
-
-/** Resolve the states for the RHS of YYOPT on *YYSTACKP, perform its
- *  user action, and return the semantic value and location in *YYVALP
- *  and *YYLOCP.  Regardless of whether result = yyok, all RHS states
- *  have been destroyed (assuming the user action destroys all RHS
- *  semantic values if invoked).  */
-static YYRESULTTAG
-yyresolveAction (yySemanticOption* yyopt, yyGLRStack* yystackp,
-                 YYSTYPE* yyvalp, YYLTYPE *yylocp, void * scanner, nix::ParseData * data)
-{
-  yyGLRStackItem yyrhsVals[YYMAXRHS + YYMAXLEFT + 1];
-  int yynrhs = yyrhsLength (yyopt->yyrule);
-  YYRESULTTAG yyflag =
-    yyresolveStates (yyopt->yystate, yynrhs, yystackp, scanner, data);
-  if (yyflag != yyok)
-    {
-      yyGLRState *yys;
-      for (yys = yyopt->yystate; yynrhs > 0; yys = yys->yypred, yynrhs -= 1)
-        yydestroyGLRState ("Cleanup: popping", yys, scanner, data);
-      return yyflag;
-    }
-
-  yyrhsVals[YYMAXRHS + YYMAXLEFT].yystate.yypred = yyopt->yystate;
-  if (yynrhs == 0)
-    /* Set default location.  */
-    yyrhsVals[YYMAXRHS + YYMAXLEFT - 1].yystate.yyloc = yyopt->yystate->yyloc;
-  {
-    int yychar_current = yychar;
-    YYSTYPE yylval_current = yylval;
-    YYLTYPE yylloc_current = yylloc;
-    yychar = yyopt->yyrawchar;
-    yylval = yyopt->yyval;
-    yylloc = yyopt->yyloc;
-    yyflag = yyuserAction (yyopt->yyrule, yynrhs,
-                           yyrhsVals + YYMAXRHS + YYMAXLEFT - 1,
-                           yystackp, yyvalp, yylocp, scanner, data);
-    yychar = yychar_current;
-    yylval = yylval_current;
-    yylloc = yylloc_current;
-  }
-  return yyflag;
-}
-
-#if YYDEBUG
-static void
-yyreportTree (yySemanticOption* yyx, int yyindent)
-{
-  int yynrhs = yyrhsLength (yyx->yyrule);
-  int yyi;
-  yyGLRState* yys;
-  yyGLRState* yystates[1 + YYMAXRHS];
-  yyGLRState yyleftmost_state;
-
-  for (yyi = yynrhs, yys = yyx->yystate; 0 < yyi; yyi -= 1, yys = yys->yypred)
-    yystates[yyi] = yys;
-  if (yys == YY_NULLPTR)
-    {
-      yyleftmost_state.yyposn = 0;
-      yystates[0] = &yyleftmost_state;
-    }
-  else
-    yystates[0] = yys;
-
-  if (yyx->yystate->yyposn < yys->yyposn + 1)
-    YYFPRINTF (stderr, "%*s%s -> <Rule %d, empty>\n",
-               yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
-               yyx->yyrule - 1);
-  else
-    YYFPRINTF (stderr, "%*s%s -> <Rule %d, tokens %lu .. %lu>\n",
-               yyindent, "", yytokenName (yylhsNonterm (yyx->yyrule)),
-               yyx->yyrule - 1, (unsigned long int) (yys->yyposn + 1),
-               (unsigned long int) yyx->yystate->yyposn);
-  for (yyi = 1; yyi <= yynrhs; yyi += 1)
-    {
-      if (yystates[yyi]->yyresolved)
-        {
-          if (yystates[yyi-1]->yyposn+1 > yystates[yyi]->yyposn)
-            YYFPRINTF (stderr, "%*s%s <empty>\n", yyindent+2, "",
-                       yytokenName (yystos[yystates[yyi]->yylrState]));
-          else
-            YYFPRINTF (stderr, "%*s%s <tokens %lu .. %lu>\n", yyindent+2, "",
-                       yytokenName (yystos[yystates[yyi]->yylrState]),
-                       (unsigned long int) (yystates[yyi-1]->yyposn + 1),
-                       (unsigned long int) yystates[yyi]->yyposn);
-        }
-      else
-        yyreportTree (yystates[yyi]->yysemantics.yyfirstVal, yyindent+2);
-    }
-}
-#endif
-
-static YYRESULTTAG
-yyreportAmbiguity (yySemanticOption* yyx0,
-                   yySemanticOption* yyx1, YYLTYPE *yylocp, void * scanner, nix::ParseData * data)
-{
-  YYUSE (yyx0);
-  YYUSE (yyx1);
-
-#if YYDEBUG
-  YYFPRINTF (stderr, "Ambiguity detected.\n");
-  YYFPRINTF (stderr, "Option 1,\n");
-  yyreportTree (yyx0, 2);
-  YYFPRINTF (stderr, "\nOption 2,\n");
-  yyreportTree (yyx1, 2);
-  YYFPRINTF (stderr, "\n");
-#endif
-
-  yyerror (yylocp, scanner, data, YY_("syntax is ambiguous"));
-  return yyabort;
-}
-
-/** Resolve the locations for each of the YYN1 states in *YYSTACKP,
- *  ending at YYS1.  Has no effect on previously resolved states.
- *  The first semantic option of a state is always chosen.  */
-static void
-yyresolveLocations (yyGLRState* yys1, int yyn1,
-                    yyGLRStack *yystackp, void * scanner, nix::ParseData * data)
-{
-  if (0 < yyn1)
-    {
-      yyresolveLocations (yys1->yypred, yyn1 - 1, yystackp, scanner, data);
-      if (!yys1->yyresolved)
-        {
-          yyGLRStackItem yyrhsloc[1 + YYMAXRHS];
-          int yynrhs;
-          yySemanticOption *yyoption = yys1->yysemantics.yyfirstVal;
-          YYASSERT (yyoption != YY_NULLPTR);
-          yynrhs = yyrhsLength (yyoption->yyrule);
-          if (yynrhs > 0)
-            {
-              yyGLRState *yys;
-              int yyn;
-              yyresolveLocations (yyoption->yystate, yynrhs,
-                                  yystackp, scanner, data);
-              for (yys = yyoption->yystate, yyn = yynrhs;
-                   yyn > 0;
-                   yys = yys->yypred, yyn -= 1)
-                yyrhsloc[yyn].yystate.yyloc = yys->yyloc;
-            }
-          else
-            {
-              /* Both yyresolveAction and yyresolveLocations traverse the GSS
-                 in reverse rightmost order.  It is only necessary to invoke
-                 yyresolveLocations on a subforest for which yyresolveAction
-                 would have been invoked next had an ambiguity not been
-                 detected.  Thus the location of the previous state (but not
-                 necessarily the previous state itself) is guaranteed to be
-                 resolved already.  */
-              yyGLRState *yyprevious = yyoption->yystate;
-              yyrhsloc[0].yystate.yyloc = yyprevious->yyloc;
-            }
-          {
-            int yychar_current = yychar;
-            YYSTYPE yylval_current = yylval;
-            YYLTYPE yylloc_current = yylloc;
-            yychar = yyoption->yyrawchar;
-            yylval = yyoption->yyval;
-            yylloc = yyoption->yyloc;
-            YYLLOC_DEFAULT ((yys1->yyloc), yyrhsloc, yynrhs);
-            yychar = yychar_current;
-            yylval = yylval_current;
-            yylloc = yylloc_current;
-          }
-        }
-    }
-}
-
-/** Resolve the ambiguity represented in state YYS in *YYSTACKP,
- *  perform the indicated actions, and set the semantic value of YYS.
- *  If result != yyok, the chain of semantic options in YYS has been
- *  cleared instead or it has been left unmodified except that
- *  redundant options may have been removed.  Regardless of whether
- *  result = yyok, YYS has been left with consistent data so that
- *  yydestroyGLRState can be invoked if necessary.  */
-static YYRESULTTAG
-yyresolveValue (yyGLRState* yys, yyGLRStack* yystackp, void * scanner, nix::ParseData * data)
-{
-  yySemanticOption* yyoptionList = yys->yysemantics.yyfirstVal;
-  yySemanticOption* yybest = yyoptionList;
-  yySemanticOption** yypp;
-  yybool yymerge = yyfalse;
-  YYSTYPE yysval;
-  YYRESULTTAG yyflag;
-  YYLTYPE *yylocp = &yys->yyloc;
-
-  for (yypp = &yyoptionList->yynext; *yypp != YY_NULLPTR; )
-    {
-      yySemanticOption* yyp = *yypp;
-
-      if (yyidenticalOptions (yybest, yyp))
-        {
-          yymergeOptionSets (yybest, yyp);
-          *yypp = yyp->yynext;
-        }
-      else
-        {
-          switch (yypreference (yybest, yyp))
-            {
-            case 0:
-              yyresolveLocations (yys, 1, yystackp, scanner, data);
-              return yyreportAmbiguity (yybest, yyp, yylocp, scanner, data);
-              break;
-            case 1:
-              yymerge = yytrue;
-              break;
-            case 2:
-              break;
-            case 3:
-              yybest = yyp;
-              yymerge = yyfalse;
-              break;
-            default:
-              /* This cannot happen so it is not worth a YYASSERT (yyfalse),
-                 but some compilers complain if the default case is
-                 omitted.  */
-              break;
-            }
-          yypp = &yyp->yynext;
-        }
-    }
-
-  if (yymerge)
-    {
-      yySemanticOption* yyp;
-      int yyprec = yydprec[yybest->yyrule];
-      yyflag = yyresolveAction (yybest, yystackp, &yysval, yylocp, scanner, data);
-      if (yyflag == yyok)
-        for (yyp = yybest->yynext; yyp != YY_NULLPTR; yyp = yyp->yynext)
-          {
-            if (yyprec == yydprec[yyp->yyrule])
-              {
-                YYSTYPE yysval_other;
-                YYLTYPE yydummy;
-                yyflag = yyresolveAction (yyp, yystackp, &yysval_other, &yydummy, scanner, data);
-                if (yyflag != yyok)
-                  {
-                    yydestruct ("Cleanup: discarding incompletely merged value for",
-                                yystos[yys->yylrState],
-                                &yysval, yylocp, scanner, data);
-                    break;
-                  }
-                yyuserMerge (yymerger[yyp->yyrule], &yysval, &yysval_other);
-              }
-          }
-    }
-  else
-    yyflag = yyresolveAction (yybest, yystackp, &yysval, yylocp, scanner, data);
-
-  if (yyflag == yyok)
-    {
-      yys->yyresolved = yytrue;
-      yys->yysemantics.yysval = yysval;
-    }
-  else
-    yys->yysemantics.yyfirstVal = YY_NULLPTR;
-  return yyflag;
-}
-
-static YYRESULTTAG
-yyresolveStack (yyGLRStack* yystackp, void * scanner, nix::ParseData * data)
-{
-  if (yystackp->yysplitPoint != YY_NULLPTR)
-    {
-      yyGLRState* yys;
-      int yyn;
-
-      for (yyn = 0, yys = yystackp->yytops.yystates[0];
-           yys != yystackp->yysplitPoint;
-           yys = yys->yypred, yyn += 1)
-        continue;
-      YYCHK (yyresolveStates (yystackp->yytops.yystates[0], yyn, yystackp
-                             , scanner, data));
-    }
-  return yyok;
-}
-
-static void
-yycompressStack (yyGLRStack* yystackp)
-{
-  yyGLRState* yyp, *yyq, *yyr;
-
-  if (yystackp->yytops.yysize != 1 || yystackp->yysplitPoint == YY_NULLPTR)
-    return;
-
-  for (yyp = yystackp->yytops.yystates[0], yyq = yyp->yypred, yyr = YY_NULLPTR;
-       yyp != yystackp->yysplitPoint;
-       yyr = yyp, yyp = yyq, yyq = yyp->yypred)
-    yyp->yypred = yyr;
-
-  yystackp->yyspaceLeft += yystackp->yynextFree - yystackp->yyitems;
-  yystackp->yynextFree = ((yyGLRStackItem*) yystackp->yysplitPoint) + 1;
-  yystackp->yyspaceLeft -= yystackp->yynextFree - yystackp->yyitems;
-  yystackp->yysplitPoint = YY_NULLPTR;
-  yystackp->yylastDeleted = YY_NULLPTR;
-
-  while (yyr != YY_NULLPTR)
-    {
-      yystackp->yynextFree->yystate = *yyr;
-      yyr = yyr->yypred;
-      yystackp->yynextFree->yystate.yypred = &yystackp->yynextFree[-1].yystate;
-      yystackp->yytops.yystates[0] = &yystackp->yynextFree->yystate;
-      yystackp->yynextFree += 1;
-      yystackp->yyspaceLeft -= 1;
-    }
-}
-
-static YYRESULTTAG
-yyprocessOneStack (yyGLRStack* yystackp, size_t yyk,
-                   size_t yyposn, YYLTYPE *yylocp, void * scanner, nix::ParseData * data)
-{
-  while (yystackp->yytops.yystates[yyk] != YY_NULLPTR)
-    {
-      yyStateNum yystate = yystackp->yytops.yystates[yyk]->yylrState;
-      YYDPRINTF ((stderr, "Stack %lu Entering state %d\n",
-                  (unsigned long int) yyk, yystate));
-
-      YYASSERT (yystate != YYFINAL);
-
-      if (yyisDefaultedState (yystate))
-        {
-          YYRESULTTAG yyflag;
-          yyRuleNum yyrule = yydefaultAction (yystate);
-          if (yyrule == 0)
-            {
-              YYDPRINTF ((stderr, "Stack %lu dies.\n",
-                          (unsigned long int) yyk));
-              yymarkStackDeleted (yystackp, yyk);
-              return yyok;
-            }
-          yyflag = yyglrReduce (yystackp, yyk, yyrule, yyimmediate[yyrule], scanner, data);
-          if (yyflag == yyerr)
-            {
-              YYDPRINTF ((stderr,
-                          "Stack %lu dies "
-                          "(predicate failure or explicit user error).\n",
-                          (unsigned long int) yyk));
-              yymarkStackDeleted (yystackp, yyk);
-              return yyok;
-            }
-          if (yyflag != yyok)
-            return yyflag;
-        }
-      else
-        {
-          yySymbol yytoken;
-          int yyaction;
-          const short int* yyconflicts;
-
-          yystackp->yytops.yylookaheadNeeds[yyk] = yytrue;
-          if (yychar == YYEMPTY)
-            {
-              YYDPRINTF ((stderr, "Reading a token: "));
-              yychar = yylex (&yylval, &yylloc, scanner, data);
-            }
-
-          if (yychar <= YYEOF)
-            {
-              yychar = yytoken = YYEOF;
-              YYDPRINTF ((stderr, "Now at end of input.\n"));
-            }
-          else
-            {
-              yytoken = YYTRANSLATE (yychar);
-              YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
-            }
-
-          yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);
-
-          while (*yyconflicts != 0)
-            {
-              YYRESULTTAG yyflag;
-              size_t yynewStack = yysplitStack (yystackp, yyk);
-              YYDPRINTF ((stderr, "Splitting off stack %lu from %lu.\n",
-                          (unsigned long int) yynewStack,
-                          (unsigned long int) yyk));
-              yyflag = yyglrReduce (yystackp, yynewStack,
-                                    *yyconflicts,
-                                    yyimmediate[*yyconflicts], scanner, data);
-              if (yyflag == yyok)
-                YYCHK (yyprocessOneStack (yystackp, yynewStack,
-                                          yyposn, yylocp, scanner, data));
-              else if (yyflag == yyerr)
-                {
-                  YYDPRINTF ((stderr, "Stack %lu dies.\n",
-                              (unsigned long int) yynewStack));
-                  yymarkStackDeleted (yystackp, yynewStack);
-                }
-              else
-                return yyflag;
-              yyconflicts += 1;
-            }
-
-          if (yyisShiftAction (yyaction))
-            break;
-          else if (yyisErrorAction (yyaction))
-            {
-              YYDPRINTF ((stderr, "Stack %lu dies.\n",
-                          (unsigned long int) yyk));
-              yymarkStackDeleted (yystackp, yyk);
-              break;
-            }
-          else
-            {
-              YYRESULTTAG yyflag = yyglrReduce (yystackp, yyk, -yyaction,
-                                                yyimmediate[-yyaction], scanner, data);
-              if (yyflag == yyerr)
-                {
-                  YYDPRINTF ((stderr,
-                              "Stack %lu dies "
-                              "(predicate failure or explicit user error).\n",
-                              (unsigned long int) yyk));
-                  yymarkStackDeleted (yystackp, yyk);
-                  break;
-                }
-              else if (yyflag != yyok)
-                return yyflag;
-            }
-        }
-    }
-  return yyok;
-}
-
-static void
-yyreportSyntaxError (yyGLRStack* yystackp, void * scanner, nix::ParseData * data)
-{
-  if (yystackp->yyerrState != 0)
-    return;
-#if ! YYERROR_VERBOSE
-  yyerror (&yylloc, scanner, data, YY_("syntax error"));
-#else
-  {
-  yySymbol yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
-  size_t yysize0 = yytnamerr (YY_NULLPTR, yytokenName (yytoken));
-  size_t yysize = yysize0;
-  yybool yysize_overflow = yyfalse;
-  char* yymsg = YY_NULLPTR;
-  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
-  /* Internationalized format string. */
-  const char *yyformat = YY_NULLPTR;
-  /* Arguments of yyformat. */
-  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
-  /* Number of reported tokens (one for the "unexpected", one per
-     "expected").  */
-  int yycount = 0;
-
-  /* There are many possibilities here to consider:
-     - If this state is a consistent state with a default action, then
-       the only way this function was invoked is if the default action
-       is an error action.  In that case, don't check for expected
-       tokens because there are none.
-     - The only way there can be no lookahead present (in yychar) is if
-       this state is a consistent state with a default action.  Thus,
-       detecting the absence of a lookahead is sufficient to determine
-       that there is no unexpected or expected token to report.  In that
-       case, just report a simple "syntax error".
-     - Don't assume there isn't a lookahead just because this state is a
-       consistent state with a default action.  There might have been a
-       previous inconsistent state, consistent state with a non-default
-       action, or user semantic action that manipulated yychar.
-     - Of course, the expected token list depends on states to have
-       correct lookahead information, and it depends on the parser not
-       to perform extra reductions after fetching a lookahead from the
-       scanner and before detecting a syntax error.  Thus, state merging
-       (from LALR or IELR) and default reductions corrupt the expected
-       token list.  However, the list is correct for canonical LR with
-       one exception: it will still contain any token that will not be
-       accepted due to an error action in a later state.
-  */
-  if (yytoken != YYEMPTY)
-    {
-      int yyn = yypact[yystackp->yytops.yystates[0]->yylrState];
-      yyarg[yycount++] = yytokenName (yytoken);
-      if (!yypact_value_is_default (yyn))
-        {
-          /* Start YYX at -YYN if negative to avoid negative indexes in
-             YYCHECK.  In other words, skip the first -YYN actions for this
-             state because they are default actions.  */
-          int yyxbegin = yyn < 0 ? -yyn : 0;
-          /* Stay within bounds of both yycheck and yytname.  */
-          int yychecklim = YYLAST - yyn + 1;
-          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
-          int yyx;
-          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
-            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
-                && !yytable_value_is_error (yytable[yyx + yyn]))
-              {
-                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
-                  {
-                    yycount = 1;
-                    yysize = yysize0;
-                    break;
-                  }
-                yyarg[yycount++] = yytokenName (yyx);
-                {
-                  size_t yysz = yysize + yytnamerr (YY_NULLPTR, yytokenName (yyx));
-                  yysize_overflow |= yysz < yysize;
-                  yysize = yysz;
-                }
-              }
-        }
-    }
-
-  switch (yycount)
-    {
-#define YYCASE_(N, S)                   \
-      case N:                           \
-        yyformat = S;                   \
-      break
-      YYCASE_(0, YY_("syntax error"));
-      YYCASE_(1, YY_("syntax error, unexpected %s"));
-      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
-      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
-      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
-      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
-#undef YYCASE_
-    }
-
-  {
-    size_t yysz = yysize + strlen (yyformat);
-    yysize_overflow |= yysz < yysize;
-    yysize = yysz;
-  }
-
-  if (!yysize_overflow)
-    yymsg = (char *) YYMALLOC (yysize);
-
-  if (yymsg)
-    {
-      char *yyp = yymsg;
-      int yyi = 0;
-      while ((*yyp = *yyformat))
-        {
-          if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
-            {
-              yyp += yytnamerr (yyp, yyarg[yyi++]);
-              yyformat += 2;
-            }
-          else
-            {
-              yyp++;
-              yyformat++;
-            }
-        }
-      yyerror (&yylloc, scanner, data, yymsg);
-      YYFREE (yymsg);
-    }
-  else
-    {
-      yyerror (&yylloc, scanner, data, YY_("syntax error"));
-      yyMemoryExhausted (yystackp);
-    }
-  }
-#endif /* YYERROR_VERBOSE */
-  yynerrs += 1;
-}
-
-/* Recover from a syntax error on *YYSTACKP, assuming that *YYSTACKP->YYTOKENP,
-   yylval, and yylloc are the syntactic category, semantic value, and location
-   of the lookahead.  */
-static void
-yyrecoverSyntaxError (yyGLRStack* yystackp, void * scanner, nix::ParseData * data)
-{
-  size_t yyk;
-  int yyj;
-
-  if (yystackp->yyerrState == 3)
-    /* We just shifted the error token and (perhaps) took some
-       reductions.  Skip tokens until we can proceed.  */
-    while (yytrue)
-      {
-        yySymbol yytoken;
-        if (yychar == YYEOF)
-          yyFail (yystackp, &yylloc, scanner, data, YY_NULLPTR);
-        if (yychar != YYEMPTY)
-          {
-            /* We throw away the lookahead, but the error range
-               of the shifted error token must take it into account.  */
-            yyGLRState *yys = yystackp->yytops.yystates[0];
-            yyGLRStackItem yyerror_range[3];
-            yyerror_range[1].yystate.yyloc = yys->yyloc;
-            yyerror_range[2].yystate.yyloc = yylloc;
-            YYLLOC_DEFAULT ((yys->yyloc), yyerror_range, 2);
-            yytoken = YYTRANSLATE (yychar);
-            yydestruct ("Error: discarding",
-                        yytoken, &yylval, &yylloc, scanner, data);
-          }
-        YYDPRINTF ((stderr, "Reading a token: "));
-        yychar = yylex (&yylval, &yylloc, scanner, data);
-        if (yychar <= YYEOF)
-          {
-            yychar = yytoken = YYEOF;
-            YYDPRINTF ((stderr, "Now at end of input.\n"));
-          }
-        else
-          {
-            yytoken = YYTRANSLATE (yychar);
-            YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
-          }
-        yyj = yypact[yystackp->yytops.yystates[0]->yylrState];
-        if (yypact_value_is_default (yyj))
-          return;
-        yyj += yytoken;
-        if (yyj < 0 || YYLAST < yyj || yycheck[yyj] != yytoken)
-          {
-            if (yydefact[yystackp->yytops.yystates[0]->yylrState] != 0)
-              return;
-          }
-        else if (! yytable_value_is_error (yytable[yyj]))
-          return;
-      }
-
-  /* Reduce to one stack.  */
-  for (yyk = 0; yyk < yystackp->yytops.yysize; yyk += 1)
-    if (yystackp->yytops.yystates[yyk] != YY_NULLPTR)
-      break;
-  if (yyk >= yystackp->yytops.yysize)
-    yyFail (yystackp, &yylloc, scanner, data, YY_NULLPTR);
-  for (yyk += 1; yyk < yystackp->yytops.yysize; yyk += 1)
-    yymarkStackDeleted (yystackp, yyk);
-  yyremoveDeletes (yystackp);
-  yycompressStack (yystackp);
-
-  /* Now pop stack until we find a state that shifts the error token.  */
-  yystackp->yyerrState = 3;
-  while (yystackp->yytops.yystates[0] != YY_NULLPTR)
-    {
-      yyGLRState *yys = yystackp->yytops.yystates[0];
-      yyj = yypact[yys->yylrState];
-      if (! yypact_value_is_default (yyj))
-        {
-          yyj += YYTERROR;
-          if (0 <= yyj && yyj <= YYLAST && yycheck[yyj] == YYTERROR
-              && yyisShiftAction (yytable[yyj]))
-            {
-              /* Shift the error token.  */
-              /* First adjust its location.*/
-              YYLTYPE yyerrloc;
-              yystackp->yyerror_range[2].yystate.yyloc = yylloc;
-              YYLLOC_DEFAULT (yyerrloc, (yystackp->yyerror_range), 2);
-              YY_SYMBOL_PRINT ("Shifting", yystos[yytable[yyj]],
-                               &yylval, &yyerrloc);
-              yyglrShift (yystackp, 0, yytable[yyj],
-                          yys->yyposn, &yylval, &yyerrloc);
-              yys = yystackp->yytops.yystates[0];
-              break;
-            }
-        }
-      yystackp->yyerror_range[1].yystate.yyloc = yys->yyloc;
-      if (yys->yypred != YY_NULLPTR)
-        yydestroyGLRState ("Error: popping", yys, scanner, data);
-      yystackp->yytops.yystates[0] = yys->yypred;
-      yystackp->yynextFree -= 1;
-      yystackp->yyspaceLeft += 1;
-    }
-  if (yystackp->yytops.yystates[0] == YY_NULLPTR)
-    yyFail (yystackp, &yylloc, scanner, data, YY_NULLPTR);
-}
-
-#define YYCHK1(YYE)                                                          \
-  do {                                                                       \
-    switch (YYE) {                                                           \
-    case yyok:                                                               \
-      break;                                                                 \
-    case yyabort:                                                            \
-      goto yyabortlab;                                                       \
-    case yyaccept:                                                           \
-      goto yyacceptlab;                                                      \
-    case yyerr:                                                              \
-      goto yyuser_error;                                                     \
-    default:                                                                 \
-      goto yybuglab;                                                         \
-    }                                                                        \
-  } while (0)
-
-/*----------.
-| yyparse.  |
-`----------*/
-
-int
-yyparse (void * scanner, nix::ParseData * data)
-{
-  int yyresult;
-  yyGLRStack yystack;
-  yyGLRStack* const yystackp = &yystack;
-  size_t yyposn;
-
-  YYDPRINTF ((stderr, "Starting parse\n"));
-
-  yychar = YYEMPTY;
-  yylval = yyval_default;
-  yylloc = yyloc_default;
-
-  if (! yyinitGLRStack (yystackp, YYINITDEPTH))
-    goto yyexhaustedlab;
-  switch (YYSETJMP (yystack.yyexception_buffer))
-    {
-    case 0: break;
-    case 1: goto yyabortlab;
-    case 2: goto yyexhaustedlab;
-    default: goto yybuglab;
-    }
-  yyglrShift (&yystack, 0, 0, 0, &yylval, &yylloc);
-  yyposn = 0;
-
-  while (yytrue)
-    {
-      /* For efficiency, we have two loops, the first of which is
-         specialized to deterministic operation (single stack, no
-         potential ambiguity).  */
-      /* Standard mode */
-      while (yytrue)
-        {
-          yyRuleNum yyrule;
-          int yyaction;
-          const short int* yyconflicts;
-
-          yyStateNum yystate = yystack.yytops.yystates[0]->yylrState;
-          YYDPRINTF ((stderr, "Entering state %d\n", yystate));
-          if (yystate == YYFINAL)
-            goto yyacceptlab;
-          if (yyisDefaultedState (yystate))
-            {
-              yyrule = yydefaultAction (yystate);
-              if (yyrule == 0)
-                {
-               yystack.yyerror_range[1].yystate.yyloc = yylloc;
-                  yyreportSyntaxError (&yystack, scanner, data);
-                  goto yyuser_error;
-                }
-              YYCHK1 (yyglrReduce (&yystack, 0, yyrule, yytrue, scanner, data));
-            }
-          else
-            {
-              yySymbol yytoken;
-              if (yychar == YYEMPTY)
-                {
-                  YYDPRINTF ((stderr, "Reading a token: "));
-                  yychar = yylex (&yylval, &yylloc, scanner, data);
-                }
-
-              if (yychar <= YYEOF)
-                {
-                  yychar = yytoken = YYEOF;
-                  YYDPRINTF ((stderr, "Now at end of input.\n"));
-                }
-              else
-                {
-                  yytoken = YYTRANSLATE (yychar);
-                  YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
-                }
-
-              yygetLRActions (yystate, yytoken, &yyaction, &yyconflicts);
-              if (*yyconflicts != 0)
-                break;
-              if (yyisShiftAction (yyaction))
-                {
-                  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
-                  yychar = YYEMPTY;
-                  yyposn += 1;
-                  yyglrShift (&yystack, 0, yyaction, yyposn, &yylval, &yylloc);
-                  if (0 < yystack.yyerrState)
-                    yystack.yyerrState -= 1;
-                }
-              else if (yyisErrorAction (yyaction))
-                {
-               yystack.yyerror_range[1].yystate.yyloc = yylloc;
-                  yyreportSyntaxError (&yystack, scanner, data);
-                  goto yyuser_error;
-                }
-              else
-                YYCHK1 (yyglrReduce (&yystack, 0, -yyaction, yytrue, scanner, data));
-            }
-        }
-
-      while (yytrue)
-        {
-          yySymbol yytoken_to_shift;
-          size_t yys;
-
-          for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
-            yystackp->yytops.yylookaheadNeeds[yys] = yychar != YYEMPTY;
-
-          /* yyprocessOneStack returns one of three things:
-
-              - An error flag.  If the caller is yyprocessOneStack, it
-                immediately returns as well.  When the caller is finally
-                yyparse, it jumps to an error label via YYCHK1.
-
-              - yyok, but yyprocessOneStack has invoked yymarkStackDeleted
-                (&yystack, yys), which sets the top state of yys to NULL.  Thus,
-                yyparse's following invocation of yyremoveDeletes will remove
-                the stack.
-
-              - yyok, when ready to shift a token.
-
-             Except in the first case, yyparse will invoke yyremoveDeletes and
-             then shift the next token onto all remaining stacks.  This
-             synchronization of the shift (that is, after all preceding
-             reductions on all stacks) helps prevent double destructor calls
-             on yylval in the event of memory exhaustion.  */
-
-          for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
-            YYCHK1 (yyprocessOneStack (&yystack, yys, yyposn, &yylloc, scanner, data));
-          yyremoveDeletes (&yystack);
-          if (yystack.yytops.yysize == 0)
-            {
-              yyundeleteLastStack (&yystack);
-              if (yystack.yytops.yysize == 0)
-                yyFail (&yystack, &yylloc, scanner, data, YY_("syntax error"));
-              YYCHK1 (yyresolveStack (&yystack, scanner, data));
-              YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
-           yystack.yyerror_range[1].yystate.yyloc = yylloc;
-              yyreportSyntaxError (&yystack, scanner, data);
-              goto yyuser_error;
-            }
-
-          /* If any yyglrShift call fails, it will fail after shifting.  Thus,
-             a copy of yylval will already be on stack 0 in the event of a
-             failure in the following loop.  Thus, yychar is set to YYEMPTY
-             before the loop to make sure the user destructor for yylval isn't
-             called twice.  */
-          yytoken_to_shift = YYTRANSLATE (yychar);
-          yychar = YYEMPTY;
-          yyposn += 1;
-          for (yys = 0; yys < yystack.yytops.yysize; yys += 1)
-            {
-              int yyaction;
-              const short int* yyconflicts;
-              yyStateNum yystate = yystack.yytops.yystates[yys]->yylrState;
-              yygetLRActions (yystate, yytoken_to_shift, &yyaction,
-                              &yyconflicts);
-              /* Note that yyconflicts were handled by yyprocessOneStack.  */
-              YYDPRINTF ((stderr, "On stack %lu, ", (unsigned long int) yys));
-              YY_SYMBOL_PRINT ("shifting", yytoken_to_shift, &yylval, &yylloc);
-              yyglrShift (&yystack, yys, yyaction, yyposn,
-                          &yylval, &yylloc);
-              YYDPRINTF ((stderr, "Stack %lu now in state #%d\n",
-                          (unsigned long int) yys,
-                          yystack.yytops.yystates[yys]->yylrState));
-            }
-
-          if (yystack.yytops.yysize == 1)
-            {
-              YYCHK1 (yyresolveStack (&yystack, scanner, data));
-              YYDPRINTF ((stderr, "Returning to deterministic operation.\n"));
-              yycompressStack (&yystack);
-              break;
-            }
-        }
-      continue;
-    yyuser_error:
-      yyrecoverSyntaxError (&yystack, scanner, data);
-      yyposn = yystack.yytops.yystates[0]->yyposn;
-    }
-
- yyacceptlab:
-  yyresult = 0;
-  goto yyreturn;
-
- yybuglab:
-  YYASSERT (yyfalse);
-  goto yyabortlab;
-
- yyabortlab:
-  yyresult = 1;
-  goto yyreturn;
-
- yyexhaustedlab:
-  yyerror (&yylloc, scanner, data, YY_("memory exhausted"));
-  yyresult = 2;
-  goto yyreturn;
-
- yyreturn:
-  if (yychar != YYEMPTY)
-    yydestruct ("Cleanup: discarding lookahead",
-                YYTRANSLATE (yychar), &yylval, &yylloc, scanner, data);
-
-  /* If the stack is well-formed, pop the stack until it is empty,
-     destroying its entries as we go.  But free the stack regardless
-     of whether it is well-formed.  */
-  if (yystack.yyitems)
-    {
-      yyGLRState** yystates = yystack.yytops.yystates;
-      if (yystates)
-        {
-          size_t yysize = yystack.yytops.yysize;
-          size_t yyk;
-          for (yyk = 0; yyk < yysize; yyk += 1)
-            if (yystates[yyk])
-              {
-                while (yystates[yyk])
-                  {
-                    yyGLRState *yys = yystates[yyk];
-                 yystack.yyerror_range[1].yystate.yyloc = yys->yyloc;
-                  if (yys->yypred != YY_NULLPTR)
-                      yydestroyGLRState ("Cleanup: popping", yys, scanner, data);
-                    yystates[yyk] = yys->yypred;
-                    yystack.yynextFree -= 1;
-                    yystack.yyspaceLeft += 1;
-                  }
-                break;
-              }
-        }
-      yyfreeGLRStack (&yystack);
-    }
-
-  return yyresult;
-}
-
-/* DEBUGGING ONLY */
-#if YYDEBUG
-static void
-yy_yypstack (yyGLRState* yys)
-{
-  if (yys->yypred)
-    {
-      yy_yypstack (yys->yypred);
-      YYFPRINTF (stderr, " -> ");
-    }
-  YYFPRINTF (stderr, "%d@%lu", yys->yylrState,
-             (unsigned long int) yys->yyposn);
-}
-
-static void
-yypstates (yyGLRState* yyst)
-{
-  if (yyst == YY_NULLPTR)
-    YYFPRINTF (stderr, "<null>");
-  else
-    yy_yypstack (yyst);
-  YYFPRINTF (stderr, "\n");
-}
-
-static void
-yypstack (yyGLRStack* yystackp, size_t yyk)
-{
-  yypstates (yystackp->yytops.yystates[yyk]);
-}
-
-#define YYINDEX(YYX)                                                         \
-    ((YYX) == YY_NULLPTR ? -1 : (yyGLRStackItem*) (YYX) - yystackp->yyitems)
-
-
-static void
-yypdumpstack (yyGLRStack* yystackp)
-{
-  yyGLRStackItem* yyp;
-  size_t yyi;
-  for (yyp = yystackp->yyitems; yyp < yystackp->yynextFree; yyp += 1)
-    {
-      YYFPRINTF (stderr, "%3lu. ",
-                 (unsigned long int) (yyp - yystackp->yyitems));
-      if (*(yybool *) yyp)
-        {
-          YYASSERT (yyp->yystate.yyisState);
-          YYASSERT (yyp->yyoption.yyisState);
-          YYFPRINTF (stderr, "Res: %d, LR State: %d, posn: %lu, pred: %ld",
-                     yyp->yystate.yyresolved, yyp->yystate.yylrState,
-                     (unsigned long int) yyp->yystate.yyposn,
-                     (long int) YYINDEX (yyp->yystate.yypred));
-          if (! yyp->yystate.yyresolved)
-            YYFPRINTF (stderr, ", firstVal: %ld",
-                       (long int) YYINDEX (yyp->yystate
-                                             .yysemantics.yyfirstVal));
-        }
-      else
-        {
-          YYASSERT (!yyp->yystate.yyisState);
-          YYASSERT (!yyp->yyoption.yyisState);
-          YYFPRINTF (stderr, "Option. rule: %d, state: %ld, next: %ld",
-                     yyp->yyoption.yyrule - 1,
-                     (long int) YYINDEX (yyp->yyoption.yystate),
-                     (long int) YYINDEX (yyp->yyoption.yynext));
-        }
-      YYFPRINTF (stderr, "\n");
-    }
-  YYFPRINTF (stderr, "Tops:");
-  for (yyi = 0; yyi < yystackp->yytops.yysize; yyi += 1)
-    YYFPRINTF (stderr, "%lu: %ld; ", (unsigned long int) yyi,
-               (long int) YYINDEX (yystackp->yytops.yystates[yyi]));
-  YYFPRINTF (stderr, "\n");
-}
-#endif
-
-#undef yylval
-#undef yychar
-#undef yynerrs
-#undef yylloc
-
-
-
-#line 510 "src/libexpr/parser.y" /* glr.c:2584  */
-
-
-
-#include <sys/types.h>
-#include <sys/stat.h>
-#include <fcntl.h>
-#include <unistd.h>
-
-#include <eval.hh>
-#include <download.hh>
-#include <store-api.hh>
-
-
-namespace nix {
-
-
-Expr * EvalState::parse(const char * text,
-    const Path & path, const Path & basePath, StaticEnv & staticEnv)
-{
-    yyscan_t scanner;
-    ParseData data(*this);
-    data.basePath = basePath;
-    data.path = data.symbols.create(path);
-
-    yylex_init(&scanner);
-    yy_scan_string(text, scanner);
-    int res = yyparse(scanner, &data);
-    yylex_destroy(scanner);
-
-    if (res) throw ParseError(data.error);
-
-    data.result->bindVars(staticEnv);
-
-    return data.result;
-}
-
-
-Path resolveExprPath(Path path)
-{
-    assert(path[0] == '/');
-
-    /* If `path' is a symlink, follow it.  This is so that relative
-       path references work. */
-    struct stat st;
-    while (true) {
-        if (lstat(path.c_str(), &st))
-            throw SysError(format("getting status of ‘%1%’") % path);
-        if (!S_ISLNK(st.st_mode)) break;
-        path = absPath(readLink(path), dirOf(path));
-    }
-
-    /* If `path' refers to a directory, append `/default.nix'. */
-    if (S_ISDIR(st.st_mode))
-        path = canonPath(path + "/default.nix");
-
-    return path;
-}
-
-
-Expr * EvalState::parseExprFromFile(const Path & path)
-{
-    return parseExprFromFile(path, staticBaseEnv);
-}
-
-
-Expr * EvalState::parseExprFromFile(const Path & path, StaticEnv & staticEnv)
-{
-    return parse(readFile(path).c_str(), path, dirOf(path), staticEnv);
-}
-
-
-Expr * EvalState::parseExprFromString(const string & s, const Path & basePath, StaticEnv & staticEnv)
-{
-    return parse(s.c_str(), "(string)", basePath, staticEnv);
-}
-
-
-Expr * EvalState::parseExprFromString(const string & s, const Path & basePath)
-{
-    return parseExprFromString(s, basePath, staticBaseEnv);
-}
-
-
-void EvalState::addToSearchPath(const string & s)
-{
-    size_t pos = s.find('=');
-    string prefix;
-    Path path;
-    if (pos == string::npos) {
-        path = s;
-    } else {
-        prefix = string(s, 0, pos);
-        path = string(s, pos + 1);
-    }
-
-    searchPath.emplace_back(prefix, path);
-}
-
-
-Path EvalState::findFile(const string & path)
-{
-    return findFile(searchPath, path);
-}
-
-
-Path EvalState::findFile(SearchPath & searchPath, const string & path, const Pos & pos)
-{
-    for (auto & i : searchPath) {
-        std::string suffix;
-        if (i.first.empty())
-            suffix = "/" + path;
-        else {
-            auto s = i.first.size();
-            if (path.compare(0, s, i.first) != 0 ||
-                (path.size() > s && path[s] != '/'))
-                continue;
-            suffix = path.size() == s ? "" : "/" + string(path, s);
-        }
-        auto r = resolveSearchPathElem(i);
-        if (!r.first) continue;
-        Path res = r.second + suffix;
-        if (pathExists(res)) return canonPath(res);
-    }
-    format f = format(
-        "file ‘%1%’ was not found in the Nix search path (add it using $NIX_PATH or -I)"
-        + string(pos ? ", at %2%" : ""));
-    f.exceptions(boost::io::all_error_bits ^ boost::io::too_many_args_bit);
-    throw ThrownError(f % path % pos);
-}
-
-
-std::pair<bool, std::string> EvalState::resolveSearchPathElem(const SearchPathElem & elem)
-{
-    auto i = searchPathResolved.find(elem.second);
-    if (i != searchPathResolved.end()) return i->second;
-
-    std::pair<bool, std::string> res;
-
-    if (isUri(elem.second)) {
-        try {
-            res = { true, downloadFileCached(elem.second, true) };
-        } catch (DownloadError & e) {
-            printMsg(lvlError, format("warning: Nix search path entry ‘%1%’ cannot be downloaded, ignoring") % elem.second);
-            res = { false, "" };
-        }
-    } else {
-        auto path = absPath(elem.second);
-        if (pathExists(path))
-            res = { true, path };
-        else {
-            printMsg(lvlError, format("warning: Nix search path entry ‘%1%’ does not exist, ignoring") % elem.second);
-            res = { false, "" };
-        }
-    }
-
-    debug(format("resolved search path element ‘%s’ to ‘%s’") % elem.second % res.second);
-
-    searchPathResolved[elem.second] = res;
-    return res;
-}
-
-
-}
--- nix-1.11.15.orig/src/libexpr/parser-tab.hh
+++ /dev/null
@@ -1,170 +0,0 @@
-/* A Bison parser, made by GNU Bison 3.0.4.  */
-
-/* Skeleton interface for Bison GLR parsers in C
-
-   Copyright (C) 2002-2015 Free Software Foundation, Inc.
-
-   This program is free software: you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation, either version 3 of the License, or
-   (at your option) any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
-
-/* As a special exception, you may create a larger work that contains
-   part or all of the Bison parser skeleton and distribute that work
-   under terms of your choice, so long as that work isn't itself a
-   parser generator using the skeleton or a modified version thereof
-   as a parser skeleton.  Alternatively, if you modify or redistribute
-   the parser skeleton itself, you may (at your option) remove this
-   special exception, which will cause the skeleton and the resulting
-   Bison output files to be licensed under the GNU General Public
-   License without this special exception.
-
-   This special exception was added by the Free Software Foundation in
-   version 2.2 of Bison.  */
-
-#ifndef YY_YY_SRC_LIBEXPR_PARSER_TAB_HH_INCLUDED
-# define YY_YY_SRC_LIBEXPR_PARSER_TAB_HH_INCLUDED
-/* Debug traces.  */
-#ifndef YYDEBUG
-# define YYDEBUG 0
-#endif
-#if YYDEBUG
-extern int yydebug;
-#endif
-/* "%code requires" blocks.  */
-#line 14 "src/libexpr/parser.y" /* glr.c:197  */
-
-
-#ifndef BISON_HEADER
-#define BISON_HEADER
-
-#include "util.hh"
-
-#include "nixexpr.hh"
-#include "eval.hh"
-
-namespace nix {
-
-    struct ParseData
-    {
-        EvalState & state;
-        SymbolTable & symbols;
-        Expr * result;
-        Path basePath;
-        Symbol path;
-        string error;
-        Symbol sLetBody;
-        ParseData(EvalState & state)
-            : state(state)
-            , symbols(state.symbols)
-            , sLetBody(symbols.create("<let-body>"))
-            { };
-    };
-
-}
-
-#define YY_DECL int yylex \
-    (YYSTYPE * yylval_param, YYLTYPE * yylloc_param, yyscan_t yyscanner, nix::ParseData * data)
-
-#endif
-
-
-#line 81 "src/libexpr/parser-tab.hh" /* glr.c:197  */
-
-/* Token type.  */
-#ifndef YYTOKENTYPE
-# define YYTOKENTYPE
-  enum yytokentype
-  {
-    ID = 258,
-    ATTRPATH = 259,
-    STR = 260,
-    IND_STR = 261,
-    INT = 262,
-    PATH = 263,
-    HPATH = 264,
-    SPATH = 265,
-    URI = 266,
-    IF = 267,
-    THEN = 268,
-    ELSE = 269,
-    ASSERT = 270,
-    WITH = 271,
-    LET = 272,
-    IN = 273,
-    REC = 274,
-    INHERIT = 275,
-    EQ = 276,
-    NEQ = 277,
-    AND = 278,
-    OR = 279,
-    IMPL = 280,
-    OR_KW = 281,
-    DOLLAR_CURLY = 282,
-    IND_STRING_OPEN = 283,
-    IND_STRING_CLOSE = 284,
-    ELLIPSIS = 285,
-    LEQ = 286,
-    GEQ = 287,
-    UPDATE = 288,
-    NOT = 289,
-    CONCAT = 290,
-    NEGATE = 291
-  };
-#endif
-
-/* Value type.  */
-#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
-
-union YYSTYPE
-{
-#line 239 "src/libexpr/parser.y" /* glr.c:197  */
-
-  // !!! We're probably leaking stuff here.
-  nix::Expr * e;
-  nix::ExprList * list;
-  nix::ExprAttrs * attrs;
-  nix::Formals * formals;
-  nix::Formal * formal;
-  nix::NixInt n;
-  const char * id; // !!! -> Symbol
-  char * path;
-  char * uri;
-  std::vector<nix::AttrName> * attrNames;
-  std::vector<nix::Expr *> * string_parts;
-
-#line 145 "src/libexpr/parser-tab.hh" /* glr.c:197  */
-};
-
-typedef union YYSTYPE YYSTYPE;
-# define YYSTYPE_IS_TRIVIAL 1
-# define YYSTYPE_IS_DECLARED 1
-#endif
-
-/* Location type.  */
-#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
-typedef struct YYLTYPE YYLTYPE;
-struct YYLTYPE
-{
-  int first_line;
-  int first_column;
-  int last_line;
-  int last_column;
-};
-# define YYLTYPE_IS_DECLARED 1
-# define YYLTYPE_IS_TRIVIAL 1
-#endif
-
-
-
-int yyparse (void * scanner, nix::ParseData * data);
-
-#endif /* !YY_YY_SRC_LIBEXPR_PARSER_TAB_HH_INCLUDED  */
